//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/go@4.0.0-preview.45)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package gh

import (
	"io"
	"time"
)

// APIOverview - Api Overview
type APIOverview struct {
	// REQUIRED
	VerifiablePasswordAuthentication *bool `json:"verifiable_password_authentication,omitempty"`
	API []*string `json:"api,omitempty"`
	Actions []*string `json:"actions,omitempty"`
	Dependabot []*string `json:"dependabot,omitempty"`
	Git []*string `json:"git,omitempty"`
	Hooks []*string `json:"hooks,omitempty"`
	Importer []*string `json:"importer,omitempty"`
	Packages []*string `json:"packages,omitempty"`
	Pages []*string `json:"pages,omitempty"`
	SSHKeyFingerprints *APIOverviewSSHKeyFingerprints `json:"ssh_key_fingerprints,omitempty"`
	SSHKeys []*string `json:"ssh_keys,omitempty"`
	Web []*string `json:"web,omitempty"`
}

type APIOverviewSSHKeyFingerprints struct {
	SHA256DSA *string `json:"SHA256_DSA,omitempty"`
	SHA256ECDSA *string `json:"SHA256_ECDSA,omitempty"`
	SHA256ED25519 *string `json:"SHA256_ED25519,omitempty"`
	SHA256RSA *string `json:"SHA256_RSA,omitempty"`
}

type ActionsBillingUsage struct {
	// REQUIRED; The amount of free GitHub Actions minutes available.
	IncludedMinutes *int32 `json:"included_minutes,omitempty"`

	// REQUIRED
	MinutesUsedBreakdown *ActionsBillingUsageMinutesUsedBreakdown `json:"minutes_used_breakdown,omitempty"`

	// REQUIRED; The sum of the free and paid GitHub Actions minutes used.
	TotalMinutesUsed *int32 `json:"total_minutes_used,omitempty"`

	// REQUIRED; The total paid GitHub Actions minutes used.
	TotalPaidMinutesUsed *int32 `json:"total_paid_minutes_used,omitempty"`
}

type ActionsBillingUsageMinutesUsedBreakdown struct {
	// Total minutes used on macOS runner machines.
	MACOS *int32 `json:"MACOS,omitempty"`

	// Total minutes used on macOS 12 core runner machines.
	Macos12Core *int32 `json:"macos_12_core,omitempty"`

	// Total minutes used on all runner machines.
	Total *int32 `json:"total,omitempty"`

	// Total minutes used on Ubuntu runner machines.
	UBUNTU *int32 `json:"UBUNTU,omitempty"`

	// Total minutes used on Ubuntu 16 core runner machines.
	Ubuntu16Core *int32 `json:"ubuntu_16_core,omitempty"`

	// Total minutes used on Ubuntu 32 core runner machines.
	Ubuntu32Core *int32 `json:"ubuntu_32_core,omitempty"`

	// Total minutes used on Ubuntu 4 core runner machines.
	Ubuntu4Core *int32 `json:"ubuntu_4_core,omitempty"`

	// Total minutes used on Ubuntu 64 core runner machines.
	Ubuntu64Core *int32 `json:"ubuntu_64_core,omitempty"`

	// Total minutes used on Ubuntu 8 core runner machines.
	Ubuntu8Core *int32 `json:"ubuntu_8_core,omitempty"`

	// Total minutes used on Windows runner machines.
	WINDOWS *int32 `json:"WINDOWS,omitempty"`

	// Total minutes used on Windows 16 core runner machines.
	Windows16Core *int32 `json:"windows_16_core,omitempty"`

	// Total minutes used on Windows 32 core runner machines.
	Windows32Core *int32 `json:"windows_32_core,omitempty"`

	// Total minutes used on Windows 4 core runner machines.
	Windows4Core *int32 `json:"windows_4_core,omitempty"`

	// Total minutes used on Windows 64 core runner machines.
	Windows64Core *int32 `json:"windows_64_core,omitempty"`

	// Total minutes used on Windows 8 core runner machines.
	Windows8Core *int32 `json:"windows_8_core,omitempty"`
}

// ActionsCacheList - Repository actions caches
type ActionsCacheList struct {
	// REQUIRED; Array of caches
	ActionsCaches []*ActionsCacheListActionsCachesItem `json:"actions_caches,omitempty"`

	// REQUIRED; Total number of caches
	TotalCount *int32 `json:"total_count,omitempty"`
}

type ActionsCacheListActionsCachesItem struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Key *string `json:"key,omitempty"`
	LastAccessedAt *time.Time `json:"last_accessed_at,omitempty"`
	Ref *string `json:"ref,omitempty"`
	SizeInBytes *int32 `json:"size_in_bytes,omitempty"`
	Version *string `json:"version,omitempty"`
}

// ActionsCacheUsageByRepository - GitHub Actions Cache Usage by repository.
type ActionsCacheUsageByRepository struct {
	// REQUIRED; The number of active caches in the repository.
	ActiveCachesCount *int32 `json:"active_caches_count,omitempty"`

	// REQUIRED; The sum of the size in bytes of all the active cache items in the repository.
	ActiveCachesSizeInBytes *int32 `json:"active_caches_size_in_bytes,omitempty"`

	// REQUIRED; The repository owner and name for the cache usage being shown.
	FullName *string `json:"full_name,omitempty"`
}

type ActionsCacheUsageOrgEnterprise struct {
	// REQUIRED; The count of active caches across all repositories of an enterprise or an organization.
	TotalActiveCachesCount *int32 `json:"total_active_caches_count,omitempty"`

	// REQUIRED; The total size in bytes of all active cache items across all repositories of an enterprise or an organization.
	TotalActiveCachesSizeInBytes *int32 `json:"total_active_caches_size_in_bytes,omitempty"`
}

type ActionsGetDefaultWorkflowPermissions struct {
	// REQUIRED; Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.
	CanApprovePullRequestReviews *bool `json:"can_approve_pull_request_reviews,omitempty"`

	// REQUIRED; The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
	DefaultWorkflowPermissions *ActionsDefaultWorkflowPermissions `json:"default_workflow_permissions,omitempty"`
}

// ActionsOIDCSubjectCustomizationForARepository - Actions OIDC subject customization for a repository
type ActionsOIDCSubjectCustomizationForARepository struct {
	// REQUIRED; Whether to use the default template or not. If true, the include_claim_keys field is ignored.
	UseDefault *bool `json:"use_default,omitempty"`

	// Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
	IncludeClaimKeys []*string `json:"include_claim_keys,omitempty"`
}

type ActionsOrganizationPermissions struct {
	// REQUIRED; The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
	EnabledRepositories *EnabledRepositories `json:"enabled_repositories,omitempty"`

	// The permissions policy that controls the actions and reusable workflows that are allowed to run.
	AllowedActions *AllowedActions `json:"allowed_actions,omitempty"`

	// The API URL to use to get or set the actions and reusable workflows that are allowed to run, when allowed_actions is set
// to selected.
	SelectedActionsURL *string `json:"selected_actions_url,omitempty"`

	// The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when enabled_repositories
// is set to selected.
	SelectedRepositoriesURL *string `json:"selected_repositories_url,omitempty"`
}

// ActionsPublicKey - The public key used for setting Actions Secrets.
type ActionsPublicKey struct {
	// REQUIRED; The Base64 encoded public key.
	Key *string `json:"key,omitempty"`

	// REQUIRED; The identifier for the key.
	KeyID *string `json:"key_id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
}

type ActionsRepositoryPermissions struct {
	// REQUIRED; Whether GitHub Actions is enabled on the repository.
	Enabled *bool `json:"enabled,omitempty"`

	// The permissions policy that controls the actions and reusable workflows that are allowed to run.
	AllowedActions *AllowedActions `json:"allowed_actions,omitempty"`

	// The API URL to use to get or set the actions and reusable workflows that are allowed to run, when allowed_actions is set
// to selected.
	SelectedActionsURL *string `json:"selected_actions_url,omitempty"`
}

// ActionsSecret - Set secrets for GitHub Actions.
type ActionsSecret struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The name of the secret.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

type ActionsSetDefaultWorkflowPermissions struct {
	// Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.
	CanApprovePullRequestReviews *bool `json:"can_approve_pull_request_reviews,omitempty"`

	// The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
	DefaultWorkflowPermissions *ActionsDefaultWorkflowPermissions `json:"default_workflow_permissions,omitempty"`
}

// ActionsVariable - Actions Variable
type ActionsVariable struct {
	// REQUIRED; The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The name of the variable.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; The value of the variable.
	Value *string `json:"value,omitempty"`
}

type ActionsWorkflowAccessToRepository struct {
	// REQUIRED; Defines the level of access that workflows outside of the repository have to actions and reusable workflows within
// the repository.
// none means the access is only possible from workflows in this repository. user level access allows sharing across user
// owned private repos only. organization level access allows sharing across the
// organization.
	AccessLevel *ActionsWorkflowAccessToRepositoryAccessLevel `json:"access_level,omitempty"`
}

// Actor
type Actor struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	DisplayLogin *string `json:"display_login,omitempty"`
}

// AddedToProjectIssueEvent - Added to Project Issue Event
type AddedToProjectIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	ProjectCard *AddedToProjectIssueEventProjectCard `json:"project_card,omitempty"`
}

type AddedToProjectIssueEventProjectCard struct {
	// REQUIRED
	ColumnName *string `json:"column_name,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	ProjectID *int32 `json:"project_id,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	PreviousColumnName *string `json:"previous_column_name,omitempty"`
}

// AppPermissions - The permissions granted to the user-to-server access token.
type AppPermissions struct {
	// The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
	Actions *AppPermissionsActions `json:"actions,omitempty"`

	// The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators
// creation.
	Administration *AppPermissionsAdministration `json:"administration,omitempty"`

	// The level of permission to grant the access token for checks on code.
	Checks *AppPermissionsChecks `json:"checks,omitempty"`

	// The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and
// merges.
	Contents *AppPermissionsContents `json:"contents,omitempty"`

	// The level of permission to grant the access token for deployments and deployment statuses.
	Deployments *AppPermissionsDeployments `json:"deployments,omitempty"`

	// The level of permission to grant the access token for managing repository environments.
	Environments *AppPermissionsEnvironments `json:"environments,omitempty"`

	// The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
	Issues *AppPermissionsIssues `json:"issues,omitempty"`

	// The level of permission to grant the access token for organization teams and members.
	Members *AppPermissionsMembers `json:"members,omitempty"`

	// The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
	Metadata *AppPermissionsMetadata `json:"metadata,omitempty"`

	// The level of permission to grant the access token to manage access to an organization.
	OrganizationAdministration *AppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`

	// The level of permission to grant the access token to view and manage announcement banners for an organization.
	OrganizationAnnouncementBanners *AppPermissionsOrganizationAnnouncementBanners `json:"organization_announcement_banners,omitempty"`

	// The level of permission to grant the access token for custom repository roles management. This property is in beta and
// is subject to change.
	OrganizationCustomRoles *AppPermissionsOrganizationCustomRoles `json:"organization_custom_roles,omitempty"`

	// The level of permission to grant the access token to manage the post-receive hooks for an organization.
	OrganizationHooks *AppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`

	// The level of permission to grant the access token for organization packages published to GitHub Packages.
	OrganizationPackages *AppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`

	// The level of permission to grant the access token for viewing an organization's plan.
	OrganizationPlan *AppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`

	// The level of permission to grant the access token to manage organization projects and projects beta (where available).
	OrganizationProjects *AppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`

	// The level of permission to grant the access token to manage organization secrets.
	OrganizationSecrets *AppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`

	// The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an
// organization.
	OrganizationSelfHostedRunners *AppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`

	// The level of permission to grant the access token to view and manage users blocked by the organization.
	OrganizationUserBlocking *AppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`

	// The level of permission to grant the access token for packages published to GitHub Packages.
	Packages *AppPermissionsPackages `json:"packages,omitempty"`

	// The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create
// new builds.
	Pages *AppPermissionsPages `json:"pages,omitempty"`

	// The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones,
// and merges.
	PullRequests *AppPermissionsPullRequests `json:"pull_requests,omitempty"`

	// The level of permission to grant the access token to view and manage announcement banners for a repository.
	RepositoryAnnouncementBanners *AppPermissionsRepositoryAnnouncementBanners `json:"repository_announcement_banners,omitempty"`

	// The level of permission to grant the access token to manage the post-receive hooks for a repository.
	RepositoryHooks *AppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`

	// The level of permission to grant the access token to manage repository projects, columns, and cards.
	RepositoryProjects *AppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`

	// The level of permission to grant the access token to view and manage secret scanning alerts.
	SecretScanningAlerts *AppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`

	// The level of permission to grant the access token to manage repository secrets.
	Secrets *AppPermissionsSecrets `json:"secrets,omitempty"`

	// The level of permission to grant the access token to view and manage security events like code scanning alerts.
	SecurityEvents *AppPermissionsSecurityEvents `json:"security_events,omitempty"`

	// The level of permission to grant the access token to manage just a single file.
	SingleFile *AppPermissionsSingleFile `json:"single_file,omitempty"`

	// The level of permission to grant the access token for commit statuses.
	Statuses *AppPermissionsStatuses `json:"statuses,omitempty"`

	// The level of permission to grant the access token to manage team discussions and related comments.
	TeamDiscussions *AppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`

	// The level of permission to grant the access token to manage Dependabot alerts.
	VulnerabilityAlerts *AppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`

	// The level of permission to grant the access token to update GitHub Actions workflow files.
	Workflows *AppPermissionsWorkflows `json:"workflows,omitempty"`
}

// Artifact - An artifact
type Artifact struct {
	// REQUIRED
	ArchiveDownloadURL *string `json:"archive_download_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; Whether or not the artifact has expired.
	Expired *bool `json:"expired,omitempty"`

	// REQUIRED
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the artifact.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The size in bytes of the artifact.
	SizeInBytes *int32 `json:"size_in_bytes,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	WorkflowRun *ArtifactWorkflowRun `json:"workflow_run,omitempty"`
}

type ArtifactWorkflowRun struct {
	HeadBranch *string `json:"head_branch,omitempty"`
	HeadRepositoryID *int32 `json:"head_repository_id,omitempty"`
	HeadSHA *string `json:"head_sha,omitempty"`
	ID *int32 `json:"id,omitempty"`
	RepositoryID *int32 `json:"repository_id,omitempty"`
}

// AssignedIssueEvent - Assigned Issue Event
type AssignedIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED; A GitHub user.
	Assignee *SimpleUser `json:"assignee,omitempty"`

	// REQUIRED; A GitHub user.
	Assigner *SimpleUser `json:"assigner,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *Integration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// AuthenticationToken - Authentication Token
type AuthenticationToken struct {
	// REQUIRED; The time this token expires
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// REQUIRED; The token used for authentication
	Token *string `json:"token,omitempty"`

	// Anything
	Permissions any `json:"permissions,omitempty"`

	// The repositories this token has access to
	Repositories []*Repository `json:"repositories,omitempty"`

	// Describe whether all repositories have been selected or there's a selection involved
	RepositorySelection *AuthenticationTokenRepositorySelection `json:"repository_selection,omitempty"`
	SingleFile *string `json:"single_file,omitempty"`
}

// Authorization - The authorization for an OAuth app, GitHub App, or a Personal Access Token.
type Authorization struct {
	// REQUIRED
	App *AuthorizationApp `json:"app,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// REQUIRED
	Fingerprint *string `json:"fingerprint,omitempty"`

	// REQUIRED
	HashedToken *string `json:"hashed_token,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Note *string `json:"note,omitempty"`

	// REQUIRED
	NoteURL *string `json:"note_url,omitempty"`

	// REQUIRED; A list of scopes that this authorization is in.
	Scopes []*string `json:"scopes,omitempty"`

	// REQUIRED
	Token *string `json:"token,omitempty"`

	// REQUIRED
	TokenLastEight *string `json:"token_last_eight,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Scoped Installation
	Installation *NullableScopedInstallation `json:"installation,omitempty"`

	// A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
}

type AuthorizationApp struct {
	// REQUIRED
	ClientID *string `json:"client_id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// AutoMerge - The status of auto merging a pull request.
type AutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; A GitHub user.
	EnabledBy *SimpleUser `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *AutoMergeMethod `json:"merge_method,omitempty"`
}

// Autolink - An autolink reference.
type Autolink struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches
// numeric characters.
	IsAlphanumeric *bool `json:"is_alphanumeric,omitempty"`

	// REQUIRED; The prefix of a key that is linkified.
	KeyPrefix *string `json:"key_prefix,omitempty"`

	// REQUIRED; A template for the target URL that is generated if a key was found.
	URLTemplate *string `json:"url_template,omitempty"`
}

// BaseGist - Base Gist
type BaseGist struct {
	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED; Dictionary of
	Files map[string]*Components1Dgkd1SchemasBaseGistPropertiesFilesAdditionalproperties `json:"files,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	GitPullURL *string `json:"git_pull_url,omitempty"`

	// REQUIRED
	GitPushURL *string `json:"git_push_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Public *bool `json:"public,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
	Forks []any `json:"forks,omitempty"`
	History []any `json:"history,omitempty"`

	// A GitHub user.
	Owner *SimpleUser `json:"owner,omitempty"`
	Truncated *bool `json:"truncated,omitempty"`
}

// BasicError - Basic Error
type BasicError struct {
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message *string `json:"message,omitempty"`
	Status *string `json:"status,omitempty"`
	URL *string `json:"url,omitempty"`
}

// Blob
type Blob struct {
	// REQUIRED
	Content *string `json:"content,omitempty"`

	// REQUIRED
	Encoding *string `json:"encoding,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	HighlightedContent *string `json:"highlighted_content,omitempty"`
}

// BranchProtection - Branch Protection
type BranchProtection struct {
	AllowDeletions *BranchProtectionAllowDeletions `json:"allow_deletions,omitempty"`
	AllowForcePushes *BranchProtectionAllowForcePushes `json:"allow_force_pushes,omitempty"`

	// Whether users can pull changes from upstream when the branch is locked. Set to true to allow fork syncing. Set to false
// to prevent fork syncing.
	AllowForkSyncing *BranchProtectionAllowForkSyncing `json:"allow_fork_syncing,omitempty"`
	BlockCreations *BranchProtectionBlockCreations `json:"block_creations,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`

	// Protected Branch Admin Enforced
	EnforceAdmins *ProtectedBranchAdminEnforced `json:"enforce_admins,omitempty"`

	// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
	LockBranch *BranchProtectionLockBranch `json:"lock_branch,omitempty"`
	Name *string `json:"name,omitempty"`
	ProtectionURL *string `json:"protection_url,omitempty"`
	RequiredConversationResolution *BranchProtectionRequiredConversationResolution `json:"required_conversation_resolution,omitempty"`
	RequiredLinearHistory *BranchProtectionRequiredLinearHistory `json:"required_linear_history,omitempty"`

	// Protected Branch Pull Request Review
	RequiredPullRequestReviews *ProtectedBranchPullRequestReview `json:"required_pull_request_reviews,omitempty"`
	RequiredSignatures *BranchProtectionRequiredSignatures `json:"required_signatures,omitempty"`

	// Protected Branch Required Status Check
	RequiredStatusChecks *ProtectedBranchRequiredStatusCheck `json:"required_status_checks,omitempty"`

	// Branch Restriction Policy
	Restrictions *BranchRestrictionPolicy `json:"restrictions,omitempty"`
	URL *string `json:"url,omitempty"`
}

type BranchProtectionAllowDeletions struct {
	Enabled *bool `json:"enabled,omitempty"`
}

type BranchProtectionAllowForcePushes struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// BranchProtectionAllowForkSyncing - Whether users can pull changes from upstream when the branch is locked. Set to true
// to allow fork syncing. Set to false to prevent fork syncing.
type BranchProtectionAllowForkSyncing struct {
	Enabled *bool `json:"enabled,omitempty"`
}

type BranchProtectionBlockCreations struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// BranchProtectionLockBranch - Whether to set the branch as read-only. If this is true, users will not be able to push to
// the branch.
type BranchProtectionLockBranch struct {
	Enabled *bool `json:"enabled,omitempty"`
}

type BranchProtectionRequiredConversationResolution struct {
	Enabled *bool `json:"enabled,omitempty"`
}

type BranchProtectionRequiredLinearHistory struct {
	Enabled *bool `json:"enabled,omitempty"`
}

type BranchProtectionRequiredSignatures struct {
	// REQUIRED
	Enabled *bool `json:"enabled,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// BranchRestrictionPolicy - Branch Restriction Policy
type BranchRestrictionPolicy struct {
	// REQUIRED
	Apps []*BranchRestrictionPolicyAppsItem `json:"apps,omitempty"`

	// REQUIRED
	AppsURL *string `json:"apps_url,omitempty"`

	// REQUIRED
	Teams []*BranchRestrictionPolicyTeamsItem `json:"teams,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	Users []*BranchRestrictionPolicyUsersItem `json:"users,omitempty"`

	// REQUIRED
	UsersURL *string `json:"users_url,omitempty"`
}

type BranchRestrictionPolicyAppsItem struct {
	CreatedAt *string `json:"created_at,omitempty"`
	Description *string `json:"description,omitempty"`
	Events []*string `json:"events,omitempty"`
	ExternalURL *string `json:"external_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Owner *BranchRestrictionPolicyAppsItemOwner `json:"owner,omitempty"`
	Permissions *BranchRestrictionPolicyAppsItemPermissions `json:"permissions,omitempty"`
	Slug *string `json:"slug,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type BranchRestrictionPolicyAppsItemOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	Description *string `json:"description,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	Login *string `json:"login,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	PublicMembersURL *string `json:"public_members_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type BranchRestrictionPolicyAppsItemPermissions struct {
	Contents *string `json:"contents,omitempty"`
	Issues *string `json:"issues,omitempty"`
	Metadata *string `json:"metadata,omitempty"`
	SingleFile *string `json:"single_file,omitempty"`
}

type BranchRestrictionPolicyTeamsItem struct {
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *string `json:"parent,omitempty"`
	Permission *string `json:"permission,omitempty"`
	Privacy *string `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`
	URL *string `json:"url,omitempty"`
}

type BranchRestrictionPolicyUsersItem struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// BranchShort - Branch Short
type BranchShort struct {
	// REQUIRED
	Commit *BranchShortCommit `json:"commit,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Protected *bool `json:"protected,omitempty"`
}

type BranchShortCommit struct {
	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// BranchWithProtection - Branch With Protection
type BranchWithProtection struct {
	// REQUIRED; Commit
	Commit *Commit `json:"commit,omitempty"`

	// REQUIRED
	Links *BranchWithProtectionLinks `json:"_links,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Protected *bool `json:"protected,omitempty"`

	// REQUIRED; Branch Protection
	Protection *BranchProtection `json:"protection,omitempty"`

	// REQUIRED
	ProtectionURL *string `json:"protection_url,omitempty"`
	Pattern *string `json:"pattern,omitempty"`
	RequiredApprovingReviewCount *int32 `json:"required_approving_review_count,omitempty"`
}

type BranchWithProtectionLinks struct {
	// REQUIRED
	HTML *string `json:"html,omitempty"`

	// REQUIRED
	Self *string `json:"self,omitempty"`
}

// CheckAnnotation - Check Annotation
type CheckAnnotation struct {
	// REQUIRED
	AnnotationLevel *string `json:"annotation_level,omitempty"`

	// REQUIRED
	BlobHref *string `json:"blob_href,omitempty"`

	// REQUIRED
	EndColumn *int32 `json:"end_column,omitempty"`

	// REQUIRED
	EndLine *int32 `json:"end_line,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	RawDetails *string `json:"raw_details,omitempty"`

	// REQUIRED
	StartColumn *int32 `json:"start_column,omitempty"`

	// REQUIRED
	StartLine *int32 `json:"start_line,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`
}

// CheckRun - A check performed on the code of a given code change
type CheckRun struct {
	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	App *NullableIntegration `json:"app,omitempty"`

	// REQUIRED
	CheckSuite *CheckRunCheckSuite `json:"check_suite,omitempty"`

	// REQUIRED
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// REQUIRED
	Conclusion *CheckRunConclusion `json:"conclusion,omitempty"`

	// REQUIRED
	DetailsURL *string `json:"details_url,omitempty"`

	// REQUIRED
	ExternalID *string `json:"external_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The SHA of the commit that is being checked.
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED; The id of the check.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the check.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Output *CheckRunOutput `json:"output,omitempty"`

	// REQUIRED
	PullRequests []*PullRequestMinimal `json:"pull_requests,omitempty"`

	// REQUIRED
	StartedAt *time.Time `json:"started_at,omitempty"`

	// REQUIRED; The phase of the lifecycle that the check is currently in.
	Status *CheckRunStatus `json:"status,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// A deployment created as the result of an Actions check run from a workflow that references an environment
	Deployment *DeploymentSimple `json:"deployment,omitempty"`
}

type CheckRunCheckSuite struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`
}

type CheckRunOutput struct {
	// REQUIRED
	AnnotationsCount *int32 `json:"annotations_count,omitempty"`

	// REQUIRED
	AnnotationsURL *string `json:"annotations_url,omitempty"`

	// REQUIRED
	Summary *string `json:"summary,omitempty"`

	// REQUIRED
	Text *string `json:"text,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`
}

// CheckRunWithSimpleCheckSuite - A check performed on the code of a given code change
type CheckRunWithSimpleCheckSuite struct {
	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	App *NullableIntegration `json:"app,omitempty"`

	// REQUIRED; A suite of checks performed on the code of a given code change
	CheckSuite *SimpleCheckSuite `json:"check_suite,omitempty"`

	// REQUIRED
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// REQUIRED
	Conclusion *CheckRunWithSimpleCheckSuiteConclusion `json:"conclusion,omitempty"`

	// REQUIRED
	DetailsURL *string `json:"details_url,omitempty"`

	// REQUIRED
	ExternalID *string `json:"external_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The SHA of the commit that is being checked.
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED; The id of the check.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the check.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Output *CheckRunWithSimpleCheckSuiteOutput `json:"output,omitempty"`

	// REQUIRED
	PullRequests []*PullRequestMinimal `json:"pull_requests,omitempty"`

	// REQUIRED
	StartedAt *time.Time `json:"started_at,omitempty"`

	// REQUIRED; The phase of the lifecycle that the check is currently in.
	Status *CheckRunWithSimpleCheckSuiteStatus `json:"status,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// A deployment created as the result of an Actions check run from a workflow that references an environment
	Deployment *DeploymentSimple `json:"deployment,omitempty"`
}

type CheckRunWithSimpleCheckSuiteOutput struct {
	// REQUIRED
	AnnotationsCount *int32 `json:"annotations_count,omitempty"`

	// REQUIRED
	AnnotationsURL *string `json:"annotations_url,omitempty"`

	// REQUIRED
	Summary *string `json:"summary,omitempty"`

	// REQUIRED
	Text *string `json:"text,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`
}

// CheckSuite - A suite of checks performed on the code of a given code change
type CheckSuite struct {
	// REQUIRED
	After *string `json:"after,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	App *NullableIntegration `json:"app,omitempty"`

	// REQUIRED
	Before *string `json:"before,omitempty"`

	// REQUIRED
	CheckRunsURL *string `json:"check_runs_url,omitempty"`

	// REQUIRED
	Conclusion *CheckSuiteConclusion `json:"conclusion,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HeadBranch *string `json:"head_branch,omitempty"`

	// REQUIRED; A commit.
	HeadCommit *SimpleCommit `json:"head_commit,omitempty"`

	// REQUIRED; The SHA of the head commit that is being checked.
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LatestCheckRunsCount *int32 `json:"latest_check_runs_count,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PullRequests []*PullRequestMinimal `json:"pull_requests,omitempty"`

	// REQUIRED; Minimal Repository
	Repository *MinimalRepository `json:"repository,omitempty"`

	// REQUIRED
	Status *CheckSuiteStatus `json:"status,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Rerequestable *bool `json:"rerequestable,omitempty"`
	RunsRerequestable *bool `json:"runs_rerequestable,omitempty"`
}

// CheckSuitePreference - Check suite configuration preferences for a repository.
type CheckSuitePreference struct {
	// REQUIRED
	Preferences *CheckSuitePreferencePreferences `json:"preferences,omitempty"`

	// REQUIRED; Minimal Repository
	Repository *MinimalRepository `json:"repository,omitempty"`
}

type CheckSuitePreferencePreferences struct {
	AutoTriggerChecks []*CheckSuitePreferencePreferencesAutoTriggerChecksItem `json:"auto_trigger_checks,omitempty"`
}

type CheckSuitePreferencePreferencesAutoTriggerChecksItem struct {
	// REQUIRED
	AppID *int32 `json:"app_id,omitempty"`

	// REQUIRED
	Setting *bool `json:"setting,omitempty"`
}

// CloneTraffic - Clone Traffic
type CloneTraffic struct {
	// REQUIRED
	Clones []*Traffic `json:"clones,omitempty"`

	// REQUIRED
	Count *int32 `json:"count,omitempty"`

	// REQUIRED
	Uniques *int32 `json:"uniques,omitempty"`
}

// CodeOfConduct - Code Of Conduct
type CodeOfConduct struct {
	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	Body *string `json:"body,omitempty"`
}

// CodeOfConductSimple - Code of Conduct Simple
type CodeOfConductSimple struct {
	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type CodeScanningAlert struct {
	// REQUIRED; A GitHub user.
	DismissedBy *NullableSimpleUser `json:"dismissed_by,omitempty"`

	// REQUIRED; Required when the state is dismissed. The reason for dismissing or closing the alert.
	DismissedReason *CodeScanningAlertDismissedReason `json:"dismissed_reason,omitempty"`

	// REQUIRED
	MostRecentInstance *CodeScanningAlertInstance `json:"most_recent_instance,omitempty"`

	// REQUIRED
	Rule *CodeScanningAlertRule `json:"rule,omitempty"`

	// REQUIRED; State of a code scanning alert.
	State *CodeScanningAlertState `json:"state,omitempty"`

	// REQUIRED
	Tool *CodeScanningAnalysisTool `json:"tool,omitempty"`

	// READ-ONLY; The REST API URL of the alert resource.
	URL *string `json:"url,omitempty" azure:"ro"`

	// The dismissal comment associated with the dismissal of the alert.
	DismissedComment *string `json:"dismissed_comment,omitempty"`

	// READ-ONLY; The time that the alert was created in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was dismissed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	DismissedAt *time.Time `json:"dismissed_at,omitempty" azure:"ro"`

	// READ-ONLY; The GitHub URL of the alert resource.
	HTMLURL *string `json:"html_url,omitempty" azure:"ro"`

	// READ-ONLY; The REST API URL for fetching the list of instances for an alert.
	InstancesURL *string `json:"instances_url,omitempty" azure:"ro"`

	// READ-ONLY; The security alert number.
	Number *int32 `json:"number,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was no longer detected and was considered fixed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	FixedAt *time.Time `json:"fixed_at,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was last updated in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	UpdatedAt *time.Time `json:"updated_at,omitempty" azure:"ro"`
}

type CodeScanningAlertInstance struct {
	// Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow
// filename and job name.
	AnalysisKey *string `json:"analysis_key,omitempty"`

	// Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the
// same tool and commit, but performed on different languages or different parts
// of the code.
	Category *string `json:"category,omitempty"`

	// Classifications that have been applied to the file that triggered the alert. For example identifying it as documentation,
// or a generated file.
	Classifications []*CodeScanningAlertClassification `json:"classifications,omitempty"`
	CommitSHA *string `json:"commit_sha,omitempty"`

	// Identifies the variable values associated with the environment in which the analysis that generated this alert instance
// was performed, such as the language that was analyzed.
	Environment *string `json:"environment,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`

	// Describe a region within a file for the alert.
	Location *CodeScanningAlertLocation `json:"location,omitempty"`
	Message *CodeScanningAlertInstanceMessage `json:"message,omitempty"`

	// The full Git reference, formatted as refs/heads/<branch name>,refs/pull/<number>/merge, or refs/pull/<number>/head.
	Ref *string `json:"ref,omitempty"`

	// State of a code scanning alert.
	State *CodeScanningAlertState `json:"state,omitempty"`
}

type CodeScanningAlertInstanceMessage struct {
	Text *string `json:"text,omitempty"`
}

type CodeScanningAlertItems struct {
	// REQUIRED; A GitHub user.
	DismissedBy *NullableSimpleUser `json:"dismissed_by,omitempty"`

	// REQUIRED; Required when the state is dismissed. The reason for dismissing or closing the alert.
	DismissedReason *CodeScanningAlertDismissedReason `json:"dismissed_reason,omitempty"`

	// REQUIRED
	MostRecentInstance *CodeScanningAlertInstance `json:"most_recent_instance,omitempty"`

	// REQUIRED
	Rule *CodeScanningAlertRuleSummary `json:"rule,omitempty"`

	// REQUIRED; State of a code scanning alert.
	State *CodeScanningAlertState `json:"state,omitempty"`

	// REQUIRED
	Tool *CodeScanningAnalysisTool `json:"tool,omitempty"`

	// READ-ONLY; The REST API URL of the alert resource.
	URL *string `json:"url,omitempty" azure:"ro"`

	// The dismissal comment associated with the dismissal of the alert.
	DismissedComment *string `json:"dismissed_comment,omitempty"`

	// READ-ONLY; The time that the alert was created in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was dismissed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	DismissedAt *time.Time `json:"dismissed_at,omitempty" azure:"ro"`

	// READ-ONLY; The GitHub URL of the alert resource.
	HTMLURL *string `json:"html_url,omitempty" azure:"ro"`

	// READ-ONLY; The REST API URL for fetching the list of instances for an alert.
	InstancesURL *string `json:"instances_url,omitempty" azure:"ro"`

	// READ-ONLY; The security alert number.
	Number *int32 `json:"number,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was no longer detected and was considered fixed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	FixedAt *time.Time `json:"fixed_at,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was last updated in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	UpdatedAt *time.Time `json:"updated_at,omitempty" azure:"ro"`
}

// CodeScanningAlertLocation - Describe a region within a file for the alert.
type CodeScanningAlertLocation struct {
	EndColumn *int32 `json:"end_column,omitempty"`
	EndLine *int32 `json:"end_line,omitempty"`
	Path *string `json:"path,omitempty"`
	StartColumn *int32 `json:"start_column,omitempty"`
	StartLine *int32 `json:"start_line,omitempty"`
}

type CodeScanningAlertRule struct {
	// A short description of the rule used to detect the alert.
	Description *string `json:"description,omitempty"`

	// description of the rule used to detect the alert.
	FullDescription *string `json:"full_description,omitempty"`

	// Detailed documentation for the rule as GitHub Flavored Markdown.
	Help *string `json:"help,omitempty"`

	// A link to the documentation for the rule used to detect the alert.
	HelpURI *string `json:"help_uri,omitempty"`

	// A unique identifier for the rule used to detect the alert.
	ID *string `json:"id,omitempty"`

	// The name of the rule used to detect the alert.
	Name *string `json:"name,omitempty"`

	// The security severity of the alert.
	SecuritySeverityLevel *CodeScanningAlertRuleSecuritySeverityLevel `json:"security_severity_level,omitempty"`

	// The severity of the alert.
	Severity *CodeScanningAlertRuleSeverity `json:"severity,omitempty"`

	// A set of tags applicable for the rule.
	Tags []*string `json:"tags,omitempty"`
}

type CodeScanningAlertRuleSummary struct {
	// A short description of the rule used to detect the alert.
	Description *string `json:"description,omitempty"`

	// A unique identifier for the rule used to detect the alert.
	ID *string `json:"id,omitempty"`

	// The name of the rule used to detect the alert.
	Name *string `json:"name,omitempty"`

	// The severity of the alert.
	Severity *CodeScanningAlertRuleSummarySeverity `json:"severity,omitempty"`

	// A set of tags applicable for the rule.
	Tags []*string `json:"tags,omitempty"`
}

type CodeScanningAnalysis struct {
	// REQUIRED; Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes
// the workflow filename and job name.
	AnalysisKey *string `json:"analysis_key,omitempty"`

	// REQUIRED; The SHA of the commit to which the analysis you are uploading relates.
	CommitSHA *string `json:"commit_sha,omitempty"`

	// REQUIRED
	Deletable *bool `json:"deletable,omitempty"`

	// REQUIRED; Identifies the variable values associated with the environment in which this analysis was performed.
	Environment *string `json:"environment,omitempty"`

	// REQUIRED
	Error *string `json:"error,omitempty"`

	// REQUIRED; Unique identifier for this analysis.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The full Git reference, formatted as refs/heads/<branch name>,refs/pull/<number>/merge, or refs/pull/<number>/head.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; The total number of results in the analysis.
	ResultsCount *int32 `json:"results_count,omitempty"`

	// REQUIRED; The total number of rules used in the analysis.
	RulesCount *int32 `json:"rules_count,omitempty"`

	// REQUIRED; An identifier for the upload.
	SarifID *string `json:"sarif_id,omitempty"`

	// REQUIRED
	Tool *CodeScanningAnalysisTool `json:"tool,omitempty"`

	// REQUIRED; Warning generated when processing the analysis
	Warning *string `json:"warning,omitempty"`

	// READ-ONLY; The time that the analysis was created in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty" azure:"ro"`

	// READ-ONLY; The REST API URL of the analysis resource.
	URL *string `json:"url,omitempty" azure:"ro"`

	// Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the
// same tool and commit, but performed on different languages or different parts
// of the code.
	Category *string `json:"category,omitempty"`
}

// CodeScanningAnalysisDeletion - Successful deletion of a code scanning analysis
type CodeScanningAnalysisDeletion struct {
	// READ-ONLY; Next deletable analysis in chain, with last analysis deletion confirmation
	ConfirmDeleteURL *string `json:"confirm_delete_url,omitempty" azure:"ro"`

	// READ-ONLY; Next deletable analysis in chain, without last analysis deletion confirmation
	NextAnalysisURL *string `json:"next_analysis_url,omitempty" azure:"ro"`
}

type CodeScanningAnalysisTool struct {
	// The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
	GUID *string `json:"guid,omitempty"`

	// The name of the tool used to generate the code scanning analysis.
	Name *string `json:"name,omitempty"`

	// The version of the tool used to generate the code scanning analysis.
	Version *string `json:"version,omitempty"`
}

// CodeScanningCodeqlDatabase - A CodeQL database.
type CodeScanningCodeqlDatabase struct {
	// REQUIRED; The MIME type of the CodeQL database file.
	ContentType *string `json:"content_type,omitempty"`

	// REQUIRED; The date and time at which the CodeQL database was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The ID of the CodeQL database.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The language of the CodeQL database.
	Language *string `json:"language,omitempty"`

	// REQUIRED; The name of the CodeQL database.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The size of the CodeQL database file in bytes.
	Size *int32 `json:"size,omitempty"`

	// REQUIRED; The URL at which to download the CodeQL database. The Accept header must be set to the value of the content_type
// property.
	URL *string `json:"url,omitempty"`

	// REQUIRED; The date and time at which the CodeQL database was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; A GitHub user.
	Uploader *SimpleUser `json:"uploader,omitempty"`
}

type CodeScanningOrganizationAlertItems struct {
	// REQUIRED; A GitHub user.
	DismissedBy *NullableSimpleUser `json:"dismissed_by,omitempty"`

	// REQUIRED; Required when the state is dismissed. The reason for dismissing or closing the alert.
	DismissedReason *CodeScanningAlertDismissedReason `json:"dismissed_reason,omitempty"`

	// REQUIRED
	MostRecentInstance *CodeScanningAlertInstance `json:"most_recent_instance,omitempty"`

	// REQUIRED; A GitHub repository.
	Repository *SimpleRepository `json:"repository,omitempty"`

	// REQUIRED
	Rule *CodeScanningAlertRule `json:"rule,omitempty"`

	// REQUIRED; State of a code scanning alert.
	State *CodeScanningAlertState `json:"state,omitempty"`

	// REQUIRED
	Tool *CodeScanningAnalysisTool `json:"tool,omitempty"`

	// READ-ONLY; The REST API URL of the alert resource.
	URL *string `json:"url,omitempty" azure:"ro"`

	// The dismissal comment associated with the dismissal of the alert.
	DismissedComment *string `json:"dismissed_comment,omitempty"`

	// READ-ONLY; The time that the alert was created in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was dismissed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	DismissedAt *time.Time `json:"dismissed_at,omitempty" azure:"ro"`

	// READ-ONLY; The GitHub URL of the alert resource.
	HTMLURL *string `json:"html_url,omitempty" azure:"ro"`

	// READ-ONLY; The REST API URL for fetching the list of instances for an alert.
	InstancesURL *string `json:"instances_url,omitempty" azure:"ro"`

	// READ-ONLY; The security alert number.
	Number *int32 `json:"number,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was no longer detected and was considered fixed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	FixedAt *time.Time `json:"fixed_at,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was last updated in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	UpdatedAt *time.Time `json:"updated_at,omitempty" azure:"ro"`
}

type CodeScanningSarifsReceipt struct {
	// An identifier for the upload.
	ID *string `json:"id,omitempty"`

	// READ-ONLY; The REST API URL for checking the status of the upload.
	URL *string `json:"url,omitempty" azure:"ro"`
}

type CodeScanningSarifsStatus struct {
	// pending files have not yet been processed, while complete means results from the SARIF have been stored. failed files have
// either not been processed at all, or could only be partially processed.
	ProcessingStatus *CodeScanningSarifsStatusProcessingStatus `json:"processing_status,omitempty"`

	// READ-ONLY; The REST API URL for getting the analyses associated with the upload.
	AnalysesURL *string `json:"analyses_url,omitempty" azure:"ro"`

	// READ-ONLY; Any errors that ocurred during processing of the delivery.
	Errors []*string `json:"errors,omitempty" azure:"ro"`
}

// CodeSearchResultItem - Code Search Result Item
type CodeSearchResultItem struct {
	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED; Minimal Repository
	Repository *MinimalRepository `json:"repository,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Score *float32 `json:"score,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	FileSize *int32 `json:"file_size,omitempty"`
	Language *string `json:"language,omitempty"`
	LastModifiedAt *time.Time `json:"last_modified_at,omitempty"`
	LineNumbers []*string `json:"line_numbers,omitempty"`

	// Search Result Text Matches
	TextMatches []*SearchResultTextMatchesItem `json:"text_matches,omitempty"`
}

// CodeownersErrors - A list of errors found in a repo's CODEOWNERS file
type CodeownersErrors struct {
	// REQUIRED
	Errors []*CodeownersErrorsItem `json:"errors,omitempty"`
}

type CodeownersErrorsItem struct {
	// REQUIRED; The column number where this errors occurs.
	Column *int32 `json:"column,omitempty"`

	// REQUIRED; The type of error.
	Kind *string `json:"kind,omitempty"`

	// REQUIRED; The line number where this errors occurs.
	Line *int32 `json:"line,omitempty"`

	// REQUIRED; A human-readable description of the error, combining information from multiple fields, laid out for display in
// a monospaced typeface (for example, a command-line setting).
	Message *string `json:"message,omitempty"`

	// REQUIRED; The path of the file where the error occured.
	Path *string `json:"path,omitempty"`

	// The contents of the line where the error occurs.
	Source *string `json:"source,omitempty"`

	// Suggested action to fix the error. This will usually be null, but is provided for some common errors.
	Suggestion *string `json:"suggestion,omitempty"`
}

// Codespace - A codespace.
type Codespace struct {
	// REQUIRED; A GitHub user.
	BillableOwner *SimpleUser `json:"billable_owner,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; UUID identifying this codespace's environment.
	EnvironmentID *string `json:"environment_id,omitempty"`

	// REQUIRED; Details about the codespace's git repository.
	GitStatus *CodespaceGitStatus `json:"git_status,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The number of minutes of inactivity after which this codespace will be automatically stopped.
	IdleTimeoutMinutes *int32 `json:"idle_timeout_minutes,omitempty"`

	// REQUIRED; Last known time this codespace was started.
	LastUsedAt *time.Time `json:"last_used_at,omitempty"`

	// REQUIRED; The Azure region where this codespace is located.
	Location *CodespaceLocation `json:"location,omitempty"`

	// REQUIRED; A description of the machine powering a codespace.
	Machine *NullableCodespaceMachine `json:"machine,omitempty"`

	// REQUIRED; API URL to access available alternate machine types for this codespace.
	MachinesURL *string `json:"machines_url,omitempty"`

	// REQUIRED; Automatically generated name of this codespace.
	Name *string `json:"name,omitempty"`

	// REQUIRED; A GitHub user.
	Owner *SimpleUser `json:"owner,omitempty"`

	// REQUIRED; Whether the codespace was created from a prebuild.
	Prebuild *bool `json:"prebuild,omitempty"`

	// REQUIRED; API URL for the Pull Request associated with this codespace, if any.
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	RecentFolders []*string `json:"recent_folders,omitempty"`

	// REQUIRED; Minimal Repository
	Repository *MinimalRepository `json:"repository,omitempty"`

	// REQUIRED; API URL to start this codespace.
	StartURL *string `json:"start_url,omitempty"`

	// REQUIRED; State of this codespace.
	State *CodespaceState `json:"state,omitempty"`

	// REQUIRED; API URL to stop this codespace.
	StopURL *string `json:"stop_url,omitempty"`

	// REQUIRED; API URL for this codespace.
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; URL to access this codespace on the web.
	WebURL *string `json:"web_url,omitempty"`

	// Path to devcontainer.json from repo root used to create Codespace.
	DevcontainerPath *string `json:"devcontainer_path,omitempty"`

	// Display name for this codespace.
	DisplayName *string `json:"display_name,omitempty"`

	// Text to show user when codespace idle timeout minutes has been overriden by an organization policy
	IdleTimeoutNotice *string `json:"idle_timeout_notice,omitempty"`

	// The text to display to a user when a codespace has been stopped for a potentially actionable reason.
	LastKnownStopNotice *string `json:"last_known_stop_notice,omitempty"`

	// Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable.
// The only thing that you can do with a codespace in this state is delete it.
	PendingOperation *bool `json:"pending_operation,omitempty"`

	// Text to show user when codespace is disabled by a pending operation
	PendingOperationDisabledReason *string `json:"pending_operation_disabled_reason,omitempty"`

	// API URL to publish this codespace to a new repository.
	PublishURL *string `json:"publish_url,omitempty"`

	// When a codespace will be auto-deleted based on the "retentionperiodminutes" and "lastusedat"
	RetentionExpiresAt *time.Time `json:"retention_expires_at,omitempty"`

	// Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200
// (30 days).
	RetentionPeriodMinutes *int32 `json:"retention_period_minutes,omitempty"`
	RuntimeConstraints *CodespaceRuntimeConstraints `json:"runtime_constraints,omitempty"`
}

// CodespaceExportDetails - An export of a codespace. Also, latest export details for a codespace can be fetched with id =
// latest
type CodespaceExportDetails struct {
	// Name of the exported branch
	Branch *string `json:"branch,omitempty"`

	// Completion time of the last export operation
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// Url for fetching export details
	ExportURL *string `json:"export_url,omitempty"`

	// Web url for the exported branch
	HTMLURL *string `json:"html_url,omitempty"`

	// Id for the export details
	ID *string `json:"id,omitempty"`

	// Git commit SHA of the exported branch
	SHA *string `json:"sha,omitempty"`

	// State of the latest export
	State *string `json:"state,omitempty"`
}

// CodespaceGitStatus - Details about the codespace's git repository.
type CodespaceGitStatus struct {
	// The number of commits the local repository is ahead of the remote.
	Ahead *int32 `json:"ahead,omitempty"`

	// The number of commits the local repository is behind the remote.
	Behind *int32 `json:"behind,omitempty"`

	// Whether the local repository has uncommitted changes.
	HasUncommittedChanges *bool `json:"has_uncommitted_changes,omitempty"`

	// Whether the local repository has unpushed changes.
	HasUnpushedChanges *bool `json:"has_unpushed_changes,omitempty"`

	// The current branch (or SHA if in detached HEAD state) of the local repository.
	Ref *string `json:"ref,omitempty"`
}

// CodespaceMachine - A description of the machine powering a codespace.
type CodespaceMachine struct {
	// REQUIRED; How many cores are available to the codespace.
	Cpus *int32 `json:"cpus,omitempty"`

	// REQUIRED; The display name of the machine includes cores, memory, and storage.
	DisplayName *string `json:"display_name,omitempty"`

	// REQUIRED; How much memory is available to the codespace.
	MemoryInBytes *int32 `json:"memory_in_bytes,omitempty"`

	// REQUIRED; The name of the machine.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The operating system of the machine.
	OperatingSystem *string `json:"operating_system,omitempty"`

	// REQUIRED; Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch
// was not specified as a ref, the default branch will be assumed. Value will be "null" if
// prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available.
// Latest values "ready" and "in_progress" indicate the prebuild
// availability status.
	PrebuildAvailability *CodespaceMachinePrebuildAvailability `json:"prebuild_availability,omitempty"`

	// REQUIRED; How much storage is available to the codespace.
	StorageInBytes *int32 `json:"storage_in_bytes,omitempty"`
}

type CodespaceRuntimeConstraints struct {
	// The privacy settings a user can select from when forwarding a port.
	AllowedPortPrivacySettings []*string `json:"allowed_port_privacy_settings,omitempty"`
}

// CodespaceWithFullRepository - A codespace.
type CodespaceWithFullRepository struct {
	// REQUIRED; A GitHub user.
	BillableOwner *SimpleUser `json:"billable_owner,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; UUID identifying this codespace's environment.
	EnvironmentID *string `json:"environment_id,omitempty"`

	// REQUIRED; Details about the codespace's git repository.
	GitStatus *CodespaceWithFullRepositoryGitStatus `json:"git_status,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The number of minutes of inactivity after which this codespace will be automatically stopped.
	IdleTimeoutMinutes *int32 `json:"idle_timeout_minutes,omitempty"`

	// REQUIRED; Last known time this codespace was started.
	LastUsedAt *time.Time `json:"last_used_at,omitempty"`

	// REQUIRED; The Azure region where this codespace is located.
	Location *CodespaceWithFullRepositoryLocation `json:"location,omitempty"`

	// REQUIRED; A description of the machine powering a codespace.
	Machine *NullableCodespaceMachine `json:"machine,omitempty"`

	// REQUIRED; API URL to access available alternate machine types for this codespace.
	MachinesURL *string `json:"machines_url,omitempty"`

	// REQUIRED; Automatically generated name of this codespace.
	Name *string `json:"name,omitempty"`

	// REQUIRED; A GitHub user.
	Owner *SimpleUser `json:"owner,omitempty"`

	// REQUIRED; Whether the codespace was created from a prebuild.
	Prebuild *bool `json:"prebuild,omitempty"`

	// REQUIRED; API URL for the Pull Request associated with this codespace, if any.
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	RecentFolders []*string `json:"recent_folders,omitempty"`

	// REQUIRED; Full Repository
	Repository *FullRepository `json:"repository,omitempty"`

	// REQUIRED; API URL to start this codespace.
	StartURL *string `json:"start_url,omitempty"`

	// REQUIRED; State of this codespace.
	State *CodespaceWithFullRepositoryState `json:"state,omitempty"`

	// REQUIRED; API URL to stop this codespace.
	StopURL *string `json:"stop_url,omitempty"`

	// REQUIRED; API URL for this codespace.
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; URL to access this codespace on the web.
	WebURL *string `json:"web_url,omitempty"`

	// Path to devcontainer.json from repo root used to create Codespace.
	DevcontainerPath *string `json:"devcontainer_path,omitempty"`

	// Display name for this codespace.
	DisplayName *string `json:"display_name,omitempty"`

	// Text to show user when codespace idle timeout minutes has been overriden by an organization policy
	IdleTimeoutNotice *string `json:"idle_timeout_notice,omitempty"`

	// Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable.
// The only thing that you can do with a codespace in this state is delete it.
	PendingOperation *bool `json:"pending_operation,omitempty"`

	// Text to show user when codespace is disabled by a pending operation
	PendingOperationDisabledReason *string `json:"pending_operation_disabled_reason,omitempty"`

	// API URL to publish this codespace to a new repository.
	PublishURL *string `json:"publish_url,omitempty"`

	// When a codespace will be auto-deleted based on the "retentionperiodminutes" and "lastusedat"
	RetentionExpiresAt *time.Time `json:"retention_expires_at,omitempty"`

	// Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200
// (30 days).
	RetentionPeriodMinutes *int32 `json:"retention_period_minutes,omitempty"`
	RuntimeConstraints *CodespaceWithFullRepositoryRuntimeConstraints `json:"runtime_constraints,omitempty"`
}

// CodespaceWithFullRepositoryGitStatus - Details about the codespace's git repository.
type CodespaceWithFullRepositoryGitStatus struct {
	// The number of commits the local repository is ahead of the remote.
	Ahead *int32 `json:"ahead,omitempty"`

	// The number of commits the local repository is behind the remote.
	Behind *int32 `json:"behind,omitempty"`

	// Whether the local repository has uncommitted changes.
	HasUncommittedChanges *bool `json:"has_uncommitted_changes,omitempty"`

	// Whether the local repository has unpushed changes.
	HasUnpushedChanges *bool `json:"has_unpushed_changes,omitempty"`

	// The current branch (or SHA if in detached HEAD state) of the local repository.
	Ref *string `json:"ref,omitempty"`
}

type CodespaceWithFullRepositoryRuntimeConstraints struct {
	// The privacy settings a user can select from when forwarding a port.
	AllowedPortPrivacySettings []*string `json:"allowed_port_privacy_settings,omitempty"`
}

// CodespacesOrgSecret - Secrets for a GitHub Codespace.
type CodespacesOrgSecret struct {
	// REQUIRED; The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The name of the secret
	Name *string `json:"name,omitempty"`

	// REQUIRED; The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; The type of repositories in the organization that the secret is visible to
	Visibility *CodespacesOrgSecretVisibility `json:"visibility,omitempty"`

	// The API URL at which the list of repositories this secret is visible to can be retrieved
	SelectedRepositoriesURL *string `json:"selected_repositories_url,omitempty"`
}

// CodespacesPublicKey - The public key used for setting Codespaces secrets.
type CodespacesPublicKey struct {
	// REQUIRED; The Base64 encoded public key.
	Key *string `json:"key,omitempty"`

	// REQUIRED; The identifier for the key.
	KeyID *string `json:"key_id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
}

// CodespacesSecret - Secrets for a GitHub Codespace.
type CodespacesSecret struct {
	// REQUIRED; The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The name of the secret
	Name *string `json:"name,omitempty"`

	// REQUIRED; The API URL at which the list of repositories this secret is visible to can be retrieved
	SelectedRepositoriesURL *string `json:"selected_repositories_url,omitempty"`

	// REQUIRED; The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; The type of repositories in the organization that the secret is visible to
	Visibility *CodespacesSecretVisibility `json:"visibility,omitempty"`
}

// CodespacesUserPublicKey - The public key used for setting user Codespaces' Secrets.
type CodespacesUserPublicKey struct {
	// REQUIRED; The Base64 encoded public key.
	Key *string `json:"key,omitempty"`

	// REQUIRED; The identifier for the key.
	KeyID *string `json:"key_id,omitempty"`
}

// Collaborator
type Collaborator struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	RoleName *string `json:"role_name,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
	Permissions *CollaboratorPermissions `json:"permissions,omitempty"`
}

type CollaboratorPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type CombinedBillingUsage struct {
	// REQUIRED; Numbers of days left in billing cycle.
	DaysLeftInBillingCycle *int32 `json:"days_left_in_billing_cycle,omitempty"`

	// REQUIRED; Estimated storage space (GB) used in billing cycle.
	EstimatedPaidStorageForMonth *int32 `json:"estimated_paid_storage_for_month,omitempty"`

	// REQUIRED; Estimated sum of free and paid storage space (GB) used in billing cycle.
	EstimatedStorageForMonth *int32 `json:"estimated_storage_for_month,omitempty"`
}

// CombinedCommitStatus - Combined Commit Status
type CombinedCommitStatus struct {
	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED; Minimal Repository
	Repository *MinimalRepository `json:"repository,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	Statuses []*SimpleCommitStatus `json:"statuses,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// Commit
type Commit struct {
	// REQUIRED; A GitHub user.
	Author *NullableSimpleUser `json:"author,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	Commit *CommitCommit `json:"commit,omitempty"`

	// REQUIRED; A GitHub user.
	Committer *NullableSimpleUser `json:"committer,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Parents []*CommitParentsItem `json:"parents,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	Files []*DiffEntry `json:"files,omitempty"`
	Stats *CommitStats `json:"stats,omitempty"`
}

// CommitActivity - Commit Activity
type CommitActivity struct {
	// REQUIRED
	Days []*int32 `json:"days,omitempty"`

	// REQUIRED
	Total *int32 `json:"total,omitempty"`

	// REQUIRED
	Week *int32 `json:"week,omitempty"`
}

// CommitComment - Commit Comment
type CommitComment struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Line *int32 `json:"line,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	Position *int32 `json:"position,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`

	// Reaction Rollup
	Reactions *ReactionRollup `json:"reactions,omitempty"`
}

type CommitCommit struct {
	// REQUIRED; Metaproperties for Git author/committer information.
	Author *NullableGitUser `json:"author,omitempty"`

	// REQUIRED
	CommentCount *int32 `json:"comment_count,omitempty"`

	// REQUIRED; Metaproperties for Git author/committer information.
	Committer *NullableGitUser `json:"committer,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	Tree *CommitTree `json:"tree,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// Verification
	Verification *Verification `json:"verification,omitempty"`
}

// CommitComparison - Commit Comparison
type CommitComparison struct {
	// REQUIRED
	AheadBy *int32 `json:"ahead_by,omitempty"`

	// REQUIRED; Commit
	BaseCommit *Commit `json:"base_commit,omitempty"`

	// REQUIRED
	BehindBy *int32 `json:"behind_by,omitempty"`

	// REQUIRED
	Commits []*Commit `json:"commits,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Commit
	MergeBaseCommit *Commit `json:"merge_base_commit,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	PermalinkURL *string `json:"permalink_url,omitempty"`

	// REQUIRED
	Status *CommitComparisonStatus `json:"status,omitempty"`

	// REQUIRED
	TotalCommits *int32 `json:"total_commits,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	Files []*DiffEntry `json:"files,omitempty"`
}

type CommitParentsItem struct {
	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
}

// CommitSearchResultItem - Commit Search Result Item
type CommitSearchResultItem struct {
	// REQUIRED; A GitHub user.
	Author *NullableSimpleUser `json:"author,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	Commit *CommitSearchResultItemCommit `json:"commit,omitempty"`

	// REQUIRED; Metaproperties for Git author/committer information.
	Committer *NullableGitUser `json:"committer,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Parents []*CommitSearchResultItemParentsItem `json:"parents,omitempty"`

	// REQUIRED; Minimal Repository
	Repository *MinimalRepository `json:"repository,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Score *float32 `json:"score,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// Search Result Text Matches
	TextMatches []*SearchResultTextMatchesItem `json:"text_matches,omitempty"`
}

type CommitSearchResultItemCommit struct {
	// REQUIRED
	Author *CommitSearchResultItemCommitAuthor `json:"author,omitempty"`

	// REQUIRED
	CommentCount *int32 `json:"comment_count,omitempty"`

	// REQUIRED; Metaproperties for Git author/committer information.
	Committer *NullableGitUser `json:"committer,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	Tree *CommitSearchResultItemCommitTree `json:"tree,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// Verification
	Verification *Verification `json:"verification,omitempty"`
}

type CommitSearchResultItemCommitAuthor struct {
	// REQUIRED
	Date *time.Time `json:"date,omitempty"`

	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`
}

type CommitSearchResultItemCommitTree struct {
	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type CommitSearchResultItemParentsItem struct {
	HTMLURL *string `json:"html_url,omitempty"`
	SHA *string `json:"sha,omitempty"`
	URL *string `json:"url,omitempty"`
}

type CommitStats struct {
	Additions *int32 `json:"additions,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`
	Total *int32 `json:"total,omitempty"`
}

type CommitTree struct {
	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// Committer - Metaproperties for Git author/committer information.
type Committer struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// Committer0 - Metaproperties for Git author/committer information.
type Committer0 struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// CommunityProfile - Community Profile
type CommunityProfile struct {
	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Documentation *string `json:"documentation,omitempty"`

	// REQUIRED
	Files *CommunityProfileFiles `json:"files,omitempty"`

	// REQUIRED
	HealthPercentage *int32 `json:"health_percentage,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	ContentReportsEnabled *bool `json:"content_reports_enabled,omitempty"`
}

type CommunityProfileFiles struct {
	// REQUIRED; Code of Conduct Simple
	CodeOfConduct *NullableCodeOfConductSimple `json:"code_of_conduct,omitempty"`

	// REQUIRED; Community Health File
	CodeOfConductFile *NullableCommunityHealthFile `json:"code_of_conduct_file,omitempty"`

	// REQUIRED; Community Health File
	Contributing *NullableCommunityHealthFile `json:"contributing,omitempty"`

	// REQUIRED; Community Health File
	IssueTemplate *NullableCommunityHealthFile `json:"issue_template,omitempty"`

	// REQUIRED; License Simple
	License *NullableLicenseSimple `json:"license,omitempty"`

	// REQUIRED; Community Health File
	PullRequestTemplate *NullableCommunityHealthFile `json:"pull_request_template,omitempty"`

	// REQUIRED; Community Health File
	Readme *NullableCommunityHealthFile `json:"readme,omitempty"`
}

type Components103Lyo2ResponsesServiceUnavailableContentApplicationJSONSchema struct {
	Code *string `json:"code,omitempty"`
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message *string `json:"message,omitempty"`
}

type Components10Djf4KSchemasWebhookPullRequestEditedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2164 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type Components112Nd8FSchemasWebhookPullRequestReopenedPropertiesPullRequestOneof1 struct {
	// REQUIRED
	ClosedAt *string `json:"closed_at,omitempty"`

	// REQUIRED
	Merged *bool `json:"merged,omitempty"`

	// REQUIRED
	MergedAt *string `json:"merged_at,omitempty"`

	// REQUIRED; Anything
	MergedBy any `json:"merged_by,omitempty"`

	// REQUIRED
	State *WebhookPullRequestReopenedPullRequest1State `json:"state,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	Additions *int32 `json:"additions,omitempty"`

	// Anything
	Assignee any `json:"assignee,omitempty"`
	Assignees []any `json:"assignees,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`

	// Anything
	AutoMerge any `json:"auto_merge,omitempty"`
	Base *WebhookPullRequestReopenedPullRequest1Base `json:"base,omitempty"`
	Body *string `json:"body,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`
	DiffURL *string `json:"diff_url,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Head *WebhookPullRequestReopenedPullRequest1Head `json:"head,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IssueURL *string `json:"issue_url,omitempty"`
	Labels []any `json:"labels,omitempty"`
	Links *WebhookPullRequestReopenedPullRequest1Links `json:"_links,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`

	// Anything
	Milestone any `json:"milestone,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	RequestedReviewers []any `json:"requested_reviewers,omitempty"`
	RequestedTeams []any `json:"requested_teams,omitempty"`
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookPullRequestReopenedPullRequest1User `json:"user,omitempty"`
}

type Components11Nne4LSchemasWebhookPullRequestLabeledPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2226 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type Components11WakocSchemasWebhookPullRequestAssignedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum1929 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// Components13Bbe0JSchemasWebhookWorkflowRunCompletedPropertiesWorkflowRunOneof0PropertiesPullRequestsItemsPropertiesBasePropertiesRepo
// - Repo Ref
type Components13Bbe0JSchemasWebhookWorkflowRunCompletedPropertiesWorkflowRunOneof0PropertiesPullRequestsItemsPropertiesBasePropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// Components151F0U9SchemasWebhookDeploymentCreatedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesBasePropertiesRepo
// - Repo Ref
type Components151F0U9SchemasWebhookDeploymentCreatedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesBasePropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type Components15AmnbtSchemasWebhookForkPropertiesForkeeOneof1 struct {
	AllowForking *bool `json:"allow_forking,omitempty"`
	ArchiveURL *string `json:"archive_url,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CloneURL *string `json:"clone_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *Enum771 `json:"fork,omitempty"`
	Forks *int32 `json:"forks,omitempty"`
	ForksCount *int32 `json:"forks_count,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HasDownloads *bool `json:"has_downloads,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPages *bool `json:"has_pages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`

	// Anything
	Language any `json:"language,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`

	// Anything
	License any `json:"license,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// Anything
	MirrorURL any `json:"mirror_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	OpenIssues *int32 `json:"open_issues,omitempty"`
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`
	Owner *WebhookForkForkee1Owner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	Public *bool `json:"public,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	PushedAt *string `json:"pushed_at,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	SSHURL *string `json:"ssh_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
	StargazersCount *int32 `json:"stargazers_count,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	SvnURL *string `json:"svn_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	Topics []any `json:"topics,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Watchers *int32 `json:"watchers,omitempty"`
	WatchersCount *int32 `json:"watchers_count,omitempty"`
}

type Components15C91CkSchemasWebhookPullRequestConvertedToDraftPropertiesPullRequestOneof1 struct {
	// REQUIRED
	ClosedAt *string `json:"closed_at,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	Merged *Enum2076 `json:"merged,omitempty"`

	// REQUIRED; Anything
	MergedAt any `json:"merged_at,omitempty"`

	// REQUIRED; Anything
	MergedBy any `json:"merged_by,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	Additions *int32 `json:"additions,omitempty"`

	// Anything
	Assignee any `json:"assignee,omitempty"`
	Assignees []any `json:"assignees,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`

	// Anything
	AutoMerge any `json:"auto_merge,omitempty"`
	Base *WebhookPullRequestConvertedToDraftPullRequest1Base `json:"base,omitempty"`
	Body *string `json:"body,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Head *WebhookPullRequestConvertedToDraftPullRequest1Head `json:"head,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IssueURL *string `json:"issue_url,omitempty"`
	Labels []any `json:"labels,omitempty"`
	Links *WebhookPullRequestConvertedToDraftPullRequest1Links `json:"_links,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`

	// Anything
	Milestone any `json:"milestone,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	RequestedReviewers []any `json:"requested_reviewers,omitempty"`
	RequestedTeams []any `json:"requested_teams,omitempty"`
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`
	State *string `json:"state,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookPullRequestConvertedToDraftPullRequest1User `json:"user,omitempty"`
}

type Components15Jivo3SchemasWebhookWorkflowRunInProgressPropertiesWorkflowRunOneof1 struct {
	// REQUIRED
	Conclusion *WebhookWorkflowRunInProgressWorkflowRun1Conclusion `json:"conclusion,omitempty"`
	Actor *WebhookWorkflowRunInProgressWorkflowRun1Actor `json:"actor,omitempty"`
	ArtifactsURL *string `json:"artifacts_url,omitempty"`
	CancelURL *string `json:"cancel_url,omitempty"`
	CheckSuiteID *int32 `json:"check_suite_id,omitempty"`
	CheckSuiteNodeID *string `json:"check_suite_node_id,omitempty"`
	CheckSuiteURL *string `json:"check_suite_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Event *string `json:"event,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HeadBranch *string `json:"head_branch,omitempty"`
	HeadCommit *WebhookWorkflowRunInProgressWorkflowRun1HeadCommit `json:"head_commit,omitempty"`
	HeadRepository *WebhookWorkflowRunInProgressWorkflowRun1HeadRepository `json:"head_repository,omitempty"`
	HeadSHA *string `json:"head_sha,omitempty"`
	ID *int32 `json:"id,omitempty"`
	JobsURL *string `json:"jobs_url,omitempty"`
	LogsURL *string `json:"logs_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Path *string `json:"path,omitempty"`
	PreviousAttemptURL *string `json:"previous_attempt_url,omitempty"`
	PullRequests []any `json:"pull_requests,omitempty"`
	ReferencedWorkflows []*WebhookWorkflowRunInProgressWorkflowRun1ReferencedWorkflowsItem `json:"referenced_workflows,omitempty"`
	Repository *WebhookWorkflowRunInProgressWorkflowRun1Repository `json:"repository,omitempty"`
	RerunURL *string `json:"rerun_url,omitempty"`
	RunAttempt *int32 `json:"run_attempt,omitempty"`
	RunNumber *int32 `json:"run_number,omitempty"`
	RunStartedAt *string `json:"run_started_at,omitempty"`
	Status *string `json:"status,omitempty"`
	TriggeringActor *WebhookWorkflowRunInProgressWorkflowRun1TriggeringActor `json:"triggering_actor,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	WorkflowID *int32 `json:"workflow_id,omitempty"`
	WorkflowURL *string `json:"workflow_url,omitempty"`
}

// Components15OzrzoSchemasWebhookPullRequestReviewThreadResolvedPropertiesThreadPropertiesCommentsItemsPropertiesLinksPropertiesSelf
// - Link
type Components15OzrzoSchemasWebhookPullRequestReviewThreadResolvedPropertiesThreadPropertiesCommentsItemsPropertiesLinksPropertiesSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

type Components15Qki0QSchemasWebhookPullRequestUnlockedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2898 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type Components15Rfly5SchemasWebhookPullRequestDemilestonedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2102 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type Components166FbueSchemasWebhookRepositoryVulnerabilityAlertResolvePropertiesAlertOneof1 struct {
	// REQUIRED
	State *WebhookRepositoryVulnerabilityAlertResolveAlert1State `json:"state,omitempty"`
	AffectedPackageName *string `json:"affected_package_name,omitempty"`
	AffectedRange *string `json:"affected_range,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	ExternalIdentifier *string `json:"external_identifier,omitempty"`
	ExternalReference *string `json:"external_reference,omitempty"`
	FixReason *string `json:"fix_reason,omitempty"`
	FixedAt *time.Time `json:"fixed_at,omitempty"`
	FixedIn *string `json:"fixed_in,omitempty"`
	GhsaID *string `json:"ghsa_id,omitempty"`
	ID *int32 `json:"id,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`
	Severity *string `json:"severity,omitempty"`
}

type Components16H9WqwResponsesForbiddenGistContentApplicationJSONSchema struct {
	Block *ForbiddenGistApplicationJSONProperties `json:"block,omitempty"`
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message *string `json:"message,omitempty"`
}

type Components16IwqlxSchemasEnvironmentPropertiesProtectionRulesItemsAnyof0 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between
// 0 and 43,200 (30 days).
	WaitTimer *int32 `json:"wait_timer,omitempty"`
}

type Components175K5GlSchemasWebhookMarketplacePurchasePurchasedPropertiesMarketplacePurchaseOneof1 struct {
	// REQUIRED
	NextBillingDate *string `json:"next_billing_date,omitempty"`
	Account *WebhookMarketplacePurchasePurchasedMarketplacePurchase1Account `json:"account,omitempty"`
	BillingCycle *string `json:"billing_cycle,omitempty"`
	FreeTrialEndsOn *string `json:"free_trial_ends_on,omitempty"`
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`
	Plan *WebhookMarketplacePurchasePurchasedMarketplacePurchase1Plan `json:"plan,omitempty"`
	UnitCount *int32 `json:"unit_count,omitempty"`
}

type Components18Kbuc7SchemasWebhookPullRequestReadyForReviewPropertiesPullRequestOneof1 struct {
	// REQUIRED
	ClosedAt *string `json:"closed_at,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	Merged *bool `json:"merged,omitempty"`

	// REQUIRED
	MergedAt *string `json:"merged_at,omitempty"`

	// REQUIRED; Anything
	MergedBy any `json:"merged_by,omitempty"`

	// REQUIRED
	State *WebhookPullRequestReadyForReviewPullRequest1State `json:"state,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	Additions *int32 `json:"additions,omitempty"`

	// Anything
	Assignee any `json:"assignee,omitempty"`
	Assignees []any `json:"assignees,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`

	// Anything
	AutoMerge any `json:"auto_merge,omitempty"`
	Base *WebhookPullRequestReadyForReviewPullRequest1Base `json:"base,omitempty"`
	Body *string `json:"body,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Head *WebhookPullRequestReadyForReviewPullRequest1Head `json:"head,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IssueURL *string `json:"issue_url,omitempty"`
	Labels []any `json:"labels,omitempty"`
	Links *WebhookPullRequestReadyForReviewPullRequest1Links `json:"_links,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`

	// Anything
	Milestone any `json:"milestone,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	RequestedReviewers []any `json:"requested_reviewers,omitempty"`
	RequestedTeams []any `json:"requested_teams,omitempty"`
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookPullRequestReadyForReviewPullRequest1User `json:"user,omitempty"`
}

type Components19JmndnSchemasWebhookWorkflowJobInProgressPropertiesWorkflowJobOneof1 struct {
	// REQUIRED
	Status *WebhookWorkflowJobInProgressWorkflowJob1Status `json:"status,omitempty"`

	// REQUIRED
	Steps []*WebhookWorkflowJobInProgressWorkflowJob1StepsItem `json:"steps,omitempty"`
	CheckRunURL *string `json:"check_run_url,omitempty"`
	CompletedAt *string `json:"completed_at,omitempty"`
	Conclusion *string `json:"conclusion,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`

	// The name of the current branch.
	HeadBranch *string `json:"head_branch,omitempty"`
	HeadSHA *string `json:"head_sha,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Labels []*string `json:"labels,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	RunAttempt *int32 `json:"run_attempt,omitempty"`
	RunID *int32 `json:"run_id,omitempty"`
	RunURL *string `json:"run_url,omitempty"`
	RunnerGroupID *float32 `json:"runner_group_id,omitempty"`
	RunnerGroupName *string `json:"runner_group_name,omitempty"`
	RunnerID *float32 `json:"runner_id,omitempty"`
	RunnerName *string `json:"runner_name,omitempty"`
	StartedAt *string `json:"started_at,omitempty"`
	URL *string `json:"url,omitempty"`

	// The name of the workflow.
	WorkflowName *string `json:"workflow_name,omitempty"`
}

type Components19Ovj5KSchemasWebhookPullRequestReviewRequestRemovedOneof1PropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2622 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// Components19TlmclSchemasWebhookWorkflowRunRequestedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesHeadPropertiesRepo
// - Repo Ref
type Components19TlmclSchemasWebhookWorkflowRunRequestedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesHeadPropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type Components1B760O4SchemasWebhookIssuesDemilestonedPropertiesIssueOneof1 struct {
	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesDemilestonedIssue1Milestone `json:"milestone,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// Anything
	Assignee any `json:"assignee,omitempty"`
	Assignees []any `json:"assignees,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`
	Body *string `json:"body,omitempty"`
	ClosedAt *string `json:"closed_at,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Labels []any `json:"labels,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`

	// Anything
	PerformedViaGithubApp any `json:"performed_via_github_app,omitempty"`
	Reactions *WebhookIssuesDemilestonedIssue1Reactions `json:"reactions,omitempty"`
	RepositoryURL *string `json:"repository_url,omitempty"`
	State *string `json:"state,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookIssuesDemilestonedIssue1User `json:"user,omitempty"`
}

type Components1Bj12XjSchemasWebhookPullRequestUnlabeledPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2867 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type Components1BjqmijSchemasEnvironmentPropertiesProtectionRulesItemsAnyof1 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers.
// The reviewers must have at least read access to the repository. Only one
// of the required reviewers needs to approve the job for it to proceed.
	Reviewers []*EnvironmentProtectionRulesAnyOfPropertiesItemsItem `json:"reviewers,omitempty"`
}

type Components1Co4B10SchemasWebhookPullRequestReviewRequestedOneof1PropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2687 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type Components1Dcte0TSchemasWebhookIssuesClosedPropertiesIssueOneof1 struct {
	// REQUIRED
	ClosedAt *string `json:"closed_at,omitempty"`

	// REQUIRED
	State *WebhookIssuesClosedIssue1State `json:"state,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// Anything
	Assignee any `json:"assignee,omitempty"`
	Assignees []any `json:"assignees,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`
	Body *string `json:"body,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Labels []any `json:"labels,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// Anything
	Milestone any `json:"milestone,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`

	// Anything
	PerformedViaGithubApp any `json:"performed_via_github_app,omitempty"`
	Reactions *WebhookIssuesClosedIssue1Reactions `json:"reactions,omitempty"`
	RepositoryURL *string `json:"repository_url,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookIssuesClosedIssue1User `json:"user,omitempty"`
}

type Components1Dgkd1SchemasBaseGistPropertiesFilesAdditionalproperties struct {
	Filename *string `json:"filename,omitempty"`
	Language *string `json:"language,omitempty"`
	RawURL *string `json:"raw_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
	Type *string `json:"type,omitempty"`
}

type Components1DtmxekSchemasWebhookIssuesReopenedPropertiesIssueOneof1 struct {
	// REQUIRED
	State *WebhookIssuesReopenedIssue1State `json:"state,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// Anything
	Assignee any `json:"assignee,omitempty"`
	Assignees []any `json:"assignees,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`
	Body *string `json:"body,omitempty"`
	ClosedAt *string `json:"closed_at,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Labels []any `json:"labels,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// Anything
	Milestone any `json:"milestone,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`

	// Anything
	PerformedViaGithubApp any `json:"performed_via_github_app,omitempty"`
	Reactions *WebhookIssuesReopenedIssue1Reactions `json:"reactions,omitempty"`
	RepositoryURL *string `json:"repository_url,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookIssuesReopenedIssue1User `json:"user,omitempty"`
}

type Components1Ex5YfeSchemasWebhookReleasePrereleasedPropertiesReleaseOneof1 struct {
	// REQUIRED; Whether the release is identified as a prerelease or a full release.
	Prerelease *Enum2923 `json:"prerelease,omitempty"`
	Assets []any `json:"assets,omitempty"`
	AssetsURL *string `json:"assets_url,omitempty"`
	Author *WebhookReleasePrereleasedRelease1Author `json:"author,omitempty"`
	Body *string `json:"body,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	PublishedAt *string `json:"published_at,omitempty"`
	TagName *string `json:"tag_name,omitempty"`
	TarballURL *string `json:"tarball_url,omitempty"`
	TargetCommitish *string `json:"target_commitish,omitempty"`
	URL *string `json:"url,omitempty"`
	UploadURL *string `json:"upload_url,omitempty"`
	ZipballURL *string `json:"zipball_url,omitempty"`
}

type Components1F5Eq79SchemasWebhookPullRequestConvertedToDraftPropertiesPullRequestOneof0PropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2062 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type Components1Fjrxt2SchemasWebhookMarketplacePurchasePendingChangePropertiesMarketplacePurchaseOneof1 struct {
	// REQUIRED
	NextBillingDate *string `json:"next_billing_date,omitempty"`
	Account *WebhookMarketplacePurchasePendingChangeMarketplacePurchase1Account `json:"account,omitempty"`
	BillingCycle *string `json:"billing_cycle,omitempty"`
	FreeTrialEndsOn *string `json:"free_trial_ends_on,omitempty"`
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`
	Plan *WebhookMarketplacePurchasePendingChangeMarketplacePurchase1Plan `json:"plan,omitempty"`
	UnitCount *int32 `json:"unit_count,omitempty"`
}

type Components1Gf7Am6SchemasWebhookPackagePublishedPropertiesPackageVersionPropertiesNugetMetadataItemsPropertiesValueOneof3 struct {
	Branch *string `json:"branch,omitempty"`
	Commit *string `json:"commit,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type Components1GipwwrSchemasWebhookMarketplacePurchaseChangedPropertiesMarketplacePurchaseOneof1 struct {
	// REQUIRED
	NextBillingDate *string `json:"next_billing_date,omitempty"`
	Account *WebhookMarketplacePurchaseChangedMarketplacePurchase1Account `json:"account,omitempty"`
	BillingCycle *string `json:"billing_cycle,omitempty"`
	FreeTrialEndsOn *string `json:"free_trial_ends_on,omitempty"`
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`
	Plan *WebhookMarketplacePurchaseChangedMarketplacePurchase1Plan `json:"plan,omitempty"`
	UnitCount *int32 `json:"unit_count,omitempty"`
}

type Components1Hl57LySchemasWebhookIssueCommentCreatedPropertiesIssueOneof1 struct {
	// REQUIRED; User
	Assignee *WebhookIssueCommentCreatedIssue1Assignee `json:"assignee,omitempty"`

	// REQUIRED
	Labels []*WebhookIssueCommentCreatedIssue1LabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED; State of the issue; either 'open' or 'closed'
	State *WebhookIssueCommentCreatedIssue1State `json:"state,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	Assignees []any `json:"assignees,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`
	Body *string `json:"body,omitempty"`
	ClosedAt *string `json:"closed_at,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`

	// Anything
	Milestone any `json:"milestone,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`

	// Anything
	PerformedViaGithubApp any `json:"performed_via_github_app,omitempty"`
	Reactions *WebhookIssueCommentCreatedIssue1Reactions `json:"reactions,omitempty"`
	RepositoryURL *string `json:"repository_url,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookIssueCommentCreatedIssue1User `json:"user,omitempty"`
}

type Components1Iy6Pf6SchemasWebhookPullRequestAutoMergeDisabledPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum1960 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// Components1KvyuqiSchemasWebhookPullRequestReviewThreadUnresolvedPropertiesThreadPropertiesCommentsItemsPropertiesLinksPropertiesSelf
// - Link
type Components1KvyuqiSchemasWebhookPullRequestReviewThreadUnresolvedPropertiesThreadPropertiesCommentsItemsPropertiesLinksPropertiesSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

type Components1Lecw2JSchemasMetadataAdditionalproperties struct {
}

type Components1Mne2VxSchemasWebhookPullRequestReviewRequestedOneof1 struct {
	// REQUIRED
	Action *WebhookPullRequestReviewRequested1Action `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestReviewRequested1PullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; Groups of organization members that gives permissions on specified repositories.
	RequestedTeam *WebhookPullRequestReviewRequested1RequestedTeam `json:"requested_team,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type Components1Mye1WwSchemasWebhookWorkflowJobCompletedPropertiesWorkflowJobOneof1 struct {
	// REQUIRED
	Conclusion *WebhookWorkflowJobCompletedWorkflowJob1Conclusion `json:"conclusion,omitempty"`
	CheckRunURL *string `json:"check_run_url,omitempty"`
	CompletedAt *string `json:"completed_at,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`

	// The name of the current branch.
	HeadBranch *string `json:"head_branch,omitempty"`
	HeadSHA *string `json:"head_sha,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Labels []*string `json:"labels,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	RunAttempt *int32 `json:"run_attempt,omitempty"`
	RunID *int32 `json:"run_id,omitempty"`
	RunURL *string `json:"run_url,omitempty"`
	RunnerGroupID *float32 `json:"runner_group_id,omitempty"`
	RunnerGroupName *string `json:"runner_group_name,omitempty"`
	RunnerID *float32 `json:"runner_id,omitempty"`
	RunnerName *string `json:"runner_name,omitempty"`
	StartedAt *string `json:"started_at,omitempty"`
	Status *string `json:"status,omitempty"`
	Steps []any `json:"steps,omitempty"`
	URL *string `json:"url,omitempty"`

	// The name of the workflow.
	WorkflowName *string `json:"workflow_name,omitempty"`
}

type Components1N228LSchemasWebhookRepositoryVulnerabilityAlertReopenPropertiesAlertOneof1 struct {
	// REQUIRED
	State *WebhookRepositoryVulnerabilityAlertReopenAlert1State `json:"state,omitempty"`
	AffectedPackageName *string `json:"affected_package_name,omitempty"`
	AffectedRange *string `json:"affected_range,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	ExternalIdentifier *string `json:"external_identifier,omitempty"`
	ExternalReference *string `json:"external_reference,omitempty"`
	FixedIn *string `json:"fixed_in,omitempty"`
	GhsaID *string `json:"ghsa_id,omitempty"`
	ID *int32 `json:"id,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`
	Severity *string `json:"severity,omitempty"`
}

type Components1N5ZfokSchemasWebhookPullRequestReviewEditedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2557 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type Components1Njs4FmSchemasWebhookPullRequestOpenedPropertiesPullRequestOneof0PropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2319 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// Components1NwcxrdSchemasWebhookPullRequestReviewThreadResolvedPropertiesThreadPropertiesCommentsItemsPropertiesLinksPropertiesPullRequest
// - Link
type Components1NwcxrdSchemasWebhookPullRequestReviewThreadResolvedPropertiesThreadPropertiesCommentsItemsPropertiesLinksPropertiesPullRequest struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

type Components1O4ZwjiSchemasWebhookPullRequestSynchronizePropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2804 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type Components1O87TrjSchemasWebhookMarketplacePurchasePendingChangeCancelledPropertiesMarketplacePurchaseOneof1 struct {
	// REQUIRED
	NextBillingDate *string `json:"next_billing_date,omitempty"`
}

type Components1Oc7J4DSchemasWebhookProjectCardMovedPropertiesProjectCardOneof1 struct {
	// REQUIRED
	AfterID *float32 `json:"after_id,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	ColumnID *int32 `json:"column_id,omitempty"`
	ColumnURL *string `json:"column_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Creator *WebhookProjectCardMovedProjectCard1Creator `json:"creator,omitempty"`
	ID *int32 `json:"id,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Note *string `json:"note,omitempty"`
	ProjectURL *string `json:"project_url,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// Components1Oe8XblSchemasWebhookCheckSuiteCompletedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesHeadPropertiesRepo
// - Repo Ref
type Components1Oe8XblSchemasWebhookCheckSuiteCompletedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesHeadPropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type Components1Onb0R9SchemasWebhookIssuesLockedPropertiesIssueOneof1 struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesLockedIssue1ActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Locked *Enum728 `json:"locked,omitempty"`

	// Anything
	Assignee any `json:"assignee,omitempty"`
	Assignees []any `json:"assignees,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`
	Body *string `json:"body,omitempty"`
	ClosedAt *string `json:"closed_at,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Labels []any `json:"labels,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`

	// Anything
	Milestone any `json:"milestone,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`

	// Anything
	PerformedViaGithubApp any `json:"performed_via_github_app,omitempty"`
	Reactions *WebhookIssuesLockedIssue1Reactions `json:"reactions,omitempty"`
	RepositoryURL *string `json:"repository_url,omitempty"`
	State *string `json:"state,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookIssuesLockedIssue1User `json:"user,omitempty"`
}

type Components1R5Pj8PSchemasWebhookPullRequestReviewThreadResolvedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2743 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type Components1Rl2SdjSchemasWebhookPullRequestReadyForReviewPropertiesPullRequestOneof0PropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2351 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type Components1Rqb4K9SchemasWebhookDiscussionUnansweredPropertiesDiscussionAnyof1 struct {
	// REQUIRED; Anything
	AnswerChosenAt any `json:"answer_chosen_at,omitempty"`

	// REQUIRED; Anything
	AnswerChosenBy any `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionUnansweredDiscussion1Category `json:"category,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`
	Body *string `json:"body,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`
	Reactions *WebhookDiscussionUnansweredDiscussion1Reactions `json:"reactions,omitempty"`
	RepositoryURL *string `json:"repository_url,omitempty"`
	State *string `json:"state,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
	Title *string `json:"title,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookDiscussionUnansweredDiscussion1User `json:"user,omitempty"`
}

type Components1Um5McjSchemasWebhookReleasePublishedPropertiesReleaseOneof1 struct {
	// REQUIRED
	PublishedAt *time.Time `json:"published_at,omitempty"`
	Assets []any `json:"assets,omitempty"`
	AssetsURL *string `json:"assets_url,omitempty"`
	Author *WebhookReleasePublishedRelease1Author `json:"author,omitempty"`
	Body *string `json:"body,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Prerelease *bool `json:"prerelease,omitempty"`
	TagName *string `json:"tag_name,omitempty"`
	TarballURL *string `json:"tarball_url,omitempty"`
	TargetCommitish *string `json:"target_commitish,omitempty"`
	URL *string `json:"url,omitempty"`
	UploadURL *string `json:"upload_url,omitempty"`
	ZipballURL *string `json:"zipball_url,omitempty"`
}

// Components1V3Uvr7SchemasWebhookWorkflowRunCompletedPropertiesWorkflowRunOneof0PropertiesPullRequestsItemsPropertiesHeadPropertiesRepo
// - Repo Ref
type Components1V3Uvr7SchemasWebhookWorkflowRunCompletedPropertiesWorkflowRunOneof0PropertiesPullRequestsItemsPropertiesHeadPropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type Components1W1Nt7SSchemasWebhookStatusPropertiesCommitPropertiesAuthorOneof1 struct {
	// REQUIRED
	Date *string `json:"date,omitempty"`
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
}

type Components1Xj6672SchemasWebhookPullRequestMilestonedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2288 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// Components1Yorx5LSchemasWebhookCheckSuiteRequestedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesBasePropertiesRepo
// - Repo Ref
type Components1Yorx5LSchemasWebhookCheckSuiteRequestedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesBasePropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type Components1Yr9X92SchemasWebhookPullRequestReopenedPropertiesPullRequestOneof0PropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2391 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// Components1Yu68GaSchemasWebhookCheckSuiteRerequestedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesHeadPropertiesRepo
// - Repo Ref
type Components1Yu68GaSchemasWebhookCheckSuiteRerequestedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesHeadPropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// Components1Yyin93SchemasWebhookCheckSuiteCompletedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesBasePropertiesRepo
// - Repo Ref
type Components1Yyin93SchemasWebhookCheckSuiteCompletedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesBasePropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// Components1YzsvksSchemasWebhookWorkflowRunRequestedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesBasePropertiesRepo
// - Repo Ref
type Components1YzsvksSchemasWebhookWorkflowRunRequestedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesBasePropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type Components2UfyedSchemasWebhookPullRequestAutoMergeEnabledPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum1991 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type Components2W5SemSchemasWebhookPullRequestReviewSubmittedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2719 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// Components33M5EtSchemasWebhookCheckSuiteRequestedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesHeadPropertiesRepo
// - Repo Ref
type Components33M5EtSchemasWebhookCheckSuiteRequestedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesHeadPropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type Components424C1SchemasWebhookPullRequestReviewRequestRemovedOneof1 struct {
	// REQUIRED
	Action *WebhookPullRequestReviewRequestRemoved1Action `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestReviewRequestRemoved1PullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; Groups of organization members that gives permissions on specified repositories.
	RequestedTeam *WebhookPullRequestReviewRequestRemoved1RequestedTeam `json:"requested_team,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type Components42BwcuResponsesActionsRunnerLabelsReadonlyContentApplicationJSONSchema struct {
	// REQUIRED
	Labels []*RunnerLabel `json:"labels,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Components46VeajSchemasWebhookReleaseUnpublishedPropertiesReleaseOneof1 struct {
	// REQUIRED
	PublishedAt *string `json:"published_at,omitempty"`
	Assets []any `json:"assets,omitempty"`
	AssetsURL *string `json:"assets_url,omitempty"`
	Author *WebhookReleaseUnpublishedRelease1Author `json:"author,omitempty"`
	Body *string `json:"body,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Prerelease *bool `json:"prerelease,omitempty"`
	TagName *string `json:"tag_name,omitempty"`
	TarballURL *string `json:"tarball_url,omitempty"`
	TargetCommitish *string `json:"target_commitish,omitempty"`
	URL *string `json:"url,omitempty"`
	UploadURL *string `json:"upload_url,omitempty"`
	ZipballURL *string `json:"zipball_url,omitempty"`
}

type Components4Fvb3WSchemasEnvironmentPropertiesProtectionRulesItemsAnyof2 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`
}

type Components4My0ChSchemasWebhookPullRequestLockedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2257 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type Components4N08KpSchemasWebhookProjectsV2ItemEditedPropertiesChangesOneof0 struct {
	// REQUIRED
	FieldValue *WebhookProjectsV2ItemEditedChanges0FieldValue `json:"field_value,omitempty"`
}

type Components4NzdhxParametersWorkflowIDSchema string

type Components4Qru5USchemasWebhookPullRequestReviewRequestRemovedOneof0PropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2590 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type Components57SvwzSchemasGistSimplePropertiesFilesAdditionalproperties struct {
	Content *string `json:"content,omitempty"`
	Filename *string `json:"filename,omitempty"`
	Language *string `json:"language,omitempty"`
	RawURL *string `json:"raw_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
	Truncated *bool `json:"truncated,omitempty"`
	Type *string `json:"type,omitempty"`
}

type Components7MjonlSchemasWebhookPullRequestReviewThreadUnresolvedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2769 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type Components7NrqceSchemasWebhookDiscussionAnsweredPropertiesDiscussionOneof1 struct {
	// REQUIRED
	AnswerChosenAt *time.Time `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionAnsweredDiscussion1AnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionAnsweredDiscussion1Category `json:"category,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`
	Body *string `json:"body,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`
	Reactions *WebhookDiscussionAnsweredDiscussion1Reactions `json:"reactions,omitempty"`
	RepositoryURL *string `json:"repository_url,omitempty"`
	State *string `json:"state,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
	Title *string `json:"title,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookDiscussionAnsweredDiscussion1User `json:"user,omitempty"`
}

type Components852QgjSchemasWebhookPullRequestClosedPropertiesPullRequestOneof1 struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Merged *bool `json:"merged,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestClosedPullRequest1State `json:"state,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	Additions *int32 `json:"additions,omitempty"`

	// Anything
	Assignee any `json:"assignee,omitempty"`
	Assignees []any `json:"assignees,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`

	// Anything
	AutoMerge any `json:"auto_merge,omitempty"`
	Base *WebhookPullRequestClosedPullRequest1Base `json:"base,omitempty"`
	Body *string `json:"body,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`
	DiffURL *string `json:"diff_url,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Head *WebhookPullRequestClosedPullRequest1Head `json:"head,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IssueURL *string `json:"issue_url,omitempty"`
	Labels []any `json:"labels,omitempty"`
	Links *WebhookPullRequestClosedPullRequest1Links `json:"_links,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	MergedAt *string `json:"merged_at,omitempty"`

	// Anything
	MergedBy any `json:"merged_by,omitempty"`

	// Anything
	Milestone any `json:"milestone,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	RequestedReviewers []any `json:"requested_reviewers,omitempty"`
	RequestedTeams []any `json:"requested_teams,omitempty"`
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookPullRequestClosedPullRequest1User `json:"user,omitempty"`
}

type Components87KnyySchemasGistSimplePropertiesForkOfPropertiesFilesAdditionalproperties struct {
	Filename *string `json:"filename,omitempty"`
	Language *string `json:"language,omitempty"`
	RawURL *string `json:"raw_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
	Type *string `json:"type,omitempty"`
}

// Components96Tu29SchemasWebhookCheckSuiteRerequestedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesBasePropertiesRepo
// - Repo Ref
type Components96Tu29SchemasWebhookCheckSuiteRerequestedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesBasePropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type Components9M39TrSchemasWebhookPullRequestReviewCommentCreatedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2434 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// Components9SkyhcSchemasWebhookPullRequestReviewThreadUnresolvedPropertiesThreadPropertiesCommentsItemsPropertiesLinksPropertiesPullRequest
// - Link
type Components9SkyhcSchemasWebhookPullRequestReviewThreadUnresolvedPropertiesThreadPropertiesCommentsItemsPropertiesLinksPropertiesPullRequest struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

type Components9W0Z0TSchemasWebhookWorkflowRunCompletedPropertiesWorkflowRunOneof1 struct {
	// REQUIRED
	Conclusion *WebhookWorkflowRunCompletedWorkflowRun1Conclusion `json:"conclusion,omitempty"`
	Actor *WebhookWorkflowRunCompletedWorkflowRun1Actor `json:"actor,omitempty"`
	ArtifactsURL *string `json:"artifacts_url,omitempty"`
	CancelURL *string `json:"cancel_url,omitempty"`
	CheckSuiteID *int32 `json:"check_suite_id,omitempty"`
	CheckSuiteNodeID *string `json:"check_suite_node_id,omitempty"`
	CheckSuiteURL *string `json:"check_suite_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Event *string `json:"event,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HeadBranch *string `json:"head_branch,omitempty"`
	HeadCommit *WebhookWorkflowRunCompletedWorkflowRun1HeadCommit `json:"head_commit,omitempty"`
	HeadRepository *WebhookWorkflowRunCompletedWorkflowRun1HeadRepository `json:"head_repository,omitempty"`
	HeadSHA *string `json:"head_sha,omitempty"`
	ID *int32 `json:"id,omitempty"`
	JobsURL *string `json:"jobs_url,omitempty"`
	LogsURL *string `json:"logs_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Path *string `json:"path,omitempty"`
	PreviousAttemptURL *string `json:"previous_attempt_url,omitempty"`
	PullRequests []any `json:"pull_requests,omitempty"`
	ReferencedWorkflows []*WebhookWorkflowRunCompletedWorkflowRun1ReferencedWorkflowsItem `json:"referenced_workflows,omitempty"`
	Repository *WebhookWorkflowRunCompletedWorkflowRun1Repository `json:"repository,omitempty"`
	RerunURL *string `json:"rerun_url,omitempty"`
	RunAttempt *int32 `json:"run_attempt,omitempty"`
	RunNumber *int32 `json:"run_number,omitempty"`
	RunStartedAt *string `json:"run_started_at,omitempty"`
	Status *string `json:"status,omitempty"`
	TriggeringActor *WebhookWorkflowRunCompletedWorkflowRun1TriggeringActor `json:"triggering_actor,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	WorkflowID *int32 `json:"workflow_id,omitempty"`
	WorkflowURL *string `json:"workflow_url,omitempty"`
}

type ComponentsBa9N8YSchemasWebhookProjectsV2ItemEditedPropertiesChangesOneof1 struct {
	// REQUIRED
	Body *WebhookProjectsV2ItemEditedChanges1Body `json:"body,omitempty"`
}

type ComponentsBe36KvSchemasWebhookPullRequestReviewRequestedOneof0 struct {
	// REQUIRED
	Action *WebhookPullRequestReviewRequested0Action `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestReviewRequested0PullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; User
	RequestedReviewer *WebhookPullRequestReviewRequested0RequestedReviewer `json:"requested_reviewer,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type ComponentsBj8L9LSchemasWebhookPullRequestReviewRequestedOneof0PropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2655 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type ComponentsCorrpiSchemasWebhookPullRequestDequeuedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2133 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type ComponentsDhs7QhResponsesActionsRunnerLabelsContentApplicationJSONSchema struct {
	// REQUIRED
	Labels []*RunnerLabel `json:"labels,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type ComponentsDley9CSchemasWebhookIssuesMilestonedPropertiesIssueOneof1 struct {
	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesMilestonedIssue1Milestone `json:"milestone,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// Anything
	Assignee any `json:"assignee,omitempty"`
	Assignees []any `json:"assignees,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`
	Body *string `json:"body,omitempty"`
	ClosedAt *string `json:"closed_at,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Labels []any `json:"labels,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`

	// Anything
	PerformedViaGithubApp any `json:"performed_via_github_app,omitempty"`
	Reactions *WebhookIssuesMilestonedIssue1Reactions `json:"reactions,omitempty"`
	RepositoryURL *string `json:"repository_url,omitempty"`
	State *string `json:"state,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookIssuesMilestonedIssue1User `json:"user,omitempty"`
}

type ComponentsDryplzSchemasWebhookRepositoryVulnerabilityAlertCreatePropertiesAlertOneof1 struct {
	// REQUIRED
	State *WebhookRepositoryVulnerabilityAlertCreateAlert1State `json:"state,omitempty"`
	AffectedPackageName *string `json:"affected_package_name,omitempty"`
	AffectedRange *string `json:"affected_range,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	ExternalIdentifier *string `json:"external_identifier,omitempty"`
	ExternalReference *string `json:"external_reference,omitempty"`
	FixedIn *string `json:"fixed_in,omitempty"`
	GhsaID *string `json:"ghsa_id,omitempty"`
	ID *int32 `json:"id,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`
	Severity *string `json:"severity,omitempty"`
}

type ComponentsEgrrdaSchemasWebhookPullRequestReviewDismissedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2532 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type ComponentsFgvc1CSchemasWebhookRegistryPackagePublishedPropertiesRegistryPackagePropertiesPackageVersionPropertiesNugetMetadataItemsPropertiesValueOneof3 struct {
	Branch *string `json:"branch,omitempty"`
	Commit *string `json:"commit,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type ComponentsGnbu5MSchemasWebhookIssuesUnlockedPropertiesIssueOneof1 struct {
	// REQUIRED; Anything
	ActiveLockReason any `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Locked *Enum706 `json:"locked,omitempty"`

	// Anything
	Assignee any `json:"assignee,omitempty"`
	Assignees []any `json:"assignees,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`
	Body *string `json:"body,omitempty"`
	ClosedAt *string `json:"closed_at,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Labels []any `json:"labels,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`

	// Anything
	Milestone any `json:"milestone,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`

	// Anything
	PerformedViaGithubApp any `json:"performed_via_github_app,omitempty"`
	Reactions *WebhookIssuesUnlockedIssue1Reactions `json:"reactions,omitempty"`
	RepositoryURL *string `json:"repository_url,omitempty"`
	State *string `json:"state,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookIssuesUnlockedIssue1User `json:"user,omitempty"`
}

type ComponentsH4Uh0BSchemasIssuePropertiesLabelsItemsOneof1 struct {
	Color *string `json:"color,omitempty"`
	Default *bool `json:"default,omitempty"`
	Description *string `json:"description,omitempty"`
	ID *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	URL *string `json:"url,omitempty"`
}

type ComponentsHs0NrdSchemasWebhookDiscussionCreatedPropertiesDiscussionOneof1 struct {
	// REQUIRED; Anything
	AnswerChosenAt any `json:"answer_chosen_at,omitempty"`

	// REQUIRED; Anything
	AnswerChosenBy any `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED
	Locked *Enum706 `json:"locked,omitempty"`

	// REQUIRED
	State *WebhookDiscussionCreatedDiscussion1State `json:"state,omitempty"`

	// Anything
	ActiveLockReason any `json:"active_lock_reason,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`
	Body *string `json:"body,omitempty"`
	Category *WebhookDiscussionCreatedDiscussion1Category `json:"category,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`
	Reactions *WebhookDiscussionCreatedDiscussion1Reactions `json:"reactions,omitempty"`
	RepositoryURL *string `json:"repository_url,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
	Title *string `json:"title,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookDiscussionCreatedDiscussion1User `json:"user,omitempty"`
}

type ComponentsHy4Th3SchemasWebhookPullRequestUnassignedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2836 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type ComponentsI31KwiSchemasWebhookPullRequestReviewRequestRemovedOneof0 struct {
	// REQUIRED
	Action *WebhookPullRequestReviewRequestRemoved0Action `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestReviewRequestRemoved0PullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; User
	RequestedReviewer *WebhookPullRequestReviewRequestRemoved0RequestedReviewer `json:"requested_reviewer,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type ComponentsIsyf15SchemasWebhookPullRequestEnqueuedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2195 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type ComponentsJ2U0OwSchemasWebhookPullRequestReviewCommentDeletedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2468 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type ComponentsJrfx22SchemasWebhookStatusPropertiesCommitPropertiesCommitterOneof1 struct {
	// REQUIRED
	Date *string `json:"date,omitempty"`
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
}

type ComponentsKqrhztSchemasWebhookIssueCommentEditedPropertiesIssueOneof1 struct {
	// REQUIRED; User
	Assignee *WebhookIssueCommentEditedIssue1Assignee `json:"assignee,omitempty"`

	// REQUIRED
	Labels []*WebhookIssueCommentEditedIssue1LabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED; State of the issue; either 'open' or 'closed'
	State *WebhookIssueCommentEditedIssue1State `json:"state,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	Assignees []any `json:"assignees,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`
	Body *string `json:"body,omitempty"`
	ClosedAt *string `json:"closed_at,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`

	// Anything
	Milestone any `json:"milestone,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`

	// Anything
	PerformedViaGithubApp any `json:"performed_via_github_app,omitempty"`
	Reactions *WebhookIssueCommentEditedIssue1Reactions `json:"reactions,omitempty"`
	RepositoryURL *string `json:"repository_url,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookIssueCommentEditedIssue1User `json:"user,omitempty"`
}

type ComponentsL7RmjaSchemasWebhookPullRequestReviewCommentEditedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2502 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type ComponentsMne9DhSchemasWebhookPullRequestClosedPropertiesPullRequestOneof0PropertiesRequestedReviewersItemsOneof1PropertiesParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2022 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type ComponentsNnb3M3SchemasWebhookRepositoryVulnerabilityAlertDismissPropertiesAlertOneof1 struct {
	// REQUIRED
	DismissReason *string `json:"dismiss_reason,omitempty"`

	// REQUIRED
	DismissedAt *string `json:"dismissed_at,omitempty"`

	// REQUIRED; User
	Dismisser *WebhookRepositoryVulnerabilityAlertDismissAlert1Dismisser `json:"dismisser,omitempty"`

	// REQUIRED
	State *WebhookRepositoryVulnerabilityAlertDismissAlert1State `json:"state,omitempty"`
	AffectedPackageName *string `json:"affected_package_name,omitempty"`
	AffectedRange *string `json:"affected_range,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DismissComment *string `json:"dismiss_comment,omitempty"`
	ExternalIdentifier *string `json:"external_identifier,omitempty"`
	ExternalReference *string `json:"external_reference,omitempty"`
	FixedIn *string `json:"fixed_in,omitempty"`
	GhsaID *string `json:"ghsa_id,omitempty"`
	ID *int32 `json:"id,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`
	Severity *string `json:"severity,omitempty"`
}

// ComponentsNnhm91SchemasWebhookDeploymentStatusCreatedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesBasePropertiesRepo
// - Repo Ref
type ComponentsNnhm91SchemasWebhookDeploymentStatusCreatedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesBasePropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type ComponentsQsenzuSchemasWebhookDiscussionUnlockedPropertiesDiscussionAnyof1 struct {
	// REQUIRED
	Locked *Enum706 `json:"locked,omitempty"`

	// REQUIRED
	State *WebhookDiscussionUnlockedDiscussion1State `json:"state,omitempty"`

	// Anything
	ActiveLockReason any `json:"active_lock_reason,omitempty"`

	// Anything
	AnswerChosenAt any `json:"answer_chosen_at,omitempty"`

	// Anything
	AnswerChosenBy any `json:"answer_chosen_by,omitempty"`

	// Anything
	AnswerHTMLURL any `json:"answer_html_url,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`
	Body *string `json:"body,omitempty"`
	Category *WebhookDiscussionUnlockedDiscussion1Category `json:"category,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`
	Reactions *WebhookDiscussionUnlockedDiscussion1Reactions `json:"reactions,omitempty"`
	RepositoryURL *string `json:"repository_url,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
	Title *string `json:"title,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookDiscussionUnlockedDiscussion1User `json:"user,omitempty"`
}

type ComponentsR3H1I5SchemasWebhookMarketplacePurchaseCancelledPropertiesMarketplacePurchaseOneof1 struct {
	// REQUIRED
	NextBillingDate *string `json:"next_billing_date,omitempty"`
	Account *WebhookMarketplacePurchaseCancelledMarketplacePurchase1Account `json:"account,omitempty"`
	BillingCycle *string `json:"billing_cycle,omitempty"`
	FreeTrialEndsOn *string `json:"free_trial_ends_on,omitempty"`
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`
	Plan *WebhookMarketplacePurchaseCancelledMarketplacePurchase1Plan `json:"plan,omitempty"`
	UnitCount *int32 `json:"unit_count,omitempty"`
}

// ComponentsSsn1JmSchemasWebhookWorkflowRunInProgressPropertiesWorkflowRunOneof0PropertiesPullRequestsItemsPropertiesHeadPropertiesRepo
// - Repo Ref
type ComponentsSsn1JmSchemasWebhookWorkflowRunInProgressPropertiesWorkflowRunOneof0PropertiesPullRequestsItemsPropertiesHeadPropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type ComponentsT1M0T8SchemasWebhookPullRequestOpenedPropertiesPullRequestOneof1 struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	ClosedAt *string `json:"closed_at,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *string `json:"merged_at,omitempty"`

	// REQUIRED; Anything
	MergedBy any `json:"merged_by,omitempty"`

	// REQUIRED
	State *WebhookPullRequestOpenedPullRequest1State `json:"state,omitempty"`
	Additions *int32 `json:"additions,omitempty"`

	// Anything
	Assignee any `json:"assignee,omitempty"`
	Assignees []any `json:"assignees,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`

	// Anything
	AutoMerge any `json:"auto_merge,omitempty"`
	Base *WebhookPullRequestOpenedPullRequest1Base `json:"base,omitempty"`
	Body *string `json:"body,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`
	DiffURL *string `json:"diff_url,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Head *WebhookPullRequestOpenedPullRequest1Head `json:"head,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IssueURL *string `json:"issue_url,omitempty"`
	Labels []any `json:"labels,omitempty"`
	Links *WebhookPullRequestOpenedPullRequest1Links `json:"_links,omitempty"`
	Locked *bool `json:"locked,omitempty"`
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// Anything
	Milestone any `json:"milestone,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	RequestedReviewers []any `json:"requested_reviewers,omitempty"`
	RequestedTeams []any `json:"requested_teams,omitempty"`
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookPullRequestOpenedPullRequest1User `json:"user,omitempty"`
}

// ComponentsT5WxieSchemasWebhookDeploymentCreatedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesHeadPropertiesRepo
// - Repo Ref
type ComponentsT5WxieSchemasWebhookDeploymentCreatedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesHeadPropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type ComponentsU9Pm63SchemasWebhookIssueCommentDeletedPropertiesIssueOneof1 struct {
	// REQUIRED; User
	Assignee *WebhookIssueCommentDeletedIssue1Assignee `json:"assignee,omitempty"`

	// REQUIRED
	Labels []*WebhookIssueCommentDeletedIssue1LabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED; State of the issue; either 'open' or 'closed'
	State *WebhookIssueCommentDeletedIssue1State `json:"state,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	Assignees []any `json:"assignees,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`
	Body *string `json:"body,omitempty"`
	ClosedAt *string `json:"closed_at,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`

	// Anything
	Milestone any `json:"milestone,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`

	// Anything
	PerformedViaGithubApp any `json:"performed_via_github_app,omitempty"`
	Reactions *WebhookIssueCommentDeletedIssue1Reactions `json:"reactions,omitempty"`
	RepositoryURL *string `json:"repository_url,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
	Title *string `json:"title,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookIssueCommentDeletedIssue1User `json:"user,omitempty"`
}

// ComponentsVjsovjSchemasWebhookDeploymentStatusCreatedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesHeadPropertiesRepo
// - Repo Ref
type ComponentsVjsovjSchemasWebhookDeploymentStatusCreatedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesHeadPropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type ComponentsY6F1LySchemasNullableIssuePropertiesLabelsItemsOneof1 struct {
	Color *string `json:"color,omitempty"`
	Default *bool `json:"default,omitempty"`
	Description *string `json:"description,omitempty"`
	ID *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	URL *string `json:"url,omitempty"`
}

// ComponentsYrrx7USchemasWebhookWorkflowRunInProgressPropertiesWorkflowRunOneof0PropertiesPullRequestsItemsPropertiesBasePropertiesRepo
// - Repo Ref
type ComponentsYrrx7USchemasWebhookWorkflowRunInProgressPropertiesWorkflowRunOneof0PropertiesPullRequestsItemsPropertiesBasePropertiesRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type ComponentsZfe6Q7SchemasWebhookDiscussionLockedPropertiesDiscussionAnyof1 struct {
	// REQUIRED
	Locked *Enum728 `json:"locked,omitempty"`

	// REQUIRED
	State *WebhookDiscussionLockedDiscussion1State `json:"state,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// Anything
	AnswerChosenBy any `json:"answer_chosen_by,omitempty"`
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`
	AuthorAssociation *string `json:"author_association,omitempty"`
	Body *string `json:"body,omitempty"`
	Category *WebhookDiscussionLockedDiscussion1Category `json:"category,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Number *int32 `json:"number,omitempty"`
	Reactions *WebhookDiscussionLockedDiscussion1Reactions `json:"reactions,omitempty"`
	RepositoryURL *string `json:"repository_url,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
	Title *string `json:"title,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *WebhookDiscussionLockedDiscussion1User `json:"user,omitempty"`
}

type ContentDirectoryItem struct {
	// REQUIRED
	DownloadURL *string `json:"download_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Links *ContentDirectoryItemLinks `json:"_links,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	Type *ContentDirectoryItemType `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	Content *string `json:"content,omitempty"`
}

type ContentDirectoryItemLinks struct {
	// REQUIRED
	Git *string `json:"git,omitempty"`

	// REQUIRED
	HTML *string `json:"html,omitempty"`

	// REQUIRED
	Self *string `json:"self,omitempty"`
}

// ContentFile - Content File
type ContentFile struct {
	// REQUIRED
	Content *string `json:"content,omitempty"`

	// REQUIRED
	DownloadURL *string `json:"download_url,omitempty"`

	// REQUIRED
	Encoding *string `json:"encoding,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Links *ContentFileLinks `json:"_links,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	Type *ContentFileType `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	SubmoduleGitURL *string `json:"submodule_git_url,omitempty"`
	Target *string `json:"target,omitempty"`
}

type ContentFileLinks struct {
	// REQUIRED
	Git *string `json:"git,omitempty"`

	// REQUIRED
	HTML *string `json:"html,omitempty"`

	// REQUIRED
	Self *string `json:"self,omitempty"`
}

// ContentSubmodule - An object describing a submodule
type ContentSubmodule struct {
	// REQUIRED
	DownloadURL *string `json:"download_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Links *ContentSubmoduleLinks `json:"_links,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	SubmoduleGitURL *string `json:"submodule_git_url,omitempty"`

	// REQUIRED
	Type *ContentSubmoduleType `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type ContentSubmoduleLinks struct {
	// REQUIRED
	Git *string `json:"git,omitempty"`

	// REQUIRED
	HTML *string `json:"html,omitempty"`

	// REQUIRED
	Self *string `json:"self,omitempty"`
}

// ContentSymlink - An object describing a symlink
type ContentSymlink struct {
	// REQUIRED
	DownloadURL *string `json:"download_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Links *ContentSymlinkLinks `json:"_links,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	Target *string `json:"target,omitempty"`

	// REQUIRED
	Type *ContentSymlinkType `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type ContentSymlinkLinks struct {
	// REQUIRED
	Git *string `json:"git,omitempty"`

	// REQUIRED
	HTML *string `json:"html,omitempty"`

	// REQUIRED
	Self *string `json:"self,omitempty"`
}

// ContentTraffic - Content Traffic
type ContentTraffic struct {
	// REQUIRED
	Count *int32 `json:"count,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	Uniques *int32 `json:"uniques,omitempty"`
}

// ContentTree - Content Tree
type ContentTree struct {
	// REQUIRED
	DownloadURL *string `json:"download_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Links *ContentTreeLinks `json:"_links,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	Entries []*ContentTreeEntriesItem `json:"entries,omitempty"`
}

type ContentTreeEntriesItem struct {
	// REQUIRED
	DownloadURL *string `json:"download_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Links *ContentTreeEntriesItemLinks `json:"_links,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	Content *string `json:"content,omitempty"`
}

type ContentTreeEntriesItemLinks struct {
	// REQUIRED
	Git *string `json:"git,omitempty"`

	// REQUIRED
	HTML *string `json:"html,omitempty"`

	// REQUIRED
	Self *string `json:"self,omitempty"`
}

type ContentTreeLinks struct {
	// REQUIRED
	Git *string `json:"git,omitempty"`

	// REQUIRED
	HTML *string `json:"html,omitempty"`

	// REQUIRED
	Self *string `json:"self,omitempty"`
}

// Contributor
type Contributor struct {
	// REQUIRED
	Contributions *int32 `json:"contributions,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// ContributorActivity - Contributor Activity
type ContributorActivity struct {
	// REQUIRED; A GitHub user.
	Author *NullableSimpleUser `json:"author,omitempty"`

	// REQUIRED
	Total *int32 `json:"total,omitempty"`

	// REQUIRED
	Weeks []*ContributorActivityWeeksItem `json:"weeks,omitempty"`
}

type ContributorActivityWeeksItem struct {
	A *int32 `json:"a,omitempty"`
	C *int32 `json:"c,omitempty"`
	D *int32 `json:"d,omitempty"`
	W *int32 `json:"w,omitempty"`
}

// ConvertedNoteToIssueEvent - Converted Note to Issue Issue Event
type ConvertedNoteToIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *Integration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	ProjectCard *ConvertedNoteToIssueEventProjectCard `json:"project_card,omitempty"`
}

type ConvertedNoteToIssueEventProjectCard struct {
	// REQUIRED
	ColumnName *string `json:"column_name,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	ProjectID *int32 `json:"project_id,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	PreviousColumnName *string `json:"previous_column_name,omitempty"`
}

// DeleteContentSchemaAuthor - object containing information about the author.
type DeleteContentSchemaAuthor struct {
	// The email of the author (or committer) of the commit
	Email *string `json:"email,omitempty"`

	// The name of the author (or committer) of the commit
	Name *string `json:"name,omitempty"`
}

// DeleteContentSchemaCommitter - object containing information about the committer.
type DeleteContentSchemaCommitter struct {
	// The email of the author (or committer) of the commit
	Email *string `json:"email,omitempty"`

	// The name of the author (or committer) of the commit
	Name *string `json:"name,omitempty"`
}

// DemilestonedIssueEvent - Demilestoned Issue Event
type DemilestonedIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Milestone *DemilestonedIssueEventMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type DemilestonedIssueEventMilestone struct {
	// REQUIRED
	Title *string `json:"title,omitempty"`
}

// DependabotAlert - A Dependabot alert.
type DependabotAlert struct {
	// REQUIRED; A GitHub user.
	DismissedBy *NullableSimpleUser `json:"dismissed_by,omitempty"`

	// REQUIRED; An optional comment associated with the alert's dismissal.
	DismissedComment *string `json:"dismissed_comment,omitempty"`

	// REQUIRED; The reason that the alert was dismissed.
	DismissedReason *DependabotAlertDismissedReason `json:"dismissed_reason,omitempty"`

	// READ-ONLY; The time that the alert was created in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty" azure:"ro"`

	// READ-ONLY; Details for the vulnerable dependency.
	Dependency *DependabotAlertDependency `json:"dependency,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was dismissed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	DismissedAt *time.Time `json:"dismissed_at,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was no longer detected and was considered fixed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	FixedAt *time.Time `json:"fixed_at,omitempty" azure:"ro"`

	// READ-ONLY; The GitHub URL of the alert resource.
	HTMLURL *string `json:"html_url,omitempty" azure:"ro"`

	// READ-ONLY; The security alert number.
	Number *int32 `json:"number,omitempty" azure:"ro"`

	// READ-ONLY; Details for the GitHub Security Advisory.
	SecurityAdvisory *DependabotAlertSecurityAdvisory `json:"security_advisory,omitempty" azure:"ro"`

	// READ-ONLY; Details pertaining to one vulnerable version range for the advisory.
	SecurityVulnerability *DependabotAlertSecurityVulnerability `json:"security_vulnerability,omitempty" azure:"ro"`

	// READ-ONLY; The state of the Dependabot alert.
	State *DependabotAlertState `json:"state,omitempty" azure:"ro"`

	// READ-ONLY; The REST API URL of the alert resource.
	URL *string `json:"url,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was last updated in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	UpdatedAt *time.Time `json:"updated_at,omitempty" azure:"ro"`
}

// DependabotAlertDependency - Details for the vulnerable dependency.
type DependabotAlertDependency struct {
	// READ-ONLY; The full path to the dependency manifest file, relative to the root of the repository.
	ManifestPath *string `json:"manifest_path,omitempty" azure:"ro"`

	// READ-ONLY; Details for the vulnerable package.
	Package *DependabotAlertPackage `json:"package,omitempty" azure:"ro"`

	// READ-ONLY; The execution scope of the vulnerable dependency.
	Scope *DependabotAlertDependencyScope `json:"scope,omitempty" azure:"ro"`
}

// DependabotAlertPackage - Details for the vulnerable package.
type DependabotAlertPackage struct {
	// READ-ONLY; The package's language or package management ecosystem.
	Ecosystem *string `json:"ecosystem,omitempty" azure:"ro"`

	// READ-ONLY; The unique package name within its ecosystem.
	Name *string `json:"name,omitempty" azure:"ro"`
}

// DependabotAlertSecurityAdvisory - Details for the GitHub Security Advisory.
type DependabotAlertSecurityAdvisory struct {
	// READ-ONLY; The unique CVE ID assigned to the advisory.
	CveID *string `json:"cve_id,omitempty" azure:"ro"`

	// READ-ONLY; Details for the advisory pertaining to the Common Vulnerability Scoring System.
	Cvss *DependabotAlertSecurityAdvisoryCvss `json:"cvss,omitempty" azure:"ro"`

	// READ-ONLY; Details for the advisory pertaining to Common Weakness Enumeration.
	Cwes []*DependabotAlertSecurityAdvisoryCwesItem `json:"cwes,omitempty" azure:"ro"`

	// READ-ONLY; A long-form Markdown-supported description of the advisory.
	Description *string `json:"description,omitempty" azure:"ro"`

	// READ-ONLY; The unique GitHub Security Advisory ID assigned to the advisory.
	GhsaID *string `json:"ghsa_id,omitempty" azure:"ro"`

	// READ-ONLY; Values that identify this advisory among security information sources.
	Identifiers []*DependabotAlertSecurityAdvisoryIdentifiersItem `json:"identifiers,omitempty" azure:"ro"`

	// READ-ONLY; The time that the advisory was published in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	PublishedAt *time.Time `json:"published_at,omitempty" azure:"ro"`

	// READ-ONLY; Links to additional advisory information.
	References []*DependabotAlertSecurityAdvisoryReferencesItem `json:"references,omitempty" azure:"ro"`

	// READ-ONLY; The severity of the advisory.
	Severity *DependabotAlertSecurityAdvisorySeverity `json:"severity,omitempty" azure:"ro"`

	// READ-ONLY; A short, plain text summary of the advisory.
	Summary *string `json:"summary,omitempty" azure:"ro"`

	// READ-ONLY; The time that the advisory was last modified in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	UpdatedAt *time.Time `json:"updated_at,omitempty" azure:"ro"`

	// READ-ONLY; Vulnerable version range information for the advisory.
	Vulnerabilities []*DependabotAlertSecurityVulnerability `json:"vulnerabilities,omitempty" azure:"ro"`

	// READ-ONLY; The time that the advisory was withdrawn in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	WithdrawnAt *time.Time `json:"withdrawn_at,omitempty" azure:"ro"`
}

// DependabotAlertSecurityAdvisoryCvss - Details for the advisory pertaining to the Common Vulnerability Scoring System.
type DependabotAlertSecurityAdvisoryCvss struct {
	// READ-ONLY; The overall CVSS score of the advisory.
	Score *float32 `json:"score,omitempty" azure:"ro"`

	// READ-ONLY; The full CVSS vector string for the advisory.
	VectorString *string `json:"vector_string,omitempty" azure:"ro"`
}

// DependabotAlertSecurityAdvisoryCwesItem - A CWE weakness assigned to the advisory.
type DependabotAlertSecurityAdvisoryCwesItem struct {
	// READ-ONLY; The unique CWE ID.
	CweID *string `json:"cwe_id,omitempty" azure:"ro"`

	// READ-ONLY; The short, plain text name of the CWE.
	Name *string `json:"name,omitempty" azure:"ro"`
}

// DependabotAlertSecurityAdvisoryIdentifiersItem - An advisory identifier.
type DependabotAlertSecurityAdvisoryIdentifiersItem struct {
	// READ-ONLY; The type of advisory identifier.
	Type *DependabotAlertSecurityAdvisoryIdentifiersItemType `json:"type,omitempty" azure:"ro"`

	// READ-ONLY; The value of the advisory identifer.
	Value *string `json:"value,omitempty" azure:"ro"`
}

// DependabotAlertSecurityAdvisoryReferencesItem - A link to additional advisory information.
type DependabotAlertSecurityAdvisoryReferencesItem struct {
	// READ-ONLY; The URL of the reference.
	URL *string `json:"url,omitempty" azure:"ro"`
}

// DependabotAlertSecurityVulnerability - Details pertaining to one vulnerable version range for the advisory.
type DependabotAlertSecurityVulnerability struct {
	// READ-ONLY; Details pertaining to the package version that patches this vulnerability.
	FirstPatchedVersion *DependabotAlertSecurityVulnerabilityFirstPatchedVersion `json:"first_patched_version,omitempty" azure:"ro"`

	// READ-ONLY; Details for the vulnerable package.
	Package *DependabotAlertPackage `json:"package,omitempty" azure:"ro"`

	// READ-ONLY; The severity of the vulnerability.
	Severity *DependabotAlertSecurityVulnerabilitySeverity `json:"severity,omitempty" azure:"ro"`

	// READ-ONLY; Conditions that identify vulnerable versions of this vulnerability's package.
	VulnerableVersionRange *string `json:"vulnerable_version_range,omitempty" azure:"ro"`
}

// DependabotAlertSecurityVulnerabilityFirstPatchedVersion - Details pertaining to the package version that patches this vulnerability.
type DependabotAlertSecurityVulnerabilityFirstPatchedVersion struct {
	// READ-ONLY; The package version that patches this vulnerability.
	Identifier *string `json:"identifier,omitempty" azure:"ro"`
}

// DependabotAlertWithRepository - A Dependabot alert.
type DependabotAlertWithRepository struct {
	// REQUIRED; A GitHub user.
	DismissedBy *NullableSimpleUser `json:"dismissed_by,omitempty"`

	// REQUIRED; An optional comment associated with the alert's dismissal.
	DismissedComment *string `json:"dismissed_comment,omitempty"`

	// REQUIRED; The reason that the alert was dismissed.
	DismissedReason *DependabotAlertWithRepositoryDismissedReason `json:"dismissed_reason,omitempty"`

	// REQUIRED; A GitHub repository.
	Repository *SimpleRepository `json:"repository,omitempty"`

	// READ-ONLY; The time that the alert was created in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty" azure:"ro"`

	// READ-ONLY; Details for the vulnerable dependency.
	Dependency *DependabotAlertWithRepositoryDependency `json:"dependency,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was dismissed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	DismissedAt *time.Time `json:"dismissed_at,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was no longer detected and was considered fixed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	FixedAt *time.Time `json:"fixed_at,omitempty" azure:"ro"`

	// READ-ONLY; The GitHub URL of the alert resource.
	HTMLURL *string `json:"html_url,omitempty" azure:"ro"`

	// READ-ONLY; The security alert number.
	Number *int32 `json:"number,omitempty" azure:"ro"`

	// READ-ONLY; Details for the GitHub Security Advisory.
	SecurityAdvisory *DependabotAlertSecurityAdvisory `json:"security_advisory,omitempty" azure:"ro"`

	// READ-ONLY; Details pertaining to one vulnerable version range for the advisory.
	SecurityVulnerability *DependabotAlertSecurityVulnerability `json:"security_vulnerability,omitempty" azure:"ro"`

	// READ-ONLY; The state of the Dependabot alert.
	State *DependabotAlertWithRepositoryState `json:"state,omitempty" azure:"ro"`

	// READ-ONLY; The REST API URL of the alert resource.
	URL *string `json:"url,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was last updated in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	UpdatedAt *time.Time `json:"updated_at,omitempty" azure:"ro"`
}

// DependabotAlertWithRepositoryDependency - Details for the vulnerable dependency.
type DependabotAlertWithRepositoryDependency struct {
	// READ-ONLY; The full path to the dependency manifest file, relative to the root of the repository.
	ManifestPath *string `json:"manifest_path,omitempty" azure:"ro"`

	// READ-ONLY; Details for the vulnerable package.
	Package *DependabotAlertPackage `json:"package,omitempty" azure:"ro"`

	// READ-ONLY; The execution scope of the vulnerable dependency.
	Scope *DependabotAlertWithRepositoryDependencyScope `json:"scope,omitempty" azure:"ro"`
}

// DependabotPublicKey - The public key used for setting Dependabot Secrets.
type DependabotPublicKey struct {
	// REQUIRED; The Base64 encoded public key.
	Key *string `json:"key,omitempty"`

	// REQUIRED; The identifier for the key.
	KeyID *string `json:"key_id,omitempty"`
}

// DependabotSecret - Set secrets for Dependabot.
type DependabotSecret struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The name of the secret.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

type Dependency struct {
	// Array of package-url (PURLs) of direct child dependencies.
	Dependencies []*string `json:"dependencies,omitempty"`

	// User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
	Metadata map[string]*Components1Lecw2JSchemasMetadataAdditionalproperties `json:"metadata,omitempty"`

	// Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
	PackageURL *string `json:"package_url,omitempty"`

	// A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
	Relationship *DependencyRelationship `json:"relationship,omitempty"`

	// A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development.
// Future versions of this specification may allow for more granular scopes.
	Scope *DependencyScope `json:"scope,omitempty"`
}

type DependencyGraphDiffItem struct {
	// REQUIRED
	ChangeType *DependencyGraphDiffItemChangeType `json:"change_type,omitempty"`

	// REQUIRED
	Ecosystem *string `json:"ecosystem,omitempty"`

	// REQUIRED
	License *string `json:"license,omitempty"`

	// REQUIRED
	Manifest *string `json:"manifest,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PackageURL *string `json:"package_url,omitempty"`

	// REQUIRED; Where the dependency is utilized. development means that the dependency is only utilized in the development environment.
// runtime means that the dependency is utilized at runtime and in the development
// environment.
	Scope *DependencyGraphDiffItemScope `json:"scope,omitempty"`

	// REQUIRED
	SourceRepositoryURL *string `json:"source_repository_url,omitempty"`

	// REQUIRED
	Version *string `json:"version,omitempty"`

	// REQUIRED
	Vulnerabilities []*DependencyGraphDiffPropertiesItemsItem `json:"vulnerabilities,omitempty"`
}

type DependencyGraphDiffPropertiesItemsItem struct {
	// REQUIRED
	AdvisoryGhsaID *string `json:"advisory_ghsa_id,omitempty"`

	// REQUIRED
	AdvisorySummary *string `json:"advisory_summary,omitempty"`

	// REQUIRED
	AdvisoryURL *string `json:"advisory_url,omitempty"`

	// REQUIRED
	Severity *string `json:"severity,omitempty"`
}

// DeployKey - An SSH key granting access to a single repository.
type DeployKey struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	ReadOnly *bool `json:"read_only,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	Verified *bool `json:"verified,omitempty"`
	AddedBy *string `json:"added_by,omitempty"`
	LastUsed *string `json:"last_used,omitempty"`
}

// Deployment - A request for a specific ref(branch,sha,tag) to be deployed
type Deployment struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; A GitHub user.
	Creator *NullableSimpleUser `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED; Name for the target deployment environment.
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; Unique identifier of the deployment
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Payload *DeploymentPayload `json:"payload,omitempty"`

	// REQUIRED; The ref to deploy. This can be a branch, tag, or sha.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; Parameter to specify a task to execute
	Task *string `json:"task,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	OriginalEnvironment *string `json:"original_environment,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// Specifies if the given environment is one that end-users directly interact with. Default: false.
	ProductionEnvironment *bool `json:"production_environment,omitempty"`

	// Specifies if the given environment is will no longer exist at some point in the future. Default: false.
	TransientEnvironment *bool `json:"transient_environment,omitempty"`
}

// DeploymentBranchPolicy - Details of a deployment branch policy.
type DeploymentBranchPolicy struct {
	// The unique identifier of the branch policy.
	ID *int32 `json:"id,omitempty"`

	// The name pattern that branches must match in order to deploy to the environment.
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// DeploymentBranchPolicyNamePattern - Deployment branch policy name pattern
type DeploymentBranchPolicyNamePattern struct {
	// REQUIRED; The name pattern that branches must match in order to deploy to the environment.
// Wildcard characters will not match /. For example, to match branches that begin with release/ and contain an additional
// single slash, use release/*/*. For more information about pattern matching
// syntax, see the Ruby File.fnmatch documentation [https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch].
	Name *string `json:"name,omitempty"`
}

// DeploymentBranchPolicySettings - The type of deployment branch policy for this environment. To allow all branches to deploy,
// set to null.
type DeploymentBranchPolicySettings struct {
	// REQUIRED; Whether only branches that match the specified name patterns can deploy to this environment. If custom_branch_policies
// is true, protected_branches must be false; if custom_branch_policies is false,
// protected_branches must be true.
	CustomBranchPolicies *bool `json:"custom_branch_policies,omitempty"`

	// REQUIRED; Whether only branches with branch protection rules can deploy to this environment. If protected_branches is true,
// custom_branch_policies must be false; if protected_branches is false,
// custom_branch_policies must be true.
	ProtectedBranches *bool `json:"protected_branches,omitempty"`
}

type DeploymentPayload struct {
}

// DeploymentSimple - A deployment created as the result of an Actions check run from a workflow that references an environment
type DeploymentSimple struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED; Name for the target deployment environment.
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; Unique identifier of the deployment
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; Parameter to specify a task to execute
	Task *string `json:"task,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	OriginalEnvironment *string `json:"original_environment,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// Specifies if the given environment is one that end-users directly interact with. Default: false.
	ProductionEnvironment *bool `json:"production_environment,omitempty"`

	// Specifies if the given environment is will no longer exist at some point in the future. Default: false.
	TransientEnvironment *bool `json:"transient_environment,omitempty"`
}

// DeploymentStatus - The status of a deployment.
type DeploymentStatus struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; A GitHub user.
	Creator *NullableSimpleUser `json:"creator,omitempty"`

	// REQUIRED
	DeploymentURL *string `json:"deployment_url,omitempty"`

	// REQUIRED; A short description of the status.
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; The state of the status.
	State *DeploymentStatusState `json:"state,omitempty"`

	// REQUIRED; Deprecated: the URL to associate with this status.
	TargetURL *string `json:"target_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The environment of the deployment that the status is for.
	Environment *string `json:"environment,omitempty"`

	// The URL for accessing your environment.
	EnvironmentURL *string `json:"environment_url,omitempty"`

	// The URL to associate with this status.
	LogURL *string `json:"log_url,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`
}

// DiffEntry - Diff Entry
type DiffEntry struct {
	// REQUIRED
	Additions *int32 `json:"additions,omitempty"`

	// REQUIRED
	BlobURL *string `json:"blob_url,omitempty"`

	// REQUIRED
	Changes *int32 `json:"changes,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	Deletions *int32 `json:"deletions,omitempty"`

	// REQUIRED
	Filename *string `json:"filename,omitempty"`

	// REQUIRED
	RawURL *string `json:"raw_url,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Status *DiffEntryStatus `json:"status,omitempty"`
	Patch *string `json:"patch,omitempty"`
	PreviousFilename *string `json:"previous_filename,omitempty"`
}

// Discussion
type Discussion struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionAnsweredDiscussion0AnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionAnsweredDiscussion0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionAnsweredDiscussion0Category `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionAnsweredDiscussion0State `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionAnsweredDiscussion0User `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionAnsweredDiscussion0Reactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// Discussion0 - Discussion
type Discussion0 struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionCreatedDiscussion0AnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionCreatedDiscussion0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionCreatedDiscussion0Category `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionCreatedDiscussion0State `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionCreatedDiscussion0User `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionCreatedDiscussion0Reactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// Discussion1 - Discussion
type Discussion1 struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionLockedDiscussion0AnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionLockedDiscussion0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionLockedDiscussion0Category `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionLockedDiscussion0State `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionLockedDiscussion0User `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionLockedDiscussion0Reactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// Discussion2 - Discussion
type Discussion2 struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionUnansweredDiscussion0AnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionUnansweredDiscussion0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionUnansweredDiscussion0Category `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionUnansweredDiscussion0State `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionUnansweredDiscussion0User `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionUnansweredDiscussion0Reactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// Discussion3 - Discussion
type Discussion3 struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionUnlockedDiscussion0AnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionUnlockedDiscussion0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionUnlockedDiscussion0Category `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionUnlockedDiscussion0State `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionUnlockedDiscussion0User `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionUnlockedDiscussion0Reactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// Email
type Email struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED
	Primary *bool `json:"primary,omitempty"`

	// REQUIRED
	Verified *bool `json:"verified,omitempty"`

	// REQUIRED
	Visibility *string `json:"visibility,omitempty"`
}

// Enterprise - An enterprise on GitHub.
type Enterprise struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the enterprise
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the enterprise.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The slug url identifier for the enterprise.
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// A short description of the enterprise.
	Description *string `json:"description,omitempty"`

	// The enterprise's website URL.
	WebsiteURL *string `json:"website_url,omitempty"`
}

// Environment - Details of a deployment environment
type Environment struct {
	// REQUIRED; The time that the environment was created, in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The id of the environment.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the environment.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED; The time that the environment was last updated, in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The type of deployment branch policy for this environment. To allow all branches to deploy, set to null.
	DeploymentBranchPolicy *DeploymentBranchPolicySettings `json:"deployment_branch_policy,omitempty"`
	ProtectionRules []*EnvironmentProtectionRulesItem `json:"protection_rules,omitempty"`
}

// EnvironmentApprovals - An entry in the reviews log for environment deployments
type EnvironmentApprovals struct {
	// REQUIRED; The comment submitted with the deployment review
	Comment *string `json:"comment,omitempty"`

	// REQUIRED; The list of environments that were approved or rejected
	Environments []*EnvironmentApprovalsEnvironmentsItem `json:"environments,omitempty"`

	// REQUIRED; Whether deployment to the environment(s) was approved or rejected
	State *EnvironmentApprovalsState `json:"state,omitempty"`

	// REQUIRED; A GitHub user.
	User *SimpleUser `json:"user,omitempty"`
}

type EnvironmentApprovalsEnvironmentsItem struct {
	// The time that the environment was created, in ISO 8601 format.
	CreatedAt *time.Time `json:"created_at,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`

	// The id of the environment.
	ID *int32 `json:"id,omitempty"`

	// The name of the environment.
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	URL *string `json:"url,omitempty"`

	// The time that the environment was last updated, in ISO 8601 format.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

type EnvironmentProtectionRulesAnyOfPropertiesItemsItem struct {
	Reviewer *EnvironmentProtectionRulesItemAnyOf1ReviewersItemReviewer `json:"reviewer,omitempty"`

	// The type of reviewer.
	Type *DeploymentReviewerType `json:"type,omitempty"`
}

type EnvironmentProtectionRulesItem struct {
}

type EnvironmentProtectionRulesItemAnyOf1ReviewersItemReviewer struct {
}

// Event
type Event struct {
	// REQUIRED; Actor
	Actor *Actor `json:"actor,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Payload *EventPayload `json:"payload,omitempty"`

	// REQUIRED
	Public *bool `json:"public,omitempty"`

	// REQUIRED
	Repo *EventRepo `json:"repo,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// Actor
	Org *Actor `json:"org,omitempty"`
}

type EventPayload struct {
	Action *string `json:"action,omitempty"`

	// Comments provide a way for people to collaborate on an issue.
	Comment *IssueComment `json:"comment,omitempty"`

	// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
	Issue *Issue `json:"issue,omitempty"`
	Pages []*EventPayloadPagesItem `json:"pages,omitempty"`
}

type EventPayloadPagesItem struct {
	Action *string `json:"action,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	PageName *string `json:"page_name,omitempty"`
	SHA *string `json:"sha,omitempty"`
	Summary *string `json:"summary,omitempty"`
	Title *string `json:"title,omitempty"`
}

type EventRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// Feed
type Feed struct {
	// REQUIRED
	Links *FeedLinks `json:"_links,omitempty"`

	// REQUIRED
	TimelineURL *string `json:"timeline_url,omitempty"`

	// REQUIRED
	UserURL *string `json:"user_url,omitempty"`
	CurrentUserActorURL *string `json:"current_user_actor_url,omitempty"`
	CurrentUserOrganizationURL *string `json:"current_user_organization_url,omitempty"`
	CurrentUserOrganizationUrls []*string `json:"current_user_organization_urls,omitempty"`
	CurrentUserPublicURL *string `json:"current_user_public_url,omitempty"`
	CurrentUserURL *string `json:"current_user_url,omitempty"`

	// A feed of discussions for a given repository and category.
	RepositoryDiscussionsCategoryURL *string `json:"repository_discussions_category_url,omitempty"`

	// A feed of discussions for a given repository.
	RepositoryDiscussionsURL *string `json:"repository_discussions_url,omitempty"`
	SecurityAdvisoriesURL *string `json:"security_advisories_url,omitempty"`
}

type FeedLinks struct {
	// REQUIRED; Hypermedia Link with Type
	Timeline *LinkWithType `json:"timeline,omitempty"`

	// REQUIRED; Hypermedia Link with Type
	User *LinkWithType `json:"user,omitempty"`

	// Hypermedia Link with Type
	CurrentUser *LinkWithType `json:"current_user,omitempty"`

	// Hypermedia Link with Type
	CurrentUserActor *LinkWithType `json:"current_user_actor,omitempty"`

	// Hypermedia Link with Type
	CurrentUserOrganization *LinkWithType `json:"current_user_organization,omitempty"`
	CurrentUserOrganizations []*LinkWithType `json:"current_user_organizations,omitempty"`

	// Hypermedia Link with Type
	CurrentUserPublic *LinkWithType `json:"current_user_public,omitempty"`

	// Hypermedia Link with Type
	RepositoryDiscussions *LinkWithType `json:"repository_discussions,omitempty"`

	// Hypermedia Link with Type
	RepositoryDiscussionsCategory *LinkWithType `json:"repository_discussions_category,omitempty"`

	// Hypermedia Link with Type
	SecurityAdvisories *LinkWithType `json:"security_advisories,omitempty"`
}

// FileCommit - File Commit
type FileCommit struct {
	// REQUIRED
	Commit *FileCommitCommit `json:"commit,omitempty"`

	// REQUIRED
	Content *FileCommitContent `json:"content,omitempty"`
}

type FileCommitAuthor struct {
	Date *string `json:"date,omitempty"`
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
}

type FileCommitCommit struct {
	Author *FileCommitAuthor `json:"author,omitempty"`
	Committer *FileCommitCommitter `json:"committer,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Message *string `json:"message,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parents []*FileCommitParentsItem `json:"parents,omitempty"`
	SHA *string `json:"sha,omitempty"`
	Tree *FileCommitTree `json:"tree,omitempty"`
	URL *string `json:"url,omitempty"`
	Verification *FileCommitVerification `json:"verification,omitempty"`
}

type FileCommitCommitter struct {
	Date *string `json:"date,omitempty"`
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
}

type FileCommitContent struct {
	DownloadURL *string `json:"download_url,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Links *FileCommitContentLinks `json:"_links,omitempty"`
	Name *string `json:"name,omitempty"`
	Path *string `json:"path,omitempty"`
	SHA *string `json:"sha,omitempty"`
	Size *int32 `json:"size,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type FileCommitContentLinks struct {
	Git *string `json:"git,omitempty"`
	HTML *string `json:"html,omitempty"`
	Self *string `json:"self,omitempty"`
}

type FileCommitParentsItem struct {
	HTMLURL *string `json:"html_url,omitempty"`
	SHA *string `json:"sha,omitempty"`
	URL *string `json:"url,omitempty"`
}

type FileCommitTree struct {
	SHA *string `json:"sha,omitempty"`
	URL *string `json:"url,omitempty"`
}

type FileCommitVerification struct {
	Payload *string `json:"payload,omitempty"`
	Reason *string `json:"reason,omitempty"`
	Signature *string `json:"signature,omitempty"`
	Verified *bool `json:"verified,omitempty"`
}

type ForbiddenGistApplicationJSONProperties struct {
	CreatedAt *string `json:"created_at,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// FullRepository - Full Repository
type FullRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED; Returns whether or not this repository disabled.
	Disabled *bool `json:"disabled,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License Simple
	License *NullableLicenseSimple `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NetworkCount *int32 `json:"network_count,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; A GitHub user.
	Owner *SimpleUser `json:"owner,omitempty"`

	// REQUIRED
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *time.Time `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED; The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersCount *int32 `json:"subscribers_count,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether anonymous git access is allowed.
	AnonymousAccessEnabled *bool `json:"anonymous_access_enabled,omitempty"`

	// Code of Conduct Simple
	CodeOfConduct *CodeOfConductSimple `json:"code_of_conduct,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *FullRepositoryMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *FullRepositoryMergeCommitTitle `json:"merge_commit_title,omitempty"`

	// A GitHub user.
	Organization *NullableSimpleUser `json:"organization,omitempty"`

	// A repository on GitHub.
	Parent *Repository `json:"parent,omitempty"`
	Permissions *FullRepositoryPermissions `json:"permissions,omitempty"`
	SecurityAndAnalysis *SecurityAndAnalysis `json:"security_and_analysis,omitempty"`

	// A repository on GitHub.
	Source *Repository `json:"source,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *FullRepositorySquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *FullRepositorySquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	TempCloneToken *string `json:"temp_clone_token,omitempty"`

	// A repository on GitHub.
	TemplateRepository *NullableRepository `json:"template_repository,omitempty"`
	Topics []*string `json:"topics,omitempty"`
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// The repository visibility: public, private, or internal.
	Visibility *string `json:"visibility,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type FullRepositoryPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type Get200ApplicationJSONPropertiesItemsItem struct {
	// REQUIRED
	Path *string `json:"path,omitempty"`
	Name *string `json:"name,omitempty"`
}

// GistComment - A comment made to a gist.
type GistComment struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The comment text.
	Body *string `json:"body,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
}

// GistCommit - Gist Commit
type GistCommit struct {
	// REQUIRED
	ChangeStatus *GistCommitChangeStatus `json:"change_status,omitempty"`

	// REQUIRED
	CommittedAt *time.Time `json:"committed_at,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`

	// REQUIRED
	Version *string `json:"version,omitempty"`
}

type GistCommitChangeStatus struct {
	Additions *int32 `json:"additions,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`
	Total *int32 `json:"total,omitempty"`
}

// GistHistory - Gist History
type GistHistory struct {
	ChangeStatus *GistHistoryChangeStatus `json:"change_status,omitempty"`
	CommittedAt *time.Time `json:"committed_at,omitempty"`
	URL *string `json:"url,omitempty"`

	// A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
	Version *string `json:"version,omitempty"`
}

type GistHistoryChangeStatus struct {
	Additions *int32 `json:"additions,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`
	Total *int32 `json:"total,omitempty"`
}

// GistSimple - Gist Simple
type GistSimple struct {
	Comments *int32 `json:"comments,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Description *string `json:"description,omitempty"`

	// Dictionary of
	Files map[string]*Components57SvwzSchemasGistSimplePropertiesFilesAdditionalproperties `json:"files,omitempty"`

	// Gist
	ForkOf *GistSimpleForkOf `json:"fork_of,omitempty"`
	Forks []*GistSimpleForksItem `json:"forks,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	GitPullURL *string `json:"git_pull_url,omitempty"`
	GitPushURL *string `json:"git_push_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	History []*GistHistory `json:"history,omitempty"`
	ID *string `json:"id,omitempty"`
	NodeID *string `json:"node_id,omitempty"`

	// A GitHub user.
	Owner *SimpleUser `json:"owner,omitempty"`
	Public *bool `json:"public,omitempty"`
	Truncated *bool `json:"truncated,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	User *string `json:"user,omitempty"`
}

// GistSimpleForkOf - Gist
type GistSimpleForkOf struct {
	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED; Dictionary of simple·properties·forkof·properties·files·additionalproperties>
	Files map[string]*Components87KnyySchemasGistSimplePropertiesForkOfPropertiesFilesAdditionalproperties `json:"files,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	GitPullURL *string `json:"git_pull_url,omitempty"`

	// REQUIRED
	GitPushURL *string `json:"git_push_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Public *bool `json:"public,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
	Forks []any `json:"forks,omitempty"`
	History []any `json:"history,omitempty"`

	// A GitHub user.
	Owner *NullableSimpleUser `json:"owner,omitempty"`
	Truncated *bool `json:"truncated,omitempty"`
}

type GistSimpleForksItem struct {
	CreatedAt *time.Time `json:"created_at,omitempty"`
	ID *string `json:"id,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Public User
	User *PublicUser `json:"user,omitempty"`
}

// GitCommit - Low-level Git commit operations within a repository
type GitCommit struct {
	// REQUIRED; Identifying information for the git-user
	Author *GitCommitAuthor `json:"author,omitempty"`

	// REQUIRED; Identifying information for the git-user
	Committer *GitCommitCommitter `json:"committer,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Message describing the purpose of the commit
	Message *string `json:"message,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Parents []*GitCommitParentsItem `json:"parents,omitempty"`

	// REQUIRED; SHA for the commit
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Tree *GitCommitTree `json:"tree,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	Verification *GitCommitVerification `json:"verification,omitempty"`
}

// GitCommitAuthor - Identifying information for the git-user
type GitCommitAuthor struct {
	// REQUIRED; Timestamp of the commit
	Date *time.Time `json:"date,omitempty"`

	// REQUIRED; Git email address of the user
	Email *string `json:"email,omitempty"`

	// REQUIRED; Name of the git user
	Name *string `json:"name,omitempty"`
}

// GitCommitCommitter - Identifying information for the git-user
type GitCommitCommitter struct {
	// REQUIRED; Timestamp of the commit
	Date *time.Time `json:"date,omitempty"`

	// REQUIRED; Git email address of the user
	Email *string `json:"email,omitempty"`

	// REQUIRED; Name of the git user
	Name *string `json:"name,omitempty"`
}

type GitCommitParentsItem struct {
	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; SHA for the commit
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type GitCommitTree struct {
	// REQUIRED; SHA for the commit
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type GitCommitVerification struct {
	// REQUIRED
	Payload *string `json:"payload,omitempty"`

	// REQUIRED
	Reason *string `json:"reason,omitempty"`

	// REQUIRED
	Signature *string `json:"signature,omitempty"`

	// REQUIRED
	Verified *bool `json:"verified,omitempty"`
}

// GitHubV3RESTAPIClientActionsAddCustomLabelsToSelfHostedRunnerForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsAddCustomLabelsToSelfHostedRunnerForOrg
// method.
type GitHubV3RESTAPIClientActionsAddCustomLabelsToSelfHostedRunnerForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsAddCustomLabelsToSelfHostedRunnerForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsAddCustomLabelsToSelfHostedRunnerForRepo
// method.
type GitHubV3RESTAPIClientActionsAddCustomLabelsToSelfHostedRunnerForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsAddSelectedRepoToOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsAddSelectedRepoToOrgSecret
// method.
type GitHubV3RESTAPIClientActionsAddSelectedRepoToOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsAddSelectedRepoToOrgVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsAddSelectedRepoToOrgVariable
// method.
type GitHubV3RESTAPIClientActionsAddSelectedRepoToOrgVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsAddSelectedRepoToRequiredWorkflowOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsAddSelectedRepoToRequiredWorkflow
// method.
type GitHubV3RESTAPIClientActionsAddSelectedRepoToRequiredWorkflowOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsApproveWorkflowRunOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsApproveWorkflowRun
// method.
type GitHubV3RESTAPIClientActionsApproveWorkflowRunOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsCancelWorkflowRunOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsCancelWorkflowRun
// method.
type GitHubV3RESTAPIClientActionsCancelWorkflowRunOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsCreateEnvironmentVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsCreateEnvironmentVariable
// method.
type GitHubV3RESTAPIClientActionsCreateEnvironmentVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsCreateOrUpdateEnvironmentSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsCreateOrUpdateEnvironmentSecret
// method.
type GitHubV3RESTAPIClientActionsCreateOrUpdateEnvironmentSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsCreateOrUpdateOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsCreateOrUpdateOrgSecret
// method.
type GitHubV3RESTAPIClientActionsCreateOrUpdateOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsCreateOrUpdateRepoSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsCreateOrUpdateRepoSecret
// method.
type GitHubV3RESTAPIClientActionsCreateOrUpdateRepoSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsCreateOrgVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsCreateOrgVariable
// method.
type GitHubV3RESTAPIClientActionsCreateOrgVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsCreateRegistrationTokenForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsCreateRegistrationTokenForOrg
// method.
type GitHubV3RESTAPIClientActionsCreateRegistrationTokenForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsCreateRegistrationTokenForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsCreateRegistrationTokenForRepo
// method.
type GitHubV3RESTAPIClientActionsCreateRegistrationTokenForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsCreateRemoveTokenForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsCreateRemoveTokenForOrg
// method.
type GitHubV3RESTAPIClientActionsCreateRemoveTokenForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsCreateRemoveTokenForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsCreateRemoveTokenForRepo
// method.
type GitHubV3RESTAPIClientActionsCreateRemoveTokenForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsCreateRepoVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsCreateRepoVariable
// method.
type GitHubV3RESTAPIClientActionsCreateRepoVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsCreateRequiredWorkflowOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsCreateRequiredWorkflow
// method.
type GitHubV3RESTAPIClientActionsCreateRequiredWorkflowOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsCreateWorkflowDispatchOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsCreateWorkflowDispatch
// method.
type GitHubV3RESTAPIClientActionsCreateWorkflowDispatchOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDeleteActionsCacheByIDOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDeleteActionsCacheByID
// method.
type GitHubV3RESTAPIClientActionsDeleteActionsCacheByIDOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDeleteActionsCacheByKeyOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDeleteActionsCacheByKey
// method.
type GitHubV3RESTAPIClientActionsDeleteActionsCacheByKeyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDeleteArtifactOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDeleteArtifact
// method.
type GitHubV3RESTAPIClientActionsDeleteArtifactOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDeleteEnvironmentSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDeleteEnvironmentSecret
// method.
type GitHubV3RESTAPIClientActionsDeleteEnvironmentSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDeleteEnvironmentVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDeleteEnvironmentVariable
// method.
type GitHubV3RESTAPIClientActionsDeleteEnvironmentVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDeleteOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDeleteOrgSecret
// method.
type GitHubV3RESTAPIClientActionsDeleteOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDeleteOrgVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDeleteOrgVariable
// method.
type GitHubV3RESTAPIClientActionsDeleteOrgVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDeleteRepoSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDeleteRepoSecret
// method.
type GitHubV3RESTAPIClientActionsDeleteRepoSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDeleteRepoVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDeleteRepoVariable
// method.
type GitHubV3RESTAPIClientActionsDeleteRepoVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDeleteRequiredWorkflowOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDeleteRequiredWorkflow
// method.
type GitHubV3RESTAPIClientActionsDeleteRequiredWorkflowOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDeleteSelfHostedRunnerFromOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDeleteSelfHostedRunnerFromOrg
// method.
type GitHubV3RESTAPIClientActionsDeleteSelfHostedRunnerFromOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDeleteSelfHostedRunnerFromRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDeleteSelfHostedRunnerFromRepo
// method.
type GitHubV3RESTAPIClientActionsDeleteSelfHostedRunnerFromRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDeleteWorkflowRunLogsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDeleteWorkflowRunLogs
// method.
type GitHubV3RESTAPIClientActionsDeleteWorkflowRunLogsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDeleteWorkflowRunOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDeleteWorkflowRun
// method.
type GitHubV3RESTAPIClientActionsDeleteWorkflowRunOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDisableSelectedRepositoryGithubActionsOrganizationOptions contains the optional parameters
// for the GitHubV3RESTAPIClient.ActionsDisableSelectedRepositoryGithubActionsOrganization method.
type GitHubV3RESTAPIClientActionsDisableSelectedRepositoryGithubActionsOrganizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDisableWorkflowOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDisableWorkflow
// method.
type GitHubV3RESTAPIClientActionsDisableWorkflowOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDownloadArtifactOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDownloadArtifact
// method.
type GitHubV3RESTAPIClientActionsDownloadArtifactOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDownloadJobLogsForWorkflowRunOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDownloadJobLogsForWorkflowRun
// method.
type GitHubV3RESTAPIClientActionsDownloadJobLogsForWorkflowRunOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDownloadWorkflowRunAttemptLogsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDownloadWorkflowRunAttemptLogs
// method.
type GitHubV3RESTAPIClientActionsDownloadWorkflowRunAttemptLogsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsDownloadWorkflowRunLogsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsDownloadWorkflowRunLogs
// method.
type GitHubV3RESTAPIClientActionsDownloadWorkflowRunLogsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsEnableSelectedRepositoryGithubActionsOrganizationOptions contains the optional parameters for
// the GitHubV3RESTAPIClient.ActionsEnableSelectedRepositoryGithubActionsOrganization method.
type GitHubV3RESTAPIClientActionsEnableSelectedRepositoryGithubActionsOrganizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsEnableWorkflowOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsEnableWorkflow
// method.
type GitHubV3RESTAPIClientActionsEnableWorkflowOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetActionsCacheListOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetActionsCacheList
// method.
type GitHubV3RESTAPIClientActionsGetActionsCacheListOptions struct {
}

// GitHubV3RESTAPIClientActionsGetActionsCacheUsageByRepoForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetActionsCacheUsageByRepoForOrg
// method.
type GitHubV3RESTAPIClientActionsGetActionsCacheUsageByRepoForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetActionsCacheUsageForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetActionsCacheUsageForOrg
// method.
type GitHubV3RESTAPIClientActionsGetActionsCacheUsageForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetActionsCacheUsageOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetActionsCacheUsage
// method.
type GitHubV3RESTAPIClientActionsGetActionsCacheUsageOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetAllowedActionsOrganizationOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetAllowedActionsOrganization
// method.
type GitHubV3RESTAPIClientActionsGetAllowedActionsOrganizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetAllowedActionsRepositoryOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetAllowedActionsRepository
// method.
type GitHubV3RESTAPIClientActionsGetAllowedActionsRepositoryOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetArtifactOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetArtifact
// method.
type GitHubV3RESTAPIClientActionsGetArtifactOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetCustomOidcSubClaimForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetCustomOidcSubClaimForRepo
// method.
type GitHubV3RESTAPIClientActionsGetCustomOidcSubClaimForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetEnvironmentPublicKeyOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetEnvironmentPublicKey
// method.
type GitHubV3RESTAPIClientActionsGetEnvironmentPublicKeyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetEnvironmentSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetEnvironmentSecret
// method.
type GitHubV3RESTAPIClientActionsGetEnvironmentSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetEnvironmentVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetEnvironmentVariable
// method.
type GitHubV3RESTAPIClientActionsGetEnvironmentVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationOptions contains the optional parameters
// for the GitHubV3RESTAPIClient.ActionsGetGithubActionsDefaultWorkflowPermissionsOrganization method.
type GitHubV3RESTAPIClientActionsGetGithubActionsDefaultWorkflowPermissionsOrganizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryOptions contains the optional parameters
// for the GitHubV3RESTAPIClient.ActionsGetGithubActionsDefaultWorkflowPermissionsRepository method.
type GitHubV3RESTAPIClientActionsGetGithubActionsDefaultWorkflowPermissionsRepositoryOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetGithubActionsPermissionsOrganizationOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetGithubActionsPermissionsOrganization
// method.
type GitHubV3RESTAPIClientActionsGetGithubActionsPermissionsOrganizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetGithubActionsPermissionsRepositoryOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetGithubActionsPermissionsRepository
// method.
type GitHubV3RESTAPIClientActionsGetGithubActionsPermissionsRepositoryOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetJobForWorkflowRunOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetJobForWorkflowRun
// method.
type GitHubV3RESTAPIClientActionsGetJobForWorkflowRunOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetOrgPublicKeyOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetOrgPublicKey
// method.
type GitHubV3RESTAPIClientActionsGetOrgPublicKeyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetOrgSecret
// method.
type GitHubV3RESTAPIClientActionsGetOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetOrgVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetOrgVariable
// method.
type GitHubV3RESTAPIClientActionsGetOrgVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetPendingDeploymentsForRunOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetPendingDeploymentsForRun
// method.
type GitHubV3RESTAPIClientActionsGetPendingDeploymentsForRunOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetRepoPublicKeyOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetRepoPublicKey
// method.
type GitHubV3RESTAPIClientActionsGetRepoPublicKeyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetRepoRequiredWorkflowOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetRepoRequiredWorkflow
// method.
type GitHubV3RESTAPIClientActionsGetRepoRequiredWorkflowOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetRepoRequiredWorkflowUsageOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetRepoRequiredWorkflowUsage
// method.
type GitHubV3RESTAPIClientActionsGetRepoRequiredWorkflowUsageOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetRepoSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetRepoSecret
// method.
type GitHubV3RESTAPIClientActionsGetRepoSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetRepoVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetRepoVariable
// method.
type GitHubV3RESTAPIClientActionsGetRepoVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetRequiredWorkflowOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetRequiredWorkflow
// method.
type GitHubV3RESTAPIClientActionsGetRequiredWorkflowOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetReviewsForRunOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetReviewsForRun
// method.
type GitHubV3RESTAPIClientActionsGetReviewsForRunOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetSelfHostedRunnerForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetSelfHostedRunnerForOrg
// method.
type GitHubV3RESTAPIClientActionsGetSelfHostedRunnerForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetSelfHostedRunnerForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetSelfHostedRunnerForRepo
// method.
type GitHubV3RESTAPIClientActionsGetSelfHostedRunnerForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetWorkflowAccessToRepositoryOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetWorkflowAccessToRepository
// method.
type GitHubV3RESTAPIClientActionsGetWorkflowAccessToRepositoryOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetWorkflowOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetWorkflow
// method.
type GitHubV3RESTAPIClientActionsGetWorkflowOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetWorkflowRunAttemptOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetWorkflowRunAttempt
// method.
type GitHubV3RESTAPIClientActionsGetWorkflowRunAttemptOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetWorkflowRunOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetWorkflowRun
// method.
type GitHubV3RESTAPIClientActionsGetWorkflowRunOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetWorkflowRunUsageOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetWorkflowRunUsage
// method.
type GitHubV3RESTAPIClientActionsGetWorkflowRunUsageOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsGetWorkflowUsageOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsGetWorkflowUsage
// method.
type GitHubV3RESTAPIClientActionsGetWorkflowUsageOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListArtifactsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListArtifactsForRepo
// method.
type GitHubV3RESTAPIClientActionsListArtifactsForRepoOptions struct {
	// Filters artifacts by exact match on their name field.
	Name *string
}

// GitHubV3RESTAPIClientActionsListEnvironmentSecretsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListEnvironmentSecrets
// method.
type GitHubV3RESTAPIClientActionsListEnvironmentSecretsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListEnvironmentVariablesOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListEnvironmentVariables
// method.
type GitHubV3RESTAPIClientActionsListEnvironmentVariablesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListJobsForWorkflowRunAttemptOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListJobsForWorkflowRunAttempt
// method.
type GitHubV3RESTAPIClientActionsListJobsForWorkflowRunAttemptOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListJobsForWorkflowRunOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListJobsForWorkflowRun
// method.
type GitHubV3RESTAPIClientActionsListJobsForWorkflowRunOptions struct {
	// Filters jobs by their completed_at timestamp. latest returns jobs from the most recent execution of the workflow run. all
// returns all jobs for a workflow run, including from old executions of the
// workflow run.
	Filter *Enum179
}

// GitHubV3RESTAPIClientActionsListLabelsForSelfHostedRunnerForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListLabelsForSelfHostedRunnerForOrg
// method.
type GitHubV3RESTAPIClientActionsListLabelsForSelfHostedRunnerForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListLabelsForSelfHostedRunnerForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListLabelsForSelfHostedRunnerForRepo
// method.
type GitHubV3RESTAPIClientActionsListLabelsForSelfHostedRunnerForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListOrgSecretsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListOrgSecrets
// method.
type GitHubV3RESTAPIClientActionsListOrgSecretsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListOrgVariablesOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListOrgVariables
// method.
type GitHubV3RESTAPIClientActionsListOrgVariablesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListRepoRequiredWorkflowsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListRepoRequiredWorkflows
// method.
type GitHubV3RESTAPIClientActionsListRepoRequiredWorkflowsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListRepoSecretsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListRepoSecrets
// method.
type GitHubV3RESTAPIClientActionsListRepoSecretsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListRepoVariablesOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListRepoVariables
// method.
type GitHubV3RESTAPIClientActionsListRepoVariablesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListRepoWorkflowsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListRepoWorkflows
// method.
type GitHubV3RESTAPIClientActionsListRepoWorkflowsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListRequiredWorkflowRunsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListRequiredWorkflowRuns
// method.
type GitHubV3RESTAPIClientActionsListRequiredWorkflowRunsOptions struct {
}

// GitHubV3RESTAPIClientActionsListRequiredWorkflowsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListRequiredWorkflows
// method.
type GitHubV3RESTAPIClientActionsListRequiredWorkflowsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListRunnerApplicationsForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListRunnerApplicationsForOrg
// method.
type GitHubV3RESTAPIClientActionsListRunnerApplicationsForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListRunnerApplicationsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListRunnerApplicationsForRepo
// method.
type GitHubV3RESTAPIClientActionsListRunnerApplicationsForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListSelectedReposForOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListSelectedReposForOrgSecret
// method.
type GitHubV3RESTAPIClientActionsListSelectedReposForOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListSelectedReposForOrgVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListSelectedReposForOrgVariable
// method.
type GitHubV3RESTAPIClientActionsListSelectedReposForOrgVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOptions contains the optional parameters
// for the GitHubV3RESTAPIClient.ActionsListSelectedRepositoriesEnabledGithubActionsOrganization method.
type GitHubV3RESTAPIClientActionsListSelectedRepositoriesEnabledGithubActionsOrganizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListSelectedRepositoriesRequiredWorkflowOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListSelectedRepositoriesRequiredWorkflow
// method.
type GitHubV3RESTAPIClientActionsListSelectedRepositoriesRequiredWorkflowOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListSelfHostedRunnersForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListSelfHostedRunnersForOrg
// method.
type GitHubV3RESTAPIClientActionsListSelfHostedRunnersForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListSelfHostedRunnersForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListSelfHostedRunnersForRepo
// method.
type GitHubV3RESTAPIClientActionsListSelfHostedRunnersForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListWorkflowRunArtifactsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListWorkflowRunArtifacts
// method.
type GitHubV3RESTAPIClientActionsListWorkflowRunArtifactsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListWorkflowRunsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListWorkflowRunsForRepo
// method.
type GitHubV3RESTAPIClientActionsListWorkflowRunsForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsListWorkflowRunsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsListWorkflowRuns
// method.
type GitHubV3RESTAPIClientActionsListWorkflowRunsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsReRunJobForWorkflowRunOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsReRunJobForWorkflowRun
// method.
type GitHubV3RESTAPIClientActionsReRunJobForWorkflowRunOptions struct {
	Body *PathsDas7YfReposOwnerRepoActionsJobsJobIDRerunPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientActionsReRunWorkflowFailedJobsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsReRunWorkflowFailedJobs
// method.
type GitHubV3RESTAPIClientActionsReRunWorkflowFailedJobsOptions struct {
	Body *Paths3Ll5U1ReposOwnerRepoActionsRunsRunIDRerunFailedJobsPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientActionsReRunWorkflowOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsReRunWorkflow
// method.
type GitHubV3RESTAPIClientActionsReRunWorkflowOptions struct {
	Body *PathsBq6WgkReposOwnerRepoActionsRunsRunIDRerunPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgOptions contains the optional parameters for
// the GitHubV3RESTAPIClient.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg method.
type GitHubV3RESTAPIClientActionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoOptions contains the optional parameters for
// the GitHubV3RESTAPIClient.ActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo method.
type GitHubV3RESTAPIClientActionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsRemoveCustomLabelFromSelfHostedRunnerForOrgOptions contains the optional parameters for the
// GitHubV3RESTAPIClient.ActionsRemoveCustomLabelFromSelfHostedRunnerForOrg method.
type GitHubV3RESTAPIClientActionsRemoveCustomLabelFromSelfHostedRunnerForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsRemoveCustomLabelFromSelfHostedRunnerForRepoOptions contains the optional parameters for the
// GitHubV3RESTAPIClient.ActionsRemoveCustomLabelFromSelfHostedRunnerForRepo method.
type GitHubV3RESTAPIClientActionsRemoveCustomLabelFromSelfHostedRunnerForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsRemoveSelectedRepoFromOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsRemoveSelectedRepoFromOrgSecret
// method.
type GitHubV3RESTAPIClientActionsRemoveSelectedRepoFromOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsRemoveSelectedRepoFromOrgVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsRemoveSelectedRepoFromOrgVariable
// method.
type GitHubV3RESTAPIClientActionsRemoveSelectedRepoFromOrgVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsRemoveSelectedRepoFromRequiredWorkflowOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsRemoveSelectedRepoFromRequiredWorkflow
// method.
type GitHubV3RESTAPIClientActionsRemoveSelectedRepoFromRequiredWorkflowOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsReviewPendingDeploymentsForRunOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsReviewPendingDeploymentsForRun
// method.
type GitHubV3RESTAPIClientActionsReviewPendingDeploymentsForRunOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsSetAllowedActionsOrganizationOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsSetAllowedActionsOrganization
// method.
type GitHubV3RESTAPIClientActionsSetAllowedActionsOrganizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsSetAllowedActionsRepositoryOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsSetAllowedActionsRepository
// method.
type GitHubV3RESTAPIClientActionsSetAllowedActionsRepositoryOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsSetCustomLabelsForSelfHostedRunnerForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsSetCustomLabelsForSelfHostedRunnerForOrg
// method.
type GitHubV3RESTAPIClientActionsSetCustomLabelsForSelfHostedRunnerForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsSetCustomLabelsForSelfHostedRunnerForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsSetCustomLabelsForSelfHostedRunnerForRepo
// method.
type GitHubV3RESTAPIClientActionsSetCustomLabelsForSelfHostedRunnerForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsSetCustomOidcSubClaimForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsSetCustomOidcSubClaimForRepo
// method.
type GitHubV3RESTAPIClientActionsSetCustomOidcSubClaimForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationOptions contains the optional parameters
// for the GitHubV3RESTAPIClient.ActionsSetGithubActionsDefaultWorkflowPermissionsOrganization method.
type GitHubV3RESTAPIClientActionsSetGithubActionsDefaultWorkflowPermissionsOrganizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryOptions contains the optional parameters
// for the GitHubV3RESTAPIClient.ActionsSetGithubActionsDefaultWorkflowPermissionsRepository method.
type GitHubV3RESTAPIClientActionsSetGithubActionsDefaultWorkflowPermissionsRepositoryOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsSetGithubActionsPermissionsOrganizationOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsSetGithubActionsPermissionsOrganization
// method.
type GitHubV3RESTAPIClientActionsSetGithubActionsPermissionsOrganizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsSetGithubActionsPermissionsRepositoryOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsSetGithubActionsPermissionsRepository
// method.
type GitHubV3RESTAPIClientActionsSetGithubActionsPermissionsRepositoryOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsSetSelectedReposForOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsSetSelectedReposForOrgSecret
// method.
type GitHubV3RESTAPIClientActionsSetSelectedReposForOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsSetSelectedReposForOrgVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsSetSelectedReposForOrgVariable
// method.
type GitHubV3RESTAPIClientActionsSetSelectedReposForOrgVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsSetSelectedReposToRequiredWorkflowOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsSetSelectedReposToRequiredWorkflow
// method.
type GitHubV3RESTAPIClientActionsSetSelectedReposToRequiredWorkflowOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationOptions contains the optional parameters
// for the GitHubV3RESTAPIClient.ActionsSetSelectedRepositoriesEnabledGithubActionsOrganization method.
type GitHubV3RESTAPIClientActionsSetSelectedRepositoriesEnabledGithubActionsOrganizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsSetWorkflowAccessToRepositoryOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsSetWorkflowAccessToRepository
// method.
type GitHubV3RESTAPIClientActionsSetWorkflowAccessToRepositoryOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsUpdateEnvironmentVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsUpdateEnvironmentVariable
// method.
type GitHubV3RESTAPIClientActionsUpdateEnvironmentVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsUpdateOrgVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsUpdateOrgVariable
// method.
type GitHubV3RESTAPIClientActionsUpdateOrgVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsUpdateRepoVariableOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsUpdateRepoVariable
// method.
type GitHubV3RESTAPIClientActionsUpdateRepoVariableOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActionsUpdateRequiredWorkflowOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActionsUpdateRequiredWorkflow
// method.
type GitHubV3RESTAPIClientActionsUpdateRequiredWorkflowOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityCheckRepoIsStarredByAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityCheckRepoIsStarredByAuthenticatedUser
// method.
type GitHubV3RESTAPIClientActivityCheckRepoIsStarredByAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityDeleteRepoSubscriptionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityDeleteRepoSubscription
// method.
type GitHubV3RESTAPIClientActivityDeleteRepoSubscriptionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityDeleteThreadSubscriptionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityDeleteThreadSubscription
// method.
type GitHubV3RESTAPIClientActivityDeleteThreadSubscriptionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityGetFeedsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityGetFeeds
// method.
type GitHubV3RESTAPIClientActivityGetFeedsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityGetRepoSubscriptionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityGetRepoSubscription
// method.
type GitHubV3RESTAPIClientActivityGetRepoSubscriptionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityGetThreadOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityGetThread
// method.
type GitHubV3RESTAPIClientActivityGetThreadOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityGetThreadSubscriptionForAuthenticatedUserOptions contains the optional parameters for the
// GitHubV3RESTAPIClient.ActivityGetThreadSubscriptionForAuthenticatedUser method.
type GitHubV3RESTAPIClientActivityGetThreadSubscriptionForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListEventsForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListEventsForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientActivityListEventsForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListNotificationsForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListNotificationsForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientActivityListNotificationsForAuthenticatedUserOptions struct {
	// The number of results per page (max 50).
	PerPage *int32
}

// GitHubV3RESTAPIClientActivityListOrgEventsForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListOrgEventsForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientActivityListOrgEventsForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListPublicEventsForRepoNetworkOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListPublicEventsForRepoNetwork
// method.
type GitHubV3RESTAPIClientActivityListPublicEventsForRepoNetworkOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListPublicEventsForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListPublicEventsForUser
// method.
type GitHubV3RESTAPIClientActivityListPublicEventsForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListPublicEventsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListPublicEvents
// method.
type GitHubV3RESTAPIClientActivityListPublicEventsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListPublicOrgEventsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListPublicOrgEvents
// method.
type GitHubV3RESTAPIClientActivityListPublicOrgEventsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListReceivedEventsForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListReceivedEventsForUser
// method.
type GitHubV3RESTAPIClientActivityListReceivedEventsForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListReceivedPublicEventsForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListReceivedPublicEventsForUser
// method.
type GitHubV3RESTAPIClientActivityListReceivedPublicEventsForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListRepoEventsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListRepoEvents
// method.
type GitHubV3RESTAPIClientActivityListRepoEventsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListRepoNotificationsForAuthenticatedUserOptions contains the optional parameters for the
// GitHubV3RESTAPIClient.ActivityListRepoNotificationsForAuthenticatedUser method.
type GitHubV3RESTAPIClientActivityListRepoNotificationsForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListReposStarredByAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListReposStarredByAuthenticatedUser
// method.
type GitHubV3RESTAPIClientActivityListReposStarredByAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListReposStarredByUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListReposStarredByUser
// method.
type GitHubV3RESTAPIClientActivityListReposStarredByUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListReposWatchedByUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListReposWatchedByUser
// method.
type GitHubV3RESTAPIClientActivityListReposWatchedByUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListStargazersForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListStargazersForRepo
// method.
type GitHubV3RESTAPIClientActivityListStargazersForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListWatchedReposForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListWatchedReposForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientActivityListWatchedReposForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityListWatchersForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityListWatchersForRepo
// method.
type GitHubV3RESTAPIClientActivityListWatchersForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityMarkNotificationsAsReadOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityMarkNotificationsAsRead
// method.
type GitHubV3RESTAPIClientActivityMarkNotificationsAsReadOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityMarkRepoNotificationsAsReadOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityMarkRepoNotificationsAsRead
// method.
type GitHubV3RESTAPIClientActivityMarkRepoNotificationsAsReadOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityMarkThreadAsReadOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityMarkThreadAsRead
// method.
type GitHubV3RESTAPIClientActivityMarkThreadAsReadOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivitySetRepoSubscriptionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivitySetRepoSubscription
// method.
type GitHubV3RESTAPIClientActivitySetRepoSubscriptionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivitySetThreadSubscriptionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivitySetThreadSubscription
// method.
type GitHubV3RESTAPIClientActivitySetThreadSubscriptionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityStarRepoForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityStarRepoForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientActivityStarRepoForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientActivityUnstarRepoForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ActivityUnstarRepoForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientActivityUnstarRepoForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsAddRepoToInstallationForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsAddRepoToInstallationForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientAppsAddRepoToInstallationForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsCheckTokenOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsCheckToken
// method.
type GitHubV3RESTAPIClientAppsCheckTokenOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsCreateFromManifestOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsCreateFromManifest
// method.
type GitHubV3RESTAPIClientAppsCreateFromManifestOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsCreateInstallationAccessTokenOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsCreateInstallationAccessToken
// method.
type GitHubV3RESTAPIClientAppsCreateInstallationAccessTokenOptions struct {
	Body *Paths1Lkas7AAppInstallationsInstallationIDAccessTokensPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientAppsDeleteAuthorizationOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsDeleteAuthorization
// method.
type GitHubV3RESTAPIClientAppsDeleteAuthorizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsDeleteInstallationOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsDeleteInstallation
// method.
type GitHubV3RESTAPIClientAppsDeleteInstallationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsDeleteTokenOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsDeleteToken
// method.
type GitHubV3RESTAPIClientAppsDeleteTokenOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsGetAuthenticatedOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsGetAuthenticated
// method.
type GitHubV3RESTAPIClientAppsGetAuthenticatedOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsGetBySlugOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsGetBySlug
// method.
type GitHubV3RESTAPIClientAppsGetBySlugOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsGetInstallationOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsGetInstallation
// method.
type GitHubV3RESTAPIClientAppsGetInstallationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsGetOrgInstallationOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsGetOrgInstallation
// method.
type GitHubV3RESTAPIClientAppsGetOrgInstallationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsGetRepoInstallationOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsGetRepoInstallation
// method.
type GitHubV3RESTAPIClientAppsGetRepoInstallationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsGetSubscriptionPlanForAccountOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsGetSubscriptionPlanForAccount
// method.
type GitHubV3RESTAPIClientAppsGetSubscriptionPlanForAccountOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsGetSubscriptionPlanForAccountStubbedOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsGetSubscriptionPlanForAccountStubbed
// method.
type GitHubV3RESTAPIClientAppsGetSubscriptionPlanForAccountStubbedOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsGetUserInstallationOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsGetUserInstallation
// method.
type GitHubV3RESTAPIClientAppsGetUserInstallationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsGetWebhookConfigForAppOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsGetWebhookConfigForApp
// method.
type GitHubV3RESTAPIClientAppsGetWebhookConfigForAppOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsGetWebhookDeliveryOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsGetWebhookDelivery
// method.
type GitHubV3RESTAPIClientAppsGetWebhookDeliveryOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsListAccountsForPlanOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsListAccountsForPlan
// method.
type GitHubV3RESTAPIClientAppsListAccountsForPlanOptions struct {
	// To return the oldest accounts first, set to asc. Ignored without the sort parameter.
	Direction *Enum64
}

// GitHubV3RESTAPIClientAppsListAccountsForPlanStubbedOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsListAccountsForPlanStubbed
// method.
type GitHubV3RESTAPIClientAppsListAccountsForPlanStubbedOptions struct {
	// To return the oldest accounts first, set to asc. Ignored without the sort parameter.
	Direction *Enum65
}

// GitHubV3RESTAPIClientAppsListInstallationReposForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsListInstallationReposForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientAppsListInstallationReposForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsListInstallationsForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsListInstallationsForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientAppsListInstallationsForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsListInstallationsOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsListInstallations
// method.
type GitHubV3RESTAPIClientAppsListInstallationsOptions struct {
	Outdated *string
}

// GitHubV3RESTAPIClientAppsListPlansOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsListPlans
// method.
type GitHubV3RESTAPIClientAppsListPlansOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsListPlansStubbedOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsListPlansStubbed
// method.
type GitHubV3RESTAPIClientAppsListPlansStubbedOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsListReposAccessibleToInstallationOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsListReposAccessibleToInstallation
// method.
type GitHubV3RESTAPIClientAppsListReposAccessibleToInstallationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsListSubscriptionsForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsListSubscriptionsForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientAppsListSubscriptionsForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsListSubscriptionsForAuthenticatedUserStubbedOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsListSubscriptionsForAuthenticatedUserStubbed
// method.
type GitHubV3RESTAPIClientAppsListSubscriptionsForAuthenticatedUserStubbedOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsListWebhookDeliveriesOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsListWebhookDeliveries
// method.
type GitHubV3RESTAPIClientAppsListWebhookDeliveriesOptions struct {
	Redelivery *bool
}

// GitHubV3RESTAPIClientAppsRedeliverWebhookDeliveryOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsRedeliverWebhookDelivery
// method.
type GitHubV3RESTAPIClientAppsRedeliverWebhookDeliveryOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsRemoveRepoFromInstallationForAuthenticatedUserOptions contains the optional parameters for the
// GitHubV3RESTAPIClient.AppsRemoveRepoFromInstallationForAuthenticatedUser method.
type GitHubV3RESTAPIClientAppsRemoveRepoFromInstallationForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsResetTokenOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsResetToken
// method.
type GitHubV3RESTAPIClientAppsResetTokenOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsRevokeInstallationAccessTokenOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsRevokeInstallationAccessToken
// method.
type GitHubV3RESTAPIClientAppsRevokeInstallationAccessTokenOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsScopeTokenOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsScopeToken
// method.
type GitHubV3RESTAPIClientAppsScopeTokenOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsSuspendInstallationOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsSuspendInstallation
// method.
type GitHubV3RESTAPIClientAppsSuspendInstallationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsUnsuspendInstallationOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsUnsuspendInstallation
// method.
type GitHubV3RESTAPIClientAppsUnsuspendInstallationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientAppsUpdateWebhookConfigForAppOptions contains the optional parameters for the GitHubV3RESTAPIClient.AppsUpdateWebhookConfigForApp
// method.
type GitHubV3RESTAPIClientAppsUpdateWebhookConfigForAppOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientBillingGetGithubActionsBillingOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.BillingGetGithubActionsBillingOrg
// method.
type GitHubV3RESTAPIClientBillingGetGithubActionsBillingOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientBillingGetGithubActionsBillingUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.BillingGetGithubActionsBillingUser
// method.
type GitHubV3RESTAPIClientBillingGetGithubActionsBillingUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientBillingGetGithubPackagesBillingOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.BillingGetGithubPackagesBillingOrg
// method.
type GitHubV3RESTAPIClientBillingGetGithubPackagesBillingOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientBillingGetGithubPackagesBillingUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.BillingGetGithubPackagesBillingUser
// method.
type GitHubV3RESTAPIClientBillingGetGithubPackagesBillingUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientBillingGetSharedStorageBillingOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.BillingGetSharedStorageBillingOrg
// method.
type GitHubV3RESTAPIClientBillingGetSharedStorageBillingOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientBillingGetSharedStorageBillingUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.BillingGetSharedStorageBillingUser
// method.
type GitHubV3RESTAPIClientBillingGetSharedStorageBillingUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientChecksCreateOptions contains the optional parameters for the GitHubV3RESTAPIClient.ChecksCreate method.
type GitHubV3RESTAPIClientChecksCreateOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientChecksCreateSuiteOptions contains the optional parameters for the GitHubV3RESTAPIClient.ChecksCreateSuite
// method.
type GitHubV3RESTAPIClientChecksCreateSuiteOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientChecksGetOptions contains the optional parameters for the GitHubV3RESTAPIClient.ChecksGet method.
type GitHubV3RESTAPIClientChecksGetOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientChecksGetSuiteOptions contains the optional parameters for the GitHubV3RESTAPIClient.ChecksGetSuite
// method.
type GitHubV3RESTAPIClientChecksGetSuiteOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientChecksListAnnotationsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ChecksListAnnotations
// method.
type GitHubV3RESTAPIClientChecksListAnnotationsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientChecksListForRefOptions contains the optional parameters for the GitHubV3RESTAPIClient.ChecksListForRef
// method.
type GitHubV3RESTAPIClientChecksListForRefOptions struct {
	AppID *int32
	// Filters check runs by their completed_at timestamp. latest returns the most recent check runs.
	Filter *Enum211
}

// GitHubV3RESTAPIClientChecksListForSuiteOptions contains the optional parameters for the GitHubV3RESTAPIClient.ChecksListForSuite
// method.
type GitHubV3RESTAPIClientChecksListForSuiteOptions struct {
	// Filters check runs by their completed_at timestamp. latest returns the most recent check runs.
	Filter *Enum198
}

// GitHubV3RESTAPIClientChecksListSuitesForRefOptions contains the optional parameters for the GitHubV3RESTAPIClient.ChecksListSuitesForRef
// method.
type GitHubV3RESTAPIClientChecksListSuitesForRefOptions struct {
	// Filters check suites by GitHub App id.
	AppID *int32
}

// GitHubV3RESTAPIClientChecksRerequestRunOptions contains the optional parameters for the GitHubV3RESTAPIClient.ChecksRerequestRun
// method.
type GitHubV3RESTAPIClientChecksRerequestRunOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientChecksRerequestSuiteOptions contains the optional parameters for the GitHubV3RESTAPIClient.ChecksRerequestSuite
// method.
type GitHubV3RESTAPIClientChecksRerequestSuiteOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientChecksSetSuitesPreferencesOptions contains the optional parameters for the GitHubV3RESTAPIClient.ChecksSetSuitesPreferences
// method.
type GitHubV3RESTAPIClientChecksSetSuitesPreferencesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientChecksUpdateOptions contains the optional parameters for the GitHubV3RESTAPIClient.ChecksUpdate method.
type GitHubV3RESTAPIClientChecksUpdateOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodeScanningDeleteAnalysisOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodeScanningDeleteAnalysis
// method.
type GitHubV3RESTAPIClientCodeScanningDeleteAnalysisOptions struct {
	// Allow deletion if the specified analysis is the last in a set. If you attempt to delete the final analysis in a set without
// setting this parameter to true, you'll get a 400 response with the message:
// Analysis is last of its type and deletion may result in the loss of historical alert data. Please specify confirm_delete.
	ConfirmDelete *string
}

// GitHubV3RESTAPIClientCodeScanningGetAlertOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodeScanningGetAlert
// method.
type GitHubV3RESTAPIClientCodeScanningGetAlertOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodeScanningGetAnalysisOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodeScanningGetAnalysis
// method.
type GitHubV3RESTAPIClientCodeScanningGetAnalysisOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodeScanningGetCodeqlDatabaseOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodeScanningGetCodeqlDatabase
// method.
type GitHubV3RESTAPIClientCodeScanningGetCodeqlDatabaseOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodeScanningGetSarifOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodeScanningGetSarif
// method.
type GitHubV3RESTAPIClientCodeScanningGetSarifOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodeScanningListAlertInstancesOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodeScanningListAlertInstances
// method.
type GitHubV3RESTAPIClientCodeScanningListAlertInstancesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodeScanningListAlertsForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodeScanningListAlertsForOrg
// method.
type GitHubV3RESTAPIClientCodeScanningListAlertsForOrgOptions struct {
	// If specified, only code scanning alerts with this severity will be returned.
	Severity *CodeScanningAlertSeverity
	// The property by which to sort the results.
	Sort *Enum86
	// If specified, only code scanning alerts with this state will be returned.
	State *CodeScanningAlertState
}

// GitHubV3RESTAPIClientCodeScanningListAlertsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodeScanningListAlertsForRepo
// method.
type GitHubV3RESTAPIClientCodeScanningListAlertsForRepoOptions struct {
	// If specified, only code scanning alerts with this severity will be returned.
	Severity *CodeScanningAlertSeverity
	// The property by which to sort the results.
	Sort *Enum199
	// If specified, only code scanning alerts with this state will be returned.
	State *CodeScanningAlertState
}

// GitHubV3RESTAPIClientCodeScanningListCodeqlDatabasesOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodeScanningListCodeqlDatabases
// method.
type GitHubV3RESTAPIClientCodeScanningListCodeqlDatabasesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodeScanningListRecentAnalysesOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodeScanningListRecentAnalyses
// method.
type GitHubV3RESTAPIClientCodeScanningListRecentAnalysesOptions struct {
	// The Git reference for the analyses you want to list. The ref for a branch can be formatted either as refs/heads/<branch
// name> or simply <branch name>. To reference a pull request use
// refs/pull/<number>/merge.
	Ref *string
	// Filter analyses belonging to the same SARIF upload.
	SarifID *string
	// The property by which to sort the results.
	Sort *Enum202
}

// GitHubV3RESTAPIClientCodeScanningUpdateAlertOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodeScanningUpdateAlert
// method.
type GitHubV3RESTAPIClientCodeScanningUpdateAlertOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodeScanningUploadSarifOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodeScanningUploadSarif
// method.
type GitHubV3RESTAPIClientCodeScanningUploadSarifOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodesOfConductGetAllCodesOfConductOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodesOfConductGetAllCodesOfConduct
// method.
type GitHubV3RESTAPIClientCodesOfConductGetAllCodesOfConductOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodesOfConductGetConductCodeOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodesOfConductGetConductCode
// method.
type GitHubV3RESTAPIClientCodesOfConductGetConductCodeOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesAddRepositoryForSecretForAuthenticatedUserOptions contains the optional parameters for the
// GitHubV3RESTAPIClient.CodespacesAddRepositoryForSecretForAuthenticatedUser method.
type GitHubV3RESTAPIClientCodespacesAddRepositoryForSecretForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesAddSelectedRepoToOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesAddSelectedRepoToOrgSecret
// method.
type GitHubV3RESTAPIClientCodespacesAddSelectedRepoToOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesCodespaceMachinesForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesCodespaceMachinesForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesCodespaceMachinesForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesCreateForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesCreateForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesCreateForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesCreateOrUpdateOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesCreateOrUpdateOrgSecret
// method.
type GitHubV3RESTAPIClientCodespacesCreateOrUpdateOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesCreateOrUpdateRepoSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesCreateOrUpdateRepoSecret
// method.
type GitHubV3RESTAPIClientCodespacesCreateOrUpdateRepoSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesCreateOrUpdateSecretForAuthenticatedUserOptions contains the optional parameters for the
// GitHubV3RESTAPIClient.CodespacesCreateOrUpdateSecretForAuthenticatedUser method.
type GitHubV3RESTAPIClientCodespacesCreateOrUpdateSecretForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesCreateWithPrForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesCreateWithPrForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesCreateWithPrForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesCreateWithRepoForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesCreateWithRepoForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesCreateWithRepoForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesDeleteCodespacesBillingUsersOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesDeleteCodespacesBillingUsers
// method.
type GitHubV3RESTAPIClientCodespacesDeleteCodespacesBillingUsersOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesDeleteForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesDeleteForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesDeleteForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesDeleteFromOrganizationOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesDeleteFromOrganization
// method.
type GitHubV3RESTAPIClientCodespacesDeleteFromOrganizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesDeleteOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesDeleteOrgSecret
// method.
type GitHubV3RESTAPIClientCodespacesDeleteOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesDeleteRepoSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesDeleteRepoSecret
// method.
type GitHubV3RESTAPIClientCodespacesDeleteRepoSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesDeleteSecretForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesDeleteSecretForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesDeleteSecretForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesExportForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesExportForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesExportForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesGetCodespacesForUserInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesGetCodespacesForUserInOrg
// method.
type GitHubV3RESTAPIClientCodespacesGetCodespacesForUserInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesGetExportDetailsForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesGetExportDetailsForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesGetExportDetailsForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesGetForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesGetForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesGetForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesGetOrgPublicKeyOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesGetOrgPublicKey
// method.
type GitHubV3RESTAPIClientCodespacesGetOrgPublicKeyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesGetOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesGetOrgSecret
// method.
type GitHubV3RESTAPIClientCodespacesGetOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesGetPublicKeyForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesGetPublicKeyForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesGetPublicKeyForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesGetRepoPublicKeyOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesGetRepoPublicKey
// method.
type GitHubV3RESTAPIClientCodespacesGetRepoPublicKeyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesGetRepoSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesGetRepoSecret
// method.
type GitHubV3RESTAPIClientCodespacesGetRepoSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesGetSecretForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesGetSecretForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesGetSecretForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesListDevcontainersInRepositoryForAuthenticatedUserOptions contains the optional parameters
// for the GitHubV3RESTAPIClient.CodespacesListDevcontainersInRepositoryForAuthenticatedUser method.
type GitHubV3RESTAPIClientCodespacesListDevcontainersInRepositoryForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesListForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesListForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesListForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesListInOrganizationOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesListInOrganization
// method.
type GitHubV3RESTAPIClientCodespacesListInOrganizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesListInRepositoryForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesListInRepositoryForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesListInRepositoryForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesListOrgSecretsOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesListOrgSecrets
// method.
type GitHubV3RESTAPIClientCodespacesListOrgSecretsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesListRepoSecretsOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesListRepoSecrets
// method.
type GitHubV3RESTAPIClientCodespacesListRepoSecretsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesListRepositoriesForSecretForAuthenticatedUserOptions contains the optional parameters for
// the GitHubV3RESTAPIClient.CodespacesListRepositoriesForSecretForAuthenticatedUser method.
type GitHubV3RESTAPIClientCodespacesListRepositoriesForSecretForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesListSecretsForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesListSecretsForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesListSecretsForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesListSelectedReposForOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesListSelectedReposForOrgSecret
// method.
type GitHubV3RESTAPIClientCodespacesListSelectedReposForOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesPreFlightWithRepoForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesPreFlightWithRepoForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesPreFlightWithRepoForAuthenticatedUserOptions struct {
	// An alternative IP for default location auto-detection, such as when proxying a request.
	ClientIP *string
	// The branch or commit to check for a default devcontainer path. If not specified, the default branch will be checked.
	Ref *string
}

// GitHubV3RESTAPIClientCodespacesPublishForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesPublishForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesPublishForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesRemoveRepositoryForSecretForAuthenticatedUserOptions contains the optional parameters for
// the GitHubV3RESTAPIClient.CodespacesRemoveRepositoryForSecretForAuthenticatedUser method.
type GitHubV3RESTAPIClientCodespacesRemoveRepositoryForSecretForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesRemoveSelectedRepoFromOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesRemoveSelectedRepoFromOrgSecret
// method.
type GitHubV3RESTAPIClientCodespacesRemoveSelectedRepoFromOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesRepoMachinesForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesRepoMachinesForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesRepoMachinesForAuthenticatedUserOptions struct {
	// IP for location auto-detection when proxying a request
	ClientIP *string
	// The location to check for available machines. Assigned by IP if not provided.
	Location *string
}

// GitHubV3RESTAPIClientCodespacesSetCodespacesBillingOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesSetCodespacesBilling
// method.
type GitHubV3RESTAPIClientCodespacesSetCodespacesBillingOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesSetCodespacesBillingUsersOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesSetCodespacesBillingUsers
// method.
type GitHubV3RESTAPIClientCodespacesSetCodespacesBillingUsersOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesSetRepositoriesForSecretForAuthenticatedUserOptions contains the optional parameters for
// the GitHubV3RESTAPIClient.CodespacesSetRepositoriesForSecretForAuthenticatedUser method.
type GitHubV3RESTAPIClientCodespacesSetRepositoriesForSecretForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesSetSelectedReposForOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesSetSelectedReposForOrgSecret
// method.
type GitHubV3RESTAPIClientCodespacesSetSelectedReposForOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesStartForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesStartForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesStartForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesStopForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesStopForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesStopForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesStopInOrganizationOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesStopInOrganization
// method.
type GitHubV3RESTAPIClientCodespacesStopInOrganizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientCodespacesUpdateForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.CodespacesUpdateForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientCodespacesUpdateForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotAddSelectedRepoToOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotAddSelectedRepoToOrgSecret
// method.
type GitHubV3RESTAPIClientDependabotAddSelectedRepoToOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotCreateOrUpdateOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotCreateOrUpdateOrgSecret
// method.
type GitHubV3RESTAPIClientDependabotCreateOrUpdateOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotCreateOrUpdateRepoSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotCreateOrUpdateRepoSecret
// method.
type GitHubV3RESTAPIClientDependabotCreateOrUpdateRepoSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotDeleteOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotDeleteOrgSecret
// method.
type GitHubV3RESTAPIClientDependabotDeleteOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotDeleteRepoSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotDeleteRepoSecret
// method.
type GitHubV3RESTAPIClientDependabotDeleteRepoSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotGetAlertOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotGetAlert
// method.
type GitHubV3RESTAPIClientDependabotGetAlertOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotGetOrgPublicKeyOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotGetOrgPublicKey
// method.
type GitHubV3RESTAPIClientDependabotGetOrgPublicKeyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotGetOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotGetOrgSecret
// method.
type GitHubV3RESTAPIClientDependabotGetOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotGetRepoPublicKeyOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotGetRepoPublicKey
// method.
type GitHubV3RESTAPIClientDependabotGetRepoPublicKeyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotGetRepoSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotGetRepoSecret
// method.
type GitHubV3RESTAPIClientDependabotGetRepoSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotListAlertsForEnterpriseOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotListAlertsForEnterprise
// method.
type GitHubV3RESTAPIClientDependabotListAlertsForEnterpriseOptions struct {
}

// GitHubV3RESTAPIClientDependabotListAlertsForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotListAlertsForOrg
// method.
type GitHubV3RESTAPIClientDependabotListAlertsForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotListAlertsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotListAlertsForRepo
// method.
type GitHubV3RESTAPIClientDependabotListAlertsForRepoOptions struct {
	// Deprecated. Page number of the results to fetch. Use cursor-based pagination with before or after instead.
	Page *int32
	// The number of results per page (max 100).
	PerPage *int32
}

// GitHubV3RESTAPIClientDependabotListOrgSecretsOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotListOrgSecrets
// method.
type GitHubV3RESTAPIClientDependabotListOrgSecretsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotListRepoSecretsOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotListRepoSecrets
// method.
type GitHubV3RESTAPIClientDependabotListRepoSecretsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotListSelectedReposForOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotListSelectedReposForOrgSecret
// method.
type GitHubV3RESTAPIClientDependabotListSelectedReposForOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotRemoveSelectedRepoFromOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotRemoveSelectedRepoFromOrgSecret
// method.
type GitHubV3RESTAPIClientDependabotRemoveSelectedRepoFromOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotSetSelectedReposForOrgSecretOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotSetSelectedReposForOrgSecret
// method.
type GitHubV3RESTAPIClientDependabotSetSelectedReposForOrgSecretOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependabotUpdateAlertOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependabotUpdateAlert
// method.
type GitHubV3RESTAPIClientDependabotUpdateAlertOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependencyGraphCreateRepositorySnapshotOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependencyGraphCreateRepositorySnapshot
// method.
type GitHubV3RESTAPIClientDependencyGraphCreateRepositorySnapshotOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientDependencyGraphDiffRangeOptions contains the optional parameters for the GitHubV3RESTAPIClient.DependencyGraphDiffRange
// method.
type GitHubV3RESTAPIClientDependencyGraphDiffRangeOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientEmojisGetOptions contains the optional parameters for the GitHubV3RESTAPIClient.EmojisGet method.
type GitHubV3RESTAPIClientEmojisGetOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsCheckIsStarredOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsCheckIsStarred
// method.
type GitHubV3RESTAPIClientGistsCheckIsStarredOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsCreateCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsCreateComment
// method.
type GitHubV3RESTAPIClientGistsCreateCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsCreateOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsCreate method.
type GitHubV3RESTAPIClientGistsCreateOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsDeleteCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsDeleteComment
// method.
type GitHubV3RESTAPIClientGistsDeleteCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsDeleteOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsDelete method.
type GitHubV3RESTAPIClientGistsDeleteOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsForkOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsFork method.
type GitHubV3RESTAPIClientGistsForkOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsGetCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsGetComment
// method.
type GitHubV3RESTAPIClientGistsGetCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsGetOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsGet method.
type GitHubV3RESTAPIClientGistsGetOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsGetRevisionOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsGetRevision
// method.
type GitHubV3RESTAPIClientGistsGetRevisionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsListCommentsOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsListComments
// method.
type GitHubV3RESTAPIClientGistsListCommentsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsListCommitsOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsListCommits
// method.
type GitHubV3RESTAPIClientGistsListCommitsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsListForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsListForUser
// method.
type GitHubV3RESTAPIClientGistsListForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsListForksOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsListForks
// method.
type GitHubV3RESTAPIClientGistsListForksOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsListOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsList method.
type GitHubV3RESTAPIClientGistsListOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsListPublicOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsListPublic
// method.
type GitHubV3RESTAPIClientGistsListPublicOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsListStarredOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsListStarred
// method.
type GitHubV3RESTAPIClientGistsListStarredOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsStarOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsStar method.
type GitHubV3RESTAPIClientGistsStarOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsUnstarOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsUnstar method.
type GitHubV3RESTAPIClientGistsUnstarOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsUpdateCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsUpdateComment
// method.
type GitHubV3RESTAPIClientGistsUpdateCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGistsUpdateOptions contains the optional parameters for the GitHubV3RESTAPIClient.GistsUpdate method.
type GitHubV3RESTAPIClientGistsUpdateOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGitCreateBlobOptions contains the optional parameters for the GitHubV3RESTAPIClient.GitCreateBlob
// method.
type GitHubV3RESTAPIClientGitCreateBlobOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGitCreateCommitOptions contains the optional parameters for the GitHubV3RESTAPIClient.GitCreateCommit
// method.
type GitHubV3RESTAPIClientGitCreateCommitOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGitCreateRefOptions contains the optional parameters for the GitHubV3RESTAPIClient.GitCreateRef method.
type GitHubV3RESTAPIClientGitCreateRefOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGitCreateTagOptions contains the optional parameters for the GitHubV3RESTAPIClient.GitCreateTag method.
type GitHubV3RESTAPIClientGitCreateTagOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGitCreateTreeOptions contains the optional parameters for the GitHubV3RESTAPIClient.GitCreateTree
// method.
type GitHubV3RESTAPIClientGitCreateTreeOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGitDeleteRefOptions contains the optional parameters for the GitHubV3RESTAPIClient.GitDeleteRef method.
type GitHubV3RESTAPIClientGitDeleteRefOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGitGetBlobOptions contains the optional parameters for the GitHubV3RESTAPIClient.GitGetBlob method.
type GitHubV3RESTAPIClientGitGetBlobOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGitGetCommitOptions contains the optional parameters for the GitHubV3RESTAPIClient.GitGetCommit method.
type GitHubV3RESTAPIClientGitGetCommitOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGitGetRefOptions contains the optional parameters for the GitHubV3RESTAPIClient.GitGetRef method.
type GitHubV3RESTAPIClientGitGetRefOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGitGetTagOptions contains the optional parameters for the GitHubV3RESTAPIClient.GitGetTag method.
type GitHubV3RESTAPIClientGitGetTagOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGitGetTreeOptions contains the optional parameters for the GitHubV3RESTAPIClient.GitGetTree method.
type GitHubV3RESTAPIClientGitGetTreeOptions struct {
	// Setting this parameter to any value returns the objects or subtrees referenced by the tree specified in :tree_sha. For
// example, setting recursive to any of the following will enable returning objects
// or subtrees: 0, 1, "true", and "false". Omit this parameter to prevent recursively returning objects or subtrees.
	Recursive *string
}

// GitHubV3RESTAPIClientGitListMatchingRefsOptions contains the optional parameters for the GitHubV3RESTAPIClient.GitListMatchingRefs
// method.
type GitHubV3RESTAPIClientGitListMatchingRefsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGitUpdateRefOptions contains the optional parameters for the GitHubV3RESTAPIClient.GitUpdateRef method.
type GitHubV3RESTAPIClientGitUpdateRefOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGitignoreGetAllTemplatesOptions contains the optional parameters for the GitHubV3RESTAPIClient.GitignoreGetAllTemplates
// method.
type GitHubV3RESTAPIClientGitignoreGetAllTemplatesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientGitignoreGetTemplateOptions contains the optional parameters for the GitHubV3RESTAPIClient.GitignoreGetTemplate
// method.
type GitHubV3RESTAPIClientGitignoreGetTemplateOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientInteractionsGetRestrictionsForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.InteractionsGetRestrictionsForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientInteractionsGetRestrictionsForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientInteractionsGetRestrictionsForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.InteractionsGetRestrictionsForOrg
// method.
type GitHubV3RESTAPIClientInteractionsGetRestrictionsForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientInteractionsGetRestrictionsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.InteractionsGetRestrictionsForRepo
// method.
type GitHubV3RESTAPIClientInteractionsGetRestrictionsForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientInteractionsRemoveRestrictionsForAuthenticatedUserOptions contains the optional parameters for the
// GitHubV3RESTAPIClient.InteractionsRemoveRestrictionsForAuthenticatedUser method.
type GitHubV3RESTAPIClientInteractionsRemoveRestrictionsForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientInteractionsRemoveRestrictionsForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.InteractionsRemoveRestrictionsForOrg
// method.
type GitHubV3RESTAPIClientInteractionsRemoveRestrictionsForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientInteractionsRemoveRestrictionsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.InteractionsRemoveRestrictionsForRepo
// method.
type GitHubV3RESTAPIClientInteractionsRemoveRestrictionsForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientInteractionsSetRestrictionsForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.InteractionsSetRestrictionsForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientInteractionsSetRestrictionsForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientInteractionsSetRestrictionsForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.InteractionsSetRestrictionsForOrg
// method.
type GitHubV3RESTAPIClientInteractionsSetRestrictionsForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientInteractionsSetRestrictionsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.InteractionsSetRestrictionsForRepo
// method.
type GitHubV3RESTAPIClientInteractionsSetRestrictionsForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesAddAssigneesOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesAddAssignees
// method.
type GitHubV3RESTAPIClientIssuesAddAssigneesOptions struct {
	Body *PathsOxgejjReposOwnerRepoIssuesIssueNumberAssigneesPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientIssuesAddLabelsOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesAddLabels
// method.
type GitHubV3RESTAPIClientIssuesAddLabelsOptions struct {
	Body *PathsJfjoovReposOwnerRepoIssuesIssueNumberLabelsPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientIssuesCheckUserCanBeAssignedOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesCheckUserCanBeAssigned
// method.
type GitHubV3RESTAPIClientIssuesCheckUserCanBeAssignedOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesCheckUserCanBeAssignedToIssueOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesCheckUserCanBeAssignedToIssue
// method.
type GitHubV3RESTAPIClientIssuesCheckUserCanBeAssignedToIssueOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesCreateCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesCreateComment
// method.
type GitHubV3RESTAPIClientIssuesCreateCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesCreateLabelOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesCreateLabel
// method.
type GitHubV3RESTAPIClientIssuesCreateLabelOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesCreateMilestoneOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesCreateMilestone
// method.
type GitHubV3RESTAPIClientIssuesCreateMilestoneOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesCreateOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesCreate method.
type GitHubV3RESTAPIClientIssuesCreateOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesDeleteCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesDeleteComment
// method.
type GitHubV3RESTAPIClientIssuesDeleteCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesDeleteLabelOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesDeleteLabel
// method.
type GitHubV3RESTAPIClientIssuesDeleteLabelOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesDeleteMilestoneOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesDeleteMilestone
// method.
type GitHubV3RESTAPIClientIssuesDeleteMilestoneOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesGetCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesGetComment
// method.
type GitHubV3RESTAPIClientIssuesGetCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesGetEventOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesGetEvent
// method.
type GitHubV3RESTAPIClientIssuesGetEventOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesGetLabelOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesGetLabel
// method.
type GitHubV3RESTAPIClientIssuesGetLabelOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesGetMilestoneOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesGetMilestone
// method.
type GitHubV3RESTAPIClientIssuesGetMilestoneOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesGetOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesGet method.
type GitHubV3RESTAPIClientIssuesGetOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesListAssigneesOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesListAssignees
// method.
type GitHubV3RESTAPIClientIssuesListAssigneesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesListCommentsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesListCommentsForRepo
// method.
type GitHubV3RESTAPIClientIssuesListCommentsForRepoOptions struct {
	// Either asc or desc. Ignored without the sort parameter.
	Direction *Enum240
}

// GitHubV3RESTAPIClientIssuesListCommentsOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesListComments
// method.
type GitHubV3RESTAPIClientIssuesListCommentsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesListEventsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesListEventsForRepo
// method.
type GitHubV3RESTAPIClientIssuesListEventsForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesListEventsForTimelineOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesListEventsForTimeline
// method.
type GitHubV3RESTAPIClientIssuesListEventsForTimelineOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesListEventsOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesListEvents
// method.
type GitHubV3RESTAPIClientIssuesListEventsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesListForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesListForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientIssuesListForAuthenticatedUserOptions struct {
	// Indicates which sorts of issues to return. assigned means issues assigned to you. created means issues created by you.
// mentioned means issues mentioning you. subscribed means issues you're subscribed
// to updates for. all or repos means all issues you can see, regardless of participation or creation.
	Filter *Enum315
	// What to sort results by.
	Sort *Enum317
	// Indicates the state of the issues to return.
	State *Enum316
}

// GitHubV3RESTAPIClientIssuesListForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesListForOrg
// method.
type GitHubV3RESTAPIClientIssuesListForOrgOptions struct {
	// Indicates which sorts of issues to return. assigned means issues assigned to you. created means issues created by you.
// mentioned means issues mentioning you. subscribed means issues you're subscribed
// to updates for. all or repos means all issues you can see, regardless of participation or creation.
	Filter *Enum105
	// What to sort results by.
	Sort *Enum107
	// Indicates the state of the issues to return.
	State *Enum106
}

// GitHubV3RESTAPIClientIssuesListForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesListForRepo
// method.
type GitHubV3RESTAPIClientIssuesListForRepoOptions struct {
	// Can be the name of a user. Pass in none for issues with no assigned user, and * for issues assigned to any user.
	Assignee *string
	// The user that created the issue.
	Creator *string
	// A user that's mentioned in the issue.
	Mentioned *string
	// If an integer is passed, it should refer to a milestone by its number field. If the string * is passed, issues with any
// milestone are accepted. If the string none is passed, issues without milestones
// are returned.
	Milestone *string
	// What to sort results by.
	Sort *Enum239
	// Indicates the state of the issues to return.
	State *Enum238
}

// GitHubV3RESTAPIClientIssuesListLabelsForMilestoneOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesListLabelsForMilestone
// method.
type GitHubV3RESTAPIClientIssuesListLabelsForMilestoneOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesListLabelsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesListLabelsForRepo
// method.
type GitHubV3RESTAPIClientIssuesListLabelsForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesListLabelsOnIssueOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesListLabelsOnIssue
// method.
type GitHubV3RESTAPIClientIssuesListLabelsOnIssueOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesListMilestonesOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesListMilestones
// method.
type GitHubV3RESTAPIClientIssuesListMilestonesOptions struct {
	// The direction of the sort. Either asc or desc.
	Direction *Enum254
	// What to sort results by. Either due_on or completeness.
	Sort *Enum253
	// The state of the milestone. Either open, closed, or all.
	State *Enum252
}

// GitHubV3RESTAPIClientIssuesListOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesList method.
type GitHubV3RESTAPIClientIssuesListOptions struct {
	Collab *bool
	// Indicates which sorts of issues to return. assigned means issues assigned to you. created means issues created by you.
// mentioned means issues mentioning you. subscribed means issues you're subscribed
// to updates for. all or repos means all issues you can see, regardless of participation or creation.
	Filter *Enum59
	Orgs *bool
	Owned *bool
	Pulls *bool
	// What to sort results by.
	Sort *Enum61
	// Indicates the state of the issues to return.
	State *Enum60
}

// GitHubV3RESTAPIClientIssuesLockOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesLock method.
type GitHubV3RESTAPIClientIssuesLockOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesRemoveAllLabelsOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesRemoveAllLabels
// method.
type GitHubV3RESTAPIClientIssuesRemoveAllLabelsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesRemoveAssigneesOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesRemoveAssignees
// method.
type GitHubV3RESTAPIClientIssuesRemoveAssigneesOptions struct {
	Body *PathsOiww20ReposOwnerRepoIssuesIssueNumberAssigneesDeleteRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientIssuesRemoveLabelOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesRemoveLabel
// method.
type GitHubV3RESTAPIClientIssuesRemoveLabelOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesSetLabelsOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesSetLabels
// method.
type GitHubV3RESTAPIClientIssuesSetLabelsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesUnlockOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesUnlock method.
type GitHubV3RESTAPIClientIssuesUnlockOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesUpdateCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesUpdateComment
// method.
type GitHubV3RESTAPIClientIssuesUpdateCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesUpdateLabelOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesUpdateLabel
// method.
type GitHubV3RESTAPIClientIssuesUpdateLabelOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesUpdateMilestoneOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesUpdateMilestone
// method.
type GitHubV3RESTAPIClientIssuesUpdateMilestoneOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientIssuesUpdateOptions contains the optional parameters for the GitHubV3RESTAPIClient.IssuesUpdate method.
type GitHubV3RESTAPIClientIssuesUpdateOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientLicensesGetAllCommonlyUsedOptions contains the optional parameters for the GitHubV3RESTAPIClient.LicensesGetAllCommonlyUsed
// method.
type GitHubV3RESTAPIClientLicensesGetAllCommonlyUsedOptions struct {
	Featured *bool
}

// GitHubV3RESTAPIClientLicensesGetForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.LicensesGetForRepo
// method.
type GitHubV3RESTAPIClientLicensesGetForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientLicensesGetOptions contains the optional parameters for the GitHubV3RESTAPIClient.LicensesGet method.
type GitHubV3RESTAPIClientLicensesGetOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMarkdownRenderOptions contains the optional parameters for the GitHubV3RESTAPIClient.MarkdownRender
// method.
type GitHubV3RESTAPIClientMarkdownRenderOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMarkdownRenderRawOptions contains the optional parameters for the GitHubV3RESTAPIClient.MarkdownRenderRaw
// method.
type GitHubV3RESTAPIClientMarkdownRenderRawOptions struct {
	Data *string
}

// GitHubV3RESTAPIClientMetaGetAllVersionsOptions contains the optional parameters for the GitHubV3RESTAPIClient.MetaGetAllVersions
// method.
type GitHubV3RESTAPIClientMetaGetAllVersionsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMetaGetOctocatOptions contains the optional parameters for the GitHubV3RESTAPIClient.MetaGetOctocat
// method.
type GitHubV3RESTAPIClientMetaGetOctocatOptions struct {
	// The words to show in Octocat's speech bubble
	S *string
}

// GitHubV3RESTAPIClientMetaGetOptions contains the optional parameters for the GitHubV3RESTAPIClient.MetaGet method.
type GitHubV3RESTAPIClientMetaGetOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMetaGetZenOptions contains the optional parameters for the GitHubV3RESTAPIClient.MetaGetZen method.
type GitHubV3RESTAPIClientMetaGetZenOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMetaRootOptions contains the optional parameters for the GitHubV3RESTAPIClient.MetaRoot method.
type GitHubV3RESTAPIClientMetaRootOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsCancelImportOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsCancelImport
// method.
type GitHubV3RESTAPIClientMigrationsCancelImportOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsDeleteArchiveForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsDeleteArchiveForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientMigrationsDeleteArchiveForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsDeleteArchiveForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsDeleteArchiveForOrg
// method.
type GitHubV3RESTAPIClientMigrationsDeleteArchiveForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsDownloadArchiveForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsDownloadArchiveForOrg
// method.
type GitHubV3RESTAPIClientMigrationsDownloadArchiveForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsGetArchiveForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsGetArchiveForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientMigrationsGetArchiveForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsGetCommitAuthorsOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsGetCommitAuthors
// method.
type GitHubV3RESTAPIClientMigrationsGetCommitAuthorsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsGetImportStatusOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsGetImportStatus
// method.
type GitHubV3RESTAPIClientMigrationsGetImportStatusOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsGetLargeFilesOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsGetLargeFiles
// method.
type GitHubV3RESTAPIClientMigrationsGetLargeFilesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsGetStatusForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsGetStatusForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientMigrationsGetStatusForAuthenticatedUserOptions struct {
	Exclude []string
}

// GitHubV3RESTAPIClientMigrationsGetStatusForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsGetStatusForOrg
// method.
type GitHubV3RESTAPIClientMigrationsGetStatusForOrgOptions struct {
	// Exclude attributes from the API response to improve performance
	Exclude []Get2ItemsItem
}

// GitHubV3RESTAPIClientMigrationsListForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsListForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientMigrationsListForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsListForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsListForOrg
// method.
type GitHubV3RESTAPIClientMigrationsListForOrgOptions struct {
	// Exclude attributes from the API response to improve performance
	Exclude []Get3ItemsItem
}

// GitHubV3RESTAPIClientMigrationsListReposForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsListReposForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientMigrationsListReposForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsListReposForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsListReposForOrg
// method.
type GitHubV3RESTAPIClientMigrationsListReposForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsMapCommitAuthorOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsMapCommitAuthor
// method.
type GitHubV3RESTAPIClientMigrationsMapCommitAuthorOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsSetLfsPreferenceOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsSetLfsPreference
// method.
type GitHubV3RESTAPIClientMigrationsSetLfsPreferenceOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsStartForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsStartForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientMigrationsStartForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsStartForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsStartForOrg
// method.
type GitHubV3RESTAPIClientMigrationsStartForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsStartImportOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsStartImport
// method.
type GitHubV3RESTAPIClientMigrationsStartImportOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsUnlockRepoForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsUnlockRepoForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientMigrationsUnlockRepoForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsUnlockRepoForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsUnlockRepoForOrg
// method.
type GitHubV3RESTAPIClientMigrationsUnlockRepoForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientMigrationsUpdateImportOptions contains the optional parameters for the GitHubV3RESTAPIClient.MigrationsUpdateImport
// method.
type GitHubV3RESTAPIClientMigrationsUpdateImportOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOidcGetOidcCustomSubTemplateForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.OidcGetOidcCustomSubTemplateForOrg
// method.
type GitHubV3RESTAPIClientOidcGetOidcCustomSubTemplateForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOidcUpdateOidcCustomSubTemplateForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.OidcUpdateOidcCustomSubTemplateForOrg
// method.
type GitHubV3RESTAPIClientOidcUpdateOidcCustomSubTemplateForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsAddSecurityManagerTeamOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsAddSecurityManagerTeam
// method.
type GitHubV3RESTAPIClientOrgsAddSecurityManagerTeamOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsBlockUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsBlockUser
// method.
type GitHubV3RESTAPIClientOrgsBlockUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsCancelInvitationOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsCancelInvitation
// method.
type GitHubV3RESTAPIClientOrgsCancelInvitationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsCheckBlockedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsCheckBlockedUser
// method.
type GitHubV3RESTAPIClientOrgsCheckBlockedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsCheckMembershipForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsCheckMembershipForUser
// method.
type GitHubV3RESTAPIClientOrgsCheckMembershipForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsCheckPublicMembershipForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsCheckPublicMembershipForUser
// method.
type GitHubV3RESTAPIClientOrgsCheckPublicMembershipForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsConvertMemberToOutsideCollaboratorOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsConvertMemberToOutsideCollaborator
// method.
type GitHubV3RESTAPIClientOrgsConvertMemberToOutsideCollaboratorOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsCreateInvitationOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsCreateInvitation
// method.
type GitHubV3RESTAPIClientOrgsCreateInvitationOptions struct {
	Body *Paths16Li0J1OrgsOrgInvitationsPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientOrgsCreateWebhookOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsCreateWebhook
// method.
type GitHubV3RESTAPIClientOrgsCreateWebhookOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsDeleteWebhookOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsDeleteWebhook
// method.
type GitHubV3RESTAPIClientOrgsDeleteWebhookOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsEnableOrDisableSecurityProductOnAllOrgReposOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsEnableOrDisableSecurityProductOnAllOrgRepos
// method.
type GitHubV3RESTAPIClientOrgsEnableOrDisableSecurityProductOnAllOrgReposOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsGetMembershipForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsGetMembershipForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientOrgsGetMembershipForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsGetMembershipForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsGetMembershipForUser
// method.
type GitHubV3RESTAPIClientOrgsGetMembershipForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsGetOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsGet method.
type GitHubV3RESTAPIClientOrgsGetOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsGetWebhookConfigForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsGetWebhookConfigForOrg
// method.
type GitHubV3RESTAPIClientOrgsGetWebhookConfigForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsGetWebhookDeliveryOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsGetWebhookDelivery
// method.
type GitHubV3RESTAPIClientOrgsGetWebhookDeliveryOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsGetWebhookOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsGetWebhook
// method.
type GitHubV3RESTAPIClientOrgsGetWebhookOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsListAppInstallationsOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsListAppInstallations
// method.
type GitHubV3RESTAPIClientOrgsListAppInstallationsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsListBlockedUsersOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsListBlockedUsers
// method.
type GitHubV3RESTAPIClientOrgsListBlockedUsersOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsListFailedInvitationsOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsListFailedInvitations
// method.
type GitHubV3RESTAPIClientOrgsListFailedInvitationsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsListForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsListForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientOrgsListForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsListForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsListForUser
// method.
type GitHubV3RESTAPIClientOrgsListForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsListInvitationTeamsOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsListInvitationTeams
// method.
type GitHubV3RESTAPIClientOrgsListInvitationTeamsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsListMembersOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsListMembers
// method.
type GitHubV3RESTAPIClientOrgsListMembersOptions struct {
	// Filter members returned in the list. 2fa_disabled means that only members without two-factor authentication [https://github.com/blog/1614-two-factor-authentication]
// enabled will be returned. This
// options is only available for organization owners.
	Filter *Enum108
	// Filter members returned by their role.
	Role *Enum109
}

// GitHubV3RESTAPIClientOrgsListMembershipsForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsListMembershipsForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientOrgsListMembershipsForAuthenticatedUserOptions struct {
	// Indicates the state of the memberships to return. If not specified, the API returns both active and pending memberships.
	State *Enum318
}

// GitHubV3RESTAPIClientOrgsListOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsList method.
type GitHubV3RESTAPIClientOrgsListOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsListOutsideCollaboratorsOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsListOutsideCollaborators
// method.
type GitHubV3RESTAPIClientOrgsListOutsideCollaboratorsOptions struct {
	// Filter the list of outside collaborators. 2fa_disabled means that only outside collaborators without two-factor authentication
// [https://github.com/blog/1614-two-factor-authentication] enabled will be
// returned.
	Filter *Enum116
}

// GitHubV3RESTAPIClientOrgsListPendingInvitationsOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsListPendingInvitations
// method.
type GitHubV3RESTAPIClientOrgsListPendingInvitationsOptions struct {
	// Filter invitations by their invitation source.
	InvitationSource *Enum103
	// Filter invitations by their member role.
	Role *Enum102
}

// GitHubV3RESTAPIClientOrgsListPublicMembersOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsListPublicMembers
// method.
type GitHubV3RESTAPIClientOrgsListPublicMembersOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsListSecurityManagerTeamsOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsListSecurityManagerTeams
// method.
type GitHubV3RESTAPIClientOrgsListSecurityManagerTeamsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsListWebhookDeliveriesOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsListWebhookDeliveries
// method.
type GitHubV3RESTAPIClientOrgsListWebhookDeliveriesOptions struct {
	Redelivery *bool
}

// GitHubV3RESTAPIClientOrgsListWebhooksOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsListWebhooks
// method.
type GitHubV3RESTAPIClientOrgsListWebhooksOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsPingWebhookOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsPingWebhook
// method.
type GitHubV3RESTAPIClientOrgsPingWebhookOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsRedeliverWebhookDeliveryOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsRedeliverWebhookDelivery
// method.
type GitHubV3RESTAPIClientOrgsRedeliverWebhookDeliveryOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsRemoveMemberOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsRemoveMember
// method.
type GitHubV3RESTAPIClientOrgsRemoveMemberOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsRemoveMembershipForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsRemoveMembershipForUser
// method.
type GitHubV3RESTAPIClientOrgsRemoveMembershipForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsRemoveOutsideCollaboratorOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsRemoveOutsideCollaborator
// method.
type GitHubV3RESTAPIClientOrgsRemoveOutsideCollaboratorOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsRemovePublicMembershipForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsRemovePublicMembershipForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientOrgsRemovePublicMembershipForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsRemoveSecurityManagerTeamOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsRemoveSecurityManagerTeam
// method.
type GitHubV3RESTAPIClientOrgsRemoveSecurityManagerTeamOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsSetMembershipForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsSetMembershipForUser
// method.
type GitHubV3RESTAPIClientOrgsSetMembershipForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsSetPublicMembershipForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsSetPublicMembershipForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientOrgsSetPublicMembershipForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsUnblockUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsUnblockUser
// method.
type GitHubV3RESTAPIClientOrgsUnblockUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsUpdateMembershipForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsUpdateMembershipForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientOrgsUpdateMembershipForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsUpdateOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsUpdate method.
type GitHubV3RESTAPIClientOrgsUpdateOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsUpdateWebhookConfigForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsUpdateWebhookConfigForOrg
// method.
type GitHubV3RESTAPIClientOrgsUpdateWebhookConfigForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientOrgsUpdateWebhookOptions contains the optional parameters for the GitHubV3RESTAPIClient.OrgsUpdateWebhook
// method.
type GitHubV3RESTAPIClientOrgsUpdateWebhookOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesDeletePackageForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesDeletePackageForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientPackagesDeletePackageForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesDeletePackageForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesDeletePackageForOrg
// method.
type GitHubV3RESTAPIClientPackagesDeletePackageForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesDeletePackageForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesDeletePackageForUser
// method.
type GitHubV3RESTAPIClientPackagesDeletePackageForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesDeletePackageVersionForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesDeletePackageVersionForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientPackagesDeletePackageVersionForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesDeletePackageVersionForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesDeletePackageVersionForOrg
// method.
type GitHubV3RESTAPIClientPackagesDeletePackageVersionForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesDeletePackageVersionForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesDeletePackageVersionForUser
// method.
type GitHubV3RESTAPIClientPackagesDeletePackageVersionForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOptions contains the optional parameters
// for the GitHubV3RESTAPIClient.PackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser method.
type GitHubV3RESTAPIClientPackagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUserOptions struct {
	// The state of the package, either active or deleted.
	State *Enum322
}

// GitHubV3RESTAPIClientPackagesGetAllPackageVersionsForPackageOwnedByOrgOptions contains the optional parameters for the
// GitHubV3RESTAPIClient.PackagesGetAllPackageVersionsForPackageOwnedByOrg method.
type GitHubV3RESTAPIClientPackagesGetAllPackageVersionsForPackageOwnedByOrgOptions struct {
	// The state of the package, either active or deleted.
	State *Enum122
}

// GitHubV3RESTAPIClientPackagesGetAllPackageVersionsForPackageOwnedByUserOptions contains the optional parameters for the
// GitHubV3RESTAPIClient.PackagesGetAllPackageVersionsForPackageOwnedByUser method.
type GitHubV3RESTAPIClientPackagesGetAllPackageVersionsForPackageOwnedByUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesGetPackageForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesGetPackageForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientPackagesGetPackageForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesGetPackageForOrganizationOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesGetPackageForOrganization
// method.
type GitHubV3RESTAPIClientPackagesGetPackageForOrganizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesGetPackageForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesGetPackageForUser
// method.
type GitHubV3RESTAPIClientPackagesGetPackageForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesGetPackageVersionForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesGetPackageVersionForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientPackagesGetPackageVersionForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesGetPackageVersionForOrganizationOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesGetPackageVersionForOrganization
// method.
type GitHubV3RESTAPIClientPackagesGetPackageVersionForOrganizationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesGetPackageVersionForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesGetPackageVersionForUser
// method.
type GitHubV3RESTAPIClientPackagesGetPackageVersionForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesListPackagesForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesListPackagesForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientPackagesListPackagesForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesListPackagesForOrganizationOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesListPackagesForOrganization
// method.
type GitHubV3RESTAPIClientPackagesListPackagesForOrganizationOptions struct {
}

// GitHubV3RESTAPIClientPackagesListPackagesForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesListPackagesForUser
// method.
type GitHubV3RESTAPIClientPackagesListPackagesForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesRestorePackageForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesRestorePackageForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientPackagesRestorePackageForAuthenticatedUserOptions struct {
	// package token
	Token *string
}

// GitHubV3RESTAPIClientPackagesRestorePackageForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesRestorePackageForOrg
// method.
type GitHubV3RESTAPIClientPackagesRestorePackageForOrgOptions struct {
	// package token
	Token *string
}

// GitHubV3RESTAPIClientPackagesRestorePackageForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesRestorePackageForUser
// method.
type GitHubV3RESTAPIClientPackagesRestorePackageForUserOptions struct {
	// package token
	Token *string
}

// GitHubV3RESTAPIClientPackagesRestorePackageVersionForAuthenticatedUserOptions contains the optional parameters for the
// GitHubV3RESTAPIClient.PackagesRestorePackageVersionForAuthenticatedUser method.
type GitHubV3RESTAPIClientPackagesRestorePackageVersionForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesRestorePackageVersionForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesRestorePackageVersionForOrg
// method.
type GitHubV3RESTAPIClientPackagesRestorePackageVersionForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPackagesRestorePackageVersionForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.PackagesRestorePackageVersionForUser
// method.
type GitHubV3RESTAPIClientPackagesRestorePackageVersionForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsAddCollaboratorOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsAddCollaborator
// method.
type GitHubV3RESTAPIClientProjectsAddCollaboratorOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsCreateCardOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsCreateCard
// method.
type GitHubV3RESTAPIClientProjectsCreateCardOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsCreateColumnOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsCreateColumn
// method.
type GitHubV3RESTAPIClientProjectsCreateColumnOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsCreateForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsCreateForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientProjectsCreateForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsCreateForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsCreateForOrg
// method.
type GitHubV3RESTAPIClientProjectsCreateForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsCreateForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsCreateForRepo
// method.
type GitHubV3RESTAPIClientProjectsCreateForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsDeleteCardOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsDeleteCard
// method.
type GitHubV3RESTAPIClientProjectsDeleteCardOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsDeleteColumnOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsDeleteColumn
// method.
type GitHubV3RESTAPIClientProjectsDeleteColumnOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsDeleteOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsDelete
// method.
type GitHubV3RESTAPIClientProjectsDeleteOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsGetCardOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsGetCard
// method.
type GitHubV3RESTAPIClientProjectsGetCardOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsGetColumnOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsGetColumn
// method.
type GitHubV3RESTAPIClientProjectsGetColumnOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsGetOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsGet method.
type GitHubV3RESTAPIClientProjectsGetOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsGetPermissionForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsGetPermissionForUser
// method.
type GitHubV3RESTAPIClientProjectsGetPermissionForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsListCardsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsListCards
// method.
type GitHubV3RESTAPIClientProjectsListCardsOptions struct {
	// Filters the project cards that are returned by the card's state.
	ArchivedState *Enum159
}

// GitHubV3RESTAPIClientProjectsListCollaboratorsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsListCollaborators
// method.
type GitHubV3RESTAPIClientProjectsListCollaboratorsOptions struct {
	// Filters the collaborators by their affiliation. outside means outside collaborators of a project that are not a member
// of the project's organization. direct means collaborators with permissions to a
// project, regardless of organization membership status. all means all collaborators the authenticated user can see.
	Affiliation *Enum161
}

// GitHubV3RESTAPIClientProjectsListColumnsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsListColumns
// method.
type GitHubV3RESTAPIClientProjectsListColumnsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsListForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsListForOrg
// method.
type GitHubV3RESTAPIClientProjectsListForOrgOptions struct {
	// Indicates the state of the projects to return.
	State *Enum124
}

// GitHubV3RESTAPIClientProjectsListForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsListForRepo
// method.
type GitHubV3RESTAPIClientProjectsListForRepoOptions struct {
	// Indicates the state of the projects to return.
	State *Enum267
}

// GitHubV3RESTAPIClientProjectsListForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsListForUser
// method.
type GitHubV3RESTAPIClientProjectsListForUserOptions struct {
	// Indicates the state of the projects to return.
	State *Enum333
}

// GitHubV3RESTAPIClientProjectsMoveCardOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsMoveCard
// method.
type GitHubV3RESTAPIClientProjectsMoveCardOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsMoveColumnOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsMoveColumn
// method.
type GitHubV3RESTAPIClientProjectsMoveColumnOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsRemoveCollaboratorOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsRemoveCollaborator
// method.
type GitHubV3RESTAPIClientProjectsRemoveCollaboratorOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsUpdateCardOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsUpdateCard
// method.
type GitHubV3RESTAPIClientProjectsUpdateCardOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsUpdateColumnOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsUpdateColumn
// method.
type GitHubV3RESTAPIClientProjectsUpdateColumnOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientProjectsUpdateOptions contains the optional parameters for the GitHubV3RESTAPIClient.ProjectsUpdate
// method.
type GitHubV3RESTAPIClientProjectsUpdateOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsCheckIfMergedOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsCheckIfMerged
// method.
type GitHubV3RESTAPIClientPullsCheckIfMergedOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsCreateOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsCreate method.
type GitHubV3RESTAPIClientPullsCreateOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsCreateReplyForReviewCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsCreateReplyForReviewComment
// method.
type GitHubV3RESTAPIClientPullsCreateReplyForReviewCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsCreateReviewCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsCreateReviewComment
// method.
type GitHubV3RESTAPIClientPullsCreateReviewCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsCreateReviewOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsCreateReview
// method.
type GitHubV3RESTAPIClientPullsCreateReviewOptions struct {
	Body *Paths18Bjzy1ReposOwnerRepoPullsPullNumberReviewsPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientPullsDeletePendingReviewOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsDeletePendingReview
// method.
type GitHubV3RESTAPIClientPullsDeletePendingReviewOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsDeleteReviewCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsDeleteReviewComment
// method.
type GitHubV3RESTAPIClientPullsDeleteReviewCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsDismissReviewOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsDismissReview
// method.
type GitHubV3RESTAPIClientPullsDismissReviewOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsGetOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsGet method.
type GitHubV3RESTAPIClientPullsGetOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsGetReviewCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsGetReviewComment
// method.
type GitHubV3RESTAPIClientPullsGetReviewCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsGetReviewOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsGetReview
// method.
type GitHubV3RESTAPIClientPullsGetReviewOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsListCommentsForReviewOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsListCommentsForReview
// method.
type GitHubV3RESTAPIClientPullsListCommentsForReviewOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsListCommitsOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsListCommits
// method.
type GitHubV3RESTAPIClientPullsListCommitsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsListFilesOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsListFiles
// method.
type GitHubV3RESTAPIClientPullsListFilesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsListOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsList method.
type GitHubV3RESTAPIClientPullsListOptions struct {
	// Filter pulls by base branch name. Example: gh-pages.
	Base *string
	// The direction of the sort. Default: desc when sort is created or sort is not specified, otherwise asc.
	Direction *Enum270
	// Filter pulls by head user or head organization and branch name in the format of user:ref-name or organization:ref-name.
// For example: github:new-script-format or octocat:test-branch.
	Head *string
	// What to sort results by. popularity will sort by the number of comments. long-running will sort by date created and will
// limit the results to pull requests that have been open for more than a month
// and have had activity within the past month.
	Sort *Enum269
	// Either open, closed, or all to filter by state.
	State *Enum268
}

// GitHubV3RESTAPIClientPullsListRequestedReviewersOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsListRequestedReviewers
// method.
type GitHubV3RESTAPIClientPullsListRequestedReviewersOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsListReviewCommentsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsListReviewCommentsForRepo
// method.
type GitHubV3RESTAPIClientPullsListReviewCommentsForRepoOptions struct {
	// The direction to sort results. Ignored without sort parameter.
	Direction *Enum273
	Sort *Enum272
}

// GitHubV3RESTAPIClientPullsListReviewCommentsOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsListReviewComments
// method.
type GitHubV3RESTAPIClientPullsListReviewCommentsOptions struct {
	// The direction to sort results. Ignored without sort parameter.
	Direction *Enum277
}

// GitHubV3RESTAPIClientPullsListReviewsOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsListReviews
// method.
type GitHubV3RESTAPIClientPullsListReviewsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsMergeOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsMerge method.
type GitHubV3RESTAPIClientPullsMergeOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsRemoveRequestedReviewersOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsRemoveRequestedReviewers
// method.
type GitHubV3RESTAPIClientPullsRemoveRequestedReviewersOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsRequestReviewersOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsRequestReviewers
// method.
type GitHubV3RESTAPIClientPullsRequestReviewersOptions struct {
	Body *PathsUto5ZtReposOwnerRepoPullsPullNumberRequestedReviewersPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientPullsSubmitReviewOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsSubmitReview
// method.
type GitHubV3RESTAPIClientPullsSubmitReviewOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsUpdateBranchOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsUpdateBranch
// method.
type GitHubV3RESTAPIClientPullsUpdateBranchOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsUpdateOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsUpdate method.
type GitHubV3RESTAPIClientPullsUpdateOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsUpdateReviewCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsUpdateReviewComment
// method.
type GitHubV3RESTAPIClientPullsUpdateReviewCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientPullsUpdateReviewOptions contains the optional parameters for the GitHubV3RESTAPIClient.PullsUpdateReview
// method.
type GitHubV3RESTAPIClientPullsUpdateReviewOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientRateLimitGetOptions contains the optional parameters for the GitHubV3RESTAPIClient.RateLimitGet method.
type GitHubV3RESTAPIClientRateLimitGetOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsCreateForCommitCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsCreateForCommitComment
// method.
type GitHubV3RESTAPIClientReactionsCreateForCommitCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsCreateForIssueCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsCreateForIssueComment
// method.
type GitHubV3RESTAPIClientReactionsCreateForIssueCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsCreateForIssueOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsCreateForIssue
// method.
type GitHubV3RESTAPIClientReactionsCreateForIssueOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsCreateForPullRequestReviewCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsCreateForPullRequestReviewComment
// method.
type GitHubV3RESTAPIClientReactionsCreateForPullRequestReviewCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsCreateForReleaseOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsCreateForRelease
// method.
type GitHubV3RESTAPIClientReactionsCreateForReleaseOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsCreateForTeamDiscussionCommentInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsCreateForTeamDiscussionCommentInOrg
// method.
type GitHubV3RESTAPIClientReactionsCreateForTeamDiscussionCommentInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsCreateForTeamDiscussionCommentLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsCreateForTeamDiscussionCommentLegacy
// method.
type GitHubV3RESTAPIClientReactionsCreateForTeamDiscussionCommentLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsCreateForTeamDiscussionInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsCreateForTeamDiscussionInOrg
// method.
type GitHubV3RESTAPIClientReactionsCreateForTeamDiscussionInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsCreateForTeamDiscussionLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsCreateForTeamDiscussionLegacy
// method.
type GitHubV3RESTAPIClientReactionsCreateForTeamDiscussionLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsDeleteForCommitCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsDeleteForCommitComment
// method.
type GitHubV3RESTAPIClientReactionsDeleteForCommitCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsDeleteForIssueCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsDeleteForIssueComment
// method.
type GitHubV3RESTAPIClientReactionsDeleteForIssueCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsDeleteForIssueOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsDeleteForIssue
// method.
type GitHubV3RESTAPIClientReactionsDeleteForIssueOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsDeleteForPullRequestCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsDeleteForPullRequestComment
// method.
type GitHubV3RESTAPIClientReactionsDeleteForPullRequestCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsDeleteForReleaseOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsDeleteForRelease
// method.
type GitHubV3RESTAPIClientReactionsDeleteForReleaseOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsDeleteForTeamDiscussionCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsDeleteForTeamDiscussionComment
// method.
type GitHubV3RESTAPIClientReactionsDeleteForTeamDiscussionCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsDeleteForTeamDiscussionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsDeleteForTeamDiscussion
// method.
type GitHubV3RESTAPIClientReactionsDeleteForTeamDiscussionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReactionsListForCommitCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsListForCommitComment
// method.
type GitHubV3RESTAPIClientReactionsListForCommitCommentOptions struct {
	// Returns a single reaction type [https://docs.github.com/rest/reference/reactions#reaction-types]. Omit this parameter to
// list all reactions to a commit comment.
	Content *Enum143
}

// GitHubV3RESTAPIClientReactionsListForIssueCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsListForIssueComment
// method.
type GitHubV3RESTAPIClientReactionsListForIssueCommentOptions struct {
	// Returns a single reaction type [https://docs.github.com/rest/reference/reactions#reaction-types]. Omit this parameter to
// list all reactions to an issue comment.
	Content *Enum143
}

// GitHubV3RESTAPIClientReactionsListForIssueOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsListForIssue
// method.
type GitHubV3RESTAPIClientReactionsListForIssueOptions struct {
	// Returns a single reaction type [https://docs.github.com/rest/reference/reactions#reaction-types]. Omit this parameter to
// list all reactions to an issue.
	Content *Enum143
}

// GitHubV3RESTAPIClientReactionsListForPullRequestReviewCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsListForPullRequestReviewComment
// method.
type GitHubV3RESTAPIClientReactionsListForPullRequestReviewCommentOptions struct {
	// Returns a single reaction type [https://docs.github.com/rest/reference/reactions#reaction-types]. Omit this parameter to
// list all reactions to a pull request review comment.
	Content *Enum143
}

// GitHubV3RESTAPIClientReactionsListForReleaseOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsListForRelease
// method.
type GitHubV3RESTAPIClientReactionsListForReleaseOptions struct {
	// Returns a single reaction type [https://docs.github.com/rest/reference/reactions#reaction-types]. Omit this parameter to
// list all reactions to a release.
	Content *Enum143
}

// GitHubV3RESTAPIClientReactionsListForTeamDiscussionCommentInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsListForTeamDiscussionCommentInOrg
// method.
type GitHubV3RESTAPIClientReactionsListForTeamDiscussionCommentInOrgOptions struct {
	// Returns a single reaction type [https://docs.github.com/rest/reference/reactions#reaction-types]. Omit this parameter to
// list all reactions to a team discussion comment.
	Content *Enum143
}

// GitHubV3RESTAPIClientReactionsListForTeamDiscussionCommentLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsListForTeamDiscussionCommentLegacy
// method.
type GitHubV3RESTAPIClientReactionsListForTeamDiscussionCommentLegacyOptions struct {
	// Returns a single reaction type [https://docs.github.com/rest/reference/reactions#reaction-types]. Omit this parameter to
// list all reactions to a team discussion comment.
	Content *Enum143
}

// GitHubV3RESTAPIClientReactionsListForTeamDiscussionInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsListForTeamDiscussionInOrg
// method.
type GitHubV3RESTAPIClientReactionsListForTeamDiscussionInOrgOptions struct {
	// Returns a single reaction type [https://docs.github.com/rest/reference/reactions#reaction-types]. Omit this parameter to
// list all reactions to a team discussion.
	Content *Enum142
}

// GitHubV3RESTAPIClientReactionsListForTeamDiscussionLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReactionsListForTeamDiscussionLegacy
// method.
type GitHubV3RESTAPIClientReactionsListForTeamDiscussionLegacyOptions struct {
	// Returns a single reaction type [https://docs.github.com/rest/reference/reactions#reaction-types]. Omit this parameter to
// list all reactions to a team discussion.
	Content *Enum143
}

// GitHubV3RESTAPIClientReposAcceptInvitationForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposAcceptInvitationForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientReposAcceptInvitationForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposAddAppAccessRestrictionsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposAddAppAccessRestrictions
// method.
type GitHubV3RESTAPIClientReposAddAppAccessRestrictionsOptions struct {
	Body *Paths1Wtdci3ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientReposAddCollaboratorOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposAddCollaborator
// method.
type GitHubV3RESTAPIClientReposAddCollaboratorOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposAddStatusCheckContextsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposAddStatusCheckContexts
// method.
type GitHubV3RESTAPIClientReposAddStatusCheckContextsOptions struct {
	Body *Paths1Vu4T6AReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientReposAddTeamAccessRestrictionsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposAddTeamAccessRestrictions
// method.
type GitHubV3RESTAPIClientReposAddTeamAccessRestrictionsOptions struct {
	Body *Paths1Wh4VhdReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientReposAddUserAccessRestrictionsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposAddUserAccessRestrictions
// method.
type GitHubV3RESTAPIClientReposAddUserAccessRestrictionsOptions struct {
	Body *Paths11CipfhReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientReposCheckCollaboratorOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCheckCollaborator
// method.
type GitHubV3RESTAPIClientReposCheckCollaboratorOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCheckVulnerabilityAlertsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCheckVulnerabilityAlerts
// method.
type GitHubV3RESTAPIClientReposCheckVulnerabilityAlertsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCodeownersErrorsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCodeownersErrors
// method.
type GitHubV3RESTAPIClientReposCodeownersErrorsOptions struct {
	// A branch, tag or commit name used to determine which version of the CODEOWNERS file to use. Default: the repository's default
// branch (e.g. main)
	Ref *string
}

// GitHubV3RESTAPIClientReposCompareCommitsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCompareCommits
// method.
type GitHubV3RESTAPIClientReposCompareCommitsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateAutolinkOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateAutolink
// method.
type GitHubV3RESTAPIClientReposCreateAutolinkOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateCommitCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateCommitComment
// method.
type GitHubV3RESTAPIClientReposCreateCommitCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateCommitSignatureProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateCommitSignatureProtection
// method.
type GitHubV3RESTAPIClientReposCreateCommitSignatureProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateCommitStatusOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateCommitStatus
// method.
type GitHubV3RESTAPIClientReposCreateCommitStatusOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateDeployKeyOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateDeployKey
// method.
type GitHubV3RESTAPIClientReposCreateDeployKeyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateDeploymentBranchPolicyOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateDeploymentBranchPolicy
// method.
type GitHubV3RESTAPIClientReposCreateDeploymentBranchPolicyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateDeploymentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateDeployment
// method.
type GitHubV3RESTAPIClientReposCreateDeploymentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateDeploymentStatusOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateDeploymentStatus
// method.
type GitHubV3RESTAPIClientReposCreateDeploymentStatusOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateDispatchEventOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateDispatchEvent
// method.
type GitHubV3RESTAPIClientReposCreateDispatchEventOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientReposCreateForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateForkOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateFork
// method.
type GitHubV3RESTAPIClientReposCreateForkOptions struct {
	Body *Paths19QyncoReposOwnerRepoForksPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientReposCreateInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateInOrg
// method.
type GitHubV3RESTAPIClientReposCreateInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateOrUpdateEnvironmentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateOrUpdateEnvironment
// method.
type GitHubV3RESTAPIClientReposCreateOrUpdateEnvironmentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateOrUpdateFileContentsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateOrUpdateFileContents
// method.
type GitHubV3RESTAPIClientReposCreateOrUpdateFileContentsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreatePagesDeploymentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreatePagesDeployment
// method.
type GitHubV3RESTAPIClientReposCreatePagesDeploymentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreatePagesSiteOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreatePagesSite
// method.
type GitHubV3RESTAPIClientReposCreatePagesSiteOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateReleaseOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateRelease
// method.
type GitHubV3RESTAPIClientReposCreateReleaseOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateTagProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateTagProtection
// method.
type GitHubV3RESTAPIClientReposCreateTagProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateUsingTemplateOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateUsingTemplate
// method.
type GitHubV3RESTAPIClientReposCreateUsingTemplateOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposCreateWebhookOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposCreateWebhook
// method.
type GitHubV3RESTAPIClientReposCreateWebhookOptions struct {
	Body *Paths12Tgeh3ReposOwnerRepoHooksPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientReposDeclineInvitationForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeclineInvitationForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientReposDeclineInvitationForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteAccessRestrictionsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteAccessRestrictions
// method.
type GitHubV3RESTAPIClientReposDeleteAccessRestrictionsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteAdminBranchProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteAdminBranchProtection
// method.
type GitHubV3RESTAPIClientReposDeleteAdminBranchProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteAnEnvironmentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteAnEnvironment
// method.
type GitHubV3RESTAPIClientReposDeleteAnEnvironmentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteAutolinkOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteAutolink
// method.
type GitHubV3RESTAPIClientReposDeleteAutolinkOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteBranchProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteBranchProtection
// method.
type GitHubV3RESTAPIClientReposDeleteBranchProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteCommitCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteCommitComment
// method.
type GitHubV3RESTAPIClientReposDeleteCommitCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteCommitSignatureProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteCommitSignatureProtection
// method.
type GitHubV3RESTAPIClientReposDeleteCommitSignatureProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteDeployKeyOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteDeployKey
// method.
type GitHubV3RESTAPIClientReposDeleteDeployKeyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteDeploymentBranchPolicyOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteDeploymentBranchPolicy
// method.
type GitHubV3RESTAPIClientReposDeleteDeploymentBranchPolicyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteDeploymentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteDeployment
// method.
type GitHubV3RESTAPIClientReposDeleteDeploymentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteFileOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteFile
// method.
type GitHubV3RESTAPIClientReposDeleteFileOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteInvitationOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteInvitation
// method.
type GitHubV3RESTAPIClientReposDeleteInvitationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDelete method.
type GitHubV3RESTAPIClientReposDeleteOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeletePagesSiteOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeletePagesSite
// method.
type GitHubV3RESTAPIClientReposDeletePagesSiteOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeletePullRequestReviewProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeletePullRequestReviewProtection
// method.
type GitHubV3RESTAPIClientReposDeletePullRequestReviewProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteReleaseAssetOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteReleaseAsset
// method.
type GitHubV3RESTAPIClientReposDeleteReleaseAssetOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteReleaseOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteRelease
// method.
type GitHubV3RESTAPIClientReposDeleteReleaseOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteTagProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteTagProtection
// method.
type GitHubV3RESTAPIClientReposDeleteTagProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDeleteWebhookOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDeleteWebhook
// method.
type GitHubV3RESTAPIClientReposDeleteWebhookOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDisableAutomatedSecurityFixesOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDisableAutomatedSecurityFixes
// method.
type GitHubV3RESTAPIClientReposDisableAutomatedSecurityFixesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDisableLfsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDisableLfsForRepo
// method.
type GitHubV3RESTAPIClientReposDisableLfsForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDisableVulnerabilityAlertsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDisableVulnerabilityAlerts
// method.
type GitHubV3RESTAPIClientReposDisableVulnerabilityAlertsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDownloadTarballArchiveOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDownloadTarballArchive
// method.
type GitHubV3RESTAPIClientReposDownloadTarballArchiveOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposDownloadZipballArchiveOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposDownloadZipballArchive
// method.
type GitHubV3RESTAPIClientReposDownloadZipballArchiveOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposEnableAutomatedSecurityFixesOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposEnableAutomatedSecurityFixes
// method.
type GitHubV3RESTAPIClientReposEnableAutomatedSecurityFixesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposEnableLfsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposEnableLfsForRepo
// method.
type GitHubV3RESTAPIClientReposEnableLfsForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposEnableVulnerabilityAlertsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposEnableVulnerabilityAlerts
// method.
type GitHubV3RESTAPIClientReposEnableVulnerabilityAlertsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGenerateReleaseNotesOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGenerateReleaseNotes
// method.
type GitHubV3RESTAPIClientReposGenerateReleaseNotesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetAccessRestrictionsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetAccessRestrictions
// method.
type GitHubV3RESTAPIClientReposGetAccessRestrictionsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetAdminBranchProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetAdminBranchProtection
// method.
type GitHubV3RESTAPIClientReposGetAdminBranchProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetAllEnvironmentsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetAllEnvironments
// method.
type GitHubV3RESTAPIClientReposGetAllEnvironmentsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetAllStatusCheckContextsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetAllStatusCheckContexts
// method.
type GitHubV3RESTAPIClientReposGetAllStatusCheckContextsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetAllTopicsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetAllTopics
// method.
type GitHubV3RESTAPIClientReposGetAllTopicsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetAppsWithAccessToProtectedBranchOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetAppsWithAccessToProtectedBranch
// method.
type GitHubV3RESTAPIClientReposGetAppsWithAccessToProtectedBranchOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetAutolinkOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetAutolink
// method.
type GitHubV3RESTAPIClientReposGetAutolinkOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetBranchOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetBranch
// method.
type GitHubV3RESTAPIClientReposGetBranchOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetBranchProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetBranchProtection
// method.
type GitHubV3RESTAPIClientReposGetBranchProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetClonesOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetClones
// method.
type GitHubV3RESTAPIClientReposGetClonesOptions struct {
}

// GitHubV3RESTAPIClientReposGetCodeFrequencyStatsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetCodeFrequencyStats
// method.
type GitHubV3RESTAPIClientReposGetCodeFrequencyStatsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetCollaboratorPermissionLevelOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetCollaboratorPermissionLevel
// method.
type GitHubV3RESTAPIClientReposGetCollaboratorPermissionLevelOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetCombinedStatusForRefOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetCombinedStatusForRef
// method.
type GitHubV3RESTAPIClientReposGetCombinedStatusForRefOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetCommitActivityStatsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetCommitActivityStats
// method.
type GitHubV3RESTAPIClientReposGetCommitActivityStatsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetCommitCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetCommitComment
// method.
type GitHubV3RESTAPIClientReposGetCommitCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetCommitOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetCommit
// method.
type GitHubV3RESTAPIClientReposGetCommitOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetCommitSignatureProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetCommitSignatureProtection
// method.
type GitHubV3RESTAPIClientReposGetCommitSignatureProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetCommunityProfileMetricsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetCommunityProfileMetrics
// method.
type GitHubV3RESTAPIClientReposGetCommunityProfileMetricsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetContentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetContent
// method.
type GitHubV3RESTAPIClientReposGetContentOptions struct {
	// The name of the commit/branch/tag. Default: the repository’s default branch (usually master)
	Ref *string
}

// GitHubV3RESTAPIClientReposGetContributorsStatsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetContributorsStats
// method.
type GitHubV3RESTAPIClientReposGetContributorsStatsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetDeployKeyOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetDeployKey
// method.
type GitHubV3RESTAPIClientReposGetDeployKeyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetDeploymentBranchPolicyOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetDeploymentBranchPolicy
// method.
type GitHubV3RESTAPIClientReposGetDeploymentBranchPolicyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetDeploymentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetDeployment
// method.
type GitHubV3RESTAPIClientReposGetDeploymentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetDeploymentStatusOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetDeploymentStatus
// method.
type GitHubV3RESTAPIClientReposGetDeploymentStatusOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetEnvironmentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetEnvironment
// method.
type GitHubV3RESTAPIClientReposGetEnvironmentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetLatestPagesBuildOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetLatestPagesBuild
// method.
type GitHubV3RESTAPIClientReposGetLatestPagesBuildOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetLatestReleaseOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetLatestRelease
// method.
type GitHubV3RESTAPIClientReposGetLatestReleaseOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGet method.
type GitHubV3RESTAPIClientReposGetOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetPagesBuildOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetPagesBuild
// method.
type GitHubV3RESTAPIClientReposGetPagesBuildOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetPagesHealthCheckOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetPagesHealthCheck
// method.
type GitHubV3RESTAPIClientReposGetPagesHealthCheckOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetPagesOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetPages
// method.
type GitHubV3RESTAPIClientReposGetPagesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetParticipationStatsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetParticipationStats
// method.
type GitHubV3RESTAPIClientReposGetParticipationStatsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetPullRequestReviewProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetPullRequestReviewProtection
// method.
type GitHubV3RESTAPIClientReposGetPullRequestReviewProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetPunchCardStatsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetPunchCardStats
// method.
type GitHubV3RESTAPIClientReposGetPunchCardStatsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetReadmeInDirectoryOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetReadmeInDirectory
// method.
type GitHubV3RESTAPIClientReposGetReadmeInDirectoryOptions struct {
	// The name of the commit/branch/tag. Default: the repository’s default branch (usually master)
	Ref *string
}

// GitHubV3RESTAPIClientReposGetReadmeOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetReadme
// method.
type GitHubV3RESTAPIClientReposGetReadmeOptions struct {
	// The name of the commit/branch/tag. Default: the repository’s default branch (usually master)
	Ref *string
}

// GitHubV3RESTAPIClientReposGetReleaseAssetOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetReleaseAsset
// method.
type GitHubV3RESTAPIClientReposGetReleaseAssetOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetReleaseByTagOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetReleaseByTag
// method.
type GitHubV3RESTAPIClientReposGetReleaseByTagOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetReleaseOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetRelease
// method.
type GitHubV3RESTAPIClientReposGetReleaseOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetStatusChecksProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetStatusChecksProtection
// method.
type GitHubV3RESTAPIClientReposGetStatusChecksProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetTeamsWithAccessToProtectedBranchOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetTeamsWithAccessToProtectedBranch
// method.
type GitHubV3RESTAPIClientReposGetTeamsWithAccessToProtectedBranchOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetTopPathsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetTopPaths
// method.
type GitHubV3RESTAPIClientReposGetTopPathsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetTopReferrersOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetTopReferrers
// method.
type GitHubV3RESTAPIClientReposGetTopReferrersOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetUsersWithAccessToProtectedBranchOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetUsersWithAccessToProtectedBranch
// method.
type GitHubV3RESTAPIClientReposGetUsersWithAccessToProtectedBranchOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetViewsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetViews
// method.
type GitHubV3RESTAPIClientReposGetViewsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetWebhookConfigForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetWebhookConfigForRepo
// method.
type GitHubV3RESTAPIClientReposGetWebhookConfigForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetWebhookDeliveryOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetWebhookDelivery
// method.
type GitHubV3RESTAPIClientReposGetWebhookDeliveryOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposGetWebhookOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposGetWebhook
// method.
type GitHubV3RESTAPIClientReposGetWebhookOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListAutolinksOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListAutolinks
// method.
type GitHubV3RESTAPIClientReposListAutolinksOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListBranchesForHeadCommitOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListBranchesForHeadCommit
// method.
type GitHubV3RESTAPIClientReposListBranchesForHeadCommitOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListBranchesOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListBranches
// method.
type GitHubV3RESTAPIClientReposListBranchesOptions struct {
	// Setting to true returns only protected branches. When set to false, only unprotected branches are returned. Omitting this
// parameter returns all branches.
	Protected *bool
}

// GitHubV3RESTAPIClientReposListCollaboratorsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListCollaborators
// method.
type GitHubV3RESTAPIClientReposListCollaboratorsOptions struct {
	// Filter collaborators returned by their affiliation. outside means all outside collaborators of an organization-owned repository.
// direct means all collaborators with permissions to an
// organization-owned repository, regardless of organization membership status. all means all collaborators the authenticated
// user can see.
	Affiliation *Enum205
	// Filter collaborators by the permissions they have on the repository. If not specified, all collaborators will be returned.
	Permission *Enum206
}

// GitHubV3RESTAPIClientReposListCommentsForCommitOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListCommentsForCommit
// method.
type GitHubV3RESTAPIClientReposListCommentsForCommitOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListCommitCommentsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListCommitCommentsForRepo
// method.
type GitHubV3RESTAPIClientReposListCommitCommentsForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListCommitStatusesForRefOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListCommitStatusesForRef
// method.
type GitHubV3RESTAPIClientReposListCommitStatusesForRefOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListCommitsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListCommits
// method.
type GitHubV3RESTAPIClientReposListCommitsOptions struct {
	// GitHub login or email address by which to filter by commit author.
	Author *string
	// Only commits containing this file path will be returned.
	Path *string
	// SHA or branch to start listing commits from. Default: the repository’s default branch (usually main).
	SHA *string
	// Only commits before this date will be returned. This is a timestamp in ISO 8601 [https://en.wikipedia.org/wiki/ISO_8601]
// format: YYYY-MM-DDTHH:MM:SSZ.
	Until *time.Time
}

// GitHubV3RESTAPIClientReposListContributorsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListContributors
// method.
type GitHubV3RESTAPIClientReposListContributorsOptions struct {
	// Set to 1 or true to include anonymous contributors in results.
	Anon *string
}

// GitHubV3RESTAPIClientReposListDeployKeysOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListDeployKeys
// method.
type GitHubV3RESTAPIClientReposListDeployKeysOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListDeploymentBranchPoliciesOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListDeploymentBranchPolicies
// method.
type GitHubV3RESTAPIClientReposListDeploymentBranchPoliciesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListDeploymentStatusesOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListDeploymentStatuses
// method.
type GitHubV3RESTAPIClientReposListDeploymentStatusesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListDeploymentsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListDeployments
// method.
type GitHubV3RESTAPIClientReposListDeploymentsOptions struct {
	// The name of the environment that was deployed to (e.g., staging or production).
	Environment *string
	// The name of the ref. This can be a branch, tag, or SHA.
	Ref *string
	// The SHA recorded at creation time.
	SHA *string
	// The name of the task for the deployment (e.g., deploy or deploy:migrations).
	Task *string
}

// GitHubV3RESTAPIClientReposListForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientReposListForAuthenticatedUserOptions struct {
	// Comma-separated list of values. Can include:
// * owner: Repositories that are owned by the authenticated user.
// * collaborator: Repositories that the user has been added to as a collaborator.
// * organization_member: Repositories that the user has access to through being a member of an organization. This includes
// every repository on every team that the user is on.
	Affiliation *string
	// The order to sort by. Default: asc when using full_name, otherwise desc.
	Direction *Enum326
	// The property to sort the results by.
	Sort *Enum325
	// Limit results to repositories of the specified type. Will cause a 422 error if used in the same request as visibility or
// affiliation.
	Type *Enum324
	// Limit results to repositories with the specified visibility.
	Visibility *Enum323
}

// GitHubV3RESTAPIClientReposListForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListForOrg
// method.
type GitHubV3RESTAPIClientReposListForOrgOptions struct {
	// The order to sort by. Default: asc when using full_name, otherwise desc.
	Direction *Enum128
	// The property to sort the results by.
	Sort *Enum127
	// Specifies the types of repositories you want returned.
	Type *Enum126
}

// GitHubV3RESTAPIClientReposListForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListForUser
// method.
type GitHubV3RESTAPIClientReposListForUserOptions struct {
	// The order to sort by. Default: asc when using full_name, otherwise desc.
	Direction *Enum336
	// The property to sort the results by.
	Sort *Enum335
	// Limit results to repositories of the specified type.
	Type *Enum334
}

// GitHubV3RESTAPIClientReposListForksOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListForks
// method.
type GitHubV3RESTAPIClientReposListForksOptions struct {
	// The sort order. stargazers will sort by star count.
	Sort *Enum229
}

// GitHubV3RESTAPIClientReposListInvitationsForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListInvitationsForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientReposListInvitationsForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListInvitationsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListInvitations
// method.
type GitHubV3RESTAPIClientReposListInvitationsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListLanguagesOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListLanguages
// method.
type GitHubV3RESTAPIClientReposListLanguagesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListPagesBuildsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListPagesBuilds
// method.
type GitHubV3RESTAPIClientReposListPagesBuildsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListPublicOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListPublic
// method.
type GitHubV3RESTAPIClientReposListPublicOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListPullRequestsAssociatedWithCommitOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListPullRequestsAssociatedWithCommit
// method.
type GitHubV3RESTAPIClientReposListPullRequestsAssociatedWithCommitOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListReleaseAssetsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListReleaseAssets
// method.
type GitHubV3RESTAPIClientReposListReleaseAssetsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListReleasesOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListReleases
// method.
type GitHubV3RESTAPIClientReposListReleasesOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListTagProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListTagProtection
// method.
type GitHubV3RESTAPIClientReposListTagProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListTagsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListTags
// method.
type GitHubV3RESTAPIClientReposListTagsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListTeamsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListTeams
// method.
type GitHubV3RESTAPIClientReposListTeamsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposListWebhookDeliveriesOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListWebhookDeliveries
// method.
type GitHubV3RESTAPIClientReposListWebhookDeliveriesOptions struct {
	Redelivery *bool
}

// GitHubV3RESTAPIClientReposListWebhooksOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposListWebhooks
// method.
type GitHubV3RESTAPIClientReposListWebhooksOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposMergeOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposMerge method.
type GitHubV3RESTAPIClientReposMergeOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposMergeUpstreamOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposMergeUpstream
// method.
type GitHubV3RESTAPIClientReposMergeUpstreamOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposPingWebhookOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposPingWebhook
// method.
type GitHubV3RESTAPIClientReposPingWebhookOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposRedeliverWebhookDeliveryOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposRedeliverWebhookDelivery
// method.
type GitHubV3RESTAPIClientReposRedeliverWebhookDeliveryOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposRemoveAppAccessRestrictionsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposRemoveAppAccessRestrictions
// method.
type GitHubV3RESTAPIClientReposRemoveAppAccessRestrictionsOptions struct {
	Body *Paths1Jqmy81ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientReposRemoveCollaboratorOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposRemoveCollaborator
// method.
type GitHubV3RESTAPIClientReposRemoveCollaboratorOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposRemoveStatusCheckContextsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposRemoveStatusCheckContexts
// method.
type GitHubV3RESTAPIClientReposRemoveStatusCheckContextsOptions struct {
	Body *Paths1L4Sk0SReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientReposRemoveStatusCheckProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposRemoveStatusCheckProtection
// method.
type GitHubV3RESTAPIClientReposRemoveStatusCheckProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposRemoveTeamAccessRestrictionsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposRemoveTeamAccessRestrictions
// method.
type GitHubV3RESTAPIClientReposRemoveTeamAccessRestrictionsOptions struct {
	Body *Paths1D6PpoeReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientReposRemoveUserAccessRestrictionsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposRemoveUserAccessRestrictions
// method.
type GitHubV3RESTAPIClientReposRemoveUserAccessRestrictionsOptions struct {
	Body *Paths2Co2J1ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientReposRenameBranchOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposRenameBranch
// method.
type GitHubV3RESTAPIClientReposRenameBranchOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposReplaceAllTopicsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposReplaceAllTopics
// method.
type GitHubV3RESTAPIClientReposReplaceAllTopicsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposRequestPagesBuildOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposRequestPagesBuild
// method.
type GitHubV3RESTAPIClientReposRequestPagesBuildOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposSetAdminBranchProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposSetAdminBranchProtection
// method.
type GitHubV3RESTAPIClientReposSetAdminBranchProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposSetAppAccessRestrictionsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposSetAppAccessRestrictions
// method.
type GitHubV3RESTAPIClientReposSetAppAccessRestrictionsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposSetStatusCheckContextsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposSetStatusCheckContexts
// method.
type GitHubV3RESTAPIClientReposSetStatusCheckContextsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposSetTeamAccessRestrictionsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposSetTeamAccessRestrictions
// method.
type GitHubV3RESTAPIClientReposSetTeamAccessRestrictionsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposSetUserAccessRestrictionsOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposSetUserAccessRestrictions
// method.
type GitHubV3RESTAPIClientReposSetUserAccessRestrictionsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposTestPushWebhookOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposTestPushWebhook
// method.
type GitHubV3RESTAPIClientReposTestPushWebhookOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposTransferOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposTransfer
// method.
type GitHubV3RESTAPIClientReposTransferOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposUpdateBranchProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposUpdateBranchProtection
// method.
type GitHubV3RESTAPIClientReposUpdateBranchProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposUpdateCommitCommentOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposUpdateCommitComment
// method.
type GitHubV3RESTAPIClientReposUpdateCommitCommentOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposUpdateDeploymentBranchPolicyOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposUpdateDeploymentBranchPolicy
// method.
type GitHubV3RESTAPIClientReposUpdateDeploymentBranchPolicyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposUpdateInformationAboutPagesSiteOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposUpdateInformationAboutPagesSite
// method.
type GitHubV3RESTAPIClientReposUpdateInformationAboutPagesSiteOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposUpdateInvitationOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposUpdateInvitation
// method.
type GitHubV3RESTAPIClientReposUpdateInvitationOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposUpdateOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposUpdate method.
type GitHubV3RESTAPIClientReposUpdateOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposUpdatePullRequestReviewProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposUpdatePullRequestReviewProtection
// method.
type GitHubV3RESTAPIClientReposUpdatePullRequestReviewProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposUpdateReleaseAssetOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposUpdateReleaseAsset
// method.
type GitHubV3RESTAPIClientReposUpdateReleaseAssetOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposUpdateReleaseOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposUpdateRelease
// method.
type GitHubV3RESTAPIClientReposUpdateReleaseOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposUpdateStatusCheckProtectionOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposUpdateStatusCheckProtection
// method.
type GitHubV3RESTAPIClientReposUpdateStatusCheckProtectionOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposUpdateWebhookConfigForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposUpdateWebhookConfigForRepo
// method.
type GitHubV3RESTAPIClientReposUpdateWebhookConfigForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposUpdateWebhookOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposUpdateWebhook
// method.
type GitHubV3RESTAPIClientReposUpdateWebhookOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientReposUploadReleaseAssetOptions contains the optional parameters for the GitHubV3RESTAPIClient.ReposUploadReleaseAsset
// method.
type GitHubV3RESTAPIClientReposUploadReleaseAssetOptions struct {
	Data io.ReadSeekCloser
	Label *string
}

// GitHubV3RESTAPIClientSearchCodeOptions contains the optional parameters for the GitHubV3RESTAPIClient.SearchCode method.
type GitHubV3RESTAPIClientSearchCodeOptions struct {
	// Sorts the results of your query. Can only be indexed, which indicates how recently a file has been indexed by the GitHub
// search infrastructure. Default: best match
// [https://docs.github.com/rest/reference/search#ranking-search-results]
	Sort *Enum294
}

// GitHubV3RESTAPIClientSearchCommitsOptions contains the optional parameters for the GitHubV3RESTAPIClient.SearchCommits
// method.
type GitHubV3RESTAPIClientSearchCommitsOptions struct {
	// Sorts the results of your query by author-date or committer-date. Default: best match [https://docs.github.com/rest/reference/search#ranking-search-results]
	Sort *Enum296
}

// GitHubV3RESTAPIClientSearchIssuesAndPullRequestsOptions contains the optional parameters for the GitHubV3RESTAPIClient.SearchIssuesAndPullRequests
// method.
type GitHubV3RESTAPIClientSearchIssuesAndPullRequestsOptions struct {
	// Sorts the results of your query by the number of comments, reactions, reactions-+1, reactions--1, reactions-smile, reactions-thinking_face,
// reactions-heart, reactions-tada, or interactions. You can
// also sort results by how recently the items were created or updated, Default: best match [https://docs.github.com/rest/reference/search#ranking-search-results]
	Sort *Enum297
}

// GitHubV3RESTAPIClientSearchLabelsOptions contains the optional parameters for the GitHubV3RESTAPIClient.SearchLabels method.
type GitHubV3RESTAPIClientSearchLabelsOptions struct {
	// Sorts the results of your query by when the label was created or updated. Default: best match [https://docs.github.com/rest/reference/search#ranking-search-results]
	Sort *Enum298
}

// GitHubV3RESTAPIClientSearchReposOptions contains the optional parameters for the GitHubV3RESTAPIClient.SearchRepos method.
type GitHubV3RESTAPIClientSearchReposOptions struct {
	// Sorts the results of your query by number of stars, forks, or help-wanted-issues or how recently the items were updated.
// Default: best match
// [https://docs.github.com/rest/reference/search#ranking-search-results]
	Sort *Enum299
}

// GitHubV3RESTAPIClientSearchTopicsOptions contains the optional parameters for the GitHubV3RESTAPIClient.SearchTopics method.
type GitHubV3RESTAPIClientSearchTopicsOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientSearchUsersOptions contains the optional parameters for the GitHubV3RESTAPIClient.SearchUsers method.
type GitHubV3RESTAPIClientSearchUsersOptions struct {
	// Sorts the results of your query by number of followers or repositories, or when the person joined GitHub. Default: best
// match [https://docs.github.com/rest/reference/search#ranking-search-results]
	Sort *Enum300
}

// GitHubV3RESTAPIClientSecretScanningGetAlertOptions contains the optional parameters for the GitHubV3RESTAPIClient.SecretScanningGetAlert
// method.
type GitHubV3RESTAPIClientSecretScanningGetAlertOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientSecretScanningListAlertsForEnterpriseOptions contains the optional parameters for the GitHubV3RESTAPIClient.SecretScanningListAlertsForEnterprise
// method.
type GitHubV3RESTAPIClientSecretScanningListAlertsForEnterpriseOptions struct {
}

// GitHubV3RESTAPIClientSecretScanningListAlertsForOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.SecretScanningListAlertsForOrg
// method.
type GitHubV3RESTAPIClientSecretScanningListAlertsForOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientSecretScanningListAlertsForRepoOptions contains the optional parameters for the GitHubV3RESTAPIClient.SecretScanningListAlertsForRepo
// method.
type GitHubV3RESTAPIClientSecretScanningListAlertsForRepoOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientSecretScanningListLocationsForAlertOptions contains the optional parameters for the GitHubV3RESTAPIClient.SecretScanningListLocationsForAlert
// method.
type GitHubV3RESTAPIClientSecretScanningListLocationsForAlertOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientSecretScanningUpdateAlertOptions contains the optional parameters for the GitHubV3RESTAPIClient.SecretScanningUpdateAlert
// method.
type GitHubV3RESTAPIClientSecretScanningUpdateAlertOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsAddMemberLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsAddMemberLegacy
// method.
type GitHubV3RESTAPIClientTeamsAddMemberLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsAddOrUpdateMembershipForUserInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsAddOrUpdateMembershipForUserInOrg
// method.
type GitHubV3RESTAPIClientTeamsAddOrUpdateMembershipForUserInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsAddOrUpdateMembershipForUserLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsAddOrUpdateMembershipForUserLegacy
// method.
type GitHubV3RESTAPIClientTeamsAddOrUpdateMembershipForUserLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsAddOrUpdateProjectPermissionsInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsAddOrUpdateProjectPermissionsInOrg
// method.
type GitHubV3RESTAPIClientTeamsAddOrUpdateProjectPermissionsInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsAddOrUpdateProjectPermissionsLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsAddOrUpdateProjectPermissionsLegacy
// method.
type GitHubV3RESTAPIClientTeamsAddOrUpdateProjectPermissionsLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsAddOrUpdateRepoPermissionsInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsAddOrUpdateRepoPermissionsInOrg
// method.
type GitHubV3RESTAPIClientTeamsAddOrUpdateRepoPermissionsInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsAddOrUpdateRepoPermissionsLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsAddOrUpdateRepoPermissionsLegacy
// method.
type GitHubV3RESTAPIClientTeamsAddOrUpdateRepoPermissionsLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsCheckPermissionsForProjectInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsCheckPermissionsForProjectInOrg
// method.
type GitHubV3RESTAPIClientTeamsCheckPermissionsForProjectInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsCheckPermissionsForProjectLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsCheckPermissionsForProjectLegacy
// method.
type GitHubV3RESTAPIClientTeamsCheckPermissionsForProjectLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsCheckPermissionsForRepoInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsCheckPermissionsForRepoInOrg
// method.
type GitHubV3RESTAPIClientTeamsCheckPermissionsForRepoInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsCheckPermissionsForRepoLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsCheckPermissionsForRepoLegacy
// method.
type GitHubV3RESTAPIClientTeamsCheckPermissionsForRepoLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsCreateDiscussionCommentInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsCreateDiscussionCommentInOrg
// method.
type GitHubV3RESTAPIClientTeamsCreateDiscussionCommentInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsCreateDiscussionCommentLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsCreateDiscussionCommentLegacy
// method.
type GitHubV3RESTAPIClientTeamsCreateDiscussionCommentLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsCreateDiscussionInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsCreateDiscussionInOrg
// method.
type GitHubV3RESTAPIClientTeamsCreateDiscussionInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsCreateDiscussionLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsCreateDiscussionLegacy
// method.
type GitHubV3RESTAPIClientTeamsCreateDiscussionLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsCreateOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsCreate method.
type GitHubV3RESTAPIClientTeamsCreateOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsDeleteDiscussionCommentInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsDeleteDiscussionCommentInOrg
// method.
type GitHubV3RESTAPIClientTeamsDeleteDiscussionCommentInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsDeleteDiscussionCommentLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsDeleteDiscussionCommentLegacy
// method.
type GitHubV3RESTAPIClientTeamsDeleteDiscussionCommentLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsDeleteDiscussionInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsDeleteDiscussionInOrg
// method.
type GitHubV3RESTAPIClientTeamsDeleteDiscussionInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsDeleteDiscussionLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsDeleteDiscussionLegacy
// method.
type GitHubV3RESTAPIClientTeamsDeleteDiscussionLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsDeleteInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsDeleteInOrg
// method.
type GitHubV3RESTAPIClientTeamsDeleteInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsDeleteLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsDeleteLegacy
// method.
type GitHubV3RESTAPIClientTeamsDeleteLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsGetByNameOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsGetByName
// method.
type GitHubV3RESTAPIClientTeamsGetByNameOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsGetDiscussionCommentInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsGetDiscussionCommentInOrg
// method.
type GitHubV3RESTAPIClientTeamsGetDiscussionCommentInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsGetDiscussionCommentLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsGetDiscussionCommentLegacy
// method.
type GitHubV3RESTAPIClientTeamsGetDiscussionCommentLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsGetDiscussionInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsGetDiscussionInOrg
// method.
type GitHubV3RESTAPIClientTeamsGetDiscussionInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsGetDiscussionLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsGetDiscussionLegacy
// method.
type GitHubV3RESTAPIClientTeamsGetDiscussionLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsGetLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsGetLegacy
// method.
type GitHubV3RESTAPIClientTeamsGetLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsGetMemberLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsGetMemberLegacy
// method.
type GitHubV3RESTAPIClientTeamsGetMemberLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsGetMembershipForUserInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsGetMembershipForUserInOrg
// method.
type GitHubV3RESTAPIClientTeamsGetMembershipForUserInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsGetMembershipForUserLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsGetMembershipForUserLegacy
// method.
type GitHubV3RESTAPIClientTeamsGetMembershipForUserLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsListChildInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsListChildInOrg
// method.
type GitHubV3RESTAPIClientTeamsListChildInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsListChildLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsListChildLegacy
// method.
type GitHubV3RESTAPIClientTeamsListChildLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsListDiscussionCommentsInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsListDiscussionCommentsInOrg
// method.
type GitHubV3RESTAPIClientTeamsListDiscussionCommentsInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsListDiscussionCommentsLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsListDiscussionCommentsLegacy
// method.
type GitHubV3RESTAPIClientTeamsListDiscussionCommentsLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsListDiscussionsInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsListDiscussionsInOrg
// method.
type GitHubV3RESTAPIClientTeamsListDiscussionsInOrgOptions struct {
	// Pinned discussions only filter
	Pinned *string
}

// GitHubV3RESTAPIClientTeamsListDiscussionsLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsListDiscussionsLegacy
// method.
type GitHubV3RESTAPIClientTeamsListDiscussionsLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsListForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsListForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientTeamsListForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsListMembersInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsListMembersInOrg
// method.
type GitHubV3RESTAPIClientTeamsListMembersInOrgOptions struct {
	// Filters members returned by their role in the team.
	Role *Enum144
}

// GitHubV3RESTAPIClientTeamsListMembersLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsListMembersLegacy
// method.
type GitHubV3RESTAPIClientTeamsListMembersLegacyOptions struct {
	// Filters members returned by their role in the team.
	Role *Enum307
}

// GitHubV3RESTAPIClientTeamsListOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsList method.
type GitHubV3RESTAPIClientTeamsListOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsListPendingInvitationsInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsListPendingInvitationsInOrg
// method.
type GitHubV3RESTAPIClientTeamsListPendingInvitationsInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsListPendingInvitationsLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsListPendingInvitationsLegacy
// method.
type GitHubV3RESTAPIClientTeamsListPendingInvitationsLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsListProjectsInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsListProjectsInOrg
// method.
type GitHubV3RESTAPIClientTeamsListProjectsInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsListProjectsLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsListProjectsLegacy
// method.
type GitHubV3RESTAPIClientTeamsListProjectsLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsListReposInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsListReposInOrg
// method.
type GitHubV3RESTAPIClientTeamsListReposInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsListReposLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsListReposLegacy
// method.
type GitHubV3RESTAPIClientTeamsListReposLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsRemoveMemberLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsRemoveMemberLegacy
// method.
type GitHubV3RESTAPIClientTeamsRemoveMemberLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsRemoveMembershipForUserInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsRemoveMembershipForUserInOrg
// method.
type GitHubV3RESTAPIClientTeamsRemoveMembershipForUserInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsRemoveMembershipForUserLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsRemoveMembershipForUserLegacy
// method.
type GitHubV3RESTAPIClientTeamsRemoveMembershipForUserLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsRemoveProjectInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsRemoveProjectInOrg
// method.
type GitHubV3RESTAPIClientTeamsRemoveProjectInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsRemoveProjectLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsRemoveProjectLegacy
// method.
type GitHubV3RESTAPIClientTeamsRemoveProjectLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsRemoveRepoInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsRemoveRepoInOrg
// method.
type GitHubV3RESTAPIClientTeamsRemoveRepoInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsRemoveRepoLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsRemoveRepoLegacy
// method.
type GitHubV3RESTAPIClientTeamsRemoveRepoLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsUpdateDiscussionCommentInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsUpdateDiscussionCommentInOrg
// method.
type GitHubV3RESTAPIClientTeamsUpdateDiscussionCommentInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsUpdateDiscussionCommentLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsUpdateDiscussionCommentLegacy
// method.
type GitHubV3RESTAPIClientTeamsUpdateDiscussionCommentLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsUpdateDiscussionInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsUpdateDiscussionInOrg
// method.
type GitHubV3RESTAPIClientTeamsUpdateDiscussionInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsUpdateDiscussionLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsUpdateDiscussionLegacy
// method.
type GitHubV3RESTAPIClientTeamsUpdateDiscussionLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsUpdateInOrgOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsUpdateInOrg
// method.
type GitHubV3RESTAPIClientTeamsUpdateInOrgOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientTeamsUpdateLegacyOptions contains the optional parameters for the GitHubV3RESTAPIClient.TeamsUpdateLegacy
// method.
type GitHubV3RESTAPIClientTeamsUpdateLegacyOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersAddEmailForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersAddEmailForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersAddEmailForAuthenticatedUserOptions struct {
	Body *PathsT3PuizUserEmailsPostRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientUsersBlockOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersBlock method.
type GitHubV3RESTAPIClientUsersBlockOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersCheckBlockedOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersCheckBlocked
// method.
type GitHubV3RESTAPIClientUsersCheckBlockedOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersCheckFollowingForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersCheckFollowingForUser
// method.
type GitHubV3RESTAPIClientUsersCheckFollowingForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersCheckPersonIsFollowedByAuthenticatedOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersCheckPersonIsFollowedByAuthenticated
// method.
type GitHubV3RESTAPIClientUsersCheckPersonIsFollowedByAuthenticatedOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersCreateGpgKeyForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersCreateGpgKeyForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersCreateGpgKeyForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersCreatePublicSSHKeyForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersCreatePublicSSHKeyForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersCreatePublicSSHKeyForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersCreateSSHSigningKeyForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersCreateSSHSigningKeyForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersCreateSSHSigningKeyForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersDeleteEmailForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersDeleteEmailForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersDeleteEmailForAuthenticatedUserOptions struct {
	Body *Paths1If3Kw4UserEmailsDeleteRequestbodyContentApplicationJSONSchema
}

// GitHubV3RESTAPIClientUsersDeleteGpgKeyForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersDeleteGpgKeyForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersDeleteGpgKeyForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersDeletePublicSSHKeyForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersDeletePublicSSHKeyForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersDeletePublicSSHKeyForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersDeleteSSHSigningKeyForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersDeleteSSHSigningKeyForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersDeleteSSHSigningKeyForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersFollowOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersFollow method.
type GitHubV3RESTAPIClientUsersFollowOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersGetAuthenticatedOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersGetAuthenticated
// method.
type GitHubV3RESTAPIClientUsersGetAuthenticatedOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersGetByUsernameOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersGetByUsername
// method.
type GitHubV3RESTAPIClientUsersGetByUsernameOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersGetContextForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersGetContextForUser
// method.
type GitHubV3RESTAPIClientUsersGetContextForUserOptions struct {
	// Uses the ID for the subject_type you specified. Required when using subject_type.
	SubjectID *string
	// Identifies which additional information you'd like to receive about the person's hovercard. Can be organization, repository,
// issue, pull_request. Required when using subject_id.
	SubjectType *Enum331
}

// GitHubV3RESTAPIClientUsersGetGpgKeyForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersGetGpgKeyForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersGetGpgKeyForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersGetPublicSSHKeyForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersGetPublicSSHKeyForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersGetPublicSSHKeyForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersGetSSHSigningKeyForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersGetSSHSigningKeyForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersGetSSHSigningKeyForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersListBlockedByAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersListBlockedByAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersListBlockedByAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersListEmailsForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersListEmailsForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersListEmailsForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersListFollowedByAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersListFollowedByAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersListFollowedByAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersListFollowersForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersListFollowersForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersListFollowersForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersListFollowersForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersListFollowersForUser
// method.
type GitHubV3RESTAPIClientUsersListFollowersForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersListFollowingForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersListFollowingForUser
// method.
type GitHubV3RESTAPIClientUsersListFollowingForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersListGpgKeysForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersListGpgKeysForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersListGpgKeysForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersListGpgKeysForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersListGpgKeysForUser
// method.
type GitHubV3RESTAPIClientUsersListGpgKeysForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersListOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersList method.
type GitHubV3RESTAPIClientUsersListOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersListPublicEmailsForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersListPublicEmailsForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersListPublicEmailsForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersListPublicKeysForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersListPublicKeysForUser
// method.
type GitHubV3RESTAPIClientUsersListPublicKeysForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersListPublicSSHKeysForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersListPublicSSHKeysForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersListPublicSSHKeysForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersListSSHSigningKeysForAuthenticatedUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersListSSHSigningKeysForAuthenticatedUser
// method.
type GitHubV3RESTAPIClientUsersListSSHSigningKeysForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersListSSHSigningKeysForUserOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersListSSHSigningKeysForUser
// method.
type GitHubV3RESTAPIClientUsersListSSHSigningKeysForUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersSetPrimaryEmailVisibilityForAuthenticatedUserOptions contains the optional parameters for the
// GitHubV3RESTAPIClient.UsersSetPrimaryEmailVisibilityForAuthenticatedUser method.
type GitHubV3RESTAPIClientUsersSetPrimaryEmailVisibilityForAuthenticatedUserOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersUnblockOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersUnblock method.
type GitHubV3RESTAPIClientUsersUnblockOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersUnfollowOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersUnfollow
// method.
type GitHubV3RESTAPIClientUsersUnfollowOptions struct {
	// placeholder for future optional parameters
}

// GitHubV3RESTAPIClientUsersUpdateAuthenticatedOptions contains the optional parameters for the GitHubV3RESTAPIClient.UsersUpdateAuthenticated
// method.
type GitHubV3RESTAPIClientUsersUpdateAuthenticatedOptions struct {
	// placeholder for future optional parameters
}

// GitRef - Git references within a repository
type GitRef struct {
	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Object *GitRefObject `json:"object,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type GitRefObject struct {
	// REQUIRED; SHA for the reference
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// GitTag - Metadata for a Git tag
type GitTag struct {
	// REQUIRED; Message describing the purpose of the tag
	Message *string `json:"message,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Object *GitTagObject `json:"object,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; Name of the tag
	Tag *string `json:"tag,omitempty"`

	// REQUIRED
	Tagger *GitTagTagger `json:"tagger,omitempty"`

	// REQUIRED; URL for the tag
	URL *string `json:"url,omitempty"`

	// Verification
	Verification *Verification `json:"verification,omitempty"`
}

type GitTagObject struct {
	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type GitTagTagger struct {
	// REQUIRED
	Date *string `json:"date,omitempty"`

	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`
}

// GitTree - The hierarchy between files in a Git repository.
type GitTree struct {
	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; Objects specifying a tree structure
	Tree []*GitTreeItem `json:"tree,omitempty"`

	// REQUIRED
	Truncated *bool `json:"truncated,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type GitTreeItem struct {
	Mode *string `json:"mode,omitempty"`
	Path *string `json:"path,omitempty"`
	SHA *string `json:"sha,omitempty"`
	Size *int32 `json:"size,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// GitignoreTemplate - Gitignore Template
type GitignoreTemplate struct {
	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Source *string `json:"source,omitempty"`
}

// GpgKey - A unique encryption key
type GpgKey struct {
	// REQUIRED
	CanCertify *bool `json:"can_certify,omitempty"`

	// REQUIRED
	CanEncryptComms *bool `json:"can_encrypt_comms,omitempty"`

	// REQUIRED
	CanEncryptStorage *bool `json:"can_encrypt_storage,omitempty"`

	// REQUIRED
	CanSign *bool `json:"can_sign,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Emails []*GpgKeyEmailsItem `json:"emails,omitempty"`

	// REQUIRED
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	KeyID *string `json:"key_id,omitempty"`

	// REQUIRED
	PrimaryKeyID *int32 `json:"primary_key_id,omitempty"`

	// REQUIRED
	PublicKey *string `json:"public_key,omitempty"`

	// REQUIRED
	RawKey *string `json:"raw_key,omitempty"`

	// REQUIRED
	Revoked *bool `json:"revoked,omitempty"`

	// REQUIRED
	Subkeys []*GpgKeySubkeysItem `json:"subkeys,omitempty"`
	Name *string `json:"name,omitempty"`
}

type GpgKeyEmailsItem struct {
	Email *string `json:"email,omitempty"`
	Verified *bool `json:"verified,omitempty"`
}

type GpgKeySubkeysItem struct {
	CanCertify *bool `json:"can_certify,omitempty"`
	CanEncryptComms *bool `json:"can_encrypt_comms,omitempty"`
	CanEncryptStorage *bool `json:"can_encrypt_storage,omitempty"`
	CanSign *bool `json:"can_sign,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Emails []any `json:"emails,omitempty"`
	ExpiresAt *string `json:"expires_at,omitempty"`
	ID *int32 `json:"id,omitempty"`
	KeyID *string `json:"key_id,omitempty"`
	PrimaryKeyID *int32 `json:"primary_key_id,omitempty"`
	PublicKey *string `json:"public_key,omitempty"`
	RawKey *string `json:"raw_key,omitempty"`
	Revoked *bool `json:"revoked,omitempty"`
	Subkeys []any `json:"subkeys,omitempty"`
}

// Hook - Webhooks for repositories.
type Hook struct {
	// REQUIRED; Determines whether the hook is actually triggered on pushes.
	Active *bool `json:"active,omitempty"`

	// REQUIRED
	Config *HookConfig `json:"config,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; Determines what events the hook is triggered for. Default: ['push'].
	Events []*string `json:"events,omitempty"`

	// REQUIRED; Unique identifier of the webhook.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Hook Response
	LastResponse *HookResponse `json:"last_response,omitempty"`

	// REQUIRED; The name of a valid service, use 'web' for a webhook.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PingURL *string `json:"ping_url,omitempty"`

	// REQUIRED
	TestURL *string `json:"test_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	DeliveriesURL *string `json:"deliveries_url,omitempty"`
}

type HookConfig struct {
	// The media type used to serialize the payloads. Supported values include json and form. The default is form.
	ContentType *string `json:"content_type,omitempty"`
	Digest *string `json:"digest,omitempty"`
	Email *string `json:"email,omitempty"`
	InsecureSSL *WebhookConfigInsecureSSL `json:"insecure_ssl,omitempty"`
	Password *string `json:"password,omitempty"`
	Room *string `json:"room,omitempty"`

	// If provided, the secret will be used as the key to generate the HMAC hex digest value for delivery signature headers [https://docs.github.com/webhooks/event-payloads/#delivery-headers].
	Secret *string `json:"secret,omitempty"`
	Subdomain *string `json:"subdomain,omitempty"`
	Token *string `json:"token,omitempty"`

	// The URL to which the payloads will be delivered.
	URL *string `json:"url,omitempty"`
}

// HookDelivery - Delivery made by a webhook.
type HookDelivery struct {
	// REQUIRED; The type of activity for the event that triggered the delivery.
	Action *string `json:"action,omitempty"`

	// REQUIRED; Time when the delivery was delivered.
	DeliveredAt *time.Time `json:"delivered_at,omitempty"`

	// REQUIRED; Time spent delivering.
	Duration *float32 `json:"duration,omitempty"`

	// REQUIRED; The event that triggered the delivery.
	Event *string `json:"event,omitempty"`

	// REQUIRED; Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
	GUID *string `json:"guid,omitempty"`

	// REQUIRED; Unique identifier of the delivery.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The id of the GitHub App installation associated with this event.
	InstallationID *int32 `json:"installation_id,omitempty"`

	// REQUIRED; Whether the delivery is a redelivery.
	Redelivery *bool `json:"redelivery,omitempty"`

	// REQUIRED; The id of the repository associated with this event.
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Request *HookDeliveryRequest `json:"request,omitempty"`

	// REQUIRED
	Response *HookDeliveryResponse `json:"response,omitempty"`

	// REQUIRED; Description of the status of the attempted delivery
	Status *string `json:"status,omitempty"`

	// REQUIRED; Status code received when delivery was made.
	StatusCode *int32 `json:"status_code,omitempty"`

	// The URL target of the delivery.
	URL *string `json:"url,omitempty"`
}

// HookDeliveryItem - Delivery made by a webhook, without request and response information.
type HookDeliveryItem struct {
	// REQUIRED; The type of activity for the event that triggered the delivery.
	Action *string `json:"action,omitempty"`

	// REQUIRED; Time when the webhook delivery occurred.
	DeliveredAt *time.Time `json:"delivered_at,omitempty"`

	// REQUIRED; Time spent delivering.
	Duration *float32 `json:"duration,omitempty"`

	// REQUIRED; The event that triggered the delivery.
	Event *string `json:"event,omitempty"`

	// REQUIRED; Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
	GUID *string `json:"guid,omitempty"`

	// REQUIRED; Unique identifier of the webhook delivery.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The id of the GitHub App installation associated with this event.
	InstallationID *int32 `json:"installation_id,omitempty"`

	// REQUIRED; Whether the webhook delivery is a redelivery.
	Redelivery *bool `json:"redelivery,omitempty"`

	// REQUIRED; The id of the repository associated with this event.
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED; Describes the response returned after attempting the delivery.
	Status *string `json:"status,omitempty"`

	// REQUIRED; Status code received when delivery was made.
	StatusCode *int32 `json:"status_code,omitempty"`
}

type HookDeliveryRequest struct {
	// REQUIRED; The request headers sent with the webhook delivery.
	Headers map[string]any `json:"headers,omitempty"`

	// REQUIRED; The webhook payload.
	Payload map[string]any `json:"payload,omitempty"`
}

type HookDeliveryResponse struct {
	// REQUIRED; The response headers received when the delivery was made.
	Headers map[string]any `json:"headers,omitempty"`

	// REQUIRED; The response payload received.
	Payload *string `json:"payload,omitempty"`
}

// HookResponse - Hook Response
type HookResponse struct {
	// REQUIRED
	Code *int32 `json:"code,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	Status *string `json:"status,omitempty"`
}

// Hovercard
type Hovercard struct {
	// REQUIRED
	Contexts []*HovercardContextsItem `json:"contexts,omitempty"`
}

type HovercardContextsItem struct {
	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	Octicon *string `json:"octicon,omitempty"`
}

// Import - A repository import from an external source.
type Import struct {
	// REQUIRED
	AuthorsURL *string `json:"authors_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	Status *ImportStatus `json:"status,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	Vcs *string `json:"vcs,omitempty"`

	// REQUIRED; The URL of the originating repository.
	VcsURL *string `json:"vcs_url,omitempty"`
	AuthorsCount *int32 `json:"authors_count,omitempty"`
	CommitCount *int32 `json:"commit_count,omitempty"`
	ErrorMessage *string `json:"error_message,omitempty"`
	FailedStep *string `json:"failed_step,omitempty"`
	HasLargeFiles *bool `json:"has_large_files,omitempty"`
	ImportPercent *int32 `json:"import_percent,omitempty"`
	LargeFilesCount *int32 `json:"large_files_count,omitempty"`
	LargeFilesSize *int32 `json:"large_files_size,omitempty"`
	Message *string `json:"message,omitempty"`
	ProjectChoices []*ImportProjectChoicesItem `json:"project_choices,omitempty"`
	PushPercent *int32 `json:"push_percent,omitempty"`
	StatusText *string `json:"status_text,omitempty"`
	SvcRoot *string `json:"svc_root,omitempty"`
	SvnRoot *string `json:"svn_root,omitempty"`
	TfvcProject *string `json:"tfvc_project,omitempty"`
	UseLfs *bool `json:"use_lfs,omitempty"`
}

type ImportProjectChoicesItem struct {
	HumanName *string `json:"human_name,omitempty"`
	TfvcProject *string `json:"tfvc_project,omitempty"`
	Vcs *string `json:"vcs,omitempty"`
}

// Installation
type Installation struct {
	// REQUIRED
	AccessTokensURL *string `json:"access_tokens_url,omitempty"`

	// REQUIRED
	Account *InstallationAccount `json:"account,omitempty"`

	// REQUIRED
	AppID *int32 `json:"app_id,omitempty"`

	// REQUIRED
	AppSlug *string `json:"app_slug,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Events []*string `json:"events,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The ID of the installation.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The permissions granted to the user-to-server access token.
	Permissions *AppPermissions `json:"permissions,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED; Describe whether all repositories have been selected or there's a selection involved
	RepositorySelection *InstallationRepositorySelection `json:"repository_selection,omitempty"`

	// REQUIRED
	SingleFileName *string `json:"single_file_name,omitempty"`

	// REQUIRED
	SuspendedAt *time.Time `json:"suspended_at,omitempty"`

	// REQUIRED; A GitHub user.
	SuspendedBy *NullableSimpleUser `json:"suspended_by,omitempty"`

	// REQUIRED; The ID of the user or organization this token is being scoped to.
	TargetID *int32 `json:"target_id,omitempty"`

	// REQUIRED
	TargetType *string `json:"target_type,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	ContactEmail *string `json:"contact_email,omitempty"`
	HasMultipleSingleFiles *bool `json:"has_multiple_single_files,omitempty"`
	SingleFilePaths []*string `json:"single_file_paths,omitempty"`
}

type InstallationAccount struct {
}

// InstallationToken - Authentication token for a GitHub App installed on a user or org.
type InstallationToken struct {
	// REQUIRED
	ExpiresAt *string `json:"expires_at,omitempty"`

	// REQUIRED
	Token *string `json:"token,omitempty"`
	HasMultipleSingleFiles *bool `json:"has_multiple_single_files,omitempty"`

	// The permissions granted to the user-to-server access token.
	Permissions *AppPermissions `json:"permissions,omitempty"`
	Repositories []*Repository `json:"repositories,omitempty"`
	RepositorySelection *InstallationTokenRepositorySelection `json:"repository_selection,omitempty"`
	SingleFile *string `json:"single_file,omitempty"`
	SingleFilePaths []*string `json:"single_file_paths,omitempty"`
}

// Integration - GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type Integration struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED; The list of events for the GitHub app
	Events []*string `json:"events,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; A GitHub user.
	Owner *NullableSimpleUser `json:"owner,omitempty"`

	// REQUIRED; The set of permissions for the GitHub app
	Permissions *IntegrationPermissions `json:"permissions,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	ClientID *string `json:"client_id,omitempty"`
	ClientSecret *string `json:"client_secret,omitempty"`

	// The number of installations associated with the GitHub app
	InstallationsCount *int32 `json:"installations_count,omitempty"`
	Pem *string `json:"pem,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
	WebhookSecret *string `json:"webhook_secret,omitempty"`
}

// IntegrationPermissions - The set of permissions for the GitHub app
type IntegrationPermissions struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]*string
	Checks *string `json:"checks,omitempty"`
	Contents *string `json:"contents,omitempty"`
	Deployments *string `json:"deployments,omitempty"`
	Issues *string `json:"issues,omitempty"`
	Metadata *string `json:"metadata,omitempty"`
}

// InteractionLimit - Limit interactions to a specific type of user for a specified duration
type InteractionLimit struct {
	// REQUIRED; The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is
// in effect.
	Limit *InteractionGroup `json:"limit,omitempty"`

	// The duration of the interaction restriction. Default: one_day.
	Expiry *InteractionExpiry `json:"expiry,omitempty"`
}

// InteractionLimitResponse - Interaction limit settings.
type InteractionLimitResponse struct {
	// REQUIRED
	ExpiresAt *time.Time `json:"expires_at,omitempty"`

	// REQUIRED; The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is
// in effect.
	Limit *InteractionGroup `json:"limit,omitempty"`

	// REQUIRED
	Origin *string `json:"origin,omitempty"`
}

// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
type Issue struct {
	// REQUIRED; A GitHub user.
	Assignee *NullableSimpleUser `json:"assignee,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue;
// send an empty array to clear all labels from the issue; note that the labels are silently
// dropped for users without push access to the repository
	Labels []*IssueLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *NullableMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the issue within its repository
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; State of the issue; either 'open' or 'closed'
	State *string `json:"state,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	Assignees []*SimpleUser `json:"assignees,omitempty"`

	// Contents of the issue
	Body *string `json:"body,omitempty"`
	BodyHTML *string `json:"body_html,omitempty"`
	BodyText *string `json:"body_text,omitempty"`

	// A GitHub user.
	ClosedBy *NullableSimpleUser `json:"closed_by,omitempty"`
	Draft *bool `json:"draft,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`
	PullRequest *IssuePullRequest `json:"pull_request,omitempty"`

	// Reaction Rollup
	Reactions *ReactionRollup `json:"reactions,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// The reason for the current state
	StateReason *IssueStateReason `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// Issue0 - The issue [https://docs.github.com/rest/reference/issues] itself.
type Issue0 struct {
	// REQUIRED
	ActiveLockReason *WebhookIssueCommentDeletedIssue0ActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssueCommentDeletedIssue0AssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssueCommentDeletedIssue0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssueCommentDeletedIssue0Milestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssueCommentDeletedIssue0Reactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssueCommentDeletedIssue0User `json:"user,omitempty"`

	// User
	Assignee *WebhookIssueCommentDeletedIssue0Assignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssueCommentDeletedIssue0LabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssueCommentDeletedIssue0PerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssueCommentDeletedIssue0PullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssueCommentDeletedIssue0State `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// Issue1 - The issue [https://docs.github.com/rest/reference/issues] itself.
type Issue1 struct {
	// REQUIRED
	ActiveLockReason *WebhookIssueCommentEditedIssue0ActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssueCommentEditedIssue0AssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssueCommentEditedIssue0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssueCommentEditedIssue0Milestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssueCommentEditedIssue0Reactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssueCommentEditedIssue0User `json:"user,omitempty"`

	// User
	Assignee *WebhookIssueCommentEditedIssue0Assignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssueCommentEditedIssue0LabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssueCommentEditedIssue0PerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssueCommentEditedIssue0PullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssueCommentEditedIssue0State `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// Issue2 - The issue [https://docs.github.com/rest/reference/issues] itself.
type Issue2 struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesClosedIssue0ActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesClosedIssue0AssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesClosedIssue0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesClosedIssue0Milestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesClosedIssue0Reactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesClosedIssue0User `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesClosedIssue0Assignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesClosedIssue0LabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesClosedIssue0PerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesClosedIssue0PullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesClosedIssue0State `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// Issue3 - The issue [https://docs.github.com/rest/reference/issues] itself.
type Issue3 struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesDemilestonedIssue0ActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesDemilestonedIssue0AssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesDemilestonedIssue0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesDemilestonedIssue0Milestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesDemilestonedIssue0Reactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesDemilestonedIssue0User `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesDemilestonedIssue0Assignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesDemilestonedIssue0LabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesDemilestonedIssue0PerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesDemilestonedIssue0PullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesDemilestonedIssue0State `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// Issue4 - The issue [https://docs.github.com/rest/reference/issues] itself.
type Issue4 struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesLockedIssue0ActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesLockedIssue0AssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesLockedIssue0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesLockedIssue0Milestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesLockedIssue0Reactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesLockedIssue0User `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesLockedIssue0Assignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesLockedIssue0LabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesLockedIssue0PerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesLockedIssue0PullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesLockedIssue0State `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// Issue5 - The issue [https://docs.github.com/rest/reference/issues] itself.
type Issue5 struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesMilestonedIssue0ActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesMilestonedIssue0AssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesMilestonedIssue0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesMilestonedIssue0Milestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesMilestonedIssue0Reactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesMilestonedIssue0User `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesMilestonedIssue0Assignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesMilestonedIssue0LabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesMilestonedIssue0PerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesMilestonedIssue0PullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesMilestonedIssue0State `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// Issue6 - The issue [https://docs.github.com/rest/reference/issues] itself.
type Issue6 struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesReopenedIssue0ActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesReopenedIssue0AssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesReopenedIssue0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesReopenedIssue0Milestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesReopenedIssue0Reactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesReopenedIssue0User `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesReopenedIssue0Assignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesReopenedIssue0LabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesReopenedIssue0PerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesReopenedIssue0PullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesReopenedIssue0State `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// Issue7 - The issue [https://docs.github.com/rest/reference/issues] itself.
type Issue7 struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesUnlockedIssue0ActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesUnlockedIssue0AssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesUnlockedIssue0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesUnlockedIssue0Milestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesUnlockedIssue0Reactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesUnlockedIssue0User `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesUnlockedIssue0Assignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesUnlockedIssue0LabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesUnlockedIssue0PerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesUnlockedIssue0PullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesUnlockedIssue0State `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// IssueAutoGenerated - The issue [https://docs.github.com/rest/reference/issues] itself.
type IssueAutoGenerated struct {
	// REQUIRED
	ActiveLockReason *WebhookIssueCommentCreatedIssue0ActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssueCommentCreatedIssue0AssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssueCommentCreatedIssue0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssueCommentCreatedIssue0Milestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssueCommentCreatedIssue0Reactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssueCommentCreatedIssue0User `json:"user,omitempty"`

	// User
	Assignee *WebhookIssueCommentCreatedIssue0Assignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssueCommentCreatedIssue0LabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssueCommentCreatedIssue0PerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssueCommentCreatedIssue0PullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssueCommentCreatedIssue0State `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// IssueComment - Comments provide a way for people to collaborate on an issue.
type IssueComment struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the issue comment
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the issue comment
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`

	// Contents of the issue comment
	Body *string `json:"body,omitempty"`
	BodyHTML *string `json:"body_html,omitempty"`
	BodyText *string `json:"body_text,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// Reaction Rollup
	Reactions *ReactionRollup `json:"reactions,omitempty"`
}

// IssueEvent - Issue Event
type IssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *NullableSimpleUser `json:"actor,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// A GitHub user.
	Assignee *NullableSimpleUser `json:"assignee,omitempty"`

	// A GitHub user.
	Assigner *NullableSimpleUser `json:"assigner,omitempty"`

	// How the author is associated with the repository.
	AuthorAssociation *AuthorAssociation `json:"author_association,omitempty"`

	// Issue Event Dismissed Review
	DismissedReview *IssueEventDismissedReview `json:"dismissed_review,omitempty"`

	// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
	Issue *NullableIssue `json:"issue,omitempty"`

	// Issue Event Label
	Label *IssueEventLabel `json:"label,omitempty"`
	LockReason *string `json:"lock_reason,omitempty"`

	// Issue Event Milestone
	Milestone *IssueEventMilestone `json:"milestone,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// Issue Event Project Card
	ProjectCard *IssueEventProjectCard `json:"project_card,omitempty"`

	// Issue Event Rename
	Rename *IssueEventRename `json:"rename,omitempty"`

	// A GitHub user.
	RequestedReviewer *NullableSimpleUser `json:"requested_reviewer,omitempty"`

	// Groups of organization members that gives permissions on specified repositories.
	RequestedTeam *Team `json:"requested_team,omitempty"`

	// A GitHub user.
	ReviewRequester *NullableSimpleUser `json:"review_requester,omitempty"`
}

// IssueEventDismissedReview - Issue Event Dismissed Review
type IssueEventDismissedReview struct {
	// REQUIRED
	DismissalMessage *string `json:"dismissal_message,omitempty"`

	// REQUIRED
	ReviewID *int32 `json:"review_id,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`
	DismissalCommitID *string `json:"dismissal_commit_id,omitempty"`
}

// IssueEventForIssue - Issue Event for Issue
type IssueEventForIssue struct {
}

// IssueEventLabel - Issue Event Label
type IssueEventLabel struct {
	// REQUIRED
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`
}

// IssueEventMilestone - Issue Event Milestone
type IssueEventMilestone struct {
	// REQUIRED
	Title *string `json:"title,omitempty"`
}

// IssueEventProjectCard - Issue Event Project Card
type IssueEventProjectCard struct {
	// REQUIRED
	ColumnName *string `json:"column_name,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	ProjectID *int32 `json:"project_id,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	PreviousColumnName *string `json:"previous_column_name,omitempty"`
}

// IssueEventRename - Issue Event Rename
type IssueEventRename struct {
	// REQUIRED
	From *string `json:"from,omitempty"`

	// REQUIRED
	To *string `json:"to,omitempty"`
}

type IssueLabelsItem struct {
}

type IssuePullRequest struct {
	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
}

// IssueSearchResultItem - Issue Search Result Item
type IssueSearchResultItem struct {
	// REQUIRED; A GitHub user.
	Assignee *NullableSimpleUser `json:"assignee,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Labels []*IssueSearchResultItemLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *NullableMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	Score *float32 `json:"score,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	Assignees []*SimpleUser `json:"assignees,omitempty"`
	Body *string `json:"body,omitempty"`
	BodyHTML *string `json:"body_html,omitempty"`
	BodyText *string `json:"body_text,omitempty"`
	Draft *bool `json:"draft,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`
	PullRequest *IssueSearchResultItemPullRequest `json:"pull_request,omitempty"`

	// Reaction Rollup
	Reactions *ReactionRollup `json:"reactions,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`

	// Search Result Text Matches
	TextMatches []*SearchResultTextMatchesItem `json:"text_matches,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

type IssueSearchResultItemLabelsItem struct {
	Color *string `json:"color,omitempty"`
	Default *bool `json:"default,omitempty"`
	Description *string `json:"description,omitempty"`
	ID *int64 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	URL *string `json:"url,omitempty"`
}

type IssueSearchResultItemPullRequest struct {
	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
}

// Job - Information of a job execution in a workflow run
type Job struct {
	// REQUIRED
	CheckRunURL *string `json:"check_run_url,omitempty"`

	// REQUIRED; The time that the job finished, in ISO 8601 format.
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// REQUIRED; The outcome of the job.
	Conclusion *JobConclusion `json:"conclusion,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The name of the current branch.
	HeadBranch *string `json:"head_branch,omitempty"`

	// REQUIRED; The SHA of the commit that is being run.
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED; The id of the job.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
	Labels []*string `json:"labels,omitempty"`

	// REQUIRED; The name of the job.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The id of the associated workflow run.
	RunID *int32 `json:"run_id,omitempty"`

	// REQUIRED
	RunURL *string `json:"run_url,omitempty"`

	// REQUIRED; The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will
// be null.)
	RunnerGroupID *int32 `json:"runner_group_id,omitempty"`

	// REQUIRED; The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this
// will be null.)
	RunnerGroupName *string `json:"runner_group_name,omitempty"`

	// REQUIRED; The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be
// null.)
	RunnerID *int32 `json:"runner_id,omitempty"`

	// REQUIRED; The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will
// be null.)
	RunnerName *string `json:"runner_name,omitempty"`

	// REQUIRED; The time that the job started, in ISO 8601 format.
	StartedAt *time.Time `json:"started_at,omitempty"`

	// REQUIRED; The phase of the lifecycle that the job is currently in.
	Status *JobStatus `json:"status,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED; The name of the workflow.
	WorkflowName *string `json:"workflow_name,omitempty"`

	// Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
	RunAttempt *int32 `json:"run_attempt,omitempty"`

	// Steps in this job.
	Steps []*JobStepsItem `json:"steps,omitempty"`
}

type JobStepsItem struct {
	// REQUIRED; The outcome of the job.
	Conclusion *string `json:"conclusion,omitempty"`

	// REQUIRED; The name of the job.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; The phase of the lifecycle that the job is currently in.
	Status *JobStepsItemStatus `json:"status,omitempty"`

	// The time that the job finished, in ISO 8601 format.
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// The time that the step started, in ISO 8601 format.
	StartedAt *time.Time `json:"started_at,omitempty"`
}

// Key
type Key struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	ReadOnly *bool `json:"read_only,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	Verified *bool `json:"verified,omitempty"`
}

// KeySimple - Key Simple
type KeySimple struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Key *string `json:"key,omitempty"`
}

// Label - Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
type Label struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int64 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// LabelSearchResultItem - Label Search Result Item
type LabelSearchResultItem struct {
	// REQUIRED
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Score *float32 `json:"score,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// Search Result Text Matches
	TextMatches []*SearchResultTextMatchesItem `json:"text_matches,omitempty"`
}

// LabeledIssueEvent - Labeled Issue Event
type LabeledIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Label *LabeledIssueEventLabel `json:"label,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type LabeledIssueEventLabel struct {
	// REQUIRED
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`
}

// License
type License struct {
	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Conditions []*string `json:"conditions,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Featured *bool `json:"featured,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Implementation *string `json:"implementation,omitempty"`

	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Limitations []*string `json:"limitations,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Permissions []*string `json:"permissions,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// LicenseContent - License Content
type LicenseContent struct {
	// REQUIRED
	Content *string `json:"content,omitempty"`

	// REQUIRED
	DownloadURL *string `json:"download_url,omitempty"`

	// REQUIRED
	Encoding *string `json:"encoding,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; License Simple
	License *NullableLicenseSimple `json:"license,omitempty"`

	// REQUIRED
	Links *LicenseContentLinks `json:"_links,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type LicenseContentLinks struct {
	// REQUIRED
	Git *string `json:"git,omitempty"`

	// REQUIRED
	HTML *string `json:"html,omitempty"`

	// REQUIRED
	Self *string `json:"self,omitempty"`
}

// LicenseSimple - License Simple
type LicenseSimple struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
}

// Link - Hypermedia Link
type Link struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// LinkWithType - Hypermedia Link with Type
type LinkWithType struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`
}

// LockedIssueEvent - Locked Issue Event
type LockedIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LockReason *string `json:"lock_reason,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type Manifest struct {
	// REQUIRED; The name of the manifest.
	Name *string `json:"name,omitempty"`
	File *ManifestFile `json:"file,omitempty"`

	// User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
	Metadata map[string]*Components1Lecw2JSchemasMetadataAdditionalproperties `json:"metadata,omitempty"`

	// A collection of resolved package dependencies.
	Resolved map[string]*Dependency `json:"resolved,omitempty"`
}

type ManifestFile struct {
	// The path of the manifest file relative to the root of the Git repository.
	SourceLocation *string `json:"source_location,omitempty"`
}

// MarketplaceAccount - Marketplace Account
type MarketplaceAccount struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	Email *string `json:"email,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`
}

// MarketplaceListingPlan - Marketplace Listing Plan
type MarketplaceListingPlan struct {
	// REQUIRED
	AccountsURL *string `json:"accounts_url,omitempty"`

	// REQUIRED
	Bullets []*string `json:"bullets,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HasFreeTrial *bool `json:"has_free_trial,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PriceModel *MarketplaceListingPlanPriceModel `json:"price_model,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UnitName *string `json:"unit_name,omitempty"`

	// REQUIRED
	YearlyPriceInCents *int32 `json:"yearly_price_in_cents,omitempty"`
}

// MarketplacePurchase - Marketplace Purchase
type MarketplacePurchase struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	MarketplacePurchase *MarketplacePurchaseMarketplacePurchase `json:"marketplace_purchase,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	Email *string `json:"email,omitempty"`
	MarketplacePendingChange *MarketplacePurchaseMarketplacePendingChange `json:"marketplace_pending_change,omitempty"`
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`
}

// MarketplacePurchase0 - Marketplace Purchase
type MarketplacePurchase0 struct {
	// REQUIRED
	Account *WebhookMarketplacePurchaseChangedMarketplacePurchase0Account `json:"account,omitempty"`

	// REQUIRED
	BillingCycle *string `json:"billing_cycle,omitempty"`

	// REQUIRED
	FreeTrialEndsOn *string `json:"free_trial_ends_on,omitempty"`

	// REQUIRED
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`

	// REQUIRED
	Plan *WebhookMarketplacePurchaseChangedMarketplacePurchase0Plan `json:"plan,omitempty"`

	// REQUIRED
	UnitCount *int32 `json:"unit_count,omitempty"`
	NextBillingDate *string `json:"next_billing_date,omitempty"`
}

// MarketplacePurchase1 - Marketplace Purchase
type MarketplacePurchase1 struct {
	// REQUIRED
	Account *WebhookMarketplacePurchasePendingChangeMarketplacePurchase0Account `json:"account,omitempty"`

	// REQUIRED
	BillingCycle *string `json:"billing_cycle,omitempty"`

	// REQUIRED
	FreeTrialEndsOn *string `json:"free_trial_ends_on,omitempty"`

	// REQUIRED
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`

	// REQUIRED
	Plan *WebhookMarketplacePurchasePendingChangeMarketplacePurchase0Plan `json:"plan,omitempty"`

	// REQUIRED
	UnitCount *int32 `json:"unit_count,omitempty"`
	NextBillingDate *string `json:"next_billing_date,omitempty"`
}

// MarketplacePurchase2 - Marketplace Purchase
type MarketplacePurchase2 struct {
	// REQUIRED
	Account *WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0Account `json:"account,omitempty"`

	// REQUIRED
	BillingCycle *string `json:"billing_cycle,omitempty"`

	// REQUIRED; Anything
	FreeTrialEndsOn any `json:"free_trial_ends_on,omitempty"`

	// REQUIRED
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`

	// REQUIRED
	Plan *WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0Plan `json:"plan,omitempty"`

	// REQUIRED
	UnitCount *int32 `json:"unit_count,omitempty"`
	NextBillingDate *string `json:"next_billing_date,omitempty"`
}

// MarketplacePurchase3 - Marketplace Purchase
type MarketplacePurchase3 struct {
	// REQUIRED
	Account *WebhookMarketplacePurchasePurchasedMarketplacePurchase0Account `json:"account,omitempty"`

	// REQUIRED
	BillingCycle *string `json:"billing_cycle,omitempty"`

	// REQUIRED
	FreeTrialEndsOn *string `json:"free_trial_ends_on,omitempty"`

	// REQUIRED
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`

	// REQUIRED
	Plan *WebhookMarketplacePurchasePurchasedMarketplacePurchase0Plan `json:"plan,omitempty"`

	// REQUIRED
	UnitCount *int32 `json:"unit_count,omitempty"`
	NextBillingDate *string `json:"next_billing_date,omitempty"`
}

// MarketplacePurchaseAutoGenerated - Marketplace Purchase
type MarketplacePurchaseAutoGenerated struct {
	// REQUIRED
	Account *WebhookMarketplacePurchaseCancelledMarketplacePurchase0Account `json:"account,omitempty"`

	// REQUIRED
	BillingCycle *string `json:"billing_cycle,omitempty"`

	// REQUIRED
	FreeTrialEndsOn *string `json:"free_trial_ends_on,omitempty"`

	// REQUIRED
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`

	// REQUIRED
	Plan *WebhookMarketplacePurchaseCancelledMarketplacePurchase0Plan `json:"plan,omitempty"`

	// REQUIRED
	UnitCount *int32 `json:"unit_count,omitempty"`
	NextBillingDate *string `json:"next_billing_date,omitempty"`
}

type MarketplacePurchaseMarketplacePendingChange struct {
	EffectiveDate *string `json:"effective_date,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsInstalled *bool `json:"is_installed,omitempty"`

	// Marketplace Listing Plan
	Plan *MarketplaceListingPlan `json:"plan,omitempty"`
	UnitCount *int32 `json:"unit_count,omitempty"`
}

type MarketplacePurchaseMarketplacePurchase struct {
	BillingCycle *string `json:"billing_cycle,omitempty"`
	FreeTrialEndsOn *string `json:"free_trial_ends_on,omitempty"`
	IsInstalled *bool `json:"is_installed,omitempty"`
	NextBillingDate *string `json:"next_billing_date,omitempty"`
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`

	// Marketplace Listing Plan
	Plan *MarketplaceListingPlan `json:"plan,omitempty"`
	UnitCount *int32 `json:"unit_count,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// MergedUpstream - Results of a successful merge upstream request
type MergedUpstream struct {
	BaseBranch *string `json:"base_branch,omitempty"`
	MergeType *MergedUpstreamMergeType `json:"merge_type,omitempty"`
	Message *string `json:"message,omitempty"`
}

// Migration - A migration.
type Migration struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	ExcludeAttachments *bool `json:"exclude_attachments,omitempty"`

	// REQUIRED
	ExcludeGitData *bool `json:"exclude_git_data,omitempty"`

	// REQUIRED
	ExcludeMetadata *bool `json:"exclude_metadata,omitempty"`

	// REQUIRED
	ExcludeOwnerProjects *bool `json:"exclude_owner_projects,omitempty"`

	// REQUIRED
	ExcludeReleases *bool `json:"exclude_releases,omitempty"`

	// REQUIRED
	GUID *string `json:"guid,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LockRepositories *bool `json:"lock_repositories,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrgMetadataOnly *bool `json:"org_metadata_only,omitempty"`

	// REQUIRED; A GitHub user.
	Owner *NullableSimpleUser `json:"owner,omitempty"`

	// REQUIRED; The repositories included in the migration. Only returned for export migrations.
	Repositories []*Repository `json:"repositories,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	ArchiveURL *string `json:"archive_url,omitempty"`
	Exclude []any `json:"exclude,omitempty"`
}

// Milestone - A collection of related issues and pull requests.
type Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; A GitHub user.
	Creator *NullableSimpleUser `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// MilestonedIssueEvent - Milestoned Issue Event
type MilestonedIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Milestone *MilestonedIssueEventMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type MilestonedIssueEventMilestone struct {
	// REQUIRED
	Title *string `json:"title,omitempty"`
}

// MinimalRepository - Minimal Repository
type MinimalRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED; A GitHub user.
	Owner *SimpleUser `json:"owner,omitempty"`

	// REQUIRED
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	CloneURL *string `json:"clone_url,omitempty"`

	// Code Of Conduct
	CodeOfConduct *CodeOfConduct `json:"code_of_conduct,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	Forks *int32 `json:"forks,omitempty"`
	ForksCount *int32 `json:"forks_count,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HasDiscussions *bool `json:"has_discussions,omitempty"`
	HasDownloads *bool `json:"has_downloads,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPages *bool `json:"has_pages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	Language *string `json:"language,omitempty"`
	License *MinimalRepositoryLicense `json:"license,omitempty"`
	MirrorURL *string `json:"mirror_url,omitempty"`
	NetworkCount *int32 `json:"network_count,omitempty"`
	OpenIssues *int32 `json:"open_issues,omitempty"`
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`
	Permissions *MinimalRepositoryPermissions `json:"permissions,omitempty"`
	PushedAt *time.Time `json:"pushed_at,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	SSHURL *string `json:"ssh_url,omitempty"`
	SecurityAndAnalysis *SecurityAndAnalysis `json:"security_and_analysis,omitempty"`

	// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
	Size *int32 `json:"size,omitempty"`
	StargazersCount *int32 `json:"stargazers_count,omitempty"`
	SubscribersCount *int32 `json:"subscribers_count,omitempty"`
	SvnURL *string `json:"svn_url,omitempty"`
	TempCloneToken *string `json:"temp_clone_token,omitempty"`
	Topics []*string `json:"topics,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Watchers *int32 `json:"watchers,omitempty"`
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type MinimalRepositoryLicense struct {
	Key *string `json:"key,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	SpdxID *string `json:"spdx_id,omitempty"`
	URL *string `json:"url,omitempty"`
}

type MinimalRepositoryPermissions struct {
	Admin *bool `json:"admin,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Pull *bool `json:"pull,omitempty"`
	Push *bool `json:"push,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

// MovedColumnInProjectIssueEvent - Moved Column in Project Issue Event
type MovedColumnInProjectIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	ProjectCard *MovedColumnInProjectIssueEventProjectCard `json:"project_card,omitempty"`
}

type MovedColumnInProjectIssueEventProjectCard struct {
	// REQUIRED
	ColumnName *string `json:"column_name,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	ProjectID *int32 `json:"project_id,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	PreviousColumnName *string `json:"previous_column_name,omitempty"`
}

// NullableCodeOfConductSimple - Code of Conduct Simple
type NullableCodeOfConductSimple struct {
	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// NullableCodespaceMachine - A description of the machine powering a codespace.
type NullableCodespaceMachine struct {
	// REQUIRED; How many cores are available to the codespace.
	Cpus *int32 `json:"cpus,omitempty"`

	// REQUIRED; The display name of the machine includes cores, memory, and storage.
	DisplayName *string `json:"display_name,omitempty"`

	// REQUIRED; How much memory is available to the codespace.
	MemoryInBytes *int32 `json:"memory_in_bytes,omitempty"`

	// REQUIRED; The name of the machine.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The operating system of the machine.
	OperatingSystem *string `json:"operating_system,omitempty"`

	// REQUIRED; Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch
// was not specified as a ref, the default branch will be assumed. Value will be "null" if
// prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available.
// Latest values "ready" and "in_progress" indicate the prebuild
// availability status.
	PrebuildAvailability *NullableCodespaceMachinePrebuildAvailability `json:"prebuild_availability,omitempty"`

	// REQUIRED; How much storage is available to the codespace.
	StorageInBytes *int32 `json:"storage_in_bytes,omitempty"`
}

// NullableCollaborator - Collaborator
type NullableCollaborator struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	RoleName *string `json:"role_name,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
	Permissions *NullableCollaboratorPermissions `json:"permissions,omitempty"`
}

type NullableCollaboratorPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

// NullableCommunityHealthFile - Community Health File
type NullableCommunityHealthFile struct {
	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// NullableGitUser - Metaproperties for Git author/committer information.
type NullableGitUser struct {
	Date *string `json:"date,omitempty"`
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
}

// NullableIntegration - GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user
// accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type NullableIntegration struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED; The list of events for the GitHub app
	Events []*string `json:"events,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; A GitHub user.
	Owner *NullableSimpleUser `json:"owner,omitempty"`

	// REQUIRED; The set of permissions for the GitHub app
	Permissions *NullableIntegrationPermissions `json:"permissions,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	ClientID *string `json:"client_id,omitempty"`
	ClientSecret *string `json:"client_secret,omitempty"`

	// The number of installations associated with the GitHub app
	InstallationsCount *int32 `json:"installations_count,omitempty"`
	Pem *string `json:"pem,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
	WebhookSecret *string `json:"webhook_secret,omitempty"`
}

// NullableIntegrationPermissions - The set of permissions for the GitHub app
type NullableIntegrationPermissions struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]*string
	Checks *string `json:"checks,omitempty"`
	Contents *string `json:"contents,omitempty"`
	Deployments *string `json:"deployments,omitempty"`
	Issues *string `json:"issues,omitempty"`
	Metadata *string `json:"metadata,omitempty"`
}

// NullableIssue - Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
type NullableIssue struct {
	// REQUIRED; A GitHub user.
	Assignee *NullableSimpleUser `json:"assignee,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue;
// send an empty array to clear all labels from the issue; note that the labels are silently
// dropped for users without push access to the repository
	Labels []*NullableIssueLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *NullableMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the issue within its repository
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; State of the issue; either 'open' or 'closed'
	State *string `json:"state,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	Assignees []*SimpleUser `json:"assignees,omitempty"`

	// Contents of the issue
	Body *string `json:"body,omitempty"`
	BodyHTML *string `json:"body_html,omitempty"`
	BodyText *string `json:"body_text,omitempty"`

	// A GitHub user.
	ClosedBy *NullableSimpleUser `json:"closed_by,omitempty"`
	Draft *bool `json:"draft,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`
	PullRequest *NullableIssuePullRequest `json:"pull_request,omitempty"`

	// Reaction Rollup
	Reactions *ReactionRollup `json:"reactions,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// The reason for the current state
	StateReason *NullableIssueStateReason `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

type NullableIssueLabelsItem struct {
}

type NullableIssuePullRequest struct {
	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
}

// NullableLicenseSimple - License Simple
type NullableLicenseSimple struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
}

// NullableMilestone - A collection of related issues and pull requests.
type NullableMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; A GitHub user.
	Creator *NullableSimpleUser `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *NullableMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// NullableMinimalRepository - Minimal Repository
type NullableMinimalRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED; A GitHub user.
	Owner *SimpleUser `json:"owner,omitempty"`

	// REQUIRED
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	CloneURL *string `json:"clone_url,omitempty"`

	// Code Of Conduct
	CodeOfConduct *CodeOfConduct `json:"code_of_conduct,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	Forks *int32 `json:"forks,omitempty"`
	ForksCount *int32 `json:"forks_count,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HasDiscussions *bool `json:"has_discussions,omitempty"`
	HasDownloads *bool `json:"has_downloads,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPages *bool `json:"has_pages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	Language *string `json:"language,omitempty"`
	License *NullableMinimalRepositoryLicense `json:"license,omitempty"`
	MirrorURL *string `json:"mirror_url,omitempty"`
	NetworkCount *int32 `json:"network_count,omitempty"`
	OpenIssues *int32 `json:"open_issues,omitempty"`
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`
	Permissions *NullableMinimalRepositoryPermissions `json:"permissions,omitempty"`
	PushedAt *time.Time `json:"pushed_at,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	SSHURL *string `json:"ssh_url,omitempty"`
	SecurityAndAnalysis *SecurityAndAnalysis `json:"security_and_analysis,omitempty"`

	// The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
	Size *int32 `json:"size,omitempty"`
	StargazersCount *int32 `json:"stargazers_count,omitempty"`
	SubscribersCount *int32 `json:"subscribers_count,omitempty"`
	SvnURL *string `json:"svn_url,omitempty"`
	TempCloneToken *string `json:"temp_clone_token,omitempty"`
	Topics []*string `json:"topics,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Watchers *int32 `json:"watchers,omitempty"`
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type NullableMinimalRepositoryLicense struct {
	Key *string `json:"key,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	SpdxID *string `json:"spdx_id,omitempty"`
	URL *string `json:"url,omitempty"`
}

type NullableMinimalRepositoryPermissions struct {
	Admin *bool `json:"admin,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Pull *bool `json:"pull,omitempty"`
	Push *bool `json:"push,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

// NullableRepository - A repository on GitHub.
type NullableRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED; Returns whether or not this repository disabled.
	Disabled *bool `json:"disabled,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License Simple
	License *NullableLicenseSimple `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; A GitHub user.
	Owner *SimpleUser `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *time.Time `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED; The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow forking this repo
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`

	// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required
// to be up to date before merging.
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether anonymous git access is enabled for this repository
	AnonymousAccessEnabled *bool `json:"anonymous_access_enabled,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *NullableRepositoryMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *NullableRepositoryMergeCommitTitle `json:"merge_commit_title,omitempty"`
	NetworkCount *int32 `json:"network_count,omitempty"`

	// A GitHub user.
	Organization *NullableSimpleUser `json:"organization,omitempty"`
	Permissions *NullableRepositoryPermissions `json:"permissions,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *NullableRepositorySquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *NullableRepositorySquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	StarredAt *string `json:"starred_at,omitempty"`
	SubscribersCount *int32 `json:"subscribers_count,omitempty"`
	TempCloneToken *string `json:"temp_clone_token,omitempty"`
	TemplateRepository *NullableRepositoryTemplateRepository `json:"template_repository,omitempty"`
	Topics []*string `json:"topics,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// The repository visibility: public, private, or internal.
	Visibility *string `json:"visibility,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type NullableRepositoryPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type NullableRepositoryTemplateRepository struct {
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`
	ArchiveURL *string `json:"archive_url,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CloneURL *string `json:"clone_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	ForksCount *int32 `json:"forks_count,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HasDownloads *bool `json:"has_downloads,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPages *bool `json:"has_pages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Language *string `json:"language,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *NullableRepositoryTemplateRepositoryMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *NullableRepositoryTemplateRepositoryMergeCommitTitle `json:"merge_commit_title,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	MirrorURL *string `json:"mirror_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NetworkCount *int32 `json:"network_count,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`
	Owner *NullableRepositoryTemplateRepositoryOwner `json:"owner,omitempty"`
	Permissions *NullableRepositoryTemplateRepositoryPermissions `json:"permissions,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	PushedAt *string `json:"pushed_at,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	SSHURL *string `json:"ssh_url,omitempty"`
	Size *int32 `json:"size,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *NullableRepositoryTemplateRepositorySquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *NullableRepositoryTemplateRepositorySquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	StargazersCount *int32 `json:"stargazers_count,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersCount *int32 `json:"subscribers_count,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	SvnURL *string `json:"svn_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	TempCloneToken *string `json:"temp_clone_token,omitempty"`
	Topics []*string `json:"topics,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	WatchersCount *int32 `json:"watchers_count,omitempty"`
}

type NullableRepositoryTemplateRepositoryOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type NullableRepositoryTemplateRepositoryPermissions struct {
	Admin *bool `json:"admin,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Pull *bool `json:"pull,omitempty"`
	Push *bool `json:"push,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

// NullableScopedInstallation - Scoped Installation
type NullableScopedInstallation struct {
	// REQUIRED; A GitHub user.
	Account *SimpleUser `json:"account,omitempty"`

	// REQUIRED; The permissions granted to the user-to-server access token.
	Permissions *AppPermissions `json:"permissions,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED; Describe whether all repositories have been selected or there's a selection involved
	RepositorySelection *NullableScopedInstallationRepositorySelection `json:"repository_selection,omitempty"`

	// REQUIRED
	SingleFileName *string `json:"single_file_name,omitempty"`
	HasMultipleSingleFiles *bool `json:"has_multiple_single_files,omitempty"`
	SingleFilePaths []*string `json:"single_file_paths,omitempty"`
}

// NullableSimpleCommit - A commit.
type NullableSimpleCommit struct {
	// REQUIRED
	Author *NullableSimpleCommitAuthor `json:"author,omitempty"`

	// REQUIRED
	Committer *NullableSimpleCommitCommitter `json:"committer,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// REQUIRED
	TreeID *string `json:"tree_id,omitempty"`
}

type NullableSimpleCommitAuthor struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`
}

type NullableSimpleCommitCommitter struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`
}

// NullableSimpleUser - A GitHub user.
type NullableSimpleUser struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
	StarredAt *string `json:"starred_at,omitempty"`
}

// NullableTeamSimple - Groups of organization members that gives permissions on specified repositories.
type NullableTeamSimple struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`

	// Distinguished Name (DN) that team maps to within LDAP environment
	LdapDn *string `json:"ldap_dn,omitempty"`

	// The level of privacy this team should have
	Privacy *string `json:"privacy,omitempty"`
}

// OidcCustomSub - Actions OIDC Subject customization
type OidcCustomSub struct {
	// REQUIRED; Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
	IncludeClaimKeys []*string `json:"include_claim_keys,omitempty"`
}

// OidcCustomSubRepo - Actions OIDC subject customization for a repository
type OidcCustomSubRepo struct {
	// REQUIRED; Whether to use the default template or not. If true, the include_claim_keys field is ignored.
	UseDefault *bool `json:"use_default,omitempty"`

	// Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
	IncludeClaimKeys []*string `json:"include_claim_keys,omitempty"`
}

// OrgHook - Org Hook
type OrgHook struct {
	// REQUIRED
	Active *bool `json:"active,omitempty"`

	// REQUIRED
	Config *OrgHookConfig `json:"config,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Events []*string `json:"events,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PingURL *string `json:"ping_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	DeliveriesURL *string `json:"deliveries_url,omitempty"`
}

type OrgHookConfig struct {
	ContentType *string `json:"content_type,omitempty"`
	InsecureSSL *string `json:"insecure_ssl,omitempty"`
	Secret *string `json:"secret,omitempty"`
	URL *string `json:"url,omitempty"`
}

// OrgMembership - Org Membership
type OrgMembership struct {
	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED
	OrganizationURL *string `json:"organization_url,omitempty"`

	// REQUIRED; The user's membership type in the organization.
	Role *OrgMembershipRole `json:"role,omitempty"`

	// REQUIRED; The state of the member in the organization. The pending state indicates the user has not yet accepted an invitation.
	State *OrgMembershipState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
	Permissions *OrgMembershipPermissions `json:"permissions,omitempty"`
}

type OrgMembershipPermissions struct {
	// REQUIRED
	CanCreateRepository *bool `json:"can_create_repository,omitempty"`
}

// OrganizationActionsSecret - Secrets for GitHub Actions for an organization.
type OrganizationActionsSecret struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The name of the secret.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; Visibility of a secret
	Visibility *OrganizationActionsSecretVisibility `json:"visibility,omitempty"`
	SelectedRepositoriesURL *string `json:"selected_repositories_url,omitempty"`
}

// OrganizationActionsVariable - Organization variable for GitHub Actions.
type OrganizationActionsVariable struct {
	// REQUIRED; The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The name of the variable.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; The value of the variable.
	Value *string `json:"value,omitempty"`

	// REQUIRED; Visibility of a variable
	Visibility *OrganizationActionsVariableVisibility `json:"visibility,omitempty"`
	SelectedRepositoriesURL *string `json:"selected_repositories_url,omitempty"`
}

// OrganizationDependabotSecret - Secrets for GitHub Dependabot for an organization.
type OrganizationDependabotSecret struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The name of the secret.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; Visibility of a secret
	Visibility *OrganizationDependabotSecretVisibility `json:"visibility,omitempty"`
	SelectedRepositoriesURL *string `json:"selected_repositories_url,omitempty"`
}

// OrganizationFull - Organization Full
type OrganizationFull struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Followers *int32 `json:"followers,omitempty"`

	// REQUIRED
	Following *int32 `json:"following,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HasOrganizationProjects *bool `json:"has_organization_projects,omitempty"`

	// REQUIRED
	HasRepositoryProjects *bool `json:"has_repository_projects,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PublicGists *int32 `json:"public_gists,omitempty"`

	// REQUIRED
	PublicMembersURL *string `json:"public_members_url,omitempty"`

	// REQUIRED
	PublicRepos *int32 `json:"public_repos,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
// This field is only visible to organization owners or members of a team with the security manager role.
	AdvancedSecurityEnabledForNewRepositories *bool `json:"advanced_security_enabled_for_new_repositories,omitempty"`
	BillingEmail *string `json:"billing_email,omitempty"`
	Blog *string `json:"blog,omitempty"`
	Collaborators *int32 `json:"collaborators,omitempty"`
	Company *string `json:"company,omitempty"`
	DefaultRepositoryPermission *string `json:"default_repository_permission,omitempty"`

	// Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to this organization.
// This field is only visible to organization owners or members of a team with the security manager role.
	DependabotAlertsEnabledForNewRepositories *bool `json:"dependabot_alerts_enabled_for_new_repositories,omitempty"`

	// Whether dependabot security updates are automatically enabled for new repositories and repositories transferred to this
// organization.
// This field is only visible to organization owners or members of a team with the security manager role.
	DependabotSecurityUpdatesEnabledForNewRepositories *bool `json:"dependabot_security_updates_enabled_for_new_repositories,omitempty"`

	// Whether dependency graph is automatically enabled for new repositories and repositories transferred to this organization.
// This field is only visible to organization owners or members of a team with the security manager role.
	DependencyGraphEnabledForNewRepositories *bool `json:"dependency_graph_enabled_for_new_repositories,omitempty"`
	DiskUsage *int32 `json:"disk_usage,omitempty"`
	Email *string `json:"email,omitempty"`
	IsVerified *bool `json:"is_verified,omitempty"`
	Location *string `json:"location,omitempty"`
	MembersAllowedRepositoryCreationType *string `json:"members_allowed_repository_creation_type,omitempty"`
	MembersCanCreateInternalRepositories *bool `json:"members_can_create_internal_repositories,omitempty"`
	MembersCanCreatePages *bool `json:"members_can_create_pages,omitempty"`
	MembersCanCreatePrivatePages *bool `json:"members_can_create_private_pages,omitempty"`
	MembersCanCreatePrivateRepositories *bool `json:"members_can_create_private_repositories,omitempty"`
	MembersCanCreatePublicPages *bool `json:"members_can_create_public_pages,omitempty"`
	MembersCanCreatePublicRepositories *bool `json:"members_can_create_public_repositories,omitempty"`
	MembersCanCreateRepositories *bool `json:"members_can_create_repositories,omitempty"`
	MembersCanForkPrivateRepositories *bool `json:"members_can_fork_private_repositories,omitempty"`
	Name *string `json:"name,omitempty"`
	OwnedPrivateRepos *int32 `json:"owned_private_repos,omitempty"`
	Plan *OrganizationFullPlan `json:"plan,omitempty"`
	PrivateGists *int32 `json:"private_gists,omitempty"`

	// Whether secret scanning is automatically enabled for new repositories and repositories transferred to this organization.
// This field is only visible to organization owners or members of a team with the security manager role.
	SecretScanningEnabledForNewRepositories *bool `json:"secret_scanning_enabled_for_new_repositories,omitempty"`

	// An optional URL string to display to contributors who are blocked from pushing a secret.
	SecretScanningPushProtectionCustomLink *string `json:"secret_scanning_push_protection_custom_link,omitempty"`

	// Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
	SecretScanningPushProtectionCustomLinkEnabled *bool `json:"secret_scanning_push_protection_custom_link_enabled,omitempty"`

	// Whether secret scanning push protection is automatically enabled for new repositories and repositories transferred to this
// organization.
// This field is only visible to organization owners or members of a team with the security manager role.
	SecretScanningPushProtectionEnabledForNewRepositories *bool `json:"secret_scanning_push_protection_enabled_for_new_repositories,omitempty"`
	TotalPrivateRepos *int32 `json:"total_private_repos,omitempty"`
	TwitterUsername *string `json:"twitter_username,omitempty"`
	TwoFactorRequirementEnabled *bool `json:"two_factor_requirement_enabled,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type OrganizationFullPlan struct {
	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PrivateRepos *int32 `json:"private_repos,omitempty"`

	// REQUIRED
	Space *int32 `json:"space,omitempty"`
	FilledSeats *int32 `json:"filled_seats,omitempty"`
	Seats *int32 `json:"seats,omitempty"`
}

// OrganizationInvitation - Organization Invitation
type OrganizationInvitation struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	InvitationTeamsURL *string `json:"invitation_teams_url,omitempty"`

	// REQUIRED; A GitHub user.
	Inviter *SimpleUser `json:"inviter,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Role *string `json:"role,omitempty"`

	// REQUIRED
	TeamCount *int32 `json:"team_count,omitempty"`
	FailedAt *string `json:"failed_at,omitempty"`
	FailedReason *string `json:"failed_reason,omitempty"`
	InvitationSource *string `json:"invitation_source,omitempty"`
}

type OrganizationSecretScanningAlert struct {
	// The REST API URL of the code locations for this alert.
	LocationsURL *string `json:"locations_url,omitempty"`

	// Whether push protection was bypassed for the detected secret.
	PushProtectionBypassed *bool `json:"push_protection_bypassed,omitempty"`

	// The time that push protection was bypassed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	PushProtectionBypassedAt *time.Time `json:"push_protection_bypassed_at,omitempty"`

	// A GitHub user.
	PushProtectionBypassedBy *NullableSimpleUser `json:"push_protection_bypassed_by,omitempty"`

	// A GitHub repository.
	Repository *SimpleRepository `json:"repository,omitempty"`

	// Required when the state is resolved. The reason for resolving the alert.
	Resolution *SecretScanningAlertResolution `json:"resolution,omitempty"`

	// The comment that was optionally added when this alert was closed
	ResolutionComment *string `json:"resolution_comment,omitempty"`

	// The time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	ResolvedAt *time.Time `json:"resolved_at,omitempty"`

	// A GitHub user.
	ResolvedBy *NullableSimpleUser `json:"resolved_by,omitempty"`

	// The secret that was detected.
	Secret *string `json:"secret,omitempty"`

	// The type of secret that secret scanning detected.
	SecretType *string `json:"secret_type,omitempty"`

	// User-friendly name for the detected secret, matching the secret_type. For a list of built-in patterns, see "Secret scanning
// patterns
// [https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security]."
	SecretTypeDisplayName *string `json:"secret_type_display_name,omitempty"`

	// Sets the state of the secret scanning alert. You must provide resolution when you set the state to resolved.
	State *SecretScanningAlertState `json:"state,omitempty"`

	// READ-ONLY; The time that the alert was created in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty" azure:"ro"`

	// READ-ONLY; The GitHub URL of the alert resource.
	HTMLURL *string `json:"html_url,omitempty" azure:"ro"`

	// READ-ONLY; The security alert number.
	Number *int32 `json:"number,omitempty" azure:"ro"`

	// READ-ONLY; The REST API URL of the alert resource.
	URL *string `json:"url,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was last updated in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	UpdatedAt *time.Time `json:"updated_at,omitempty" azure:"ro"`
}

// OrganizationSimple - A GitHub organization.
type OrganizationSimple struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PublicMembersURL *string `json:"public_members_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// Package - A software package
type Package struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the package.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the package.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PackageType *PackageType `json:"package_type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; The number of versions of the package.
	VersionCount *int32 `json:"version_count,omitempty"`

	// REQUIRED
	Visibility *PackageVisibility `json:"visibility,omitempty"`

	// A GitHub user.
	Owner *NullableSimpleUser `json:"owner,omitempty"`

	// Minimal Repository
	Repository *NullableMinimalRepository `json:"repository,omitempty"`
}

// PackageVersion - A version of a software package
type PackageVersion struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; Unique identifier of the package version.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the package version.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PackageHTMLURL *string `json:"package_html_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	License *string `json:"license,omitempty"`

	// Package Version Metadata
	Metadata *PackageVersionMetadata `json:"metadata,omitempty"`
}

// PackageVersionMetadata - Package Version Metadata
type PackageVersionMetadata struct {
	// REQUIRED
	PackageType *PackageVersionMetadataPackageType `json:"package_type,omitempty"`

	// Container Metadata
	Container *PackageVersionMetadataContainer `json:"container,omitempty"`

	// Docker Metadata
	Docker *PackageVersionMetadataDocker `json:"docker,omitempty"`
}

// PackageVersionMetadataContainer - Container Metadata
type PackageVersionMetadataContainer struct {
	// REQUIRED
	Tags []*string `json:"tags,omitempty"`
}

// PackageVersionMetadataDocker - Docker Metadata
type PackageVersionMetadataDocker struct {
	Tag []*string `json:"tag,omitempty"`
}

type PackagesBillingUsage struct {
	// REQUIRED; Free storage space (GB) for GitHub Packages.
	IncludedGigabytesBandwidth *int32 `json:"included_gigabytes_bandwidth,omitempty"`

	// REQUIRED; Sum of the free and paid storage space (GB) for GitHuub Packages.
	TotalGigabytesBandwidthUsed *int32 `json:"total_gigabytes_bandwidth_used,omitempty"`

	// REQUIRED; Total paid storage space (GB) for GitHuub Packages.
	TotalPaidGigabytesBandwidthUsed *int32 `json:"total_paid_gigabytes_bandwidth_used,omitempty"`
}

// Page - The configuration for GitHub Pages for a repository.
type Page struct {
	// REQUIRED; The Pages site's custom domain
	Cname *string `json:"cname,omitempty"`

	// REQUIRED; Whether the Page has a custom 404 page.
	Custom404 *bool `json:"custom_404,omitempty"`

	// REQUIRED; Whether the GitHub Pages site is publicly visible. If set to true, the site is accessible to anyone on the internet.
// If set to false, the site will only be accessible to users who have at least read
// access to the repository that published the site.
	Public *bool `json:"public,omitempty"`

	// REQUIRED; The status of the most recent build of the Page.
	Status *PageStatus `json:"status,omitempty"`

	// REQUIRED; The API address for accessing this Page resource.
	URL *string `json:"url,omitempty"`

	// The process in which the Page will be built.
	BuildType *PageBuildType `json:"build_type,omitempty"`

	// The web address the Page can be accessed from.
	HTMLURL *string `json:"html_url,omitempty"`

	// Pages Https Certificate
	HTTPSCertificate *PagesHTTPSCertificate `json:"https_certificate,omitempty"`

	// Whether https is enabled on the domain
	HTTPSEnforced *bool `json:"https_enforced,omitempty"`

	// The timestamp when a pending domain becomes unverified.
	PendingDomainUnverifiedAt *time.Time `json:"pending_domain_unverified_at,omitempty"`

	// The state if the domain is verified
	ProtectedDomainState *PageProtectedDomainState `json:"protected_domain_state,omitempty"`

	// Pages Source Hash
	Source *PagesSourceHash `json:"source,omitempty"`
}

// PageBuild - Page Build
type PageBuild struct {
	// REQUIRED
	Commit *string `json:"commit,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Duration *int32 `json:"duration,omitempty"`

	// REQUIRED
	Error *PageBuildError `json:"error,omitempty"`

	// REQUIRED; A GitHub user.
	Pusher *NullableSimpleUser `json:"pusher,omitempty"`

	// REQUIRED
	Status *string `json:"status,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

type PageBuildError struct {
	// REQUIRED
	Message *string `json:"message,omitempty"`
}

// PageDeployment - The GitHub Pages deployment status.
type PageDeployment struct {
	// REQUIRED; The URI to the deployed GitHub Pages.
	PageURL *string `json:"page_url,omitempty"`

	// REQUIRED; The URI to monitor GitHub Pages deployment status.
	StatusURL *string `json:"status_url,omitempty"`

	// The URI to the deployed GitHub Pages preview.
	PreviewURL *string `json:"preview_url,omitempty"`
}

// PagesHTTPSCertificate - Pages Https Certificate
type PagesHTTPSCertificate struct {
	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED; Array of the domain set and its alternate name (if it is configured)
	Domains []*string `json:"domains,omitempty"`

	// REQUIRED
	State *PagesHTTPSCertificateState `json:"state,omitempty"`
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
}

// PagesHealthCheck - Pages Health Check Status
type PagesHealthCheck struct {
	AltDomain *PagesHealthCheckAltDomain `json:"alt_domain,omitempty"`
	Domain *PagesHealthCheckDomain `json:"domain,omitempty"`
}

type PagesHealthCheckAltDomain struct {
	CaaError *string `json:"caa_error,omitempty"`
	DNSResolves *bool `json:"dns_resolves,omitempty"`
	EnforcesHTTPS *bool `json:"enforces_https,omitempty"`
	HTTPSError *string `json:"https_error,omitempty"`
	HasCnameRecord *bool `json:"has_cname_record,omitempty"`
	HasMxRecordsPresent *bool `json:"has_mx_records_present,omitempty"`
	Host *string `json:"host,omitempty"`
	IsARecord *bool `json:"is_a_record,omitempty"`
	IsApexDomain *bool `json:"is_apex_domain,omitempty"`
	IsCloudflareIP *bool `json:"is_cloudflare_ip,omitempty"`
	IsCnameToFastly *bool `json:"is_cname_to_fastly,omitempty"`
	IsCnameToGithubUserDomain *bool `json:"is_cname_to_github_user_domain,omitempty"`
	IsCnameToPagesDotGithubDotCom *bool `json:"is_cname_to_pages_dot_github_dot_com,omitempty"`
	IsFastlyIP *bool `json:"is_fastly_ip,omitempty"`
	IsHTTPSEligible *bool `json:"is_https_eligible,omitempty"`
	IsNonGithubPagesIPPresent *bool `json:"is_non_github_pages_ip_present,omitempty"`
	IsOldIPAddress *bool `json:"is_old_ip_address,omitempty"`
	IsPagesDomain *bool `json:"is_pages_domain,omitempty"`
	IsPointedToGithubPagesIP *bool `json:"is_pointed_to_github_pages_ip,omitempty"`
	IsProxied *bool `json:"is_proxied,omitempty"`
	IsServedByPages *bool `json:"is_served_by_pages,omitempty"`
	IsValid *bool `json:"is_valid,omitempty"`
	IsValidDomain *bool `json:"is_valid_domain,omitempty"`
	Nameservers *string `json:"nameservers,omitempty"`
	Reason *string `json:"reason,omitempty"`
	RespondsToHTTPS *bool `json:"responds_to_https,omitempty"`
	ShouldBeARecord *bool `json:"should_be_a_record,omitempty"`
	URI *string `json:"uri,omitempty"`
}

type PagesHealthCheckDomain struct {
	CaaError *string `json:"caa_error,omitempty"`
	DNSResolves *bool `json:"dns_resolves,omitempty"`
	EnforcesHTTPS *bool `json:"enforces_https,omitempty"`
	HTTPSError *string `json:"https_error,omitempty"`
	HasCnameRecord *bool `json:"has_cname_record,omitempty"`
	HasMxRecordsPresent *bool `json:"has_mx_records_present,omitempty"`
	Host *string `json:"host,omitempty"`
	IsARecord *bool `json:"is_a_record,omitempty"`
	IsApexDomain *bool `json:"is_apex_domain,omitempty"`
	IsCloudflareIP *bool `json:"is_cloudflare_ip,omitempty"`
	IsCnameToFastly *bool `json:"is_cname_to_fastly,omitempty"`
	IsCnameToGithubUserDomain *bool `json:"is_cname_to_github_user_domain,omitempty"`
	IsCnameToPagesDotGithubDotCom *bool `json:"is_cname_to_pages_dot_github_dot_com,omitempty"`
	IsFastlyIP *bool `json:"is_fastly_ip,omitempty"`
	IsHTTPSEligible *bool `json:"is_https_eligible,omitempty"`
	IsNonGithubPagesIPPresent *bool `json:"is_non_github_pages_ip_present,omitempty"`
	IsOldIPAddress *bool `json:"is_old_ip_address,omitempty"`
	IsPagesDomain *bool `json:"is_pages_domain,omitempty"`
	IsPointedToGithubPagesIP *bool `json:"is_pointed_to_github_pages_ip,omitempty"`
	IsProxied *bool `json:"is_proxied,omitempty"`
	IsServedByPages *bool `json:"is_served_by_pages,omitempty"`
	IsValid *bool `json:"is_valid,omitempty"`
	IsValidDomain *bool `json:"is_valid_domain,omitempty"`
	Nameservers *string `json:"nameservers,omitempty"`
	Reason *string `json:"reason,omitempty"`
	RespondsToHTTPS *bool `json:"responds_to_https,omitempty"`
	ShouldBeARecord *bool `json:"should_be_a_record,omitempty"`
	URI *string `json:"uri,omitempty"`
}

// PagesSourceHash - Pages Source Hash
type PagesSourceHash struct {
	// REQUIRED
	Branch *string `json:"branch,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`
}

// ParticipationStats - Participation Stats
type ParticipationStats struct {
	// REQUIRED
	All []*int32 `json:"all,omitempty"`

	// REQUIRED
	Owner []*int32 `json:"owner,omitempty"`
}

type PatchContentSchemaActionsItem struct {
	// REQUIRED; A short explanation of what this action would do. The maximum size is 40 characters.
	Description *string `json:"description,omitempty"`

	// REQUIRED; A reference for the action on the integrator's system. The maximum size is 20 characters.
	Identifier *string `json:"identifier,omitempty"`

	// REQUIRED; The text to be displayed on a button in the web UI. The maximum size is 20 characters.
	Label *string `json:"label,omitempty"`
}

type PatchContentSchemaAutoTriggerChecksItem struct {
	// REQUIRED; The id of the GitHub App.
	AppID *int32 `json:"app_id,omitempty"`

	// REQUIRED; Set to true to enable automatic creation of CheckSuite events upon pushes to the repository, or false to disable
// them.
	Setting *bool `json:"setting,omitempty"`
}

// PatchContentSchemaBypassPullRequestAllowances - Allow specific users, teams, or apps to bypass pull request requirements.
type PatchContentSchemaBypassPullRequestAllowances struct {
	// The list of app slugs allowed to bypass pull request requirements.
	Apps []*string `json:"apps,omitempty"`

	// The list of team slugs allowed to bypass pull request requirements.
	Teams []*string `json:"teams,omitempty"`

	// The list of user logins allowed to bypass pull request requirements.
	Users []*string `json:"users,omitempty"`
}

type PatchContentSchemaChecksItem struct {
	// REQUIRED; The name of the required check
	Context *string `json:"context,omitempty"`

	// The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has
// recently provided this check, or any app if it was not set by a GitHub App. Pass
// -1 to explicitly allow any app to set the status.
	AppID *int32 `json:"app_id,omitempty"`
}

// PatchContentSchemaConfig - Key/value pairs to provide settings for this webhook. These are defined below [https://docs.github.com/rest/reference/orgs#update-hook-config-params].
type PatchContentSchemaConfig struct {
	// REQUIRED; The URL to which the payloads will be delivered.
	URL *string `json:"url,omitempty"`

	// The media type used to serialize the payloads. Supported values include json and form. The default is form.
	ContentType *string `json:"content_type,omitempty"`
	InsecureSSL *WebhookConfigInsecureSSL `json:"insecure_ssl,omitempty"`

	// If provided, the secret will be used as the key to generate the HMAC hex digest value for delivery signature headers [https://docs.github.com/webhooks/event-payloads/#delivery-headers].
	Secret *string `json:"secret,omitempty"`
}

// PatchContentSchemaDismissalRestrictions - Specify which users, teams, and apps can dismiss pull request reviews. Pass an
// empty dismissal_restrictions object to disable. User and team dismissal_restrictions are only available for
// organization-owned repositories. Omit this parameter for personal repositories.
type PatchContentSchemaDismissalRestrictions struct {
	// The list of app slugs with dismissal access
	Apps []*string `json:"apps,omitempty"`

	// The list of team slugs with dismissal access
	Teams []*string `json:"teams,omitempty"`

	// The list of user logins with dismissal access
	Users []*string `json:"users,omitempty"`
}

type PatchContentSchemaLabelsItem struct {
}

type PatchContentSchemaMilestone struct {
}

// PatchContentSchemaOutput - Check runs can accept a variety of data in the output object, including a title and summary
// and can optionally provide descriptive details about the run.
type PatchContentSchemaOutput struct {
	// REQUIRED; Can contain Markdown.
	Summary *string `json:"summary,omitempty"`

	// Adds information from your analysis to specific lines of code. Annotations are visible in GitHub's pull request UI. Annotations
// are visible in GitHub's pull request UI. The Checks API limits the
// number of annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple
// requests to the Update a check run
// [https://docs.github.com/rest/reference/checks#update-a-check-run] endpoint. Each time you update the check run, annotations
// are appended to the list of annotations that already exist for the check
// run. For details about annotations in the UI, see "About status checks [https://docs.github.com/articles/about-status-checks#checks]".
	Annotations []*PatchContentSchemaOutputAnnotationsItem `json:"annotations,omitempty"`

	// Adds images to the output displayed in the GitHub pull request UI.
	Images []*PatchContentSchemaOutputImagesItem `json:"images,omitempty"`

	// Can contain Markdown.
	Text *string `json:"text,omitempty"`

	// Required.
	Title *string `json:"title,omitempty"`
}

type PatchContentSchemaOutputAnnotationsItem struct {
	// REQUIRED; The level of the annotation.
	AnnotationLevel *PatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel `json:"annotation_level,omitempty"`

	// REQUIRED; The end line of the annotation.
	EndLine *int32 `json:"end_line,omitempty"`

	// REQUIRED; A short description of the feedback for these lines of code. The maximum size is 64 KB.
	Message *string `json:"message,omitempty"`

	// REQUIRED; The path of the file to add an annotation to. For example, assets/css/main.css.
	Path *string `json:"path,omitempty"`

	// REQUIRED; The start line of the annotation. Line numbers start at 1.
	StartLine *int32 `json:"start_line,omitempty"`

	// The end column of the annotation. Annotations only support start_column and end_column on the same line. Omit this parameter
// if start_line and end_line have different values.
	EndColumn *int32 `json:"end_column,omitempty"`

	// Details about this annotation. The maximum size is 64 KB.
	RawDetails *string `json:"raw_details,omitempty"`

	// The start column of the annotation. Annotations only support start_column and end_column on the same line. Omit this parameter
// if start_line and end_line have different values. Column numbers start at
// 1.
	StartColumn *int32 `json:"start_column,omitempty"`

	// The title that represents the annotation. The maximum size is 255 characters.
	Title *string `json:"title,omitempty"`
}

type PatchContentSchemaOutputImagesItem struct {
	// REQUIRED; The alternative text for the image.
	Alt *string `json:"alt,omitempty"`

	// REQUIRED; The full URL of the image.
	ImageURL *string `json:"image_url,omitempty"`

	// A short image description.
	Caption *string `json:"caption,omitempty"`
}

// PatchContentSchemaSecurityAndAnalysis - Specify which security and analysis features to enable or disable for the repository.
// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization
// that owns the repository. For more information, see "Managing security
// managers in your organization [https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization]."
// For example, to enable GitHub Advanced Security, use this data in the body of the PATCH request:{ "security_and_analysis":
// {"advanced_security": { "status": "enabled" } } }.
// You can check which security and analysis features are currently enabled by using a GET /repos/{owner}/{repo} request.
type PatchContentSchemaSecurityAndAnalysis struct {
	// Use the status property to enable or disable GitHub Advanced Security for this repository. For more information, see "About
// GitHub Advanced Security
// [/github/getting-started-with-github/learning-about-github/about-github-advanced-security]."
	AdvancedSecurity *PatchContentSchemaSecurityAndAnalysisAdvancedSecurity `json:"advanced_security,omitempty"`

	// Use the status property to enable or disable secret scanning for this repository. For more information, see "About secret
// scanning [/code-security/secret-security/about-secret-scanning]."
	SecretScanning *PatchContentSchemaSecurityAndAnalysisSecretScanning `json:"secret_scanning,omitempty"`

	// Use the status property to enable or disable secret scanning push protection for this repository. For more information,
// see "Protecting pushes with secret scanning
// [/code-security/secret-scanning/protecting-pushes-with-secret-scanning]."
	SecretScanningPushProtection *PatchContentSchemaSecurityAndAnalysisSecretScanningPushProtection `json:"secret_scanning_push_protection,omitempty"`
}

// PatchContentSchemaSecurityAndAnalysisAdvancedSecurity - Use the status property to enable or disable GitHub Advanced Security
// for this repository. For more information, see "About GitHub Advanced Security
// [/github/getting-started-with-github/learning-about-github/about-github-advanced-security]."
type PatchContentSchemaSecurityAndAnalysisAdvancedSecurity struct {
	// Can be enabled or disabled.
	Status *string `json:"status,omitempty"`
}

// PatchContentSchemaSecurityAndAnalysisSecretScanning - Use the status property to enable or disable secret scanning for
// this repository. For more information, see "About secret scanning [/code-security/secret-security/about-secret-scanning]."
type PatchContentSchemaSecurityAndAnalysisSecretScanning struct {
	// Can be enabled or disabled.
	Status *string `json:"status,omitempty"`
}

// PatchContentSchemaSecurityAndAnalysisSecretScanningPushProtection - Use the status property to enable or disable secret
// scanning push protection for this repository. For more information, see "Protecting pushes with secret scanning
// [/code-security/secret-scanning/protecting-pushes-with-secret-scanning]."
type PatchContentSchemaSecurityAndAnalysisSecretScanningPushProtection struct {
	// Can be enabled or disabled.
	Status *string `json:"status,omitempty"`
}

type Paths105XfxzReposOwnerRepoGitTreesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Objects (of path, mode, type, and sha) specifying a tree structure.
	Tree []*PostContentSchemaTreeItem `json:"tree,omitempty"`

	// The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object
// will be created from entries in the Git tree object pointed to by base_tree
// and entries defined in the tree parameter. Entries defined in the tree parameter will overwrite items from base_tree with
// the same path. If you're creating new changes on a branch, then normally you'd
// set base_tree to the SHA1 of the Git tree object of the current latest commit on the branch you're working on. If not provided,
// GitHub will create a new Git tree object from only the entries defined
// in the tree parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent
// commit's tree and were not defined in the tree parameter will be listed as
// deleted by the new commit.
	BaseTree *string `json:"base_tree,omitempty"`
}

type Paths1061OcyUserInstallationsInstallationIDRepositoriesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Repositories []*Repository `json:"repositories,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
	RepositorySelection *string `json:"repository_selection,omitempty"`
}

type Paths1084D7PReposOwnerRepoActionsArtifactsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Artifacts []*Artifact `json:"artifacts,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths10Lwna0ReposOwnerRepoPullsCommentsCommentIDReactionsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The reaction type [https://docs.github.com/rest/reference/reactions#reaction-types] to add to the pull request
// review comment.
	Content *Enum143 `json:"content,omitempty"`
}

type Paths10Nuc3UOrgsOrgActionsVariablesNameRepositoriesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Repositories []*MinimalRepository `json:"repositories,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths10Re8XwApplicationsClientIDTokenDeleteRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The OAuth access token used to authenticate to the GitHub API.
	AccessToken *string `json:"access_token,omitempty"`
}

type Paths10Tu0K6ReposOwnerRepoDependabotSecretsSecretNamePutRequestbodyContentApplicationJSONSchema struct {
	// Value for your secret, encrypted with LibSodium [https://libsodium.gitbook.io/doc/bindings_for_other_languages] using the
// public key retrieved from the Get a repository public key
// [https://docs.github.com/rest/reference/dependabot#get-a-repository-public-key] endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// ID of the key you used to encrypt the secret.
	KeyID *string `json:"key_id,omitempty"`
}

type Paths10Xtt49ReposOwnerRepoInteractionLimitsGetResponses200ContentApplicationJSONSchema struct {
}

type Paths10Z314YReposOwnerRepoActionsVariablesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the variable.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The value of the variable.
	Value *string `json:"value,omitempty"`
}

type Paths115B0B9OrgsOrgCodespacesSecretsSecretNameRepositoriesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Repositories []*MinimalRepository `json:"repositories,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths115Dv7COrgsOrgActionsRequiredWorkflowsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The ID of the repository that contains the workflow file.
	RepositoryID *string `json:"repository_id,omitempty"`

	// REQUIRED; Path of the workflow file to be configured as a required workflow.
	WorkflowFilePath *string `json:"workflow_file_path,omitempty"`

	// Enable the required workflow for all repositories or selected repositories in the organization.
	Scope *PostContentSchemaScope `json:"scope,omitempty"`

	// A list of repository IDs where you want to enable the required workflow. You can only provide a list of repository ids
// when the scope is set to selected.
	SelectedRepositoryIDs []*int32 `json:"selected_repository_ids,omitempty"`
}

type Paths118P0LvOrgsOrgActionsRequiredWorkflowsRequiredWorkflowIDPatchRequestbodyContentApplicationJSONSchema struct {
	// The ID of the repository that contains the workflow file.
	RepositoryID *string `json:"repository_id,omitempty"`

	// Enable the required workflow for all repositories or selected repositories in the organization.
	Scope *PatchContentSchemaScope `json:"scope,omitempty"`

	// A list of repository IDs where you want to enable the required workflow. A list of repository IDs where you want to enable
// the required workflow. You can only provide a list of repository ids when the
// scope is set to selected.
	SelectedRepositoryIDs []*int32 `json:"selected_repository_ids,omitempty"`

	// Path of the workflow file to be configured as a required workflow.
	WorkflowFilePath *string `json:"workflow_file_path,omitempty"`
}

type Paths11CipfhReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostRequestbodyContentApplicationJSONSchema struct {
}

type Paths11Kn4B9ReposOwnerRepoPullsPullNumberCodespacesPostRequestbodyContentApplicationJSONSchema struct {
	// IP for location auto-detection when proxying a request
	ClientIP *string `json:"client_ip,omitempty"`

	// Path to devcontainer.json config to use for this codespace
	DevcontainerPath *string `json:"devcontainer_path,omitempty"`

	// Display name for this codespace
	DisplayName *string `json:"display_name,omitempty"`

	// Time in minutes before codespace stops from inactivity
	IdleTimeoutMinutes *int32 `json:"idle_timeout_minutes,omitempty"`

	// Location for this codespace. Assigned by IP if not provided
	Location *string `json:"location,omitempty"`

	// Machine type to use for this codespace
	Machine *string `json:"machine,omitempty"`

	// Whether to authorize requested permissions from devcontainer.json
	MultiRepoPermissionsOptOut *bool `json:"multi_repo_permissions_opt_out,omitempty"`

	// Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200
// (30 days).
	RetentionPeriodMinutes *int32 `json:"retention_period_minutes,omitempty"`

	// Working directory for this codespace
	WorkingDirectory *string `json:"working_directory,omitempty"`
}

type Paths121Yhp2UserSSHSigningKeysPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The public SSH key to add to your GitHub account. For more information, see "Checking for existing SSH keys
// [https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys]."
	Key *string `json:"key,omitempty"`

	// A descriptive name for the new key.
	Title *string `json:"title,omitempty"`
}

type Paths1287N5JOrgsOrgActionsRequiredWorkflowsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	RequiredWorkflows []*RequiredWorkflow `json:"required_workflows,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths129Ps5JReposOwnerRepoKeysPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The contents of the key.
	Key *string `json:"key,omitempty"`

	// If true, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
// Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator
// on a personal repository. For more information, see "Repository permission
// levels for an organization [https://docs.github.com/articles/repository-permission-levels-for-an-organization/]" and "Permission
// levels for a user account repository
// [https://docs.github.com/articles/permission-levels-for-a-user-account-repository/]."
	ReadOnly *bool `json:"read_only,omitempty"`

	// A name for the key.
	Title *string `json:"title,omitempty"`
}

type Paths12J662EReposOwnerRepoDependabotAlertsAlertNumberPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The state of the Dependabot alert. A dismissed_reason must be provided when setting the state to dismissed.
	State *Enum220 `json:"state,omitempty"`

	// An optional comment associated with dismissing the alert.
	DismissedComment *string `json:"dismissed_comment,omitempty"`

	// Required when state is dismissed. A reason for dismissing the alert.
	DismissedReason *PatchContentSchemaDismissedReason `json:"dismissed_reason,omitempty"`
}

type Paths12Md2AvReposOwnerRepoGitRefsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the fully qualified reference (ie: refs/heads/master). If it doesn't start with 'refs' and have at
// least two slashes, it will be rejected.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; The SHA1 value for this reference.
	SHA *string `json:"sha,omitempty"`
	Key *string `json:"key,omitempty"`
}

type Paths12Tgeh3ReposOwnerRepoHooksPostRequestbodyContentApplicationJSONSchema struct {
	// Determines if notifications are sent when the webhook is triggered. Set to true to send notifications.
	Active *bool `json:"active,omitempty"`

	// Key/value pairs to provide settings for this webhook. These are defined below [https://docs.github.com/rest/reference/repos#create-hook-config-params].
	Config *PathsXvysvoReposOwnerRepoHooksPostRequestbodyContentApplicationJSONSchemaPropertiesConfig `json:"config,omitempty"`

	// Determines what events [https://docs.github.com/webhooks/event-payloads] the hook is triggered for.
	Events []*string `json:"events,omitempty"`

	// Use web to create a webhook. Default: web. This parameter only accepts the value web.
	Name *string `json:"name,omitempty"`
}

type Paths13L7Wt9OrgsOrgOutsideCollaboratorsUsernameDeleteResponses422ContentApplicationJSONSchema struct {
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message *string `json:"message,omitempty"`
}

type Paths13O2M51OrgsOrgActionsVariablesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	Variables []*OrganizationActionsVariable `json:"variables,omitempty"`
}

type Paths13ZchtlUserCodespacesSecretsSecretNamePutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; ID of the key you used to encrypt the secret.
	KeyID *string `json:"key_id,omitempty"`

	// Value for your secret, encrypted with LibSodium [https://libsodium.gitbook.io/doc/bindings_for_other_languages] using the
// public key retrieved from the Get the public key for the authenticated user
// [https://docs.github.com/rest/reference/codespaces#get-the-public-key-for-the-authenticated-user] endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// An array of repository ids that can access the user secret. You can manage the list of selected repositories using the
// List selected repositories for a user secret
// [https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret], Set selected repositories
// for a user secret
// [https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-a-user-secret], and Remove a selected
// repository from a user secret
// [https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret] endpoints.
	SelectedRepositoryIDs []*PathsU8LrzyUserCodespacesSecretsSecretNamePutRequestbodyContentApplicationJSONSchemaPropertiesSelectedRepositoryIDsItems `json:"selected_repository_ids,omitempty"`
}

type Paths14Fjsy0ReposOwnerRepoNotificationsPutRequestbodyContentApplicationJSONSchema struct {
	// Describes the last point that notifications were checked. Anything updated since this time will not be marked as read.
// If you omit this parameter, all notifications are marked as read. This is a
// timestamp in ISO 8601 [https://en.wikipedia.org/wiki/ISO_8601] format: YYYY-MM-DDTHH:MM:SSZ. Default: The current timestamp.
	LastReadAt *time.Time `json:"last_read_at,omitempty"`
}

type Paths14S7BrqReposOwnerRepoGitTagsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The tag message.
	Message *string `json:"message,omitempty"`

	// REQUIRED; The SHA of the git object this is tagging.
	Object *string `json:"object,omitempty"`

	// REQUIRED; The tag's name. This is typically a version (e.g., "v0.0.1").
	Tag *string `json:"tag,omitempty"`

	// REQUIRED; The type of the object we're tagging. Normally this is a commit but it can also be a tree or a blob.
	Type *PostContentSchemaType `json:"type,omitempty"`

	// An object with information about the individual creating the tag.
	Tagger *PostContentSchemaTagger `json:"tagger,omitempty"`
}

type Paths14S7J96OrgsOrgProjectsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the project.
	Name *string `json:"name,omitempty"`

	// The description of the project.
	Body *string `json:"body,omitempty"`
}

type Paths15IodaaOrgsOrgActionsVariablesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the variable.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The value of the variable.
	Value *string `json:"value,omitempty"`

	// REQUIRED; The type of repositories in the organization that can access the variable. selected means only the repositories
// specified by selected_repository_ids can access the variable.
	Visibility *PostContentSchemaVisibility `json:"visibility,omitempty"`

	// An array of repository ids that can access the organization variable. You can only provide a list of repository ids when
// the visibility is set to selected.
	SelectedRepositoryIDs []*int32 `json:"selected_repository_ids,omitempty"`
}

type Paths168P3GeOrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The discussion comment's body text.
	Body *string `json:"body,omitempty"`
}

type Paths16D3L0RProjectsColumnsCardsCardIDMovesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The position of the card in a column. Can be one of: top, bottom, or after:<card_id> to place after the specified
// card.
	Position *string `json:"position,omitempty"`

	// The unique identifier of the column the card should be moved to
	ColumnID *int32 `json:"column_id,omitempty"`
}

type Paths16Li0J1OrgsOrgInvitationsPostRequestbodyContentApplicationJSONSchema struct {
	// Required unless you provide invitee_id. Email address of the person you are inviting, which can be an existing GitHub user.
	Email *string `json:"email,omitempty"`

	// Required unless you provide email. GitHub user ID for the person you are inviting.
	InviteeID *int32 `json:"invitee_id,omitempty"`

	// The role for the new member.
// * admin - Organization owners with full administrative rights to the organization and complete access to all repositories
// and teams.
// * direct_member - Non-owner organization members with ability to see other members and join teams by invitation.
// * billing_manager - Non-owner organization members with ability to manage the billing settings of your organization.
	Role *PostContentSchemaRole `json:"role,omitempty"`

	// Specify IDs for the teams you want to invite new members to.
	TeamIDs []*int32 `json:"team_ids,omitempty"`
}

type Paths16PcesmUserInstallationsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Installations []*Installation `json:"installations,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths16Q8335ReposOwnerRepoActionsWorkflowsWorkflowIDDispatchesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The git reference for the workflow. The reference can be a branch or tag name.
	Ref *string `json:"ref,omitempty"`

	// Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured
// in the workflow file will be used when inputs are omitted.
	Inputs map[string]*string `json:"inputs,omitempty"`
}

type Paths16T4D44ReposOwnerRepoIssuesIssueNumberLabelsPutRequestbodyContentApplicationJSONSchema struct {
}

type Paths1728M1FReposOwnerRepoCommitsRefCheckSuitesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	CheckSuites []*CheckSuite `json:"check_suites,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths17The35AppManifestsCodeConversionsPostResponses201ContentApplicationJSONSchemaAllof1 struct {
	// REQUIRED
	ClientID *string `json:"client_id,omitempty"`

	// REQUIRED
	ClientSecret *string `json:"client_secret,omitempty"`

	// REQUIRED
	Pem *string `json:"pem,omitempty"`

	// REQUIRED
	WebhookSecret *string `json:"webhook_secret,omitempty"`

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
}

type Paths17VlsfoNotificationsPutResponses202ContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type Paths17Vtn24RepositoriesRepositoryIDEnvironmentsEnvironmentNameSecretsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Secrets []*ActionsSecret `json:"secrets,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths188IrkpReposOwnerRepoActionsPermissionsPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Whether GitHub Actions is enabled on the repository.
	Enabled *bool `json:"enabled,omitempty"`

	// The permissions policy that controls the actions and reusable workflows that are allowed to run.
	AllowedActions *AllowedActions `json:"allowed_actions,omitempty"`
}

type Paths18Bjzy1ReposOwnerRepoPullsPullNumberReviewsPostRequestbodyContentApplicationJSONSchema struct {
	// Required when using REQUEST_CHANGES or COMMENT for the event parameter. The body text of the pull request review.
	Body *string `json:"body,omitempty"`

	// Use the following table to specify the location, destination, and contents of the draft review comment.
	Comments []*PostContentSchemaCommentsItem `json:"comments,omitempty"`

	// The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a
// subsequent commit modifies the line you specify as the position. Defaults to the
// most recent commit in the pull request when you do not specify a value.
	CommitID *string `json:"commit_id,omitempty"`

	// The review action you want to perform. The review actions include: APPROVE, REQUEST_CHANGES, or COMMENT. By leaving this
// blank, you set the review action state to PENDING, which means you will need to
// submit the pull request review [https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request] when you are ready.
	Event *PostContentSchemaEvent `json:"event,omitempty"`
}

type Paths18KmxwReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; The GitHub Apps that have push access to this branch. Use the slugified version of the app name. Note: The list
// of users, apps, and teams in total is limited to 100 items.
	Apps []*string `json:"apps,omitempty"`
}

type Paths18Nrhf0ReposOwnerRepoCheckRunsCheckRunIDPatchRequestbodyContentApplicationJSONSchemaAnyof0 struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
	Status *PatchContentSchema0Status `json:"status,omitempty"`
}

type Paths18Rg39SProjectsColumnsColumnIDCardsPostRequestbodyContentApplicationJSONSchema struct {
}

type Paths18U4O2XOrgsOrgHooksHookIDPatchRequestbodyContentApplicationJSONSchema struct {
	// Determines if notifications are sent when the webhook is triggered. Set to true to send notifications.
	Active *bool `json:"active,omitempty"`

	// Key/value pairs to provide settings for this webhook. These are defined below [https://docs.github.com/rest/reference/orgs#update-hook-config-params].
	Config *PatchContentSchemaConfig `json:"config,omitempty"`

	// Determines what events [https://docs.github.com/webhooks/event-payloads] the hook is triggered for.
	Events []*string `json:"events,omitempty"`
	Name *string `json:"name,omitempty"`
}

type Paths196BhohOrgsOrgMembersUsernameCodespacesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Codespaces []*Codespace `json:"codespaces,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths197Nt42ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; The slug values for teams
	Teams []*string `json:"teams,omitempty"`
}

type Paths19QyncoReposOwnerRepoForksPostRequestbodyContentApplicationJSONSchema struct {
	// When forking from an existing repository, fork with only the default branch.
	DefaultBranchOnly *bool `json:"default_branch_only,omitempty"`

	// When forking from an existing repository, a new name for the fork.
	Name *string `json:"name,omitempty"`

	// Optional parameter to specify the organization name if forking into an organization.
	Organization *string `json:"organization,omitempty"`
}

type Paths19S09RvReposOwnerRepoImportPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The URL of the originating repository.
	VcsURL *string `json:"vcs_url,omitempty"`

	// For a tfvc import, the name of the project that is being imported.
	TfvcProject *string `json:"tfvc_project,omitempty"`

	// The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before
// beginning the import. This detection step will be reflected in the response.
	Vcs *PutContentSchemaVcs `json:"vcs,omitempty"`

	// If authentication is required, the password to provide to vcs_url.
	VcsPassword *string `json:"vcs_password,omitempty"`

	// If authentication is required, the username to provide to vcs_url.
	VcsUsername *string `json:"vcs_username,omitempty"`
}

type Paths19V5QwfUserCodespacesSecretsSecretNameRepositoriesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Repositories []*MinimalRepository `json:"repositories,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths19XtxndOrgsOrgCodespacesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Codespaces []*Codespace `json:"codespaces,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths1A1084MSearchIssuesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	IncompleteResults *bool `json:"incomplete_results,omitempty"`

	// REQUIRED
	Items []*IssueSearchResultItem `json:"items,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths1A3QgibReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; The username for users
	Users []*string `json:"users,omitempty"`
}

type Paths1A4R3XoMarkdownPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The Markdown text to render in HTML.
	Text *string `json:"text,omitempty"`

	// The repository context to use when creating references in gfm mode. For example, setting context to octo-org/octo-repo
// will change the text #42 into an HTML link to issue 42 in the octo-org/octo-repo
// repository.
	Context *string `json:"context,omitempty"`

	// The rendering mode.
	Mode *PostContentSchemaMode `json:"mode,omitempty"`
}

type Paths1Am7T21TeamsTeamIDDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The reaction type [https://docs.github.com/rest/reference/reactions#reaction-types] to add to the team discussion
// comment.
	Content *Enum143 `json:"content,omitempty"`
}

type Paths1AmvuizGistsPostRequestbodyContentApplicationJSONSchemaPropertiesFilesAdditionalproperties struct {
	// REQUIRED; Content of the file
	Content *string `json:"content,omitempty"`
}

type Paths1Awl2R3ReposOwnerRepoMergeUpstreamPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the branch which should be updated to match upstream.
	Branch *string `json:"branch,omitempty"`
}

type Paths1B70VajReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; The name of the status checks
	Contexts []*string `json:"contexts,omitempty"`
}

type Paths1Bk5OxmReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; The name of the status checks
	Contexts []*string `json:"contexts,omitempty"`
}

type Paths1BqvfchApplicationsClientIDTokenPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The access_token of the OAuth application.
	AccessToken *string `json:"access_token,omitempty"`
}

type Paths1Bsn237OrgsOrgDependabotSecretsSecretNamePutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Which type of organization repositories have access to the organization secret. selected means only the repositories
// specified by selected_repository_ids can access the secret.
	Visibility *Enum99 `json:"visibility,omitempty"`

	// Value for your secret, encrypted with LibSodium [https://libsodium.gitbook.io/doc/bindings_for_other_languages] using the
// public key retrieved from the Get an organization public key
// [https://docs.github.com/rest/reference/dependabot#get-an-organization-public-key] endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// ID of the key you used to encrypt the secret.
	KeyID *string `json:"key_id,omitempty"`

	// An array of repository ids that can access the organization secret. You can only provide a list of repository ids when
// the visibility is set to selected. You can manage the list of selected
// repositories using the List selected repositories for an organization secret [https://docs.github.com/rest/reference/dependabot#list-selected-repositories-for-an-organization-secret],
// Set selected
// repositories for an organization secret [https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret],
// and Remove selected repository from an organization
// secret [https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret] endpoints.
	SelectedRepositoryIDs []*string `json:"selected_repository_ids,omitempty"`
}

type Paths1C6Ln62ReposOwnerRepoPullsPullNumberCommentsCommentIDRepliesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The text of the review comment.
	Body *string `json:"body,omitempty"`
}

type Paths1Cfde2ReposOwnerRepoActionsRunsRunIDArtifactsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Artifacts []*Artifact `json:"artifacts,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths1Ckzl6WReposOwnerRepoDeleteResponses403ContentApplicationJSONSchema struct {
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message *string `json:"message,omitempty"`
}

type Paths1D0BbsxReposOwnerRepoInvitationsInvitationIDPatchRequestbodyContentApplicationJSONSchema struct {
	// The permissions that the associated user will have on the repository. Valid values are read, write, maintain, triage, and
// admin.
	Permissions *PatchContentSchemaPermissions `json:"permissions,omitempty"`
}

type Paths1D5Zy92ReposOwnerRepoPagesPutRequestbodyContentApplicationJSONSchema struct {
	// The process by which the GitHub Pages site will be built. workflow means that the site is built by a custom GitHub Actions
// workflow. legacy means that the site is built by GitHub when changes are
// pushed to a specific branch.
	BuildType *PutContentSchemaBuildType `json:"build_type,omitempty"`

	// Specify a custom domain for the repository. Sending a null value will remove the custom domain. For more about custom domains,
// see "Using a custom domain with GitHub Pages
// [https://docs.github.com/articles/using-a-custom-domain-with-github-pages/]."
	Cname *string `json:"cname,omitempty"`

	// Specify whether HTTPS should be enforced for the repository.
	HTTPSEnforced *bool `json:"https_enforced,omitempty"`
	Source *PutContentSchemaSource `json:"source,omitempty"`
}

type Paths1D69UpwProjectsColumnsColumnIDPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Name of the project column
	Name *string `json:"name,omitempty"`
}

type Paths1D6PpoeReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsDeleteRequestbodyContentApplicationJSONSchema struct {
}

type Paths1De6ZrwGistsGistIDCommentsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The comment text.
	Body *string `json:"body,omitempty"`
}

type Paths1EdxjqnReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutRequestbodyContentApplicationJSONSchema struct {
}

type Paths1EsnkluOrgsOrgCodespacesBillingSelectedUsersPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The usernames of the organization members whose codespaces be billed to the organization.
	SelectedUsernames []*string `json:"selected_usernames,omitempty"`
}

type Paths1Ey2W53OrgsOrgCodespacesSecretsSecretNameRepositoriesPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; An array of repository ids that can access the organization secret. You can only provide a list of repository
// ids when the visibility is set to selected. You can add and remove individual repositories
// using the Set selected repositories for an organization secret [https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret]
// and Remove selected repository
// from an organization secret [https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret]
// endpoints.
	SelectedRepositoryIDs []*int32 `json:"selected_repository_ids,omitempty"`
}

type Paths1EzemxdUserMembershipsOrgsOrgPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The state that the membership should be in. Only "active" will be accepted.
	State *Enum319 `json:"state,omitempty"`
}

type Paths1F5Aw67ProjectsProjectIDCollaboratorsUsernamePutRequestbodyContentApplicationJSONSchema struct {
	// The permission to grant the collaborator.
	Permission *Enum162 `json:"permission,omitempty"`
}

type Paths1Fq4VdfUserCodespacesSecretsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Secrets []*CodespacesSecret `json:"secrets,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths1Fqvg6ZReposOwnerRepoDispatchesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; A custom webhook event name. Must be 100 characters or fewer.
	EventType *string `json:"event_type,omitempty"`

	// JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of
// top-level properties is 10.
	ClientPayload map[string]any `json:"client_payload,omitempty"`
}

type Paths1FshfmfProjectsColumnsCardsCardIDMovesPostResponses503ContentApplicationJSONSchema struct {
	Code *string `json:"code,omitempty"`
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Errors []*Post503ApplicationJSONPropertiesItemsItem `json:"errors,omitempty"`
	Message *string `json:"message,omitempty"`
}

type Paths1Gazst8SearchTopicsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	IncompleteResults *bool `json:"incomplete_results,omitempty"`

	// REQUIRED
	Items []*TopicSearchResultItem `json:"items,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths1Ghtn1LReposOwnerRepoActionsRunsRunIDPendingDeploymentsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; A comment to accompany the deployment review
	Comment *string `json:"comment,omitempty"`

	// REQUIRED; The list of environment ids to approve or reject
	EnvironmentIDs []*int32 `json:"environment_ids,omitempty"`

	// REQUIRED; Whether to approve or reject deployment to the specified environments.
	State *PostContentSchemaState `json:"state,omitempty"`
}

type Paths1GmllavUserCodespacesPostRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; Repository id for this codespace
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// IP for location auto-detection when proxying a request
	ClientIP *string `json:"client_ip,omitempty"`

	// Path to devcontainer.json config to use for this codespace
	DevcontainerPath *string `json:"devcontainer_path,omitempty"`

	// Display name for this codespace
	DisplayName *string `json:"display_name,omitempty"`

	// Time in minutes before codespace stops from inactivity
	IdleTimeoutMinutes *int32 `json:"idle_timeout_minutes,omitempty"`

	// Location for this codespace. Assigned by IP if not provided
	Location *string `json:"location,omitempty"`

	// Machine type to use for this codespace
	Machine *string `json:"machine,omitempty"`

	// Whether to authorize requested permissions from devcontainer.json
	MultiRepoPermissionsOptOut *bool `json:"multi_repo_permissions_opt_out,omitempty"`

	// Git ref (typically a branch name) for this codespace
	Ref *string `json:"ref,omitempty"`

	// Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200
// (30 days).
	RetentionPeriodMinutes *int32 `json:"retention_period_minutes,omitempty"`

	// Working directory for this codespace
	WorkingDirectory *string `json:"working_directory,omitempty"`
}

type Paths1Gt83F3ReposOwnerRepoActionsVariablesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	Variables []*ActionsVariable `json:"variables,omitempty"`
}

type Paths1Hf5OwlProjectsColumnsColumnIDCardsPostResponses503ContentApplicationJSONSchema struct {
	Code *string `json:"code,omitempty"`
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Errors []*Paths1KkruczProjectsColumnsColumnIDCardsPostResponses503ContentApplicationJSONSchemaPropertiesErrorsItems `json:"errors,omitempty"`
	Message *string `json:"message,omitempty"`
}

type Paths1HnxzhwReposOwnerRepoEnvironmentsEnvironmentNameDeploymentBranchPoliciesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	BranchPolicies []*DeploymentBranchPolicy `json:"branch_policies,omitempty"`

	// REQUIRED; The number of deployment branch policies for the environment.
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths1Hsv14VOrgsOrgActionsPermissionsPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
	EnabledRepositories *EnabledRepositories `json:"enabled_repositories,omitempty"`

	// The permissions policy that controls the actions and reusable workflows that are allowed to run.
	AllowedActions *AllowedActions `json:"allowed_actions,omitempty"`
}

type Paths1Hu5S40UserPatchRequestbodyContentApplicationJSONSchema struct {
	// The new short biography of the user.
	Bio *string `json:"bio,omitempty"`

	// The new blog URL of the user.
	Blog *string `json:"blog,omitempty"`

	// The new company of the user.
	Company *string `json:"company,omitempty"`

	// The publicly visible email address of the user.
	Email *string `json:"email,omitempty"`

	// The new hiring availability of the user.
	Hireable *bool `json:"hireable,omitempty"`

	// The new location of the user.
	Location *string `json:"location,omitempty"`

	// The new name of the user.
	Name *string `json:"name,omitempty"`

	// The new Twitter username of the user.
	TwitterUsername *string `json:"twitter_username,omitempty"`
}

type Paths1HyzeaaReposOwnerRepoStatusesSHAPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The state of the status.
	State *Enum292 `json:"state,omitempty"`

	// A string label to differentiate this status from the status of other systems. This field is case-insensitive.
	Context *string `json:"context,omitempty"`

	// A short description of the status.
	Description *string `json:"description,omitempty"`

	// The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the
// source of the status.
// For example, if your continuous integration system is posting build status, you would want to provide the deep link for
// the build output for this specific SHA:
// http://ci.example.com/user/repo/build/sha
	TargetURL *string `json:"target_url,omitempty"`
}

type Paths1I57UpnReposOwnerRepoEnvironmentsGetResponses200ContentApplicationJSONSchema struct {
	Environments []*Environment `json:"environments,omitempty"`

	// The number of environments in this repository
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths1I9HuefReposOwnerRepoHooksHookIDPatchRequestbodyContentApplicationJSONSchema struct {
	// Determines if notifications are sent when the webhook is triggered. Set to true to send notifications.
	Active *bool `json:"active,omitempty"`

	// Determines a list of events to be added to the list of events that the Hook triggers for.
	AddEvents []*string `json:"add_events,omitempty"`

	// Key/value pairs to provide settings for this webhook. These are defined below [https://docs.github.com/rest/reference/repos#create-hook-config-params].
	Config *Paths1IzzlndReposOwnerRepoHooksHookIDPatchRequestbodyContentApplicationJSONSchemaPropertiesConfig `json:"config,omitempty"`

	// Determines what events [https://docs.github.com/webhooks/event-payloads] the hook is triggered for. This replaces the entire
// array of events.
	Events []*string `json:"events,omitempty"`

	// Determines a list of events to be removed from the list of events that the Hook triggers for.
	RemoveEvents []*string `json:"remove_events,omitempty"`
}

type Paths1Iaoy4IReposOwnerRepoImportPatchRequestbodyContentApplicationJSONSchema struct {
	// For a tfvc import, the name of the project that is being imported.
	TfvcProject *string `json:"tfvc_project,omitempty"`

	// The type of version control system you are migrating from.
	Vcs *PatchContentSchemaVcs `json:"vcs,omitempty"`

	// The password to provide to the originating repository.
	VcsPassword *string `json:"vcs_password,omitempty"`

	// The username to provide to the originating repository.
	VcsUsername *string `json:"vcs_username,omitempty"`
}

type Paths1Ib8ZziReposOwnerRepoStargazersGetResponses200ContentApplicationJSONSchema struct {
}

type Paths1If3Kw4UserEmailsDeleteRequestbodyContentApplicationJSONSchema struct {
}

type Paths1Ipyvj6ReposOwnerRepoContentsPathPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The new file content, using Base64 encoding.
	Content *string `json:"content,omitempty"`

	// REQUIRED; The commit message.
	Message *string `json:"message,omitempty"`

	// The author of the file. Default: The committer or the authenticated user if you omit committer.
	Author *PutContentSchemaAuthor `json:"author,omitempty"`

	// The branch name. Default: the repository’s default branch (usually master)
	Branch *string `json:"branch,omitempty"`

	// The person that committed the file. Default: the authenticated user.
	Committer *PutContentSchemaCommitter `json:"committer,omitempty"`

	// Required if you are updating a file. The blob SHA of the file being replaced.
	SHA *string `json:"sha,omitempty"`
}

type Paths1Iucyl4ReposOwnerRepoActionsRunnersGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Runners []*Runner `json:"runners,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths1Ixczi0TeamsTeamIDDiscussionsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The discussion post's body text.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The discussion post's title.
	Title *string `json:"title,omitempty"`

	// Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to
// all members of the organization. Set to true to create a private post.
	Private *bool `json:"private,omitempty"`
}

type Paths1Iz9SlvUsersUsernameGetResponses200ContentApplicationJSONSchema struct {
}

// Paths1IzzlndReposOwnerRepoHooksHookIDPatchRequestbodyContentApplicationJSONSchemaPropertiesConfig - Key/value pairs to
// provide settings for this webhook. These are defined below [https://docs.github.com/rest/reference/repos#create-hook-config-params].
type Paths1IzzlndReposOwnerRepoHooksHookIDPatchRequestbodyContentApplicationJSONSchemaPropertiesConfig struct {
	// REQUIRED; The URL to which the payloads will be delivered.
	URL *string `json:"url,omitempty"`
	Address *string `json:"address,omitempty"`

	// The media type used to serialize the payloads. Supported values include json and form. The default is form.
	ContentType *string `json:"content_type,omitempty"`
	InsecureSSL *WebhookConfigInsecureSSL `json:"insecure_ssl,omitempty"`
	Room *string `json:"room,omitempty"`

	// If provided, the secret will be used as the key to generate the HMAC hex digest value for delivery signature headers [https://docs.github.com/webhooks/event-payloads/#delivery-headers].
	Secret *string `json:"secret,omitempty"`
}

type Paths1JjuabgOrgsOrgTeamsTeamSlugPatchRequestbodyContentApplicationJSONSchema struct {
	// The description of the team.
	Description *string `json:"description,omitempty"`

	// The name of the team.
	Name *string `json:"name,omitempty"`

	// The ID of a team to set as the parent team.
	ParentTeamID *int32 `json:"parent_team_id,omitempty"`

	// Deprecated. The permission that new repositories will be added to the team with when none is specified.
	Permission *PatchContentSchemaPermission `json:"permission,omitempty"`

	// The level of privacy this team should have. Editing teams without specifying this parameter leaves privacy intact. When
// a team is nested, the privacy for parent teams cannot be secret. The options
// are:
// For a non-nested team:
// * secret - only visible to organization owners and members of this team.
// * closed - visible to all members of this organization.
// For a parent or child team:
// * closed - visible to all members of this organization.
	Privacy *PatchContentSchemaPrivacy `json:"privacy,omitempty"`
}

type Paths1Jqmy81ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteRequestbodyContentApplicationJSONSchema struct {
}

type Paths1Jt5S7KAppHookConfigPatchRequestbodyContentApplicationJSONSchema struct {
	// The media type used to serialize the payloads. Supported values include json and form. The default is form.
	ContentType *string `json:"content_type,omitempty"`
	InsecureSSL *WebhookConfigInsecureSSL `json:"insecure_ssl,omitempty"`

	// If provided, the secret will be used as the key to generate the HMAC hex digest value for delivery signature headers [https://docs.github.com/webhooks/event-payloads/#delivery-headers].
	Secret *string `json:"secret,omitempty"`

	// The URL to which the payloads will be delivered.
	URL *string `json:"url,omitempty"`
}

type Paths1Ju8X1ZProjectsProjectIDPatchResponses403ContentApplicationJSONSchema struct {
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Errors []*string `json:"errors,omitempty"`
	Message *string `json:"message,omitempty"`
}

type Paths1Jw0C69OrgsOrgPatchResponses422ContentApplicationJSONSchema struct {
}

type Paths1Jz2FqtOrgsOrgMigrationsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; A list of arrays indicating which repositories should be migrated.
	Repositories []*string `json:"repositories,omitempty"`

	// Exclude related items from being returned in the response in order to improve performance of the request. The array can
// include any of: "repositories".
	Exclude []*PostContentSchemaExcludeItem `json:"exclude,omitempty"`

	// Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
	ExcludeAttachments *bool `json:"exclude_attachments,omitempty"`

	// Indicates whether the repository git data should be excluded from the migration.
	ExcludeGitData *bool `json:"exclude_git_data,omitempty"`

	// Indicates whether metadata should be excluded and only git source should be included for the migration.
	ExcludeMetadata *bool `json:"exclude_metadata,omitempty"`

	// Indicates whether projects owned by the organization or users should be excluded. from the migration.
	ExcludeOwnerProjects *bool `json:"exclude_owner_projects,omitempty"`

	// Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
	ExcludeReleases *bool `json:"exclude_releases,omitempty"`

	// Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
	LockRepositories *bool `json:"lock_repositories,omitempty"`

	// Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other
// flags).
	OrgMetadataOnly *bool `json:"org_metadata_only,omitempty"`
}

type Paths1K251OqReposOwnerRepoPullsPullNumberMergePutRequestbodyContentApplicationJSONSchema struct {
	// Extra detail to append to automatic commit message.
	CommitMessage *string `json:"commit_message,omitempty"`

	// Title for the automatic commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// The merge method to use.
	MergeMethod *PutContentSchemaMergeMethod `json:"merge_method,omitempty"`

	// SHA that pull request head must match to allow merge.
	SHA *string `json:"sha,omitempty"`
}

type Paths1K6Pj3BApplicationsClientIDTokenPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The access_token of the OAuth application.
	AccessToken *string `json:"access_token,omitempty"`
}

type Paths1Kclt54ProjectsColumnsColumnIDCardsPostRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; The project card's note
	Note *string `json:"note,omitempty"`
}

type Paths1KgjzyReposOwnerRepoIssuesIssueNumberCommentsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The contents of the comment.
	Body *string `json:"body,omitempty"`
}

type Paths1Ki9DyiReposOwnerRepoIssuesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The title of the issue.
	Title *Paths1T022FhReposOwnerRepoIssuesPostRequestbodyContentApplicationJSONSchemaPropertiesTitle `json:"title,omitempty"`

	// Login for the user that this issue should be assigned to. NOTE: Only users with push access can set the assignee for new
// issues. The assignee is silently dropped otherwise. This field is deprecated.
	Assignee *string `json:"assignee,omitempty"`

	// Logins for Users to assign to this issue. NOTE: Only users with push access can set assignees for new issues. Assignees
// are silently dropped otherwise.
	Assignees []*string `json:"assignees,omitempty"`

	// The contents of the issue.
	Body *string `json:"body,omitempty"`

	// Labels to associate with this issue. NOTE: Only users with push access can set labels for new issues. Labels are silently
// dropped otherwise.
	Labels []*Paths1TnpscsReposOwnerRepoIssuesPostRequestbodyContentApplicationJSONSchemaPropertiesLabelsItems `json:"labels,omitempty"`
	Milestone *PostContentSchemaMilestone `json:"milestone,omitempty"`
}

type Paths1KkruczProjectsColumnsColumnIDCardsPostResponses503ContentApplicationJSONSchemaPropertiesErrorsItems struct {
	Code *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

type Paths1Knd2ShOrgsOrgInteractionLimitsGetResponses200ContentApplicationJSONSchema struct {
}

type Paths1KrbaqcUserInteractionLimitsGetResponses200ContentApplicationJSONSchema struct {
}

type Paths1Kt5AynReposOwnerRepoContentsPathDeleteRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The commit message.
	Message *string `json:"message,omitempty"`

	// REQUIRED; The blob SHA of the file being deleted.
	SHA *string `json:"sha,omitempty"`

	// object containing information about the author.
	Author *DeleteContentSchemaAuthor `json:"author,omitempty"`

	// The branch name. Default: the repository’s default branch (usually master)
	Branch *string `json:"branch,omitempty"`

	// object containing information about the committer.
	Committer *DeleteContentSchemaCommitter `json:"committer,omitempty"`
}

type Paths1Ky8NtUserCodespacesCodespaceNamePatchRequestbodyContentApplicationJSONSchema struct {
	// Display name for this codespace
	DisplayName *string `json:"display_name,omitempty"`

	// A valid machine to transition this codespace to.
	Machine *string `json:"machine,omitempty"`

	// Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load
// the codespace in.
	RecentFolders []*string `json:"recent_folders,omitempty"`
}

type Paths1L4Sk0SReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsDeleteRequestbodyContentApplicationJSONSchema struct {
}

type Paths1Lbsq8BReposOwnerRepoMilestonesMilestoneNumberPatchRequestbodyContentApplicationJSONSchema struct {
	// A description of the milestone.
	Description *string `json:"description,omitempty"`

	// The milestone due date. This is a timestamp in ISO 8601 [https://en.wikipedia.org/wiki/ISO_8601] format: YYYY-MM-DDTHH:MM:SSZ.
	DueOn *time.Time `json:"due_on,omitempty"`

	// The state of the milestone. Either open or closed.
	State *Enum257 `json:"state,omitempty"`

	// The title of the milestone.
	Title *string `json:"title,omitempty"`
}

type Paths1Ldhi40ReposOwnerRepoIssuesIssueNumberLabelsPostRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively,
// you can pass a single label as a string or an array of labels directly,
// but GitHub recommends passing an object with the labels key. You can also replace all of the labels for an issue. For more
// information, see "Set labels for an issue
// [https://docs.github.com/rest/reference/issues#set-labels-for-an-issue]."
	Labels []*string `json:"labels,omitempty"`
}

type Paths1Lguu6GReposOwnerRepoIssuesIssueNumberLockPutRequestbodyContentApplicationJSONSchema struct {
	// The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
// * off-topic
// * too heated
// * resolved
// * spam
	LockReason *PutContentSchemaLockReason `json:"lock_reason,omitempty"`
}

type Paths1Lkas7AAppInstallationsInstallationIDAccessTokensPostRequestbodyContentApplicationJSONSchema struct {
	// The permissions granted to the user-to-server access token.
	Permissions *AppPermissions `json:"permissions,omitempty"`

	// List of repository names that the token should have access to
	Repositories []*string `json:"repositories,omitempty"`

	// List of repository IDs that the token should have access to
	RepositoryIDs []*int32 `json:"repository_ids,omitempty"`
}

type Paths1M0Y2P5ReposOwnerRepoAutolinksPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; This prefix appended by certain characters will generate a link any time it is found in an issue, pull request,
// or commit.
	KeyPrefix *string `json:"key_prefix,omitempty"`

	// REQUIRED; The URL must contain <num> for the reference number. <num> matches different characters depending on the value
// of is_alphanumeric.
	URLTemplate *string `json:"url_template,omitempty"`

	// Whether this autolink reference matches alphanumeric characters. If true, the <num> parameter of the url_template matches
// alphanumeric characters A-Z (case insensitive), 0-9, and -. If false, this
// autolink reference only matches numeric characters.
	IsAlphanumeric *bool `json:"is_alphanumeric,omitempty"`
}

type Paths1M8E4H4ReposOwnerRepoBranchesBranchRenamePostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The new name of the branch.
	NewName *string `json:"new_name,omitempty"`
}

type Paths1MalsmdApplicationsClientIDGrantDeleteRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The OAuth access token used to authenticate to the GitHub API.
	AccessToken *string `json:"access_token,omitempty"`
}

type Paths1MocmdsUserGpgKeysPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; A GPG key in ASCII-armored format.
	ArmoredPublicKey *string `json:"armored_public_key,omitempty"`

	// A descriptive name for the new key.
	Name *string `json:"name,omitempty"`
}

type Paths1Msrxd9OrgsOrgInstallationsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Installations []*Installation `json:"installations,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths1Mws92VReposOwnerRepoCodespacesMachinesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Machines []*CodespaceMachine `json:"machines,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths1Mynu8UReposOwnerRepoActionsSecretsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Secrets []*ActionsSecret `json:"secrets,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths1Ncrc5ZReposOwnerRepoDependencyGraphSnapshotsPostResponses201ContentApplicationJSONSchema struct {
	// REQUIRED; The time at which the snapshot was created.
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED; ID of the created snapshot.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; A message providing further details about the result, such as why the dependencies were not updated.
	Message *string `json:"message,omitempty"`

	// REQUIRED; Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and
// the repository's dependencies were updated. "ACCEPTED" indicates that the snapshot was
// successfully created, but the repository's dependencies were not updated. "INVALID" indicates that the snapshot was malformed.
	Result *string `json:"result,omitempty"`
}

type Paths1Nhe8S5RepositoriesRepositoryIDEnvironmentsEnvironmentNameVariablesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the variable.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The value of the variable.
	Value *string `json:"value,omitempty"`
}

type Paths1Nlo92OReposOwnerRepoCodespacesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Codespaces []*Codespace `json:"codespaces,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths1O07MgvGistsGistIDPatchRequestbodyContentApplicationJSONSchemaPropertiesFilesAdditionalproperties struct {
	// The new content of the file.
	Content *string `json:"content,omitempty"`

	// The new filename for the file.
	Filename *string `json:"filename,omitempty"`
}

type Paths1O9Ial2ReposOwnerRepoActionsRunsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	WorkflowRuns []*WorkflowRun `json:"workflow_runs,omitempty"`
}

type Paths1Ofej2QReposOwnerRepoSecretScanningAlertsAlertNumberPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Sets the state of the secret scanning alert. You must provide resolution when you set the state to resolved.
	State *SecretScanningAlertState `json:"state,omitempty"`

	// Required when the state is resolved. The reason for resolving the alert.
	Resolution *SecretScanningAlertResolution `json:"resolution,omitempty"`

	// An optional comment when closing an alert. Cannot be updated or deleted. Must be null when changing state to open.
	ResolutionComment *string `json:"resolution_comment,omitempty"`
}

type Paths1OnljmgRepositoriesRepositoryIDEnvironmentsEnvironmentNameVariablesNamePatchRequestbodyContentApplicationJSONSchema struct {
	// The name of the variable.
	Name *string `json:"name,omitempty"`

	// The value of the variable.
	Value *string `json:"value,omitempty"`
}

type Paths1Op2LjlOrgsOrgActionsVariablesNameRepositoriesPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The IDs of the repositories that can access the organization variable.
	SelectedRepositoryIDs []*int32 `json:"selected_repository_ids,omitempty"`
}

type Paths1P6T5UkOrgsOrgDependabotSecretsSecretNameRepositoriesPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; An array of repository ids that can access the organization secret. You can only provide a list of repository
// ids when the visibility is set to selected. You can add and remove individual repositories
// using the Set selected repositories for an organization secret [https://docs.github.com/rest/reference/dependabot#set-selected-repositories-for-an-organization-secret]
// and Remove selected repository
// from an organization secret [https://docs.github.com/rest/reference/dependabot#remove-selected-repository-from-an-organization-secret]
// endpoints.
	SelectedRepositoryIDs []*int32 `json:"selected_repository_ids,omitempty"`
}

type Paths1Pfvnv0ApplicationsClientIDTokenScopedPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The access token used to authenticate to the GitHub API.
	AccessToken *string `json:"access_token,omitempty"`

	// The permissions granted to the user-to-server access token.
	Permissions *AppPermissions `json:"permissions,omitempty"`

	// The list of repository names to scope the user-to-server access token to. repositories may not be specified if repository_ids
// is specified.
	Repositories []*string `json:"repositories,omitempty"`

	// The list of repository IDs to scope the user-to-server access token to. repository_ids may not be specified if repositories
// is specified.
	RepositoryIDs []*int32 `json:"repository_ids,omitempty"`

	// The name of the user or organization to scope the user-to-server access token to. Required unless target_id is specified.
	Target *string `json:"target,omitempty"`

	// The ID of the user or organization to scope the user-to-server access token to. Required unless target is specified.
	TargetID *int32 `json:"target_id,omitempty"`
}

type Paths1Phxf31OrgsOrgActionsVariablesNamePatchRequestbodyContentApplicationJSONSchema struct {
	// The name of the variable.
	Name *string `json:"name,omitempty"`

	// An array of repository ids that can access the organization variable. You can only provide a list of repository ids when
// the visibility is set to selected.
	SelectedRepositoryIDs []*int32 `json:"selected_repository_ids,omitempty"`

	// The value of the variable.
	Value *string `json:"value,omitempty"`

	// The type of repositories in the organization that can access the variable. selected means only the repositories specified
// by selected_repository_ids can access the variable.
	Visibility *PatchContentSchemaVisibility `json:"visibility,omitempty"`
}

type Paths1Pk0FbvReposOwnerRepoImportLfsPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Whether to store large files during the import. opt_in means large files will be stored using Git LFS. opt_out
// means large files will be removed during the import.
	UseLfs *PatchContentSchemaUseLfs `json:"use_lfs,omitempty"`
}

type Paths1Pleh5PReposOwnerRepoEnvironmentsEnvironmentNamePutRequestbodyContentApplicationJSONSchema struct {
	// The type of deployment branch policy for this environment. To allow all branches to deploy, set to null.
	DeploymentBranchPolicy *DeploymentBranchPolicySettings `json:"deployment_branch_policy,omitempty"`

	// The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers.
// The reviewers must have at least read access to the repository. Only one of
// the required reviewers needs to approve the job for it to proceed.
	Reviewers []*PutContentSchemaReviewersItem `json:"reviewers,omitempty"`

	// The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between
// 0 and 43,200 (30 days).
	WaitTimer *int32 `json:"wait_timer,omitempty"`
}

type Paths1Pm4VzpReposOwnerRepoIssuesIssueNumberPatchRequestbodyContentApplicationJSONSchemaPropertiesLabelsItemsOneof1 struct {
	Color *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type Paths1Pqtc48UserCodespacesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Codespaces []*Codespace `json:"codespaces,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths1QklxoqProjectsColumnsCardsCardIDMovesPostResponses403ContentApplicationJSONSchema struct {
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Errors []*Post403ApplicationJSONPropertiesItemsItem `json:"errors,omitempty"`
	Message *string `json:"message,omitempty"`
}

type Paths1Qpiu21ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; The GitHub Apps that have push access to this branch. Use the slugified version of the app name. Note: The list
// of users, apps, and teams in total is limited to 100 items.
	Apps []*string `json:"apps,omitempty"`
}

type Paths1Qu3T7FOrgsOrgCodespacesBillingSelectedUsersDeleteRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The usernames of the organization members whose codespaces should not be billed to the organization.
	SelectedUsernames []*string `json:"selected_usernames,omitempty"`
}

type Paths1Qus9PuReposOwnerRepoCheckSuitesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The sha of the head commit.
	HeadSHA *string `json:"head_sha,omitempty"`
}

type Paths1R8N665OrgsOrgOutsideCollaboratorsUsernamePutRequestbodyContentApplicationJSONSchema struct {
	// When set to true, the request will be performed asynchronously. Returns a 202 status code when the job is successfully
// queued.
	Async *bool `json:"async,omitempty"`
}

type Paths1R8VmdaTeamsTeamIDReposOwnerRepoPutRequestbodyContentApplicationJSONSchema struct {
	// The permission to grant the team on this repository. If no permission is specified, the team's permission attribute will
// be used to determine what permission to grant the team on this repository.
	Permission *Enum310 `json:"permission,omitempty"`
}

type Paths1Rc6Uv8ReposOwnerRepoPullsPullNumberMergePutResponses409ContentApplicationJSONSchema struct {
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message *string `json:"message,omitempty"`
}

type Paths1Rezap1ReposOwnerRepoTransferPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The username or organization name the repository will be transferred to.
	NewOwner *string `json:"new_owner,omitempty"`

	// The new name to be given to the repository.
	NewName *string `json:"new_name,omitempty"`

	// ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
	TeamIDs []*int32 `json:"team_ids,omitempty"`
}

type Paths1S0XspiReposOwnerRepoCommentsCommentIDPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The contents of the comment
	Body *string `json:"body,omitempty"`
}

type Paths1S2Izb1TeamsTeamIDProjectsProjectIDPutRequestbodyContentApplicationJSONSchema struct {
	// The permission to grant to the team for this project. Default: the team's permission attribute will be used to determine
// what permission to grant the team on this project. Note that, if you choose not
// to pass any parameters, you'll need to set Content-Length to zero when calling this endpoint. For more information, see
// "HTTP verbs
// [https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs]."
	Permission *Enum309 `json:"permission,omitempty"`
}

type Paths1Sd44YpReposOwnerRepoLabelsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For
// example, typing :strawberry: will render the emoji :strawberry: [https://github.githubassets.com/images/icons/emoji/unicode/1f353.png]
// . For a full list of available emoji and codes, see "Emoji cheat sheet [https://github.com/ikatyang/emoji-cheat-sheet]."
	Name *string `json:"name,omitempty"`

	// The hexadecimal color code [http://www.color-hex.com/] for the label, without the leading #.
	Color *string `json:"color,omitempty"`

	// A short description of the label. Must be 100 characters or fewer.
	Description *string `json:"description,omitempty"`
}

type Paths1SebvwtReposOwnerRepoMilestonesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// A description of the milestone.
	Description *string `json:"description,omitempty"`

	// The milestone due date. This is a timestamp in ISO 8601 [https://en.wikipedia.org/wiki/ISO_8601] format: YYYY-MM-DDTHH:MM:SSZ.
	DueOn *time.Time `json:"due_on,omitempty"`

	// The state of the milestone. Either open or closed.
	State *Enum256 `json:"state,omitempty"`
}

type Paths1Sedmy0OrgsOrgHooksHookIDConfigPatchRequestbodyContentApplicationJSONSchema struct {
	// The media type used to serialize the payloads. Supported values include json and form. The default is form.
	ContentType *string `json:"content_type,omitempty"`
	InsecureSSL *WebhookConfigInsecureSSL `json:"insecure_ssl,omitempty"`

	// If provided, the secret will be used as the key to generate the HMAC hex digest value for delivery signature headers [https://docs.github.com/webhooks/event-payloads/#delivery-headers].
	Secret *string `json:"secret,omitempty"`

	// The URL to which the payloads will be delivered.
	URL *string `json:"url,omitempty"`
}

type Paths1Sk9Ql7ReposOwnerRepoDeploymentsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The ref to deploy. This can be a branch, tag, or SHA.
	Ref *string `json:"ref,omitempty"`

	// Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
	AutoMerge *bool `json:"auto_merge,omitempty"`

	// Short description of the deployment.
	Description *string `json:"description,omitempty"`

	// Name for the target deployment environment (e.g., production, staging, qa).
	Environment *string `json:"environment,omitempty"`
	Payload *PostContentSchemaPayload `json:"payload,omitempty"`

	// Specifies if the given environment is one that end-users directly interact with. Default: true when environment is production
// and false otherwise.
	ProductionEnvironment *bool `json:"production_environment,omitempty"`

	// The status [https://docs.github.com/rest/commits/statuses] contexts to verify against commit status checks. If you omit
// this parameter, GitHub verifies all unique contexts before creating a
// deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
	RequiredContexts []*string `json:"required_contexts,omitempty"`

	// Specifies a task to execute (e.g., deploy or deploy:migrations).
	Task *string `json:"task,omitempty"`

	// Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future.
// Default: false
	TransientEnvironment *bool `json:"transient_environment,omitempty"`
}

// Paths1T022FhReposOwnerRepoIssuesPostRequestbodyContentApplicationJSONSchemaPropertiesTitle - The title of the issue.
type Paths1T022FhReposOwnerRepoIssuesPostRequestbodyContentApplicationJSONSchemaPropertiesTitle struct {
}

type Paths1T38XacReposOwnerRepoPullsPullNumberReviewsReviewIDDismissalsPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The message for the pull request review dismissal
	Message *string `json:"message,omitempty"`
	Event *PutContentSchemaEvent `json:"event,omitempty"`
}

type Paths1T9ShtnOrgsOrgTeamsTeamSlugProjectsProjectIDPutRequestbodyContentApplicationJSONSchema struct {
	// The permission to grant to the team for this project. Default: the team's permission attribute will be used to determine
// what permission to grant the team on this project. Note that, if you choose not
// to pass any parameters, you'll need to set Content-Length to zero when calling this endpoint. For more information, see
// "HTTP verbs
// [https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs]."
	Permission *PutContentSchemaPermission `json:"permission,omitempty"`
}

type Paths1Tcc0VlProjectsProjectIDColumnsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Name of the project column
	Name *string `json:"name,omitempty"`
}

type Paths1TnpscsReposOwnerRepoIssuesPostRequestbodyContentApplicationJSONSchemaPropertiesLabelsItems struct {
}

type Paths1U1Qx6ZOrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberPatchRequestbodyContentApplicationJSONSchema struct {
	// The discussion post's body text.
	Body *string `json:"body,omitempty"`

	// The discussion post's title.
	Title *string `json:"title,omitempty"`
}

type Paths1U9QgpnReposOwnerRepoIssuesIssueNumberLabelsPutRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array
// to remove all labels. Alternatively, you can pass a single label as a string
// or an array of labels directly, but GitHub recommends passing an object with the labels key. You can also add labels to
// the existing labels for an issue. For more information, see "Add labels to an
// issue [https://docs.github.com/rest/reference/issues#add-labels-to-an-issue]."
	Labels []*string `json:"labels,omitempty"`
}

type Paths1Uhydg4GistsGistIDCommentsCommentIDPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The comment text.
	Body *string `json:"body,omitempty"`
}

type Paths1V0OsxsReposOwnerRepoTopicsPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; An array of topics to add to the repository. Pass one or more topics to replace the set of existing topics. Send
// an empty array ([]) to clear all topics from the repository. Note: Topic names cannot
// contain uppercase letters.
	Names []*string `json:"names,omitempty"`
}

type Paths1VaofhnReposOwnerRepoPullsPullNumberUpdateBranchPutRequestbodyContentApplicationJSONSchema struct {
	// The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected
// SHA does not match the pull request's HEAD, you will receive a 422
// Unprocessable Entity status. You can use the "List commits [https://docs.github.com/rest/reference/repos#list-commits]"
// endpoint to find the most recent commit SHA. Default: SHA of the pull request's
// current HEAD ref.
	ExpectedHeadSHA *string `json:"expected_head_sha,omitempty"`
}

type Paths1Vdo4BmSearchRepositoriesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	IncompleteResults *bool `json:"incomplete_results,omitempty"`

	// REQUIRED
	Items []*RepoSearchResultItem `json:"items,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths1Vfi8L3ReposOwnerRepoCheckRunsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The SHA of the commit.
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED; The name of the check. For example, "code-coverage".
	Name *string `json:"name,omitempty"`

	// Displays a button on GitHub that can be clicked to alert your app to do additional tasks. For example, a code linting app
// can display a button that automatically fixes detected errors. The button
// created in this object is displayed after the check run completes. When a user clicks the button, GitHub sends the check_run.requested_action
// webhook
// [https://docs.github.com/webhooks/event-payloads/#check_run] to your app. Each action includes a label, identifier and
// description. A maximum of three actions are accepted. To learn more about check
// runs and requested actions, see "Check runs and requested actions [https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions]."
	Actions []*PostContentSchemaActionsItem `json:"actions,omitempty"`

	// The time the check completed. This is a timestamp in ISO 8601 [https://en.wikipedia.org/wiki/ISO_8601] format: YYYY-MM-DDTHH:MM:SSZ.
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// Required if you provide completed_at or a status of completed. The final conclusion of the check.Note: Providing conclusion
// will automatically set the status parameter to completed. You cannot change
// a check run conclusion to stale, only GitHub can set this.
	Conclusion *PostContentSchemaConclusion `json:"conclusion,omitempty"`

	// The URL of the integrator's site that has the full details of the check. If the integrator does not provide this, then
// the homepage of the GitHub app is used.
	DetailsURL *string `json:"details_url,omitempty"`

	// A reference for the run on the integrator's system.
	ExternalID *string `json:"external_id,omitempty"`

	// Check runs can accept a variety of data in the output object, including a title and summary and can optionally provide
// descriptive details about the run.
	Output *PostContentSchemaOutput `json:"output,omitempty"`

	// The time that the check run began. This is a timestamp in ISO 8601 [https://en.wikipedia.org/wiki/ISO_8601] format: YYYY-MM-DDTHH:MM:SSZ.
	StartedAt *time.Time `json:"started_at,omitempty"`

	// The current status.
	Status *PostContentSchemaStatus `json:"status,omitempty"`
}

type Paths1Vhsw9LReposOwnerRepoIssuesIssueNumberLabelsPutRequestbodyContentApplicationJSONSchemaOneof2 struct {
	Labels []*PutContentSchema2LabelsItem `json:"labels,omitempty"`
}

type Paths1Vjcr70ReposOwnerRepoPullsPullNumberPatchRequestbodyContentApplicationJSONSchema struct {
	// The name of the branch you want your changes pulled into. This should be an existing branch on the current repository.
// You cannot update the base branch on a pull request to point to another
// repository.
	Base *string `json:"base,omitempty"`

	// The contents of the pull request.
	Body *string `json:"body,omitempty"`

	// Indicates whether maintainers can modify [https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/]
// the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`

	// State of this Pull Request. Either open or closed.
	State *Enum276 `json:"state,omitempty"`

	// The title of the pull request.
	Title *string `json:"title,omitempty"`
}

type Paths1VqqqwaOrgsOrgCodespacesSecretsSecretNamePutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Which type of organization repositories have access to the organization secret. selected means only the repositories
// specified by selected_repository_ids can access the secret.
	Visibility *Enum97 `json:"visibility,omitempty"`

	// The value for your secret, encrypted with LibSodium [https://libsodium.gitbook.io/doc/bindings_for_other_languages] using
// the public key retrieved from the Get an organization public key
// [https://docs.github.com/rest/reference/codespaces#get-an-organization-public-key] endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// The ID of the key you used to encrypt the secret.
	KeyID *string `json:"key_id,omitempty"`

	// An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when
// the visibility is set to selected. You can manage the list of selected
// repositories using the List selected repositories for an organization secret [https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-an-organization-secret],
// Set selected
// repositories for an organization secret [https://docs.github.com/rest/reference/codespaces#set-selected-repositories-for-an-organization-secret],
// and Remove selected repository from an organization
// secret [https://docs.github.com/rest/reference/codespaces#remove-selected-repository-from-an-organization-secret] endpoints.
	SelectedRepositoryIDs []*int32 `json:"selected_repository_ids,omitempty"`
}

type Paths1Vr1F5VReposOwnerRepoBranchesBranchProtectionPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Enforce all configured restrictions for administrators. Set to true to enforce required status checks for repository
// administrators. Set to null to disable.
	EnforceAdmins *bool `json:"enforce_admins,omitempty"`

	// REQUIRED; Require at least one approving review on a pull request, before merging. Set to null to disable.
	RequiredPullRequestReviews *PutContentSchemaRequiredPullRequestReviews `json:"required_pull_request_reviews,omitempty"`

	// REQUIRED; Require status checks to pass before merging. Set to null to disable.
	RequiredStatusChecks *PutContentSchemaRequiredStatusChecks `json:"required_status_checks,omitempty"`

	// REQUIRED; Restrict who can push to the protected branch. User, app, and team restrictions are only available for organization-owned
// repositories. Set to null to disable.
	Restrictions *PutContentSchemaRestrictions `json:"restrictions,omitempty"`

	// Allows deletion of the protected branch by anyone with write access to the repository. Set to false to prevent deletion
// of the protected branch. Default: false. For more information, see "Enabling
// force pushes to a protected branch [https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch]"
// in the GitHub Help documentation.
	AllowDeletions *bool `json:"allow_deletions,omitempty"`

	// Permits force pushes to the protected branch by anyone with write access to the repository. Set to true to allow force
// pushes. Set to false or null to block force pushes. Default: false. For more
// information, see "Enabling force pushes to a protected branch [https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch]"
// in the GitHub Help
// documentation."
	AllowForcePushes *bool `json:"allow_force_pushes,omitempty"`

	// Whether users can pull changes from upstream when the branch is locked. Set to true to allow fork syncing. Set to false
// to prevent fork syncing. Default: false.
	AllowForkSyncing *bool `json:"allow_fork_syncing,omitempty"`

	// If set to true, the restrictions branch protection settings which limits who can push will also block pushes which create
// new branches, unless the push is initiated by a user, team, or app which has
// the ability to push. Set to true to restrict new branch creation. Default: false.
	BlockCreations *bool `json:"block_creations,omitempty"`

	// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: false.
	LockBranch *bool `json:"lock_branch,omitempty"`

	// Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule.
// Set to false to disable. Default: false.
	RequiredConversationResolution *bool `json:"required_conversation_resolution,omitempty"`

	// Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to true to enforce
// a linear commit history. Set to false to disable a linear commit Git history.
// Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: false.
// For more information, see "Requiring a linear commit history
// [https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history]" in the GitHub Help documentation.
	RequiredLinearHistory *bool `json:"required_linear_history,omitempty"`
}

type Paths1Vr95C8ReposOwnerRepoCodeScanningSarifsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The SHA of the commit to which the analysis you are uploading relates.
	CommitSHA *string `json:"commit_sha,omitempty"`

	// REQUIRED; The full Git reference, formatted as refs/heads/<branch name>,refs/pull/<number>/merge, or refs/pull/<number>/head.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using gzip [http://www.gnu.org/software/gzip/manual/gzip.html]
// and then translate the contents of the
// file into a Base64 encoding string. For more information, see "SARIF support for code scanning [https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning]."
	Sarif *string `json:"sarif,omitempty"`

	// The base directory used in the analysis, as it appears in the SARIF file. This property is used to convert file paths from
// absolute to relative, so that alerts can be mapped to their correct location
// in the repository.
	CheckoutURI *string `json:"checkout_uri,omitempty"`

	// The time that the analysis run began. This is a timestamp in ISO 8601 [https://en.wikipedia.org/wiki/ISO_8601] format:
// YYYY-MM-DDTHH:MM:SSZ.
	StartedAt *time.Time `json:"started_at,omitempty"`

	// The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults
// to "API". If the uploaded SARIF contains a tool GUID, this will be available for
// filtering using the tool_guid parameter of operations such as GET /repos/{owner}/{repo}/code-scanning/alerts.
	ToolName *string `json:"tool_name,omitempty"`

	// Whether the SARIF file will be validated according to the code scanning specifications. This parameter is intended to help
// integrators ensure that the uploaded SARIF files are correctly rendered by
// code scanning.
	Validate *bool `json:"validate,omitempty"`
}

type Paths1Vu4T6AReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostRequestbodyContentApplicationJSONSchema struct {
}

type Paths1Vy1VsiReposOwnerRepoPatchRequestbodyContentApplicationJSONSchema struct {
	// Either true to allow auto-merge on pull requests, or false to disallow auto-merge.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Either true to allow private forks, or false to prevent private forks.
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Either true to allow merging pull requests with a merge commit, or false to prevent merging pull requests with merge commits.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Either true to allow rebase-merging pull requests, or false to prevent rebase-merging.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Either true to allow squash-merging pull requests, or false to prevent squash-merging.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`

	// Either true to always allow a pull request head branch that is behind its base branch to be updated even if it is not required
// to be up to date before merging, or false otherwise.
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to archive this repository. false will unarchive a previously archived repository.
	Archived *bool `json:"archived,omitempty"`

	// Updates the default branch for this repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// Either true to allow automatically deleting head branches when pull requests are merged, or false to prevent automatic
// deletion.
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// A short description of the repository.
	Description *string `json:"description,omitempty"`

	// Either true to enable issues for this repository or false to disable them.
	HasIssues *bool `json:"has_issues,omitempty"`

	// Either true to enable projects for this repository or false to disable them. Note: If you're creating a repository in an
// organization that has disabled repository projects, the default is false, and
// if you pass true, the API returns an error.
	HasProjects *bool `json:"has_projects,omitempty"`

	// Either true to enable the wiki for this repository or false to disable it.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// A URL with more information about the repository.
	Homepage *string `json:"homepage,omitempty"`

	// Either true to make this repo available as a template repository or false to prevent it.
	IsTemplate *bool `json:"is_template,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *PatchContentSchemaMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *PatchContentSchemaMergeCommitTitle `json:"merge_commit_title,omitempty"`

	// The name of the repository.
	Name *string `json:"name,omitempty"`

	// Either true to make the repository private or false to make it public. Default: false.
// Note: You will get a 422 error if the organization restricts changing repository visibility
// [https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories]
// to organization owners and a non-owner tries to change the value of private.
	Private *bool `json:"private,omitempty"`

	// Specify which security and analysis features to enable or disable for the repository.
// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization
// that owns the repository. For more information, see "Managing security
// managers in your organization [https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization]."
// For example, to enable GitHub Advanced Security, use this data in the body of the PATCH request:{ "security_and_analysis":
// {"advanced_security": { "status": "enabled" } } }.
// You can check which security and analysis features are currently enabled by using a GET /repos/{owner}/{repo} request.
	SecurityAndAnalysis *PatchContentSchemaSecurityAndAnalysis `json:"security_and_analysis,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *PatchContentSchemaSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *PatchContentSchemaSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`

	// Either true to allow squash-merge commits to use pull request title, or false to use commit message. **This property has
// been deprecated. Please use squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// The visibility of the repository.
	Visibility *Enum168 `json:"visibility,omitempty"`

	// Either true to require contributors to sign off on web-based commits, or false to not require contributors to sign off
// on web-based commits.
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type Paths1Vyck9EReposOwnerRepoCollaboratorsUsernamePutRequestbodyContentApplicationJSONSchema struct {
	// The permission to grant the collaborator. Only valid on organization-owned repositories. We accept the following permissions
// to be set: pull, triage, push, maintain, admin and you can also specify a
// custom repository role name, if the owning organization has defined any.
	Permission *string `json:"permission,omitempty"`
}

type Paths1W1Jdo3ReposOwnerRepoDeploymentsDeploymentIDStatusesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The state of the status. When you set a transient deployment to inactive, the deployment will be shown as destroyed
// in GitHub.
	State *Enum227 `json:"state,omitempty"`

	// Adds a new inactive status to all prior non-transient, non-production environment deployments with the same repository
// and environment name as the created status's deployment. An inactive status is
// only added to deployments that had a success state. Default: true
	AutoInactive *bool `json:"auto_inactive,omitempty"`

	// A short description of the status. The maximum description length is 140 characters.
	Description *string `json:"description,omitempty"`

	// Name for the target deployment environment, which can be changed when setting a deploy status. For example, production,
// staging, or qa.
	Environment *Enum228 `json:"environment,omitempty"`

	// Sets the URL for accessing your environment. Default: ""
	EnvironmentURL *string `json:"environment_url,omitempty"`

	// The full URL of the deployment's output. This parameter replaces target_url. We will continue to accept target_url to support
// legacy uses, but we recommend replacing target_url with log_url. Setting
// log_url will automatically set target_url to the same value. Default: ""
	LogURL *string `json:"log_url,omitempty"`

	// The target URL to associate with this status. This URL should contain output to keep the user updated while the task is
// running or serve as historical information for what happened in the deployment.
// Note: It's recommended to use the log_url parameter, which replaces target_url.
	TargetURL *string `json:"target_url,omitempty"`
}

type Paths1W217FrOrgsOrgActionsRunnersRunnerIDLabelsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The names of the custom labels to add to the runner.
	Labels []*string `json:"labels,omitempty"`
}

type Paths1W7I1J9ReposOwnerRepoPullsPullNumberMergePutResponses405ContentApplicationJSONSchema struct {
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message *string `json:"message,omitempty"`
}

type Paths1Wh4VhdReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostRequestbodyContentApplicationJSONSchema struct {
}

type Paths1WqvvxaReposOwnerRepoReleasesGenerateNotesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The tag name for the release. This can be an existing tag or a new one.
	TagName *string `json:"tag_name,omitempty"`

	// Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If
// unspecified, the configuration file located in the repository at
// '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be
// used.
	ConfigurationFilePath *string `json:"configuration_file_path,omitempty"`

	// The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for
// the set of changes considered as part this release.
	PreviousTagName *string `json:"previous_tag_name,omitempty"`

	// Specifies the commitish value that will be the target for the release's tag. Required if the supplied tagname does not
// reference an existing tag. Ignored if the tagname already exists.
	TargetCommitish *string `json:"target_commitish,omitempty"`
}

type Paths1Wtdci3ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPostRequestbodyContentApplicationJSONSchema struct {
}

type Paths1X3ApmxOrgsOrgTeamsTeamSlugMembershipsUsernamePutRequestbodyContentApplicationJSONSchema struct {
	// The role that this user should have in the team.
	Role *Enum147 `json:"role,omitempty"`
}

type Paths1Xxb6CtReposOwnerRepoHooksHookIDConfigPatchRequestbodyContentApplicationJSONSchema struct {
	// The media type used to serialize the payloads. Supported values include json and form. The default is form.
	ContentType *string `json:"content_type,omitempty"`
	InsecureSSL *WebhookConfigInsecureSSL `json:"insecure_ssl,omitempty"`

	// If provided, the secret will be used as the key to generate the HMAC hex digest value for delivery signature headers [https://docs.github.com/webhooks/event-payloads/#delivery-headers].
	Secret *string `json:"secret,omitempty"`

	// The URL to which the payloads will be delivered.
	URL *string `json:"url,omitempty"`
}

type Paths1Y6G8NnReposOwnerRepoCheckRunsPostRequestbodyContentApplicationJSONSchemaOneof1 struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
	Status *PostContentSchema1Status `json:"status,omitempty"`
}

type Paths1Ye9AgyReposOwnerRepoCodespacesNewGetResponses200ContentApplicationJSONSchemaPropertiesDefaults struct {
	// REQUIRED
	DevcontainerPath *string `json:"devcontainer_path,omitempty"`

	// REQUIRED
	Location *string `json:"location,omitempty"`
}

type Paths1Ytc06JOrgsOrgActionsSecretsSecretNameRepositoriesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Repositories []*MinimalRepository `json:"repositories,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths1Z0XvfeTeamsTeamIDDiscussionsDiscussionNumberReactionsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The reaction type [https://docs.github.com/rest/reference/reactions#reaction-types] to add to the team discussion.
	Content *Enum143 `json:"content,omitempty"`
}

type Paths21T9E3InstallationRepositoriesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Repositories []*Repository `json:"repositories,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
	RepositorySelection *string `json:"repository_selection,omitempty"`
}

type Paths2Co2J1ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersDeleteRequestbodyContentApplicationJSONSchema struct {
}

type Paths2Gex6CReposOwnerRepoPullsPullNumberCommentsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The text of the review comment.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if
// a subsequent commit modifies the line you specify as the position.
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED; The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last
// line of the range that your comment applies to.
	Line *int32 `json:"line,omitempty"`

	// REQUIRED; The relative path to the file that necessitates a comment.
	Path *string `json:"path,omitempty"`

	// The ID of the review comment to reply to. To find the ID of a review comment with "List review comments on a pull request".
// When specified, all parameters other than body in the request body are
// ignored.
	InReplyTo *int32 `json:"in_reply_to,omitempty"`

	// This parameter is deprecated. Use line instead. The position in the diff where you want to add a review comment. Note this
// value is not the same as the line number in the file. For help finding the
// position value, read the note above.
	Position *int32 `json:"position,omitempty"`

	// In a split diff view, the side of the diff that the pull request's changes appear on. Can be LEFT or RIGHT. Use LEFT for
// deletions that appear in red. Use RIGHT for additions that appear in green or
// unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last
// line of the comment range is a deletion or addition. For more information,
// see "Diff view options [https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options]"
// in the GitHub Help documentation.
	Side *PostContentSchemaSide `json:"side,omitempty"`

	// Required when using multi-line comments unless using in_reply_to. The start_line is the first line in the pull request
// diff that your multi-line comment applies to. To learn more about multi-line
// comments, see "Commenting on a pull request [https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request]"
// in the GitHub Help documentation.
	StartLine *int32 `json:"start_line,omitempty"`

	// Required when using multi-line comments unless using in_reply_to. The start_side is the starting side of the diff that
// the comment applies to. Can be LEFT or RIGHT. To learn more about multi-line
// comments, see "Commenting on a pull request [https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request]"
// in the GitHub Help documentation. See side in this
// table for additional context.
	StartSide *PostContentSchemaStartSide `json:"start_side,omitempty"`
}

type Paths2PsmrjOrgsOrgMembershipsUsernamePutRequestbodyContentApplicationJSONSchema struct {
	// The role to give the user in the organization. Can be one of:
// * admin - The user will become an owner of the organization.
// * member - The user will become a non-owner member of the organization.
	Role *PutContentSchemaRole `json:"role,omitempty"`
}

type Paths2Wwq9KReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPostRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; The name of the status checks
	Contexts []*string `json:"contexts,omitempty"`
}

type Paths31Uss8ReposOwnerRepoIssuesIssueNumberReactionsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The reaction type [https://docs.github.com/rest/reference/reactions#reaction-types] to add to the issue.
	Content *Enum143 `json:"content,omitempty"`
}

type Paths3Ll5U1ReposOwnerRepoActionsRunsRunIDRerunFailedJobsPostRequestbodyContentApplicationJSONSchema struct {
	// Whether to enable debug logging for the re-run.
	EnableDebugLogging *bool `json:"enable_debug_logging,omitempty"`
}

type Paths3RoqecTeamsTeamIDDiscussionsDiscussionNumberPatchRequestbodyContentApplicationJSONSchema struct {
	// The discussion post's body text.
	Body *string `json:"body,omitempty"`

	// The discussion post's title.
	Title *string `json:"title,omitempty"`
}

type Paths3Snn0EReposOwnerRepoCheckSuitesCheckSuiteIDCheckRunsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	CheckRuns []*CheckRun `json:"check_runs,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths3So6PhReposOwnerRepoContentsPathGetResponses200ContentApplicationJSONSchema struct {
}

type Paths47Uk01ReposOwnerRepoLabelsNamePatchRequestbodyContentApplicationJSONSchema struct {
	// The hexadecimal color code [http://www.color-hex.com/] for the label, without the leading #.
	Color *string `json:"color,omitempty"`

	// A short description of the label. Must be 100 characters or fewer.
	Description *string `json:"description,omitempty"`

	// The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example,
// typing :strawberry: will render the emoji :strawberry: [https://github.githubassets.com/images/icons/emoji/unicode/1f353.png]
// . For a full list of available emoji and codes, see "Emoji cheat sheet [https://github.com/ikatyang/emoji-cheat-sheet]."
	NewName *string `json:"new_name,omitempty"`
}

type Paths4NltktReposOwnerRepoIssuesPostRequestbodyContentApplicationJSONSchemaPropertiesLabelsItemsOneof1 struct {
	Color *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
}

type Paths4RobthReposOwnerRepoSubscriptionPutRequestbodyContentApplicationJSONSchema struct {
	// Determines if all notifications should be blocked from this repository.
	Ignored *bool `json:"ignored,omitempty"`

	// Determines if notifications should be received from this repository.
	Subscribed *bool `json:"subscribed,omitempty"`
}

type Paths502FjbReposOwnerRepoActionsSecretsSecretNamePutRequestbodyContentApplicationJSONSchema struct {
	// Value for your secret, encrypted with LibSodium [https://libsodium.gitbook.io/doc/bindings_for_other_languages] using the
// public key retrieved from the Get a repository public key
// [https://docs.github.com/rest/reference/actions#get-a-repository-public-key] endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// ID of the key you used to encrypt the secret.
	KeyID *string `json:"key_id,omitempty"`
}

type Paths58Csm6OrgsOrgTeamsTeamSlugDiscussionsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The discussion post's body text.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The discussion post's title.
	Title *string `json:"title,omitempty"`

	// Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to
// all members of the organization. Set to true to create a private post.
	Private *bool `json:"private,omitempty"`
}

type Paths59Ua1LSearchCommitsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	IncompleteResults *bool `json:"incomplete_results,omitempty"`

	// REQUIRED
	Items []*CommitSearchResultItem `json:"items,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths5LakcmReposOwnerRepoTagsProtectionPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; An optional glob pattern to match against when enforcing tag protection.
	Pattern *string `json:"pattern,omitempty"`
}

// Paths68Aq8YReposOwnerRepoIssuesIssueNumberPatchRequestbodyContentApplicationJSONSchemaPropertiesTitle - The title of the
// issue.
type Paths68Aq8YReposOwnerRepoIssuesIssueNumberPatchRequestbodyContentApplicationJSONSchemaPropertiesTitle struct {
}

type Paths6G9Mz4OrgsOrgPatchRequestbodyContentApplicationJSONSchema struct {
	// Whether GitHub Advanced Security is automatically enabled for new repositories.
// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization
// that owns the repository. For more information, see "Managing security
// managers in your organization [https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization]."
// You can check which security and analysis features are currently enabled by using a GET /orgs/{org} request.
	AdvancedSecurityEnabledForNewRepositories *bool `json:"advanced_security_enabled_for_new_repositories,omitempty"`

	// Billing email address. This address is not publicized.
	BillingEmail *string `json:"billing_email,omitempty"`
	Blog *string `json:"blog,omitempty"`

	// The company name.
	Company *string `json:"company,omitempty"`

	// Default permission level members have for organization repositories.
	DefaultRepositoryPermission *PatchContentSchemaDefaultRepositoryPermission `json:"default_repository_permission,omitempty"`

	// Whether Dependabot alerts is automatically enabled for new repositories.
// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization
// that owns the repository. For more information, see "Managing security
// managers in your organization [https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization]."
// You can check which security and analysis features are currently enabled by using a GET /orgs/{org} request.
	DependabotAlertsEnabledForNewRepositories *bool `json:"dependabot_alerts_enabled_for_new_repositories,omitempty"`

	// Whether Dependabot security updates is automatically enabled for new repositories.
// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization
// that owns the repository. For more information, see "Managing security
// managers in your organization [https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization]."
// You can check which security and analysis features are currently enabled by using a GET /orgs/{org} request.
	DependabotSecurityUpdatesEnabledForNewRepositories *bool `json:"dependabot_security_updates_enabled_for_new_repositories,omitempty"`

	// Whether dependency graph is automatically enabled for new repositories.
// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization
// that owns the repository. For more information, see "Managing security
// managers in your organization [https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization]."
// You can check which security and analysis features are currently enabled by using a GET /orgs/{org} request.
	DependencyGraphEnabledForNewRepositories *bool `json:"dependency_graph_enabled_for_new_repositories,omitempty"`

	// The description of the company.
	Description *string `json:"description,omitempty"`

	// The publicly visible email address.
	Email *string `json:"email,omitempty"`

	// Whether an organization can use organization projects.
	HasOrganizationProjects *bool `json:"has_organization_projects,omitempty"`

	// Whether repositories that belong to the organization can use repository projects.
	HasRepositoryProjects *bool `json:"has_repository_projects,omitempty"`

	// The location.
	Location *string `json:"location,omitempty"`

	// Specifies which types of repositories non-admin organization members can create. private is only available to repositories
// that are part of an organization on GitHub Enterprise Cloud.Note: This
// parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter
// overrides values set in members_can_create_repositories. See the
// parameter deprecation notice in the operation description for details.
	MembersAllowedRepositoryCreationType *PatchContentSchemaMembersAllowedRepositoryCreationType `json:"members_allowed_repository_creation_type,omitempty"`

	// Whether organization members can create internal repositories, which are visible to all enterprise members. You can only
// allow members to create internal repositories if your organization is
// associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information,
// see "Restricting repository creation in your organization
// [https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization]"
// in the GitHub Help documentation.
	MembersCanCreateInternalRepositories *bool `json:"members_can_create_internal_repositories,omitempty"`

	// Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
	MembersCanCreatePages *bool `json:"members_can_create_pages,omitempty"`

	// Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
	MembersCanCreatePrivatePages *bool `json:"members_can_create_private_pages,omitempty"`

	// Whether organization members can create private repositories, which are visible to organization members with permission.
// For more information, see "Restricting repository creation in your organization
// [https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization]"
// in the GitHub Help documentation.
	MembersCanCreatePrivateRepositories *bool `json:"members_can_create_private_repositories,omitempty"`

	// Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
	MembersCanCreatePublicPages *bool `json:"members_can_create_public_pages,omitempty"`

	// Whether organization members can create public repositories, which are visible to anyone. For more information, see "Restricting
// repository creation in your organization
// [https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization]"
// in the GitHub Help documentation.
	MembersCanCreatePublicRepositories *bool `json:"members_can_create_public_repositories,omitempty"`

	// Whether of non-admin organization members can create repositories. Note: A parameter can override this parameter. See members_allowed_repository_creation_type
// in this table for details.
	MembersCanCreateRepositories *bool `json:"members_can_create_repositories,omitempty"`

	// Whether organization members can fork private organization repositories.
	MembersCanForkPrivateRepositories *bool `json:"members_can_fork_private_repositories,omitempty"`

	// The shorthand name of the company.
	Name *string `json:"name,omitempty"`

	// Whether secret scanning is automatically enabled for new repositories.
// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization
// that owns the repository. For more information, see "Managing security
// managers in your organization [https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization]."
// You can check which security and analysis features are currently enabled by using a GET /orgs/{org} request.
	SecretScanningEnabledForNewRepositories *bool `json:"secret_scanning_enabled_for_new_repositories,omitempty"`

	// If secret_scanning_push_protection_custom_link_enabled is true, the URL that will be displayed to contributors who are
// blocked from pushing a secret.
	SecretScanningPushProtectionCustomLink *string `json:"secret_scanning_push_protection_custom_link,omitempty"`

	// Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
	SecretScanningPushProtectionCustomLinkEnabled *bool `json:"secret_scanning_push_protection_custom_link_enabled,omitempty"`

	// Whether secret scanning push protection is automatically enabled for new repositories.
// To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization
// that owns the repository. For more information, see "Managing security
// managers in your organization [https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization]."
// You can check which security and analysis features are currently enabled by using a GET /orgs/{org} request.
	SecretScanningPushProtectionEnabledForNewRepositories *bool `json:"secret_scanning_push_protection_enabled_for_new_repositories,omitempty"`

	// The Twitter username of the company.
	TwitterUsername *string `json:"twitter_username,omitempty"`

	// Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type Paths6H37GhProjectsColumnsColumnIDCardsPostResponses422ContentApplicationJSONSchema struct {
}

type Paths6Hq2RjOrgsOrgDependabotSecretsSecretNameRepositoriesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Repositories []*MinimalRepository `json:"repositories,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths6UfbcbReposOwnerRepoPullsPullNumberReviewsReviewIDEventsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The review action you want to perform. The review actions include: APPROVE, REQUEST_CHANGES, or COMMENT. When
// you leave this blank, the API returns HTTP 422 (Unrecognizable entity) and sets the review
// action state to PENDING, which means you will need to re-submit the pull request review using a review action.
	Event *Enum285 `json:"event,omitempty"`

	// The body text of the pull request review
	Body *string `json:"body,omitempty"`
}

type Paths769Nz8ProjectsColumnsCardsCardIDPatchRequestbodyContentApplicationJSONSchema struct {
	// Whether or not the card is archived
	Archived *bool `json:"archived,omitempty"`

	// The project card's note
	Note *string `json:"note,omitempty"`
}

type Paths76UzzdOrgsOrgActionsRequiredWorkflowsRequiredWorkflowIDRepositoriesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Repositories []*Repository `json:"repositories,omitempty"`

	// REQUIRED
	TotalCount *float32 `json:"total_count,omitempty"`
}

type Paths7F7VlmProjectsColumnsCardsCardIDDeleteResponses403ContentApplicationJSONSchema struct {
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Errors []*string `json:"errors,omitempty"`
	Message *string `json:"message,omitempty"`
}

type Paths7Jq6AdOrgsOrgActionsRequiredWorkflowsRequiredWorkflowIDRepositoriesPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The IDs of the repositories for which the workflow should be required.
	SelectedRepositoryIDs []*int32 `json:"selected_repository_ids,omitempty"`
}

type Paths890MjvTeamsTeamIDPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the team.
	Name *string `json:"name,omitempty"`

	// The description of the team.
	Description *string `json:"description,omitempty"`

	// The ID of a team to set as the parent team.
	ParentTeamID *int32 `json:"parent_team_id,omitempty"`

	// Deprecated. The permission that new repositories will be added to the team with when none is specified.
	Permission *Enum302 `json:"permission,omitempty"`

	// The level of privacy this team should have. Editing teams without specifying this parameter leaves privacy intact. The
// options are:
// For a non-nested team:
// * secret - only visible to organization owners and members of this team.
// * closed - visible to all members of this organization.
// For a parent or child team:
// * closed - visible to all members of this organization.
	Privacy *Enum301 `json:"privacy,omitempty"`
}

type Paths8IoapxSearchUsersGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	IncompleteResults *bool `json:"incomplete_results,omitempty"`

	// REQUIRED
	Items []*UserSearchResultItem `json:"items,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type Paths8XkywmOrgsOrgHooksPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Key/value pairs to provide settings for this webhook. These are defined below [https://docs.github.com/rest/reference/orgs#create-hook-config-params].
	Config *PostContentSchemaConfig `json:"config,omitempty"`

	// REQUIRED; Must be passed as "web".
	Name *string `json:"name,omitempty"`

	// Determines if notifications are sent when the webhook is triggered. Set to true to send notifications.
	Active *bool `json:"active,omitempty"`

	// Determines what events [https://docs.github.com/webhooks/event-payloads] the hook is triggered for. Set to ["*"] to receive
// all possible events.
	Events []*string `json:"events,omitempty"`
}

type Paths8YxainTeamsTeamIDProjectsProjectIDPutResponses403ContentApplicationJSONSchema struct {
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message *string `json:"message,omitempty"`
}

type Paths9J8NbyOrgsOrgActionsRunnersRunnerIDLabelsPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
	Labels []*string `json:"labels,omitempty"`
}

// Paths9QgkqxUserEmailsDeleteRequestbodyContentApplicationJSONSchemaOneof0 - Deletes one or more email addresses from your
// GitHub account. Must contain at least one email address. Note: Alternatively, you can pass a single email address or an
// array of emails addresses
// directly, but we recommend that you pass an object using the emails key.
type Paths9QgkqxUserEmailsDeleteRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; Email addresses associated with the GitHub user account.
	Emails []*string `json:"emails,omitempty"`
}

type Paths9SkxohReposOwnerRepoBranchesBranchProtectionRestrictionsAppsPutRequestbodyContentApplicationJSONSchema struct {
}

type PathsA0CenxReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPostRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; The slug values for teams
	Teams []*string `json:"teams,omitempty"`
}

type PathsB37Lt6ReposOwnerRepoReleasesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the tag.
	TagName *string `json:"tag_name,omitempty"`

	// Text describing the contents of the tag.
	Body *string `json:"body,omitempty"`

	// If specified, a discussion of the specified category is created and linked to the release. The value must be a category
// that already exists in the repository. For more information, see "Managing
// categories for discussions in your repository [https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository]."
	DiscussionCategoryName *string `json:"discussion_category_name,omitempty"`

	// true to create a draft (unpublished) release, false to create a published one.
	Draft *bool `json:"draft,omitempty"`

	// Whether to automatically generate the name and body for this release. If name is specified, the specified name will be
// used; otherwise, a name will be automatically generated. If body is specified,
// the body will be pre-pended to the automatically generated notes.
	GenerateReleaseNotes *bool `json:"generate_release_notes,omitempty"`

	// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be
// set as latest. Defaults to true for newly published releases. legacy specifies
// that the latest release should be determined based on the release creation date and higher semantic version.
	MakeLatest *PostContentSchemaMakeLatest `json:"make_latest,omitempty"`

	// The name of the release.
	Name *string `json:"name,omitempty"`

	// true to identify the release as a prerelease. false to identify the release as a full release.
	Prerelease *bool `json:"prerelease,omitempty"`

	// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused
// if the Git tag already exists. Default: the repository's default branch
// (usually master).
	TargetCommitish *string `json:"target_commitish,omitempty"`
}

type PathsB91M33UserProjectsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Name of the project
	Name *string `json:"name,omitempty"`

	// Body of the project
	Body *string `json:"body,omitempty"`
}

type PathsBq6WgkReposOwnerRepoActionsRunsRunIDRerunPostRequestbodyContentApplicationJSONSchema struct {
	// Whether to enable debug logging for the re-run.
	EnableDebugLogging *bool `json:"enable_debug_logging,omitempty"`
}

type PathsByukk6ReposOwnerRepoCommitsCommitSHACommentsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The contents of the comment.
	Body *string `json:"body,omitempty"`

	// Deprecated. Use position parameter instead. Line number in the file to comment on.
	Line *int32 `json:"line,omitempty"`

	// Relative path of the file to comment on.
	Path *string `json:"path,omitempty"`

	// Line index in the diff to comment on.
	Position *int32 `json:"position,omitempty"`
}

type PathsC8XtzdReposOwnerRepoActionsRunnersRunnerIDLabelsPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
	Labels []*string `json:"labels,omitempty"`
}

type PathsCewf7CReposOrgRepoActionsRequiredWorkflowsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	RequiredWorkflows []*RepoRequiredWorkflow `json:"required_workflows,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type PathsCjr1R2ReposOwnerRepoMergesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the base branch that the head will be merged into.
	Base *string `json:"base,omitempty"`

	// REQUIRED; The head to merge. This can be a branch name or a commit SHA1.
	Head *string `json:"head,omitempty"`

	// Commit message to use for the merge commit. If omitted, a default message will be used.
	CommitMessage *string `json:"commit_message,omitempty"`
}

type PathsCojm5BReposOwnerRepoCodespacesPostRequestbodyContentApplicationJSONSchema struct {
	// IP for location auto-detection when proxying a request
	ClientIP *string `json:"client_ip,omitempty"`

	// Path to devcontainer.json config to use for this codespace
	DevcontainerPath *string `json:"devcontainer_path,omitempty"`

	// Display name for this codespace
	DisplayName *string `json:"display_name,omitempty"`

	// Time in minutes before codespace stops from inactivity
	IdleTimeoutMinutes *int32 `json:"idle_timeout_minutes,omitempty"`

	// Location for this codespace. Assigned by IP if not provided
	Location *string `json:"location,omitempty"`

	// Machine type to use for this codespace
	Machine *string `json:"machine,omitempty"`

	// Whether to authorize requested permissions from devcontainer.json
	MultiRepoPermissionsOptOut *bool `json:"multi_repo_permissions_opt_out,omitempty"`

	// Git ref (typically a branch name) for this codespace
	Ref *string `json:"ref,omitempty"`

	// Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200
// (30 days).
	RetentionPeriodMinutes *int32 `json:"retention_period_minutes,omitempty"`

	// Working directory for this codespace
	WorkingDirectory *string `json:"working_directory,omitempty"`
}

type PathsD0PkzvOrgsOrgDependabotSecretsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Secrets []*OrganizationDependabotSecret `json:"secrets,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

// PathsD66GtpReposOwnerRepoPagesDeploymentPostRequestbodyContentApplicationJSONSchema - The object used to create GitHub
// Pages deployment
type PathsD66GtpReposOwnerRepoPagesDeploymentPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the
// repository.
	ArtifactURL *string `json:"artifact_url,omitempty"`

	// REQUIRED; The OIDC token issued by GitHub Actions certifying the origin of the deployment.
	OidcToken *string `json:"oidc_token,omitempty"`

	// REQUIRED; A unique string that represents the version of the build for this deployment.
	PagesBuildVersion *string `json:"pages_build_version,omitempty"`

	// The target environment for this GitHub Pages deployment.
	Environment *string `json:"environment,omitempty"`
}

type PathsDas7YfReposOwnerRepoActionsJobsJobIDRerunPostRequestbodyContentApplicationJSONSchema struct {
	// Whether to enable debug logging for the re-run.
	EnableDebugLogging *bool `json:"enable_debug_logging,omitempty"`
}

type PathsDegc01ReposOwnerRepoBranchesBranchProtectionRestrictionsAppsDeleteRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; The GitHub Apps that have push access to this branch. Use the slugified version of the app name. Note: The list
// of users, apps, and teams in total is limited to 100 items.
	Apps []*string `json:"apps,omitempty"`
}

type PathsDo27ImReposOwnerRepoDeploymentsPostResponses202ContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
}

type PathsDs1CRCReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksContextsPutRequestbodyContentApplicationJSONSchema struct {
}

type PathsDurjnhReposOwnerRepoPullsPullNumberRequestedReviewersDeleteRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; An array of user logins that will be removed.
	Reviewers []*string `json:"reviewers,omitempty"`

	// An array of team slugs that will be removed.
	TeamReviewers []*string `json:"team_reviewers,omitempty"`
}

type PathsE9Csm0ReposOwnerRepoActionsRunsRunIDJobsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Jobs []*Job `json:"jobs,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type PathsEjre0CReposOwnerRepoBranchesBranchProtectionRequiredStatusChecksPatchRequestbodyContentApplicationJSONSchema struct {
	// The list of status checks to require in order to merge into this branch.
	Checks []*PatchContentSchemaChecksItem `json:"checks,omitempty"`

	// Deprecated: The list of status checks to require in order to merge into this branch. If any of these checks have recently
// been set by a particular GitHub App, they will be required to come from that
// app in future for the branch to merge. Use checks instead of contexts for more fine-grained control.
	Contexts []*string `json:"contexts,omitempty"`

	// Require branches to be up to date before merging.
	Strict *bool `json:"strict,omitempty"`
}

type PathsEwomnfReposOwnerRepoActionsVariablesNamePatchRequestbodyContentApplicationJSONSchema struct {
	// The name of the variable.
	Name *string `json:"name,omitempty"`

	// The value of the variable.
	Value *string `json:"value,omitempty"`
}

type PathsEydhcgOrgsOrgActionsCacheUsageByRepositoryGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	RepositoryCacheUsages []*ActionsCacheUsageByRepository `json:"repository_cache_usages,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type PathsFjpghsOrgsOrgActionsPermissionsRepositoriesPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; List of repository IDs to enable for GitHub Actions.
	SelectedRepositoryIDs []*int32 `json:"selected_repository_ids,omitempty"`
}

type PathsFla86QReposOwnerRepoCommitsRefCheckRunsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	CheckRuns []*CheckRun `json:"check_runs,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type PathsFmuj89ReposOwnerRepoActionsRunnersRunnerIDLabelsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The names of the custom labels to add to the runner.
	Labels []*string `json:"labels,omitempty"`
}

type PathsFz02Q1ReposOwnerRepoReleasesAssetsAssetIDPatchRequestbodyContentApplicationJSONSchema struct {
	// An alternate short description of the asset. Used in place of the filename.
	Label *string `json:"label,omitempty"`

	// The file name of the asset.
	Name *string `json:"name,omitempty"`
	State *string `json:"state,omitempty"`
}

type PathsGbyvoqOrgsOrgCodespacesBillingPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Which users can access codespaces in the organization. disabled means that no users can access codespaces in
// the organization.
	Visibility *Enum95 `json:"visibility,omitempty"`

	// The usernames of the organization members who should have access to codespaces in the organization. Required when visibility
// is selected_members. The provided list of usernames will replace any
// existing value.
	SelectedUsernames []*string `json:"selected_usernames,omitempty"`
}

type PathsGlpsnqReposOwnerRepoImportAuthorsAuthorIDPatchRequestbodyContentApplicationJSONSchema struct {
	// The new Git author email.
	Email *string `json:"email,omitempty"`

	// The new Git author name.
	Name *string `json:"name,omitempty"`
}

type PathsH71AocReposOwnerRepoPullsCommentsCommentIDPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The text of the reply to the review comment.
	Body *string `json:"body,omitempty"`
}

// PathsHsyzflReposOwnerRepoPagesPostRequestbodyContentApplicationJSONSchema - The source branch and directory used to publish
// your Pages site.
type PathsHsyzflReposOwnerRepoPagesPostRequestbodyContentApplicationJSONSchema struct {
	// The process in which the Page will be built. Possible values are "legacy" and "workflow".
	BuildType *PostContentSchemaBuildType `json:"build_type,omitempty"`

	// The source branch and directory used to publish your Pages site.
	Source *PostContentSchemaSource `json:"source,omitempty"`
}

type PathsHt509LReposOwnerRepoBranchesBranchProtectionRequiredPullRequestReviewsPatchRequestbodyContentApplicationJSONSchema struct {
	// Allow specific users, teams, or apps to bypass pull request requirements.
	BypassPullRequestAllowances *PatchContentSchemaBypassPullRequestAllowances `json:"bypass_pull_request_allowances,omitempty"`

	// Set to true if you want to automatically dismiss approving reviews when someone pushes a new commit.
	DismissStaleReviews *bool `json:"dismiss_stale_reviews,omitempty"`

	// Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty dismissal_restrictions object to disable.
// User and team dismissal_restrictions are only available for
// organization-owned repositories. Omit this parameter for personal repositories.
	DismissalRestrictions *PatchContentSchemaDismissalRestrictions `json:"dismissal_restrictions,omitempty"`

	// Blocks merging pull requests until code owners [https://docs.github.com/articles/about-code-owners/] have reviewed.
	RequireCodeOwnerReviews *bool `json:"require_code_owner_reviews,omitempty"`

	// Whether the most recent push must be approved by someone other than the person who pushed it. Default: false
	RequireLastPushApproval *bool `json:"require_last_push_approval,omitempty"`

	// Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
	RequiredApprovingReviewCount *int32 `json:"required_approving_review_count,omitempty"`
}

type PathsHtbmf3ReposOwnerRepoActionsRunsRunIDAttemptsAttemptNumberJobsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Jobs []*Job `json:"jobs,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type PathsHw6XesOrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The discussion comment's body text.
	Body *string `json:"body,omitempty"`
}

type PathsI1765WOrgsOrgActionsSecretsSecretNameRepositoriesPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; An array of repository ids that can access the organization secret. You can only provide a list of repository
// ids when the visibility is set to selected. You can add and remove individual repositories
// using the Add selected repository to an organization secret [https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret]
// and Remove selected repository from an
// organization secret [https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret]
// endpoints.
	SelectedRepositoryIDs []*int32 `json:"selected_repository_ids,omitempty"`
}

type PathsIa8Cy4ReposOwnerRepoIssuesIssueNumberPatchRequestbodyContentApplicationJSONSchema struct {
	// Username to assign to this issue. This field is deprecated.
	Assignee *string `json:"assignee,omitempty"`

	// Usernames to assign to this issue. Pass one or more user logins to replace the set of assignees on this issue. Send an
// empty array ([]) to clear all assignees from the issue. Only users with push
// access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
	Assignees []*string `json:"assignees,omitempty"`

	// The contents of the issue.
	Body *string `json:"body,omitempty"`

	// Labels to associate with this issue. Pass one or more labels to replace the set of labels on this issue. Send an empty
// array ([]) to clear all labels from the issue. Only users with push access can
// set labels for issues. Without push access to the repository, label changes are silently dropped.
	Labels []*PatchContentSchemaLabelsItem `json:"labels,omitempty"`
	Milestone *PatchContentSchemaMilestone `json:"milestone,omitempty"`

	// The open or closed state of the issue.
	State *Enum244 `json:"state,omitempty"`

	// The reason for the state change. Ignored unless state is changed.
	StateReason *PatchContentSchemaStateReason `json:"state_reason,omitempty"`

	// The title of the issue.
	Title *Paths68Aq8YReposOwnerRepoIssuesIssueNumberPatchRequestbodyContentApplicationJSONSchemaPropertiesTitle `json:"title,omitempty"`
}

type PathsImvyfvReposOwnerRepoCodespacesNewGetResponses200ContentApplicationJSONSchema struct {
	// A GitHub user.
	BillableOwner *SimpleUser `json:"billable_owner,omitempty"`
	Defaults *Paths1Ye9AgyReposOwnerRepoCodespacesNewGetResponses200ContentApplicationJSONSchemaPropertiesDefaults `json:"defaults,omitempty"`
}

type PathsJ4PjknUserCodespacesCodespaceNamePublishPostRequestbodyContentApplicationJSONSchema struct {
	// A name for the new repository.
	Name *string `json:"name,omitempty"`

	// Whether the new repository should be private.
	Private *bool `json:"private,omitempty"`
}

type PathsJ5Olw0ReposOwnerRepoBranchesBranchProtectionRestrictionsTeamsPutRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; The slug values for teams
	Teams []*string `json:"teams,omitempty"`
}

type PathsJaryxdOrgsOrgTeamsTeamSlugProjectsProjectIDPutResponses403ContentApplicationJSONSchema struct {
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message *string `json:"message,omitempty"`
}

type PathsJbjkraReposOwnerRepoReleasesReleaseIDReactionsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The reaction type [https://docs.github.com/rest/reference/reactions#reaction-types] to add to the release.
	Content *Enum143 `json:"content,omitempty"`
}

type PathsJfjoovReposOwnerRepoIssuesIssueNumberLabelsPostRequestbodyContentApplicationJSONSchema struct {
}

type PathsJgnanxGistsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Names and content for the files that make up the gist
	Files map[string]*Paths1AmvuizGistsPostRequestbodyContentApplicationJSONSchemaPropertiesFilesAdditionalproperties `json:"files,omitempty"`

	// Description of the gist
	Description *string `json:"description,omitempty"`
	Public *PostContentSchemaPublic `json:"public,omitempty"`
}

type PathsJteklmReposOwnerRepoIssuesCommentsCommentIDReactionsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The reaction type [https://docs.github.com/rest/reference/reactions#reaction-types] to add to the issue comment.
	Content *Enum143 `json:"content,omitempty"`
}

type PathsK7L5CGistsGistIDPatchRequestbodyContentApplicationJSONSchema struct {
	// The description of the gist.
	Description *string `json:"description,omitempty"`

	// The gist files to be updated, renamed, or deleted. Each key must match the current filename (including extension) of the
// targeted gist file. For example: hello.py.
// To delete a file, set the whole file to null. For example: hello.py : null.
	Files map[string]*Paths1O07MgvGistsGistIDPatchRequestbodyContentApplicationJSONSchemaPropertiesFilesAdditionalproperties `json:"files,omitempty"`
}

type PathsKf3Zv8ReposOwnerRepoCodeScanningAlertsAlertNumberPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Sets the state of the code scanning alert. You must provide dismissed_reason when you set the state to dismissed.
	State *CodeScanningAlertSetState `json:"state,omitempty"`

	// The dismissal comment associated with the dismissal of the alert.
	DismissedComment *string `json:"dismissed_comment,omitempty"`

	// Required when the state is dismissed. The reason for dismissing or closing the alert.
	DismissedReason *CodeScanningAlertDismissedReason `json:"dismissed_reason,omitempty"`
}

type PathsKo6Vl6UserKeysPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The public SSH key to add to your GitHub account.
	Key *string `json:"key,omitempty"`

	// A descriptive name for the new key.
	Title *string `json:"title,omitempty"`
}

type PathsKt2637OrgsOrgActionsPermissionsRepositoriesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Repositories []*Repository `json:"repositories,omitempty"`

	// REQUIRED
	TotalCount *float32 `json:"total_count,omitempty"`
}

type PathsLawabgNotificationsPutRequestbodyContentApplicationJSONSchema struct {
	// Describes the last point that notifications were checked. Anything updated since this time will not be marked as read.
// If you omit this parameter, all notifications are marked as read. This is a
// timestamp in ISO 8601 [https://en.wikipedia.org/wiki/ISO_8601] format: YYYY-MM-DDTHH:MM:SSZ. Default: The current timestamp.
	LastReadAt *time.Time `json:"last_read_at,omitempty"`

	// Whether the notification has been read.
	Read *bool `json:"read,omitempty"`
}

type PathsLti430ReposOwnerRepoActionsRequiredWorkflowsRequiredWorkflowIDForRepoRunsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	WorkflowRuns []*WorkflowRun `json:"workflow_runs,omitempty"`
}

type PathsM2T5POrgsOrgTeamsTeamSlugReposOwnerRepoPutRequestbodyContentApplicationJSONSchema struct {
	// The permission to grant the team on this repository. We accept the following permissions to be set: pull, triage, push,
// maintain, admin and you can also specify a custom repository role name, if the
// owning organization has defined any. If no permission is specified, the team's permission attribute will be used to determine
// what permission to grant the team on this repository.
	Permission *string `json:"permission,omitempty"`
}

type PathsMarvfxUsersUsernameStarredGetResponses200ContentApplicationJSONSchema struct {
}

type PathsMpanbzReposOwnerRepoCommentsCommentIDReactionsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The reaction type [https://docs.github.com/rest/reference/reactions#reaction-types] to add to the commit comment.
	Content *Enum143 `json:"content,omitempty"`
}

type PathsN3A1M6ReposOwnerRepoCheckRunsCheckRunIDPatchRequestbodyContentApplicationJSONSchema struct {
	// Possible further actions the integrator can perform, which a user may trigger. Each action includes a label, identifier
// and description. A maximum of three actions are accepted. See the actions object
// [https://docs.github.com/rest/reference/checks#actions-object] description. To learn more about check runs and requested
// actions, see "Check runs and requested actions
// [https://docs.github.com/rest/reference/checks#check-runs-and-requested-actions]."
	Actions []*PatchContentSchemaActionsItem `json:"actions,omitempty"`

	// The time the check completed. This is a timestamp in ISO 8601 [https://en.wikipedia.org/wiki/ISO_8601] format: YYYY-MM-DDTHH:MM:SSZ.
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// Required if you provide completed_at or a status of completed. The final conclusion of the check.Note: Providing conclusion
// will automatically set the status parameter to completed. You cannot change
// a check run conclusion to stale, only GitHub can set this.
	Conclusion *PatchContentSchemaConclusion `json:"conclusion,omitempty"`

	// The URL of the integrator's site that has the full details of the check.
	DetailsURL *string `json:"details_url,omitempty"`

	// A reference for the run on the integrator's system.
	ExternalID *string `json:"external_id,omitempty"`

	// The name of the check. For example, "code-coverage".
	Name *string `json:"name,omitempty"`

	// Check runs can accept a variety of data in the output object, including a title and summary and can optionally provide
// descriptive details about the run.
	Output *PatchContentSchemaOutput `json:"output,omitempty"`

	// This is a timestamp in ISO 8601 [https://en.wikipedia.org/wiki/ISO_8601] format: YYYY-MM-DDTHH:MM:SSZ.
	StartedAt *time.Time `json:"started_at,omitempty"`

	// The current status.
	Status *PatchContentSchemaStatus `json:"status,omitempty"`
}

type PathsNdspgnTeamsTeamIDDiscussionsDiscussionNumberCommentsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The discussion comment's body text.
	Body *string `json:"body,omitempty"`
}

type PathsNf1T5SUserCodespacesPostRequestbodyContentApplicationJSONSchema struct {
}

type PathsNfvr3JOrgsOrgCodespacesSecretsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Secrets []*CodespacesOrgSecret `json:"secrets,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type PathsNzm73JTeamsTeamIDDiscussionsDiscussionNumberCommentsCommentNumberPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The discussion comment's body text.
	Body *string `json:"body,omitempty"`
}

type PathsOfgf9PSearchLabelsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	IncompleteResults *bool `json:"incomplete_results,omitempty"`

	// REQUIRED
	Items []*LabelSearchResultItem `json:"items,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type PathsOi3HvzReposOwnerRepoActionsWorkflowsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	Workflows []*Workflow `json:"workflows,omitempty"`
}

type PathsOiww20ReposOwnerRepoIssuesIssueNumberAssigneesDeleteRequestbodyContentApplicationJSONSchema struct {
	// Usernames of assignees to remove from an issue. NOTE: Only users with push access can remove assignees from an issue. Assignees
// are silently ignored otherwise.
	Assignees []*string `json:"assignees,omitempty"`
}

type PathsOkib08ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; The username for users
	Users []*string `json:"users,omitempty"`
}

type PathsOxgejjReposOwnerRepoIssuesIssueNumberAssigneesPostRequestbodyContentApplicationJSONSchema struct {
	// Usernames of people to assign this issue to. NOTE: Only users with push access can add assignees to an issue. Assignees
// are silently ignored otherwise.
	Assignees []*string `json:"assignees,omitempty"`
}

type PathsPf2K8OProjectsColumnsColumnIDMovesPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The position of the column in a project. Can be one of: first, last, or after:<column_id> to place after the
// specified column.
	Position *string `json:"position,omitempty"`
}

type PathsQ14Qg0SearchCodeGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	IncompleteResults *bool `json:"incomplete_results,omitempty"`

	// REQUIRED
	Items []*CodeSearchResultItem `json:"items,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type PathsQ9KnwtOrgsOrgActionsRunnersGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Runners []*Runner `json:"runners,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type PathsQezna3AppManifestsCodeConversionsPostResponses201ContentApplicationJSONSchema struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED; The list of events for the GitHub app
	Events []*string `json:"events,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; A GitHub user.
	Owner *NullableSimpleUser `json:"owner,omitempty"`

	// REQUIRED; The set of permissions for the GitHub app
	Permissions *IntegrationPermissions `json:"permissions,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
	ClientID *string `json:"client_id,omitempty"`
	ClientSecret *string `json:"client_secret,omitempty"`

	// The number of installations associated with the GitHub app
	InstallationsCount *int32 `json:"installations_count,omitempty"`
	Pem *string `json:"pem,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
	WebhookSecret *string `json:"webhook_secret,omitempty"`
}

type PathsQg8Uu8RepositoriesRepositoryIDEnvironmentsEnvironmentNameSecretsSecretNamePutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Value for your secret, encrypted with LibSodium [https://libsodium.gitbook.io/doc/bindings_for_other_languages]
// using the public key retrieved from the Get an environment public key
// [https://docs.github.com/rest/reference/actions#get-an-environment-public-key] endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// REQUIRED; ID of the key you used to encrypt the secret.
	KeyID *string `json:"key_id,omitempty"`
}

type PathsQth03CReposOwnerRepoReleasesReleaseIDPatchRequestbodyContentApplicationJSONSchema struct {
	// Text describing the contents of the tag.
	Body *string `json:"body,omitempty"`

	// If specified, a discussion of the specified category is created and linked to the release. The value must be a category
// that already exists in the repository. If there is already a discussion linked
// to the release, this parameter is ignored. For more information, see "Managing categories for discussions in your repository
// [https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository]."
	DiscussionCategoryName *string `json:"discussion_category_name,omitempty"`

	// true makes the release a draft, and false publishes the release.
	Draft *bool `json:"draft,omitempty"`

	// Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be
// set as latest. Defaults to true for newly published releases. legacy specifies
// that the latest release should be determined based on the release creation date and higher semantic version.
	MakeLatest *PatchContentSchemaMakeLatest `json:"make_latest,omitempty"`

	// The name of the release.
	Name *string `json:"name,omitempty"`

	// true to identify the release as a prerelease, false to identify the release as a full release.
	Prerelease *bool `json:"prerelease,omitempty"`

	// The name of the tag.
	TagName *string `json:"tag_name,omitempty"`

	// Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused
// if the Git tag already exists. Default: the repository's default branch
// (usually master).
	TargetCommitish *string `json:"target_commitish,omitempty"`
}

type PathsQv63J8ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPutRequestbodyContentApplicationJSONSchema struct {
}

type PathsQyj9RzOrgsOrgActionsSecretsSecretNamePutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Which type of organization repositories have access to the organization secret. selected means only the repositories
// specified by selected_repository_ids can access the secret.
	Visibility *PutContentSchemaVisibility `json:"visibility,omitempty"`

	// Value for your secret, encrypted with LibSodium [https://libsodium.gitbook.io/doc/bindings_for_other_languages] using the
// public key retrieved from the Get an organization public key
// [https://docs.github.com/rest/reference/actions#get-an-organization-public-key] endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// ID of the key you used to encrypt the secret.
	KeyID *string `json:"key_id,omitempty"`

	// An array of repository ids that can access the organization secret. You can only provide a list of repository ids when
// the visibility is set to selected. You can manage the list of selected
// repositories using the List selected repositories for an organization secret [https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret],
// Set selected
// repositories for an organization secret [https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret],
// and Remove selected repository from an organization
// secret [https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret] endpoints.
	SelectedRepositoryIDs []*int32 `json:"selected_repository_ids,omitempty"`
}

type PathsR7QxoqProjectsProjectIDPatchRequestbodyContentApplicationJSONSchema struct {
	// Body of the project
	Body *string `json:"body,omitempty"`

	// Name of the project
	Name *string `json:"name,omitempty"`

	// The baseline permission that all organization members have on this project
	OrganizationPermission *PatchContentSchemaOrganizationPermission `json:"organization_permission,omitempty"`

	// Whether or not this project can be seen by everyone.
	Private *bool `json:"private,omitempty"`

	// State of the project; either 'open' or 'closed'
	State *string `json:"state,omitempty"`
}

type PathsR9YtfcReposOwnerRepoProjectsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the project.
	Name *string `json:"name,omitempty"`

	// The description of the project.
	Body *string `json:"body,omitempty"`
}

type PathsRn7NzwOrgsOrgTeamsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the team.
	Name *string `json:"name,omitempty"`

	// The description of the team.
	Description *string `json:"description,omitempty"`

	// List GitHub IDs for organization members who will become team maintainers.
	Maintainers []*string `json:"maintainers,omitempty"`

	// The ID of a team to set as the parent team.
	ParentTeamID *int32 `json:"parent_team_id,omitempty"`

	// Deprecated. The permission that new repositories will be added to the team with when none is specified.
	Permission *PostContentSchemaPermission `json:"permission,omitempty"`

	// The level of privacy this team should have. The options are:
// For a non-nested team:
// * secret - only visible to organization owners and members of this team.
// * closed - visible to all members of this organization.
// Default: secret
// For a parent or child team:
// * closed - visible to all members of this organization.
// Default for child team: closed
	Privacy *PostContentSchemaPrivacy `json:"privacy,omitempty"`

	// The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
	RepoNames []*string `json:"repo_names,omitempty"`
}

type PathsSay17YRepositoriesRepositoryIDEnvironmentsEnvironmentNameVariablesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	Variables []*ActionsVariable `json:"variables,omitempty"`
}

type PathsSereltUserReposPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`

	// Whether the repository is initialized with a minimal README.
	AutoInit *bool `json:"auto_init,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// A short description of the repository.
	Description *string `json:"description,omitempty"`

	// The desired language or platform to apply to the .gitignore.
	GitignoreTemplate *string `json:"gitignore_template,omitempty"`

	// Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// A URL with more information about the repository.
	Homepage *string `json:"homepage,omitempty"`

	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate *bool `json:"is_template,omitempty"`

	// The license keyword of the open source license for this repository.
	LicenseTemplate *string `json:"license_template,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *Enum330 `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *Enum329 `json:"merge_commit_title,omitempty"`

	// Whether the repository is private.
	Private *bool `json:"private,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *Enum328 `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *Enum327 `json:"squash_merge_commit_title,omitempty"`

	// The id of the team that will be granted access to this repository. This is only valid when creating a repository in an
// organization.
	TeamID *int32 `json:"team_id,omitempty"`
}

type PathsSf3RmpReposOwnerRepoIssuesCommentsCommentIDPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The contents of the comment.
	Body *string `json:"body,omitempty"`
}

type PathsSia9ThReposTemplateOwnerTemplateRepoGeneratePostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the new repository.
	Name *string `json:"name,omitempty"`

	// A short description of the new repository.
	Description *string `json:"description,omitempty"`

	// Set to true to include the directory structure and files from all branches in the template repository, and not just the
// default branch. Default: false.
	IncludeAllBranches *bool `json:"include_all_branches,omitempty"`

	// The organization or person who will own the new repository. To create a new repository in an organization, the authenticated
// user must be a member of the specified organization.
	Owner *string `json:"owner,omitempty"`

	// Either true to create a new private repository or false to create a new public one.
	Private *bool `json:"private,omitempty"`
}

type PathsSq4K7LUserEmailVisibilityPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; Denotes whether an email is publicly visible.
	Visibility *Enum314 `json:"visibility,omitempty"`
}

type PathsStw7QyReposOwnerRepoCodespacesDevcontainersGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Devcontainers []*Get200ApplicationJSONPropertiesItemsItem `json:"devcontainers,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type PathsSuadw4ReposOwnerRepoCodespacesSecretsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Secrets []*RepoCodespacesSecret `json:"secrets,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type PathsSx347ZReposOwnerRepoIssuesIssueNumberLabelsPostRequestbodyContentApplicationJSONSchemaOneof2 struct {
	Labels []*PostContentSchema2LabelsItem `json:"labels,omitempty"`
}

type PathsT0LdeUserEmailsPostRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; Adds one or more email addresses to your GitHub account. Must contain at least one email address. Note: Alternatively,
// you can pass a single email address or an array of emails addresses directly, but
// we recommend that you pass an object using the emails key.
	Emails []*string `json:"emails,omitempty"`
}

type PathsT3PuizUserEmailsPostRequestbodyContentApplicationJSONSchema struct {
}

type PathsT84TeUserCodespacesPostRequestbodyContentApplicationJSONSchemaOneof1 struct {
	// REQUIRED; Pull request number for this codespace
	PullRequest *PostContentSchema1PullRequest `json:"pull_request,omitempty"`

	// Path to devcontainer.json config to use for this codespace
	DevcontainerPath *string `json:"devcontainer_path,omitempty"`

	// Time in minutes before codespace stops from inactivity
	IdleTimeoutMinutes *int32 `json:"idle_timeout_minutes,omitempty"`

	// Location for this codespace. Assigned by IP if not provided
	Location *string `json:"location,omitempty"`

	// Machine type to use for this codespace
	Machine *string `json:"machine,omitempty"`

	// Working directory for this codespace
	WorkingDirectory *string `json:"working_directory,omitempty"`
}

// PathsT89Hg1ReposOwnerRepoPagesPutRequestbodyContentApplicationJSONSchemaPropertiesSourceAnyof1 - Update the source for
// the repository. Must include the branch name and path.
type PathsT89Hg1ReposOwnerRepoPagesPutRequestbodyContentApplicationJSONSchemaPropertiesSourceAnyof1 struct {
	// REQUIRED; The repository branch used to publish your site's source files.
	Branch *string `json:"branch,omitempty"`

	// REQUIRED; The repository directory that includes the source files for the Pages site. Allowed paths are / or /docs.
	Path *PutContentSchemaSource1Path `json:"path,omitempty"`
}

type PathsTeer3SReposOwnerRepoCheckRunsPostRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED
	Status *PostContentSchema0Status `json:"status,omitempty"`

	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
}

type PathsTf8MqrProjectsColumnsColumnIDCardsPostRequestbodyContentApplicationJSONSchemaOneof1 struct {
	// REQUIRED; The unique identifier of the content associated with the card
	ContentID *int32 `json:"content_id,omitempty"`

	// REQUIRED; The piece of content associated with the card
	ContentType *string `json:"content_type,omitempty"`
}

type PathsTfi7RdOrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberReactionsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The reaction type [https://docs.github.com/rest/reference/reactions#reaction-types] to add to the team discussion.
	Content *Enum143 `json:"content,omitempty"`
}

type PathsTxj2SfReposOwnerRepoGitBlobsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The new blob's content.
	Content *string `json:"content,omitempty"`

	// The encoding used for content. Currently, "utf-8" and "base64" are supported.
	Encoding *string `json:"encoding,omitempty"`
}

type PathsU8LrzyUserCodespacesSecretsSecretNamePutRequestbodyContentApplicationJSONSchemaPropertiesSelectedRepositoryIDsItems struct {
}

type PathsUf4AvrReposOwnerRepoNotificationsPutResponses202ContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
	URL *string `json:"url,omitempty"`
}

type PathsUh4T4SReposOwnerRepoGitRefsRefPatchRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The SHA1 value to set this reference to
	SHA *string `json:"sha,omitempty"`

	// Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting
// it to false will make sure you're not overwriting work.
	Force *bool `json:"force,omitempty"`
}

type PathsUk32QoNotificationsThreadsThreadIDSubscriptionPutRequestbodyContentApplicationJSONSchema struct {
	// Whether to block all notifications from a thread.
	Ignored *bool `json:"ignored,omitempty"`
}

type PathsUto5ZtReposOwnerRepoPullsPullNumberRequestedReviewersPostRequestbodyContentApplicationJSONSchema struct {
	// An array of user logins that will be requested.
	Reviewers []*string `json:"reviewers,omitempty"`

	// An array of team slugs that will be requested.
	TeamReviewers []*string `json:"team_reviewers,omitempty"`
}

type PathsUwcgvaReposOwnerRepoCheckSuitesPreferencesPatchRequestbodyContentApplicationJSONSchema struct {
	// Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.
	AutoTriggerChecks []*PatchContentSchemaAutoTriggerChecksItem `json:"auto_trigger_checks,omitempty"`
}

type PathsV5LgmhOrgsOrgTeamsTeamSlugDiscussionsDiscussionNumberCommentsCommentNumberReactionsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The reaction type [https://docs.github.com/rest/reference/reactions#reaction-types] to add to the team discussion
// comment.
	Content *PostContentSchemaContent `json:"content,omitempty"`
}

type PathsVb9Tf3ReposOwnerRepoActionsWorkflowsWorkflowIDRunsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	WorkflowRuns []*WorkflowRun `json:"workflow_runs,omitempty"`
}

type PathsVeqlyiReposOwnerRepoCodespacesSecretsSecretNamePutRequestbodyContentApplicationJSONSchema struct {
	// Value for your secret, encrypted with LibSodium [https://libsodium.gitbook.io/doc/bindings_for_other_languages] using the
// public key retrieved from the Get a repository public key
// [https://docs.github.com/rest/reference/codespaces#get-a-repository-public-key] endpoint.
	EncryptedValue *string `json:"encrypted_value,omitempty"`

	// ID of the key you used to encrypt the secret.
	KeyID *string `json:"key_id,omitempty"`
}

type PathsVkwih0ReposOwnerRepoBranchesBranchProtectionRestrictionsUsersPostRequestbodyContentApplicationJSONSchemaOneof0 struct {
	// REQUIRED; The username for users
	Users []*string `json:"users,omitempty"`
}

type PathsVog3YwProjectsProjectIDDeleteResponses403ContentApplicationJSONSchema struct {
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Errors []*string `json:"errors,omitempty"`
	Message *string `json:"message,omitempty"`
}

type PathsW3Xg7UReposOwnerRepoDependabotSecretsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Secrets []*DependabotSecret `json:"secrets,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type PathsWxrvxnReposOwnerRepoPullsPullNumberReviewsReviewIDPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The body text of the pull request review.
	Body *string `json:"body,omitempty"`
}

type PathsWzzjweOrgsOrgActionsSecretsGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Secrets []*OrganizationActionsSecret `json:"secrets,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type PathsX0Os5OReposOwnerRepoCheckRunsCheckRunIDPatchRequestbodyContentApplicationJSONSchemaAnyof1 struct {
	// OPTIONAL; Contains additional key/value pairs not defined in the schema.
	AdditionalProperties map[string]any
	Status *PatchContentSchema1Status `json:"status,omitempty"`
}

type PathsXg2Jx3TeamsTeamIDMembershipsUsernamePutRequestbodyContentApplicationJSONSchema struct {
	// The role that this user should have in the team.
	Role *Enum308 `json:"role,omitempty"`
}

// PathsXvysvoReposOwnerRepoHooksPostRequestbodyContentApplicationJSONSchemaPropertiesConfig - Key/value pairs to provide
// settings for this webhook. These are defined below [https://docs.github.com/rest/reference/repos#create-hook-config-params].
type PathsXvysvoReposOwnerRepoHooksPostRequestbodyContentApplicationJSONSchemaPropertiesConfig struct {
	// The media type used to serialize the payloads. Supported values include json and form. The default is form.
	ContentType *string `json:"content_type,omitempty"`
	Digest *string `json:"digest,omitempty"`
	InsecureSSL *WebhookConfigInsecureSSL `json:"insecure_ssl,omitempty"`

	// If provided, the secret will be used as the key to generate the HMAC hex digest value for delivery signature headers [https://docs.github.com/webhooks/event-payloads/#delivery-headers].
	Secret *string `json:"secret,omitempty"`
	Token *string `json:"token,omitempty"`

	// The URL to which the payloads will be delivered.
	URL *string `json:"url,omitempty"`
}

type PathsXyx0QiOrgsOrgReposPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// Either true to allow auto-merge on pull requests, or false to disallow auto-merge.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Either true to allow merging pull requests with a merge commit, or false to prevent merging pull requests with merge commits.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Either true to allow rebase-merging pull requests, or false to prevent rebase-merging.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Either true to allow squash-merging pull requests, or false to prevent squash-merging.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`

	// Pass true to create an initial commit with empty README.
	AutoInit *bool `json:"auto_init,omitempty"`

	// Either true to allow automatically deleting head branches when pull requests are merged, or false to prevent automatic
// deletion. The authenticated user must be an organization owner to set this
// property to true.
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// A short description of the repository.
	Description *string `json:"description,omitempty"`

	// Desired language or platform .gitignore template [https://github.com/github/gitignore] to apply. Use the name of the template
// without the extension. For example, "Haskell".
	GitignoreTemplate *string `json:"gitignore_template,omitempty"`

	// Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// Either true to enable issues for this repository or false to disable them.
	HasIssues *bool `json:"has_issues,omitempty"`

	// Either true to enable projects for this repository or false to disable them. Note: If you're creating a repository in an
// organization that has disabled repository projects, the default is false, and
// if you pass true, the API returns an error.
	HasProjects *bool `json:"has_projects,omitempty"`

	// Either true to enable the wiki for this repository or false to disable it.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// A URL with more information about the repository.
	Homepage *string `json:"homepage,omitempty"`

	// Either true to make this repo available as a template repository or false to prevent it.
	IsTemplate *bool `json:"is_template,omitempty"`

	// Choose an open source license template [https://choosealicense.com/] that best suits your needs, and then use the license
// keyword
// [https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type] as the license_template string.
// For example, "mit" or "mpl-2.0".
	LicenseTemplate *string `json:"license_template,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *PostContentSchemaMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *PostContentSchemaMergeCommitTitle `json:"merge_commit_title,omitempty"`

	// Whether the repository is private.
	Private *bool `json:"private,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *PostContentSchemaSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *PostContentSchemaSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`

	// The id of the team that will be granted access to this repository. This is only valid when creating a repository in an
// organization.
	TeamID *int32 `json:"team_id,omitempty"`

	// Either true to allow squash-merge commits to use pull request title, or false to use commit message. **This property has
// been deprecated. Please use squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// The visibility of the repository.
	Visibility *Enum129 `json:"visibility,omitempty"`
}

type PathsY78IinReposOwnerRepoGitCommitsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The commit message
	Message *string `json:"message,omitempty"`

	// REQUIRED; The SHA of the tree object this commit points to
	Tree *string `json:"tree,omitempty"`

	// Information about the author of the commit. By default, the author will be the authenticated user and the current date.
// See the author and committer object below for details.
	Author *PostContentSchemaAuthor `json:"author,omitempty"`

	// Information about the person who is making the commit. By default, committer will use the information set in author. See
// the author and committer object below for details.
	Committer *PostContentSchemaCommitter `json:"committer,omitempty"`

	// The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root
// commit. For a single parent, an array of one SHA should be provided; for a merge
// commit, an array of more than one should be provided.
	Parents []*string `json:"parents,omitempty"`

	// The PGP signature [https://en.wikipedia.org/wiki/Pretty_Good_Privacy] of the commit. GitHub adds the signature to the gpgsig
// header of the created commit. For a commit signature to be verifiable by
// Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the
// object database. To pass a signature parameter, you need to first manually create
// a valid PGP signature, which can be complicated. You may find it easier to use the command line [https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work]
// to create signed commits.
	Signature *string `json:"signature,omitempty"`
}

type PathsYbfggsUserCodespacesSecretsSecretNameRepositoriesPutRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories
// using the List selected repositories for a user secret
// [https://docs.github.com/rest/reference/codespaces#list-selected-repositories-for-a-user-secret], Add a selected repository
// to a user secret
// [https://docs.github.com/rest/reference/codespaces#add-a-selected-repository-to-a-user-secret], and Remove a selected repository
// from a user secret
// [https://docs.github.com/rest/reference/codespaces#remove-a-selected-repository-from-a-user-secret] endpoints.
	SelectedRepositoryIDs []*int32 `json:"selected_repository_ids,omitempty"`
}

type PathsYc7S5OUserCodespacesCodespaceNameMachinesGetResponses200ContentApplicationJSONSchema struct {
	// REQUIRED
	Machines []*CodespaceMachine `json:"machines,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`
}

type PathsYmu23VUserGetResponses200ContentApplicationJSONSchema struct {
}

type PathsYvh36LReposOwnerRepoPullsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED; The name of the branch you want the changes pulled into. This should be an existing branch on the current repository.
// You cannot submit a pull request to one repository that requests a merge to a base
// of another repository.
	Base *string `json:"base,omitempty"`

	// REQUIRED; The name of the branch where your changes are implemented. For cross-repository pull requests in the same network,
// namespace head with a user like this: username:branch.
	Head *string `json:"head,omitempty"`

	// The contents of the pull request.
	Body *string `json:"body,omitempty"`

	// Indicates whether the pull request is a draft. See "Draft Pull Requests [https://docs.github.com/articles/about-pull-requests#draft-pull-requests]"
// in the GitHub Help documentation to learn more.
	Draft *bool `json:"draft,omitempty"`

	// An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body,
// and comments on the new pull request. Required unless title is specified.
	Issue *int32 `json:"issue,omitempty"`

	// Indicates whether maintainers can modify [https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/]
// the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`

	// The title of the new pull request. Required unless issue is specified.
	Title *string `json:"title,omitempty"`
}

type PathsYvzodUserMigrationsPostRequestbodyContentApplicationJSONSchema struct {
	// REQUIRED
	Repositories []*string `json:"repositories,omitempty"`

	// Exclude attributes from the API response to improve performance
	Exclude []*Enum320 `json:"exclude,omitempty"`

	// Do not include attachments in the migration
	ExcludeAttachments *bool `json:"exclude_attachments,omitempty"`

	// Indicates whether the repository git data should be excluded from the migration.
	ExcludeGitData *bool `json:"exclude_git_data,omitempty"`

	// Indicates whether metadata should be excluded and only git source should be included for the migration.
	ExcludeMetadata *bool `json:"exclude_metadata,omitempty"`

	// Indicates whether projects owned by the organization or users should be excluded.
	ExcludeOwnerProjects *bool `json:"exclude_owner_projects,omitempty"`

	// Do not include releases in the migration
	ExcludeReleases *bool `json:"exclude_releases,omitempty"`

	// Lock the repositories being migrated at the start of the migration
	LockRepositories *bool `json:"lock_repositories,omitempty"`

	// Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other
// flags).
	OrgMetadataOnly *bool `json:"org_metadata_only,omitempty"`
}

type PathsZoffozReposOwnerRepoPullsPullNumberUpdateBranchPutResponses202ContentApplicationJSONSchema struct {
	Message *string `json:"message,omitempty"`
	URL *string `json:"url,omitempty"`
}

// PendingDeployment - Details of a deployment that is waiting for protection rules to pass
type PendingDeployment struct {
	// REQUIRED; Whether the currently authenticated user can approve the deployment
	CurrentUserCanApprove *bool `json:"current_user_can_approve,omitempty"`

	// REQUIRED
	Environment *PendingDeploymentEnvironment `json:"environment,omitempty"`

	// REQUIRED; The people or teams that may approve jobs that reference the environment. You can list up to six users or teams
// as reviewers. The reviewers must have at least read access to the repository. Only one
// of the required reviewers needs to approve the job for it to proceed.
	Reviewers []*PendingDeploymentReviewersItem `json:"reviewers,omitempty"`

	// REQUIRED; The set duration of the wait timer
	WaitTimer *int32 `json:"wait_timer,omitempty"`

	// REQUIRED; The time that the wait timer began.
	WaitTimerStartedAt *time.Time `json:"wait_timer_started_at,omitempty"`
}

type PendingDeploymentEnvironment struct {
	HTMLURL *string `json:"html_url,omitempty"`

	// The id of the environment.
	ID *int32 `json:"id,omitempty"`

	// The name of the environment.
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	URL *string `json:"url,omitempty"`
}

type PendingDeploymentReviewersItem struct {
	Reviewer *PendingDeploymentReviewersItemReviewer `json:"reviewer,omitempty"`

	// The type of reviewer.
	Type *DeploymentReviewerType `json:"type,omitempty"`
}

type PendingDeploymentReviewersItemReviewer struct {
}

// PorterAuthor - Porter Author
type PorterAuthor struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	ImportURL *string `json:"import_url,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RemoteID *string `json:"remote_id,omitempty"`

	// REQUIRED
	RemoteName *string `json:"remote_name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// PorterLargeFile - Porter Large File
type PorterLargeFile struct {
	// REQUIRED
	Oid *string `json:"oid,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	RefName *string `json:"ref_name,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`
}

type Post403ApplicationJSONPropertiesItemsItem struct {
	Code *string `json:"code,omitempty"`
	Field *string `json:"field,omitempty"`
	Message *string `json:"message,omitempty"`
	Resource *string `json:"resource,omitempty"`
}

type Post503ApplicationJSONPropertiesItemsItem struct {
	Code *string `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// PostContentSchema1PullRequest - Pull request number for this codespace
type PostContentSchema1PullRequest struct {
	// REQUIRED; Pull request number
	PullRequestNumber *int32 `json:"pull_request_number,omitempty"`

	// REQUIRED; Repository id for this codespace
	RepositoryID *int32 `json:"repository_id,omitempty"`
}

type PostContentSchema2LabelsItem struct {
	// REQUIRED
	Name *string `json:"name,omitempty"`
}

type PostContentSchema3Item struct {
	// REQUIRED
	Name *string `json:"name,omitempty"`
}

type PostContentSchemaActionsItem struct {
	// REQUIRED; A short explanation of what this action would do. The maximum size is 40 characters.
	Description *string `json:"description,omitempty"`

	// REQUIRED; A reference for the action on the integrator's system. The maximum size is 20 characters.
	Identifier *string `json:"identifier,omitempty"`

	// REQUIRED; The text to be displayed on a button in the web UI. The maximum size is 20 characters.
	Label *string `json:"label,omitempty"`
}

// PostContentSchemaAuthor - Information about the author of the commit. By default, the author will be the authenticated
// user and the current date. See the author and committer object below for details.
type PostContentSchemaAuthor struct {
	// REQUIRED; The email of the author (or committer) of the commit
	Email *string `json:"email,omitempty"`

	// REQUIRED; The name of the author (or committer) of the commit
	Name *string `json:"name,omitempty"`

	// Indicates when this commit was authored (or committed). This is a timestamp in ISO 8601 [https://en.wikipedia.org/wiki/ISO_8601]
// format: YYYY-MM-DDTHH:MM:SSZ.
	Date *time.Time `json:"date,omitempty"`
}

type PostContentSchemaCommentsItem struct {
	// REQUIRED; Text of the review comment.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The relative path to the file that necessitates a review comment.
	Path *string `json:"path,omitempty"`
	Line *int32 `json:"line,omitempty"`

	// The position in the diff where you want to add a review comment. Note this value is not the same as the line number in
// the file. For help finding the position value, read the note below.
	Position *int32 `json:"position,omitempty"`
	Side *string `json:"side,omitempty"`
	StartLine *int32 `json:"start_line,omitempty"`
	StartSide *string `json:"start_side,omitempty"`
}

// PostContentSchemaCommitter - Information about the person who is making the commit. By default, committer will use the
// information set in author. See the author and committer object below for details.
type PostContentSchemaCommitter struct {
	// Indicates when this commit was authored (or committed). This is a timestamp in ISO 8601 [https://en.wikipedia.org/wiki/ISO_8601]
// format: YYYY-MM-DDTHH:MM:SSZ.
	Date *time.Time `json:"date,omitempty"`

	// The email of the author (or committer) of the commit
	Email *string `json:"email,omitempty"`

	// The name of the author (or committer) of the commit
	Name *string `json:"name,omitempty"`
}

// PostContentSchemaConfig - Key/value pairs to provide settings for this webhook. These are defined below [https://docs.github.com/rest/reference/orgs#create-hook-config-params].
type PostContentSchemaConfig struct {
	// REQUIRED; The URL to which the payloads will be delivered.
	URL *string `json:"url,omitempty"`

	// The media type used to serialize the payloads. Supported values include json and form. The default is form.
	ContentType *string `json:"content_type,omitempty"`
	InsecureSSL *WebhookConfigInsecureSSL `json:"insecure_ssl,omitempty"`
	Password *string `json:"password,omitempty"`

	// If provided, the secret will be used as the key to generate the HMAC hex digest value for delivery signature headers [https://docs.github.com/webhooks/event-payloads/#delivery-headers].
	Secret *string `json:"secret,omitempty"`
	Username *string `json:"username,omitempty"`
}

type PostContentSchemaMilestone struct {
}

// PostContentSchemaOutput - Check runs can accept a variety of data in the output object, including a title and summary and
// can optionally provide descriptive details about the run.
type PostContentSchemaOutput struct {
	// REQUIRED; The summary of the check run. This parameter supports Markdown. Maximum length: 65535 characters.
	Summary *string `json:"summary,omitempty"`

	// REQUIRED; The title of the check run.
	Title *string `json:"title,omitempty"`

	// Adds information from your analysis to specific lines of code. Annotations are visible on GitHub in the Checks and Files
// changed tab of the pull request. The Checks API limits the number of
// annotations to a maximum of 50 per API request. To create more than 50 annotations, you have to make multiple requests
// to the Update a check run
// [https://docs.github.com/rest/reference/checks#update-a-check-run] endpoint. Each time you update the check run, annotations
// are appended to the list of annotations that already exist for the check
// run. For details about how you can view annotations on GitHub, see "About status checks [https://docs.github.com/articles/about-status-checks#checks]".
	Annotations []*PostContentSchemaOutputAnnotationsItem `json:"annotations,omitempty"`

	// Adds images to the output displayed in the GitHub pull request UI.
	Images []*PostContentSchemaOutputImagesItem `json:"images,omitempty"`

	// The details of the check run. This parameter supports Markdown. Maximum length: 65535 characters.
	Text *string `json:"text,omitempty"`
}

type PostContentSchemaOutputAnnotationsItem struct {
	// REQUIRED; The level of the annotation.
	AnnotationLevel *PostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel `json:"annotation_level,omitempty"`

	// REQUIRED; The end line of the annotation.
	EndLine *int32 `json:"end_line,omitempty"`

	// REQUIRED; A short description of the feedback for these lines of code. The maximum size is 64 KB.
	Message *string `json:"message,omitempty"`

	// REQUIRED; The path of the file to add an annotation to. For example, assets/css/main.css.
	Path *string `json:"path,omitempty"`

	// REQUIRED; The start line of the annotation. Line numbers start at 1.
	StartLine *int32 `json:"start_line,omitempty"`

	// The end column of the annotation. Annotations only support start_column and end_column on the same line. Omit this parameter
// if start_line and end_line have different values.
	EndColumn *int32 `json:"end_column,omitempty"`

	// Details about this annotation. The maximum size is 64 KB.
	RawDetails *string `json:"raw_details,omitempty"`

	// The start column of the annotation. Annotations only support start_column and end_column on the same line. Omit this parameter
// if start_line and end_line have different values. Column numbers start at
// 1.
	StartColumn *int32 `json:"start_column,omitempty"`

	// The title that represents the annotation. The maximum size is 255 characters.
	Title *string `json:"title,omitempty"`
}

type PostContentSchemaOutputImagesItem struct {
	// REQUIRED; The alternative text for the image.
	Alt *string `json:"alt,omitempty"`

	// REQUIRED; The full URL of the image.
	ImageURL *string `json:"image_url,omitempty"`

	// A short image description.
	Caption *string `json:"caption,omitempty"`
}

type PostContentSchemaPayload struct {
}

type PostContentSchemaPublic struct {
}

// PostContentSchemaSource - The source branch and directory used to publish your Pages site.
type PostContentSchemaSource struct {
	// REQUIRED; The repository branch used to publish your site's source files.
	Branch *string `json:"branch,omitempty"`

	// The repository directory that includes the source files for the Pages site. Allowed paths are / or /docs. Default: /
	Path *PostContentSchemaSourcePath `json:"path,omitempty"`
}

// PostContentSchemaTagger - An object with information about the individual creating the tag.
type PostContentSchemaTagger struct {
	// REQUIRED; The email of the author of the tag
	Email *string `json:"email,omitempty"`

	// REQUIRED; The name of the author of the tag
	Name *string `json:"name,omitempty"`

	// When this object was tagged. This is a timestamp in ISO 8601 [https://en.wikipedia.org/wiki/ISO_8601] format: YYYY-MM-DDTHH:MM:SSZ.
	Date *time.Time `json:"date,omitempty"`
}

type PostContentSchemaTreeItem struct {
	// The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this,
// or tree.sha.
// Note: Use either tree.sha or content to specify the contents of the entry. Using both tree.sha and content will return
// an error.
	Content *string `json:"content,omitempty"`

	// The file mode; one of 100644 for file (blob), 100755 for executable (blob), 040000 for subdirectory (tree), 160000 for
// submodule (commit), or 120000 for a blob that specifies the path of a symlink.
	Mode *PostRequestBodyContentApplicationJSONSchemaTreeItemMode `json:"mode,omitempty"`

	// The file referenced in the tree.
	Path *string `json:"path,omitempty"`

	// The SHA1 checksum ID of the object in the tree. Also called tree.sha. If the value is null then the file will be deleted.
// Note: Use either tree.sha or content to specify the contents of the entry. Using both tree.sha and content will return
// an error.
	SHA *string `json:"sha,omitempty"`

	// Either blob, tree, or commit.
	Type *PostRequestBodyContentApplicationJSONSchemaTreeItemType `json:"type,omitempty"`
}

// PrivateUser - Private User
type PrivateUser struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	Bio *string `json:"bio,omitempty"`

	// REQUIRED
	Blog *string `json:"blog,omitempty"`

	// REQUIRED
	Collaborators *int32 `json:"collaborators,omitempty"`

	// REQUIRED
	Company *string `json:"company,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiskUsage *int32 `json:"disk_usage,omitempty"`

	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Followers *int32 `json:"followers,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	Following *int32 `json:"following,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Hireable *bool `json:"hireable,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Location *string `json:"location,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	OwnedPrivateRepos *int32 `json:"owned_private_repos,omitempty"`

	// REQUIRED
	PrivateGists *int32 `json:"private_gists,omitempty"`

	// REQUIRED
	PublicGists *int32 `json:"public_gists,omitempty"`

	// REQUIRED
	PublicRepos *int32 `json:"public_repos,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	TotalPrivateRepos *int32 `json:"total_private_repos,omitempty"`

	// REQUIRED
	TwoFactorAuthentication *bool `json:"two_factor_authentication,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	BusinessPlus *bool `json:"business_plus,omitempty"`
	LdapDn *string `json:"ldap_dn,omitempty"`
	Plan *PrivateUserPlan `json:"plan,omitempty"`
	SuspendedAt *time.Time `json:"suspended_at,omitempty"`
	TwitterUsername *string `json:"twitter_username,omitempty"`
}

type PrivateUserPlan struct {
	// REQUIRED
	Collaborators *int32 `json:"collaborators,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PrivateRepos *int32 `json:"private_repos,omitempty"`

	// REQUIRED
	Space *int32 `json:"space,omitempty"`
}

// Projects are a way to organize columns and cards of work.
type Project struct {
	// REQUIRED; Body of the project
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ColumnsURL *string `json:"columns_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; A GitHub user.
	Creator *NullableSimpleUser `json:"creator,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the project
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OwnerURL *string `json:"owner_url,omitempty"`

	// REQUIRED; State of the project; either 'open' or 'closed'
	State *string `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The baseline permission that all organization members have on this project. Only present if owner is an organization.
	OrganizationPermission *ProjectOrganizationPermission `json:"organization_permission,omitempty"`

	// Whether or not this project can be seen by everyone. Only present if owner is an organization.
	Private *bool `json:"private,omitempty"`
}

// ProjectCard - Project cards represent a scope of work.
type ProjectCard struct {
	// REQUIRED
	ColumnURL *string `json:"column_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; A GitHub user.
	Creator *NullableSimpleUser `json:"creator,omitempty"`

	// REQUIRED; The project card's ID
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Note *string `json:"note,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Whether or not the card is archived
	Archived *bool `json:"archived,omitempty"`
	ColumnName *string `json:"column_name,omitempty"`
	ContentURL *string `json:"content_url,omitempty"`
	ProjectID *string `json:"project_id,omitempty"`
}

// ProjectCardAutoGenerated - Project Card
type ProjectCardAutoGenerated struct {
	// REQUIRED; Whether or not the card is archived
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	ColumnID *int32 `json:"column_id,omitempty"`

	// REQUIRED
	ColumnURL *string `json:"column_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookProjectCardMovedProjectCard0Creator `json:"creator,omitempty"`

	// REQUIRED; The project card's ID
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Note *string `json:"note,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	AfterID *int32 `json:"after_id,omitempty"`
	ContentURL *string `json:"content_url,omitempty"`
}

// ProjectCollaboratorPermission - Project Collaborator Permission
type ProjectCollaboratorPermission struct {
	// REQUIRED
	Permission *string `json:"permission,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
}

// ProjectColumn - Project columns contain cards of work.
type ProjectColumn struct {
	// REQUIRED
	CardsURL *string `json:"cards_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The unique identifier of the project column
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the project column
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// ProjectsV2 - A projects v2 project
type ProjectsV2 struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; A GitHub user.
	Creator *SimpleUser `json:"creator,omitempty"`

	// REQUIRED
	DeletedAt *time.Time `json:"deleted_at,omitempty"`

	// REQUIRED; A GitHub user.
	DeletedBy *NullableSimpleUser `json:"deleted_by,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *float32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; A GitHub user.
	Owner *SimpleUser `json:"owner,omitempty"`

	// REQUIRED
	Public *bool `json:"public,omitempty"`

	// REQUIRED
	ShortDescription *string `json:"short_description,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// ProjectsV2Item - An item belonging to a project
type ProjectsV2Item struct {
	// REQUIRED
	ArchivedAt *time.Time `json:"archived_at,omitempty"`

	// REQUIRED
	ContentNodeID *string `json:"content_node_id,omitempty"`

	// REQUIRED; The type of content tracked in a project item
	ContentType *ProjectsV2ItemContentType `json:"content_type,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	ID *float32 `json:"id,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// A GitHub user.
	Creator *SimpleUser `json:"creator,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	ProjectNodeID *string `json:"project_node_id,omitempty"`
}

// ProtectedBranch - Branch protections protect branches
type ProtectedBranch struct {
	// REQUIRED
	URL *string `json:"url,omitempty"`
	AllowDeletions *ProtectedBranchAllowDeletions `json:"allow_deletions,omitempty"`
	AllowForcePushes *ProtectedBranchAllowForcePushes `json:"allow_force_pushes,omitempty"`

	// Whether users can pull changes from upstream when the branch is locked. Set to true to allow fork syncing. Set to false
// to prevent fork syncing.
	AllowForkSyncing *ProtectedBranchAllowForkSyncing `json:"allow_fork_syncing,omitempty"`
	BlockCreations *ProtectedBranchBlockCreations `json:"block_creations,omitempty"`
	EnforceAdmins *ProtectedBranchEnforceAdmins `json:"enforce_admins,omitempty"`

	// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
	LockBranch *ProtectedBranchLockBranch `json:"lock_branch,omitempty"`
	RequiredConversationResolution *ProtectedBranchRequiredConversationResolution `json:"required_conversation_resolution,omitempty"`
	RequiredLinearHistory *ProtectedBranchRequiredLinearHistory `json:"required_linear_history,omitempty"`
	RequiredPullRequestReviews *ProtectedBranchRequiredPullRequestReviews `json:"required_pull_request_reviews,omitempty"`
	RequiredSignatures *ProtectedBranchRequiredSignatures `json:"required_signatures,omitempty"`

	// Status Check Policy
	RequiredStatusChecks *StatusCheckPolicy `json:"required_status_checks,omitempty"`

	// Branch Restriction Policy
	Restrictions *BranchRestrictionPolicy `json:"restrictions,omitempty"`
}

// ProtectedBranchAdminEnforced - Protected Branch Admin Enforced
type ProtectedBranchAdminEnforced struct {
	// REQUIRED
	Enabled *bool `json:"enabled,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type ProtectedBranchAllowDeletions struct {
	// REQUIRED
	Enabled *bool `json:"enabled,omitempty"`
}

type ProtectedBranchAllowForcePushes struct {
	// REQUIRED
	Enabled *bool `json:"enabled,omitempty"`
}

// ProtectedBranchAllowForkSyncing - Whether users can pull changes from upstream when the branch is locked. Set to true to
// allow fork syncing. Set to false to prevent fork syncing.
type ProtectedBranchAllowForkSyncing struct {
	Enabled *bool `json:"enabled,omitempty"`
}

type ProtectedBranchBlockCreations struct {
	// REQUIRED
	Enabled *bool `json:"enabled,omitempty"`
}

type ProtectedBranchEnforceAdmins struct {
	// REQUIRED
	Enabled *bool `json:"enabled,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// ProtectedBranchLockBranch - Whether to set the branch as read-only. If this is true, users will not be able to push to
// the branch.
type ProtectedBranchLockBranch struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// ProtectedBranchPullRequestReview - Protected Branch Pull Request Review
type ProtectedBranchPullRequestReview struct {
	// REQUIRED
	DismissStaleReviews *bool `json:"dismiss_stale_reviews,omitempty"`

	// REQUIRED
	RequireCodeOwnerReviews *bool `json:"require_code_owner_reviews,omitempty"`

	// Allow specific users, teams, or apps to bypass pull request requirements.
	BypassPullRequestAllowances *ProtectedBranchPullRequestReviewBypassPullRequestAllowances `json:"bypass_pull_request_allowances,omitempty"`
	DismissalRestrictions *ProtectedBranchPullRequestReviewDismissalRestrictions `json:"dismissal_restrictions,omitempty"`

	// Whether the most recent push must be approved by someone other than the person who pushed it.
	RequireLastPushApproval *bool `json:"require_last_push_approval,omitempty"`
	RequiredApprovingReviewCount *int32 `json:"required_approving_review_count,omitempty"`
	URL *string `json:"url,omitempty"`
}

// ProtectedBranchPullRequestReviewBypassPullRequestAllowances - Allow specific users, teams, or apps to bypass pull request
// requirements.
type ProtectedBranchPullRequestReviewBypassPullRequestAllowances struct {
	// The list of apps allowed to bypass pull request requirements.
	Apps []*Integration `json:"apps,omitempty"`

	// The list of teams allowed to bypass pull request requirements.
	Teams []*Team `json:"teams,omitempty"`

	// The list of users allowed to bypass pull request requirements.
	Users []*SimpleUser `json:"users,omitempty"`
}

type ProtectedBranchPullRequestReviewDismissalRestrictions struct {
	// The list of apps with review dismissal access.
	Apps []*Integration `json:"apps,omitempty"`

	// The list of teams with review dismissal access.
	Teams []*Team `json:"teams,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	URL *string `json:"url,omitempty"`

	// The list of users with review dismissal access.
	Users []*SimpleUser `json:"users,omitempty"`
	UsersURL *string `json:"users_url,omitempty"`
}

type ProtectedBranchRequiredConversationResolution struct {
	Enabled *bool `json:"enabled,omitempty"`
}

type ProtectedBranchRequiredLinearHistory struct {
	// REQUIRED
	Enabled *bool `json:"enabled,omitempty"`
}

type ProtectedBranchRequiredPullRequestReviews struct {
	// REQUIRED
	URL *string `json:"url,omitempty"`
	BypassPullRequestAllowances *ProtectedBranchRequiredPullRequestReviewsBypassPullRequestAllowances `json:"bypass_pull_request_allowances,omitempty"`
	DismissStaleReviews *bool `json:"dismiss_stale_reviews,omitempty"`
	DismissalRestrictions *ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions `json:"dismissal_restrictions,omitempty"`
	RequireCodeOwnerReviews *bool `json:"require_code_owner_reviews,omitempty"`

	// Whether the most recent push must be approved by someone other than the person who pushed it.
	RequireLastPushApproval *bool `json:"require_last_push_approval,omitempty"`
	RequiredApprovingReviewCount *int32 `json:"required_approving_review_count,omitempty"`
}

type ProtectedBranchRequiredPullRequestReviewsBypassPullRequestAllowances struct {
	// REQUIRED
	Teams []*Team `json:"teams,omitempty"`

	// REQUIRED
	Users []*SimpleUser `json:"users,omitempty"`
	Apps []*Integration `json:"apps,omitempty"`
}

type ProtectedBranchRequiredPullRequestReviewsDismissalRestrictions struct {
	// REQUIRED
	Teams []*Team `json:"teams,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	Users []*SimpleUser `json:"users,omitempty"`

	// REQUIRED
	UsersURL *string `json:"users_url,omitempty"`
	Apps []*Integration `json:"apps,omitempty"`
}

type ProtectedBranchRequiredSignatures struct {
	// REQUIRED
	Enabled *bool `json:"enabled,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// ProtectedBranchRequiredStatusCheck - Protected Branch Required Status Check
type ProtectedBranchRequiredStatusCheck struct {
	// REQUIRED
	Checks []*ProtectedBranchRequiredStatusCheckChecksItem `json:"checks,omitempty"`

	// REQUIRED
	Contexts []*string `json:"contexts,omitempty"`
	ContextsURL *string `json:"contexts_url,omitempty"`
	EnforcementLevel *string `json:"enforcement_level,omitempty"`
	Strict *bool `json:"strict,omitempty"`
	URL *string `json:"url,omitempty"`
}

type ProtectedBranchRequiredStatusCheckChecksItem struct {
	// REQUIRED
	AppID *int32 `json:"app_id,omitempty"`

	// REQUIRED
	Context *string `json:"context,omitempty"`
}

// PublicUser - Public User
type PublicUser struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	Bio *string `json:"bio,omitempty"`

	// REQUIRED
	Blog *string `json:"blog,omitempty"`

	// REQUIRED
	Company *string `json:"company,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Followers *int32 `json:"followers,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	Following *int32 `json:"following,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Hireable *bool `json:"hireable,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Location *string `json:"location,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	PublicGists *int32 `json:"public_gists,omitempty"`

	// REQUIRED
	PublicRepos *int32 `json:"public_repos,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Collaborators *int32 `json:"collaborators,omitempty"`
	DiskUsage *int32 `json:"disk_usage,omitempty"`
	OwnedPrivateRepos *int32 `json:"owned_private_repos,omitempty"`
	Plan *PublicUserPlan `json:"plan,omitempty"`
	PrivateGists *int32 `json:"private_gists,omitempty"`
	SuspendedAt *time.Time `json:"suspended_at,omitempty"`
	TotalPrivateRepos *int32 `json:"total_private_repos,omitempty"`
	TwitterUsername *string `json:"twitter_username,omitempty"`
}

type PublicUserPlan struct {
	// REQUIRED
	Collaborators *int32 `json:"collaborators,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PrivateRepos *int32 `json:"private_repos,omitempty"`

	// REQUIRED
	Space *int32 `json:"space,omitempty"`
}

// PullRequest - Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request
// is sent, interested parties can review the set of changes, discuss potential modifications,
// and even push follow-up commits if necessary.
type PullRequest struct {
	// REQUIRED
	Additions *int32 `json:"additions,omitempty"`

	// REQUIRED; A GitHub user.
	Assignee *NullableSimpleUser `json:"assignee,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *AutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *PullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ChangedFiles *int32 `json:"changed_files,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	Commits *int32 `json:"commits,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Deletions *int32 `json:"deletions,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *PullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*PullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *PullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED; Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	Mergeable *bool `json:"mergeable,omitempty"`

	// REQUIRED
	MergeableState *string `json:"mergeable_state,omitempty"`

	// REQUIRED
	Merged *bool `json:"merged,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A GitHub user.
	MergedBy *NullableSimpleUser `json:"merged_by,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *NullableMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewComments *int32 `json:"review_comments,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *PullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	Assignees []*SimpleUser `json:"assignees,omitempty"`

	// Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	RequestedReviewers []*SimpleUser `json:"requested_reviewers,omitempty"`
	RequestedTeams []*TeamSimple `json:"requested_teams,omitempty"`
}

// PullRequest0 - Pull Request
type PullRequest0 struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestConvertedToDraftPullRequest0Assignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestConvertedToDraftPullRequest0AssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestConvertedToDraftPullRequest0AutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestConvertedToDraftPullRequest0Base `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestConvertedToDraftPullRequest0Head `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestConvertedToDraftPullRequest0LabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestConvertedToDraftPullRequest0Links `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestConvertedToDraftPullRequest0Milestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestConvertedToDraftPullRequest0RequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestConvertedToDraftPullRequest0RequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestConvertedToDraftPullRequest0State `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestConvertedToDraftPullRequest0User `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestConvertedToDraftPullRequest0MergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// PullRequest1 - Pull Request
type PullRequest1 struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestOpenedPullRequest0ActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestOpenedPullRequest0Assignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestOpenedPullRequest0AssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestOpenedPullRequest0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestOpenedPullRequest0AutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestOpenedPullRequest0Base `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestOpenedPullRequest0Head `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestOpenedPullRequest0LabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestOpenedPullRequest0Links `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestOpenedPullRequest0Milestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestOpenedPullRequest0RequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestOpenedPullRequest0RequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestOpenedPullRequest0State `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestOpenedPullRequest0User `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestOpenedPullRequest0MergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// PullRequest2 - Pull Request
type PullRequest2 struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestReadyForReviewPullRequest0ActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestReadyForReviewPullRequest0Assignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestReadyForReviewPullRequest0AssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReadyForReviewPullRequest0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestReadyForReviewPullRequest0AutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestReadyForReviewPullRequest0Base `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestReadyForReviewPullRequest0Head `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestReadyForReviewPullRequest0LabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReadyForReviewPullRequest0Links `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestReadyForReviewPullRequest0Milestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestReadyForReviewPullRequest0RequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestReadyForReviewPullRequest0RequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestReadyForReviewPullRequest0State `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReadyForReviewPullRequest0User `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestReadyForReviewPullRequest0MergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// PullRequest3 - Pull Request
type PullRequest3 struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestReopenedPullRequest0ActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestReopenedPullRequest0Assignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestReopenedPullRequest0AssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReopenedPullRequest0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestReopenedPullRequest0AutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestReopenedPullRequest0Base `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestReopenedPullRequest0Head `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestReopenedPullRequest0LabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReopenedPullRequest0Links `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestReopenedPullRequest0Milestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestReopenedPullRequest0RequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestReopenedPullRequest0RequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestReopenedPullRequest0State `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReopenedPullRequest0User `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestReopenedPullRequest0MergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// PullRequestAutoGenerated - Pull Request
type PullRequestAutoGenerated struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestClosedPullRequest0ActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestClosedPullRequest0Assignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestClosedPullRequest0AssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestClosedPullRequest0AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestClosedPullRequest0AutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestClosedPullRequest0Base `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestClosedPullRequest0Head `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestClosedPullRequest0LabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestClosedPullRequest0Links `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestClosedPullRequest0Milestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestClosedPullRequest0RequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestClosedPullRequest0RequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestClosedPullRequest0State `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestClosedPullRequest0User `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestClosedPullRequest0MergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

type PullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED
	Repo *PullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	User *PullRequestBaseUser `json:"user,omitempty"`
}

type PullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Disabled *bool `json:"disabled,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License Simple
	License *NullableLicenseSimple `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED
	Owner *PullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *time.Time `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Permissions *PullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	TempCloneToken *string `json:"temp_clone_token,omitempty"`
	Topics []*string `json:"topics,omitempty"`

	// The repository visibility: public, private, or internal.
	Visibility *string `json:"visibility,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type PullRequestBaseRepoOwner struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type PullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type PullRequestBaseUser struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type PullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED
	Repo *PullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	User *PullRequestHeadUser `json:"user,omitempty"`
}

type PullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Disabled *bool `json:"disabled,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED
	License *PullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED
	Owner *PullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *time.Time `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Permissions *PullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	TempCloneToken *string `json:"temp_clone_token,omitempty"`
	Topics []*string `json:"topics,omitempty"`

	// The repository visibility: public, private, or internal.
	Visibility *string `json:"visibility,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type PullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type PullRequestHeadRepoOwner struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type PullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type PullRequestHeadUser struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type PullRequestLabelsItem struct {
	// REQUIRED
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int64 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type PullRequestLinks struct {
	// REQUIRED; Hypermedia Link
	Comments *Link `json:"comments,omitempty"`

	// REQUIRED; Hypermedia Link
	Commits *Link `json:"commits,omitempty"`

	// REQUIRED; Hypermedia Link
	HTML *Link `json:"html,omitempty"`

	// REQUIRED; Hypermedia Link
	Issue *Link `json:"issue,omitempty"`

	// REQUIRED; Hypermedia Link
	ReviewComment *Link `json:"review_comment,omitempty"`

	// REQUIRED; Hypermedia Link
	ReviewComments *Link `json:"review_comments,omitempty"`

	// REQUIRED; Hypermedia Link
	Self *Link `json:"self,omitempty"`

	// REQUIRED; Hypermedia Link
	Statuses *Link `json:"statuses,omitempty"`
}

// PullRequestMergeResult - Pull Request Merge Result
type PullRequestMergeResult struct {
	// REQUIRED
	Merged *bool `json:"merged,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

// PullRequestMinimal - Pull Request Minimal
type PullRequestMinimal struct {
	// REQUIRED
	Base *PullRequestMinimalBase `json:"base,omitempty"`

	// REQUIRED
	Head *PullRequestMinimalHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type PullRequestMinimalBase struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED
	Repo *PullRequestMinimalBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

type PullRequestMinimalBaseRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type PullRequestMinimalHead struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED
	Repo *PullRequestMinimalHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

type PullRequestMinimalHeadRepo struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// PullRequestReview - Pull Request Reviews are reviews on pull requests.
type PullRequestReview struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The text of the review.
	Body *string `json:"body,omitempty"`

	// REQUIRED; A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer
// exists in Git and this value will be null.
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the review
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Links *PullRequestReviewLinks `json:"_links,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PullRequestURL *string `json:"pull_request_url,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
	BodyHTML *string `json:"body_html,omitempty"`
	BodyText *string `json:"body_text,omitempty"`
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`
}

// PullRequestReviewComment - Pull Request Review Comments are comments on a portion of the Pull Request's diff.
type PullRequestReviewComment struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The text of the comment.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The SHA of the commit to which the comment applies.
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The diff of the line that the comment refers to.
	DiffHunk *string `json:"diff_hunk,omitempty"`

	// REQUIRED; HTML URL for the pull request review comment.
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The ID of the pull request review comment.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Links *PullRequestReviewCommentLinks `json:"_links,omitempty"`

	// REQUIRED; The node ID of the pull request review comment.
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The SHA of the original commit to which the comment applies.
	OriginalCommitID *string `json:"original_commit_id,omitempty"`

	// REQUIRED; The index of the original line in the diff to which the comment applies. This field is deprecated; use original_line
// instead.
	OriginalPosition *int32 `json:"original_position,omitempty"`

	// REQUIRED; The relative path of the file to which the comment applies.
	Path *string `json:"path,omitempty"`

	// REQUIRED; The line index in the diff to which the comment applies. This field is deprecated; use line instead.
	Position *int32 `json:"position,omitempty"`

	// REQUIRED; The ID of the pull request review to which the comment belongs.
	PullRequestReviewID *int32 `json:"pull_request_review_id,omitempty"`

	// REQUIRED; URL for the pull request that the review comment belongs to.
	PullRequestURL *string `json:"pull_request_url,omitempty"`

	// REQUIRED; URL for the pull request review comment
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; A GitHub user.
	User *SimpleUser `json:"user,omitempty"`
	BodyHTML *string `json:"body_html,omitempty"`
	BodyText *string `json:"body_text,omitempty"`

	// The comment ID to reply to.
	InReplyToID *int32 `json:"in_reply_to_id,omitempty"`

	// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	Line *int32 `json:"line,omitempty"`

	// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	OriginalLine *int32 `json:"original_line,omitempty"`

	// The first line of the range for a multi-line comment.
	OriginalStartLine *int32 `json:"original_start_line,omitempty"`

	// Reaction Rollup
	Reactions *ReactionRollup `json:"reactions,omitempty"`

	// The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
	Side *PullRequestReviewCommentSide `json:"side,omitempty"`

	// The first line of the range for a multi-line comment.
	StartLine *int32 `json:"start_line,omitempty"`

	// The side of the first line of the range for a multi-line comment.
	StartSide *PullRequestReviewCommentStartSide `json:"start_side,omitempty"`
}

type PullRequestReviewCommentLinks struct {
	// REQUIRED
	HTML *PullRequestReviewCommentLinksHTML `json:"html,omitempty"`

	// REQUIRED
	PullRequest *PullRequestReviewCommentLinksPullRequest `json:"pull_request,omitempty"`

	// REQUIRED
	Self *PullRequestReviewCommentLinksSelf `json:"self,omitempty"`
}

type PullRequestReviewCommentLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

type PullRequestReviewCommentLinksPullRequest struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

type PullRequestReviewCommentLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

type PullRequestReviewLinks struct {
	// REQUIRED
	HTML *PullRequestReviewLinksHTML `json:"html,omitempty"`

	// REQUIRED
	PullRequest *PullRequestReviewLinksPullRequest `json:"pull_request,omitempty"`
}

type PullRequestReviewLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

type PullRequestReviewLinksPullRequest struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// PullRequestReviewRequest - Pull Request Review Request
type PullRequestReviewRequest struct {
	// REQUIRED
	Teams []*Team `json:"teams,omitempty"`

	// REQUIRED
	Users []*SimpleUser `json:"users,omitempty"`
}

// PullRequestSimple - Pull Request Simple
type PullRequestSimple struct {
	// REQUIRED; A GitHub user.
	Assignee *NullableSimpleUser `json:"assignee,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *AutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *PullRequestSimpleBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *PullRequestSimpleHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*PullRequestSimpleLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *PullRequestSimpleLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *NullableMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`
	Assignees []*SimpleUser `json:"assignees,omitempty"`

	// Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`
	RequestedReviewers []*SimpleUser `json:"requested_reviewers,omitempty"`
	RequestedTeams []*Team `json:"requested_teams,omitempty"`
}

type PullRequestSimpleBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repo *Repository `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
}

type PullRequestSimpleHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repo *Repository `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
}

type PullRequestSimpleLabelsItem struct {
	// REQUIRED
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int64 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type PullRequestSimpleLinks struct {
	// REQUIRED; Hypermedia Link
	Comments *Link `json:"comments,omitempty"`

	// REQUIRED; Hypermedia Link
	Commits *Link `json:"commits,omitempty"`

	// REQUIRED; Hypermedia Link
	HTML *Link `json:"html,omitempty"`

	// REQUIRED; Hypermedia Link
	Issue *Link `json:"issue,omitempty"`

	// REQUIRED; Hypermedia Link
	ReviewComment *Link `json:"review_comment,omitempty"`

	// REQUIRED; Hypermedia Link
	ReviewComments *Link `json:"review_comments,omitempty"`

	// REQUIRED; Hypermedia Link
	Self *Link `json:"self,omitempty"`

	// REQUIRED; Hypermedia Link
	Statuses *Link `json:"statuses,omitempty"`
}

type PutContentSchema2LabelsItem struct {
	// REQUIRED
	Name *string `json:"name,omitempty"`
}

type PutContentSchema3Item struct {
	// REQUIRED
	Name *string `json:"name,omitempty"`
}

// PutContentSchemaAuthor - The author of the file. Default: The committer or the authenticated user if you omit committer.
type PutContentSchemaAuthor struct {
	// REQUIRED; The email of the author or committer of the commit. You'll receive a 422 status code if email is omitted.
	Email *string `json:"email,omitempty"`

	// REQUIRED; The name of the author or committer of the commit. You'll receive a 422 status code if name is omitted.
	Name *string `json:"name,omitempty"`
	Date *string `json:"date,omitempty"`
}

// PutContentSchemaCommitter - The person that committed the file. Default: the authenticated user.
type PutContentSchemaCommitter struct {
	// REQUIRED; The email of the author or committer of the commit. You'll receive a 422 status code if email is omitted.
	Email *string `json:"email,omitempty"`

	// REQUIRED; The name of the author or committer of the commit. You'll receive a 422 status code if name is omitted.
	Name *string `json:"name,omitempty"`
	Date *string `json:"date,omitempty"`
}

// PutContentSchemaRequiredPullRequestReviews - Require at least one approving review on a pull request, before merging. Set
// to null to disable.
type PutContentSchemaRequiredPullRequestReviews struct {
	// Allow specific users, teams, or apps to bypass pull request requirements.
	BypassPullRequestAllowances *PutContentSchemaRequiredPullRequestReviewsBypassPullRequestAllowances `json:"bypass_pull_request_allowances,omitempty"`

	// Set to true if you want to automatically dismiss approving reviews when someone pushes a new commit.
	DismissStaleReviews *bool `json:"dismiss_stale_reviews,omitempty"`

	// Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty dismissal_restrictions object to disable.
// User and team dismissal_restrictions are only available for
// organization-owned repositories. Omit this parameter for personal repositories.
	DismissalRestrictions *PutContentSchemaRequiredPullRequestReviewsDismissalRestrictions `json:"dismissal_restrictions,omitempty"`

	// Blocks merging pull requests until code owners [https://docs.github.com/articles/about-code-owners/] review them.
	RequireCodeOwnerReviews *bool `json:"require_code_owner_reviews,omitempty"`

	// Whether the most recent push must be approved by someone other than the person who pushed it. Default: false.
	RequireLastPushApproval *bool `json:"require_last_push_approval,omitempty"`

	// Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
	RequiredApprovingReviewCount *int32 `json:"required_approving_review_count,omitempty"`
}

// PutContentSchemaRequiredPullRequestReviewsBypassPullRequestAllowances - Allow specific users, teams, or apps to bypass
// pull request requirements.
type PutContentSchemaRequiredPullRequestReviewsBypassPullRequestAllowances struct {
	// The list of app slugs allowed to bypass pull request requirements.
	Apps []*string `json:"apps,omitempty"`

	// The list of team slugs allowed to bypass pull request requirements.
	Teams []*string `json:"teams,omitempty"`

	// The list of user logins allowed to bypass pull request requirements.
	Users []*string `json:"users,omitempty"`
}

// PutContentSchemaRequiredPullRequestReviewsDismissalRestrictions - Specify which users, teams, and apps can dismiss pull
// request reviews. Pass an empty dismissal_restrictions object to disable. User and team dismissal_restrictions are only
// available for
// organization-owned repositories. Omit this parameter for personal repositories.
type PutContentSchemaRequiredPullRequestReviewsDismissalRestrictions struct {
	// The list of app slugs with dismissal access
	Apps []*string `json:"apps,omitempty"`

	// The list of team slugs with dismissal access
	Teams []*string `json:"teams,omitempty"`

	// The list of user logins with dismissal access
	Users []*string `json:"users,omitempty"`
}

// PutContentSchemaRequiredStatusChecks - Require status checks to pass before merging. Set to null to disable.
type PutContentSchemaRequiredStatusChecks struct {
	// REQUIRED; Deprecated: The list of status checks to require in order to merge into this branch. If any of these checks have
// recently been set by a particular GitHub App, they will be required to come from that
// app in future for the branch to merge. Use checks instead of contexts for more fine-grained control.
	Contexts []*string `json:"contexts,omitempty"`

	// REQUIRED; Require branches to be up to date before merging.
	Strict *bool `json:"strict,omitempty"`

	// The list of status checks to require in order to merge into this branch.
	Checks []*PutContentSchemaRequiredStatusChecksItem `json:"checks,omitempty"`
}

type PutContentSchemaRequiredStatusChecksItem struct {
	// REQUIRED; The name of the required check
	Context *string `json:"context,omitempty"`

	// The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has
// recently provided this check, or any app if it was not set by a GitHub App. Pass
// -1 to explicitly allow any app to set the status.
	AppID *int32 `json:"app_id,omitempty"`
}

// PutContentSchemaRestrictions - Restrict who can push to the protected branch. User, app, and team restrictions are only
// available for organization-owned repositories. Set to null to disable.
type PutContentSchemaRestrictions struct {
	// REQUIRED; The list of team slugs with push access
	Teams []*string `json:"teams,omitempty"`

	// REQUIRED; The list of user logins with push access
	Users []*string `json:"users,omitempty"`

	// The list of app slugs with push access
	Apps []*string `json:"apps,omitempty"`
}

type PutContentSchemaReviewersItem struct {
	// The id of the user or team who can review the deployment
	ID *int32 `json:"id,omitempty"`

	// The type of reviewer.
	Type *DeploymentReviewerType `json:"type,omitempty"`
}

type PutContentSchemaSource struct {
}

// RateLimit - Rate Limit
type RateLimit struct {
	// REQUIRED
	Limit *int32 `json:"limit,omitempty"`

	// REQUIRED
	Remaining *int32 `json:"remaining,omitempty"`

	// REQUIRED
	Reset *int32 `json:"reset,omitempty"`

	// REQUIRED
	Used *int32 `json:"used,omitempty"`
}

// RateLimitOverview - Rate Limit Overview
type RateLimitOverview struct {
	// REQUIRED; Rate Limit
	Rate *RateLimit `json:"rate,omitempty"`

	// REQUIRED
	Resources *RateLimitOverviewResources `json:"resources,omitempty"`
}

type RateLimitOverviewResources struct {
	// REQUIRED; Rate Limit
	Core *RateLimit `json:"core,omitempty"`

	// REQUIRED; Rate Limit
	Search *RateLimit `json:"search,omitempty"`

	// Rate Limit
	ActionsRunnerRegistration *RateLimit `json:"actions_runner_registration,omitempty"`

	// Rate Limit
	CodeScanningUpload *RateLimit `json:"code_scanning_upload,omitempty"`

	// Rate Limit
	DependencySnapshots *RateLimit `json:"dependency_snapshots,omitempty"`

	// Rate Limit
	Graphql *RateLimit `json:"graphql,omitempty"`

	// Rate Limit
	IntegrationManifest *RateLimit `json:"integration_manifest,omitempty"`

	// Rate Limit
	Scim *RateLimit `json:"scim,omitempty"`

	// Rate Limit
	SourceImport *RateLimit `json:"source_import,omitempty"`
}

// Reactions to conversations provide a way to help people express their feelings more simply and effectively.
type Reaction struct {
	// REQUIRED; The reaction to use
	Content *ReactionContent `json:"content,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
}

// ReactionRollup - Reaction Rollup
type ReactionRollup struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// ReferencedWorkflow - A workflow referenced/reused by the initial caller workflow
type ReferencedWorkflow struct {
	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
	Ref *string `json:"ref,omitempty"`
}

// ReferrerTraffic - Referrer Traffic
type ReferrerTraffic struct {
	// REQUIRED
	Count *int32 `json:"count,omitempty"`

	// REQUIRED
	Referrer *string `json:"referrer,omitempty"`

	// REQUIRED
	Uniques *int32 `json:"uniques,omitempty"`
}

// Release - A release.
type Release struct {
	// REQUIRED
	Assets []*ReleaseAsset `json:"assets,omitempty"`

	// REQUIRED
	AssetsURL *string `json:"assets_url,omitempty"`

	// REQUIRED; A GitHub user.
	Author *SimpleUser `json:"author,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; true to create a draft (unpublished) release, false to create a published one.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether to identify the release as a prerelease or a full release.
	Prerelease *bool `json:"prerelease,omitempty"`

	// REQUIRED
	PublishedAt *time.Time `json:"published_at,omitempty"`

	// REQUIRED; The name of the tag.
	TagName *string `json:"tag_name,omitempty"`

	// REQUIRED
	TarballURL *string `json:"tarball_url,omitempty"`

	// REQUIRED; Specifies the commitish value that determines where the Git tag is created from.
	TargetCommitish *string `json:"target_commitish,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UploadURL *string `json:"upload_url,omitempty"`

	// REQUIRED
	ZipballURL *string `json:"zipball_url,omitempty"`
	Body *string `json:"body,omitempty"`
	BodyHTML *string `json:"body_html,omitempty"`
	BodyText *string `json:"body_text,omitempty"`

	// The URL of the release discussion.
	DiscussionURL *string `json:"discussion_url,omitempty"`
	MentionsCount *int32 `json:"mentions_count,omitempty"`

	// Reaction Rollup
	Reactions *ReactionRollup `json:"reactions,omitempty"`
}

// Release0 - The release [https://docs.github.com/rest/reference/repos/#get-a-release] object.
type Release0 struct {
	// REQUIRED
	Assets []*WebhookReleasePublishedRelease0AssetsItem `json:"assets,omitempty"`

	// REQUIRED
	AssetsURL *string `json:"assets_url,omitempty"`

	// REQUIRED; User
	Author *WebhookReleasePublishedRelease0Author `json:"author,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; Whether the release is a draft or published
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether the release is identified as a prerelease or a full release.
	Prerelease *bool `json:"prerelease,omitempty"`

	// REQUIRED
	PublishedAt *time.Time `json:"published_at,omitempty"`

	// REQUIRED; The name of the tag.
	TagName *string `json:"tag_name,omitempty"`

	// REQUIRED
	TarballURL *string `json:"tarball_url,omitempty"`

	// REQUIRED; Specifies the commitish value that determines where the Git tag is created from.
	TargetCommitish *string `json:"target_commitish,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UploadURL *string `json:"upload_url,omitempty"`

	// REQUIRED
	ZipballURL *string `json:"zipball_url,omitempty"`
	DiscussionURL *string `json:"discussion_url,omitempty"`

	// Reactions
	Reactions *WebhookReleasePublishedRelease0Reactions `json:"reactions,omitempty"`
}

// Release1 - The release [https://docs.github.com/rest/reference/repos/#get-a-release] object.
type Release1 struct {
	// REQUIRED
	Assets []*WebhookReleaseUnpublishedRelease0AssetsItem `json:"assets,omitempty"`

	// REQUIRED
	AssetsURL *string `json:"assets_url,omitempty"`

	// REQUIRED; User
	Author *WebhookReleaseUnpublishedRelease0Author `json:"author,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; Whether the release is a draft or published
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether the release is identified as a prerelease or a full release.
	Prerelease *bool `json:"prerelease,omitempty"`

	// REQUIRED
	PublishedAt *time.Time `json:"published_at,omitempty"`

	// REQUIRED; The name of the tag.
	TagName *string `json:"tag_name,omitempty"`

	// REQUIRED
	TarballURL *string `json:"tarball_url,omitempty"`

	// REQUIRED; Specifies the commitish value that determines where the Git tag is created from.
	TargetCommitish *string `json:"target_commitish,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UploadURL *string `json:"upload_url,omitempty"`

	// REQUIRED
	ZipballURL *string `json:"zipball_url,omitempty"`
	DiscussionURL *string `json:"discussion_url,omitempty"`

	// Reactions
	Reactions *WebhookReleaseUnpublishedRelease0Reactions `json:"reactions,omitempty"`
}

// ReleaseAsset - Data related to a release.
type ReleaseAsset struct {
	// REQUIRED
	BrowserDownloadURL *string `json:"browser_download_url,omitempty"`

	// REQUIRED
	ContentType *string `json:"content_type,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DownloadCount *int32 `json:"download_count,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED; The file name of the asset.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED; State of the release asset.
	State *ReleaseAssetState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; A GitHub user.
	Uploader *NullableSimpleUser `json:"uploader,omitempty"`
}

// ReleaseAutoGenerated - The release [https://docs.github.com/rest/reference/repos/#get-a-release] object.
type ReleaseAutoGenerated struct {
	// REQUIRED
	Assets []*WebhookReleasePrereleasedRelease0AssetsItem `json:"assets,omitempty"`

	// REQUIRED
	AssetsURL *string `json:"assets_url,omitempty"`

	// REQUIRED; User
	Author *WebhookReleasePrereleasedRelease0Author `json:"author,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; Whether the release is a draft or published
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether the release is identified as a prerelease or a full release.
	Prerelease *bool `json:"prerelease,omitempty"`

	// REQUIRED
	PublishedAt *time.Time `json:"published_at,omitempty"`

	// REQUIRED; The name of the tag.
	TagName *string `json:"tag_name,omitempty"`

	// REQUIRED
	TarballURL *string `json:"tarball_url,omitempty"`

	// REQUIRED; Specifies the commitish value that determines where the Git tag is created from.
	TargetCommitish *string `json:"target_commitish,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UploadURL *string `json:"upload_url,omitempty"`

	// REQUIRED
	ZipballURL *string `json:"zipball_url,omitempty"`
	DiscussionURL *string `json:"discussion_url,omitempty"`

	// Reactions
	Reactions *WebhookReleasePrereleasedRelease0Reactions `json:"reactions,omitempty"`
}

// ReleaseNotesContent - Generated name and body describing a release
type ReleaseNotesContent struct {
	// REQUIRED; The generated body describing the contents of the release supporting markdown formatting
	Body *string `json:"body,omitempty"`

	// REQUIRED; The generated name of the release
	Name *string `json:"name,omitempty"`
}

// RemovedFromProjectIssueEvent - Removed from Project Issue Event
type RemovedFromProjectIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	ProjectCard *RemovedFromProjectIssueEventProjectCard `json:"project_card,omitempty"`
}

type RemovedFromProjectIssueEventProjectCard struct {
	// REQUIRED
	ColumnName *string `json:"column_name,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	ProjectID *int32 `json:"project_id,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	PreviousColumnName *string `json:"previous_column_name,omitempty"`
}

// RenamedIssueEvent - Renamed Issue Event
type RenamedIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	Rename *RenamedIssueEventRename `json:"rename,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type RenamedIssueEventRename struct {
	// REQUIRED
	From *string `json:"from,omitempty"`

	// REQUIRED
	To *string `json:"to,omitempty"`
}

// RepoCodespacesSecret - Set repository secrets for GitHub Codespaces.
type RepoCodespacesSecret struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The name of the secret.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// RepoRequiredWorkflow - A GitHub Actions required workflow
type RepoRequiredWorkflow struct {
	// REQUIRED
	BadgeURL *string `json:"badge_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED; Minimal Repository
	SourceRepository *MinimalRepository `json:"source_repository,omitempty"`

	// REQUIRED
	State *RepoRequiredWorkflowState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// RepoSearchResultItem - Repo Search Result Item
type RepoSearchResultItem struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED; Returns whether or not this repository disabled.
	Disabled *bool `json:"disabled,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License Simple
	License *NullableLicenseSimple `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; A GitHub user.
	Owner *NullableSimpleUser `json:"owner,omitempty"`

	// REQUIRED
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *time.Time `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Score *float32 `json:"score,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	HasDiscussions *bool `json:"has_discussions,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Permissions *RepoSearchResultItemPermissions `json:"permissions,omitempty"`
	TempCloneToken *string `json:"temp_clone_token,omitempty"`

	// Search Result Text Matches
	TextMatches []*SearchResultTextMatchesItem `json:"text_matches,omitempty"`
	Topics []*string `json:"topics,omitempty"`

	// The repository visibility: public, private, or internal.
	Visibility *string `json:"visibility,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type RepoSearchResultItemPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

// Repository - A repository on GitHub.
type Repository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED; Returns whether or not this repository disabled.
	Disabled *bool `json:"disabled,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License Simple
	License *NullableLicenseSimple `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; A GitHub user.
	Owner *SimpleUser `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *time.Time `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED; The size of the repository. Size is calculated hourly. When a repository is initially created, the size is 0.
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow forking this repo
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`

	// Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required
// to be up to date before merging.
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether anonymous git access is enabled for this repository
	AnonymousAccessEnabled *bool `json:"anonymous_access_enabled,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *RepositoryMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *RepositoryMergeCommitTitle `json:"merge_commit_title,omitempty"`
	NetworkCount *int32 `json:"network_count,omitempty"`

	// A GitHub user.
	Organization *NullableSimpleUser `json:"organization,omitempty"`
	Permissions *RepositoryPermissions `json:"permissions,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *RepositorySquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *RepositorySquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	StarredAt *string `json:"starred_at,omitempty"`
	SubscribersCount *int32 `json:"subscribers_count,omitempty"`
	TempCloneToken *string `json:"temp_clone_token,omitempty"`
	TemplateRepository *RepositoryTemplateRepository `json:"template_repository,omitempty"`
	Topics []*string `json:"topics,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// The repository visibility: public, private, or internal.
	Visibility *string `json:"visibility,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

// RepositoryAutoGenerated - A git repository
type RepositoryAutoGenerated struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookForkForkee0CreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookForkForkee0License `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookForkForkee0Owner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookForkForkee0PushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookForkForkee0Visibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookForkForkee0Permissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

// RepositoryCollaboratorPermission - Repository Collaborator Permission
type RepositoryCollaboratorPermission struct {
	// REQUIRED
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	RoleName *string `json:"role_name,omitempty"`

	// REQUIRED; Collaborator
	User *NullableCollaborator `json:"user,omitempty"`
}

// RepositoryInvitation - Repository invitations let you manage who you collaborate with.
type RepositoryInvitation struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the repository invitation.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; A GitHub user.
	Invitee *NullableSimpleUser `json:"invitee,omitempty"`

	// REQUIRED; A GitHub user.
	Inviter *NullableSimpleUser `json:"inviter,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The permission associated with the invitation.
	Permissions *RepositoryInvitationPermissions `json:"permissions,omitempty"`

	// REQUIRED; Minimal Repository
	Repository *MinimalRepository `json:"repository,omitempty"`

	// REQUIRED; URL for the repository invitation
	URL *string `json:"url,omitempty"`

	// Whether or not the invitation has expired
	Expired *bool `json:"expired,omitempty"`
}

type RepositoryPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

// RepositorySubscription - Repository invitations let you manage who you collaborate with.
type RepositorySubscription struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; Determines if all notifications should be blocked from this repository.
	Ignored *bool `json:"ignored,omitempty"`

	// REQUIRED
	Reason *string `json:"reason,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Determines if notifications should be received from this repository.
	Subscribed *bool `json:"subscribed,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type RepositoryTemplateRepository struct {
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`
	ArchiveURL *string `json:"archive_url,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CloneURL *string `json:"clone_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	ForksCount *int32 `json:"forks_count,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HasDownloads *bool `json:"has_downloads,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPages *bool `json:"has_pages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Language *string `json:"language,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *RepositoryTemplateRepositoryMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *RepositoryTemplateRepositoryMergeCommitTitle `json:"merge_commit_title,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	MirrorURL *string `json:"mirror_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NetworkCount *int32 `json:"network_count,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`
	Owner *RepositoryTemplateRepositoryOwner `json:"owner,omitempty"`
	Permissions *RepositoryTemplateRepositoryPermissions `json:"permissions,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	PushedAt *string `json:"pushed_at,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	SSHURL *string `json:"ssh_url,omitempty"`
	Size *int32 `json:"size,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *RepositoryTemplateRepositorySquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *RepositoryTemplateRepositorySquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	StargazersCount *int32 `json:"stargazers_count,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersCount *int32 `json:"subscribers_count,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	SvnURL *string `json:"svn_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	TempCloneToken *string `json:"temp_clone_token,omitempty"`
	Topics []*string `json:"topics,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	WatchersCount *int32 `json:"watchers_count,omitempty"`
}

type RepositoryTemplateRepositoryOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type RepositoryTemplateRepositoryPermissions struct {
	Admin *bool `json:"admin,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Pull *bool `json:"pull,omitempty"`
	Push *bool `json:"push,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

// RepositoryVulnerabilityAlert - The security alert of the vulnerable dependency.
type RepositoryVulnerabilityAlert struct {
	// REQUIRED
	AffectedPackageName *string `json:"affected_package_name,omitempty"`

	// REQUIRED
	AffectedRange *string `json:"affected_range,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	ExternalIdentifier *string `json:"external_identifier,omitempty"`

	// REQUIRED
	ExternalReference *string `json:"external_reference,omitempty"`

	// REQUIRED
	GhsaID *string `json:"ghsa_id,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	Severity *string `json:"severity,omitempty"`

	// REQUIRED
	State *WebhookRepositoryVulnerabilityAlertCreateAlert0State `json:"state,omitempty"`
	DismissReason *string `json:"dismiss_reason,omitempty"`
	DismissedAt *string `json:"dismissed_at,omitempty"`

	// User
	Dismisser *WebhookRepositoryVulnerabilityAlertCreateAlert0Dismisser `json:"dismisser,omitempty"`
	FixReason *string `json:"fix_reason,omitempty"`
	FixedAt *time.Time `json:"fixed_at,omitempty"`
	FixedIn *string `json:"fixed_in,omitempty"`
}

// RepositoryVulnerabilityAlert0 - The security alert of the vulnerable dependency.
type RepositoryVulnerabilityAlert0 struct {
	// REQUIRED
	AffectedPackageName *string `json:"affected_package_name,omitempty"`

	// REQUIRED
	AffectedRange *string `json:"affected_range,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	ExternalIdentifier *string `json:"external_identifier,omitempty"`

	// REQUIRED
	ExternalReference *string `json:"external_reference,omitempty"`

	// REQUIRED
	GhsaID *string `json:"ghsa_id,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	Severity *string `json:"severity,omitempty"`

	// REQUIRED
	State *WebhookRepositoryVulnerabilityAlertDismissAlert0State `json:"state,omitempty"`
	DismissComment *string `json:"dismiss_comment,omitempty"`
	DismissReason *string `json:"dismiss_reason,omitempty"`
	DismissedAt *string `json:"dismissed_at,omitempty"`

	// User
	Dismisser *WebhookRepositoryVulnerabilityAlertDismissAlert0Dismisser `json:"dismisser,omitempty"`
	FixReason *string `json:"fix_reason,omitempty"`
	FixedAt *time.Time `json:"fixed_at,omitempty"`
	FixedIn *string `json:"fixed_in,omitempty"`
}

// RepositoryVulnerabilityAlert1 - The security alert of the vulnerable dependency.
type RepositoryVulnerabilityAlert1 struct {
	// REQUIRED
	AffectedPackageName *string `json:"affected_package_name,omitempty"`

	// REQUIRED
	AffectedRange *string `json:"affected_range,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	ExternalIdentifier *string `json:"external_identifier,omitempty"`

	// REQUIRED
	ExternalReference *string `json:"external_reference,omitempty"`

	// REQUIRED
	GhsaID *string `json:"ghsa_id,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	Severity *string `json:"severity,omitempty"`

	// REQUIRED
	State *WebhookRepositoryVulnerabilityAlertReopenAlert0State `json:"state,omitempty"`
	DismissReason *string `json:"dismiss_reason,omitempty"`
	DismissedAt *string `json:"dismissed_at,omitempty"`

	// User
	Dismisser *WebhookRepositoryVulnerabilityAlertReopenAlert0Dismisser `json:"dismisser,omitempty"`
	FixReason *string `json:"fix_reason,omitempty"`
	FixedAt *time.Time `json:"fixed_at,omitempty"`
	FixedIn *string `json:"fixed_in,omitempty"`
}

// RepositoryVulnerabilityAlert2 - The security alert of the vulnerable dependency.
type RepositoryVulnerabilityAlert2 struct {
	// REQUIRED
	AffectedPackageName *string `json:"affected_package_name,omitempty"`

	// REQUIRED
	AffectedRange *string `json:"affected_range,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	ExternalIdentifier *string `json:"external_identifier,omitempty"`

	// REQUIRED
	ExternalReference *string `json:"external_reference,omitempty"`

	// REQUIRED
	GhsaID *string `json:"ghsa_id,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	Severity *string `json:"severity,omitempty"`

	// REQUIRED
	State *WebhookRepositoryVulnerabilityAlertResolveAlert0State `json:"state,omitempty"`
	DismissReason *string `json:"dismiss_reason,omitempty"`
	DismissedAt *string `json:"dismissed_at,omitempty"`

	// User
	Dismisser *WebhookRepositoryVulnerabilityAlertResolveAlert0Dismisser `json:"dismisser,omitempty"`
	FixReason *string `json:"fix_reason,omitempty"`
	FixedAt *time.Time `json:"fixed_at,omitempty"`
	FixedIn *string `json:"fixed_in,omitempty"`
}

type RequiredWorkflow struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; Unique identifier for a required workflow
	ID *float32 `json:"id,omitempty"`

	// REQUIRED; Name present in the workflow file
	Name *string `json:"name,omitempty"`

	// REQUIRED; Path of the workflow file
	Path *string `json:"path,omitempty"`

	// REQUIRED; Ref at which the workflow file will be selected
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Minimal Repository
	Repository *MinimalRepository `json:"repository,omitempty"`

	// REQUIRED; Scope of the required workflow
	Scope *RequiredWorkflowScope `json:"scope,omitempty"`

	// REQUIRED; State of the required workflow
	State *RequiredWorkflowState `json:"state,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	SelectedRepositoriesURL *string `json:"selected_repositories_url,omitempty"`
}

// ReviewComment - Legacy Review Comment
type ReviewComment struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffHunk *string `json:"diff_hunk,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Links *ReviewCommentLinks `json:"_links,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OriginalCommitID *string `json:"original_commit_id,omitempty"`

	// REQUIRED
	OriginalPosition *int32 `json:"original_position,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	Position *int32 `json:"position,omitempty"`

	// REQUIRED
	PullRequestReviewID *int32 `json:"pull_request_review_id,omitempty"`

	// REQUIRED
	PullRequestURL *string `json:"pull_request_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
	BodyHTML *string `json:"body_html,omitempty"`
	BodyText *string `json:"body_text,omitempty"`
	InReplyToID *int32 `json:"in_reply_to_id,omitempty"`

	// The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	Line *int32 `json:"line,omitempty"`

	// The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
	OriginalLine *int32 `json:"original_line,omitempty"`

	// The original first line of the range for a multi-line comment.
	OriginalStartLine *int32 `json:"original_start_line,omitempty"`

	// Reaction Rollup
	Reactions *ReactionRollup `json:"reactions,omitempty"`

	// The side of the first line of the range for a multi-line comment.
	Side *ReviewCommentSide `json:"side,omitempty"`

	// The first line of the range for a multi-line comment.
	StartLine *int32 `json:"start_line,omitempty"`

	// The side of the first line of the range for a multi-line comment.
	StartSide *ReviewCommentStartSide `json:"start_side,omitempty"`
}

type ReviewCommentLinks struct {
	// REQUIRED; Hypermedia Link
	HTML *Link `json:"html,omitempty"`

	// REQUIRED; Hypermedia Link
	PullRequest *Link `json:"pull_request,omitempty"`

	// REQUIRED; Hypermedia Link
	Self *Link `json:"self,omitempty"`
}

// ReviewDismissedIssueEvent - Review Dismissed Issue Event
type ReviewDismissedIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	DismissedReview *ReviewDismissedIssueEventDismissedReview `json:"dismissed_review,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type ReviewDismissedIssueEventDismissedReview struct {
	// REQUIRED
	DismissalMessage *string `json:"dismissal_message,omitempty"`

	// REQUIRED
	ReviewID *int32 `json:"review_id,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`
	DismissalCommitID *string `json:"dismissal_commit_id,omitempty"`
}

// ReviewRequestRemovedIssueEvent - Review Request Removed Issue Event
type ReviewRequestRemovedIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED; A GitHub user.
	ReviewRequester *SimpleUser `json:"review_requester,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// A GitHub user.
	RequestedReviewer *SimpleUser `json:"requested_reviewer,omitempty"`

	// Groups of organization members that gives permissions on specified repositories.
	RequestedTeam *Team `json:"requested_team,omitempty"`
}

// ReviewRequestedIssueEvent - Review Requested Issue Event
type ReviewRequestedIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED; A GitHub user.
	ReviewRequester *SimpleUser `json:"review_requester,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// A GitHub user.
	RequestedReviewer *SimpleUser `json:"requested_reviewer,omitempty"`

	// Groups of organization members that gives permissions on specified repositories.
	RequestedTeam *Team `json:"requested_team,omitempty"`
}

type Root struct {
	// REQUIRED
	AuthorizationsURL *string `json:"authorizations_url,omitempty"`

	// REQUIRED
	CodeSearchURL *string `json:"code_search_url,omitempty"`

	// REQUIRED
	CommitSearchURL *string `json:"commit_search_url,omitempty"`

	// REQUIRED
	CurrentUserAuthorizationsHTMLURL *string `json:"current_user_authorizations_html_url,omitempty"`

	// REQUIRED
	CurrentUserRepositoriesURL *string `json:"current_user_repositories_url,omitempty"`

	// REQUIRED
	CurrentUserURL *string `json:"current_user_url,omitempty"`

	// REQUIRED
	EmailsURL *string `json:"emails_url,omitempty"`

	// REQUIRED
	EmojisURL *string `json:"emojis_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	FeedsURL *string `json:"feeds_url,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	HubURL *string `json:"hub_url,omitempty"`

	// REQUIRED
	IssueSearchURL *string `json:"issue_search_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelSearchURL *string `json:"label_search_url,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OrganizationRepositoriesURL *string `json:"organization_repositories_url,omitempty"`

	// REQUIRED
	OrganizationTeamsURL *string `json:"organization_teams_url,omitempty"`

	// REQUIRED
	OrganizationURL *string `json:"organization_url,omitempty"`

	// REQUIRED
	PublicGistsURL *string `json:"public_gists_url,omitempty"`

	// REQUIRED
	RateLimitURL *string `json:"rate_limit_url,omitempty"`

	// REQUIRED
	RepositorySearchURL *string `json:"repository_search_url,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	StarredGistsURL *string `json:"starred_gists_url,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	UserOrganizationsURL *string `json:"user_organizations_url,omitempty"`

	// REQUIRED
	UserRepositoriesURL *string `json:"user_repositories_url,omitempty"`

	// REQUIRED
	UserSearchURL *string `json:"user_search_url,omitempty"`

	// REQUIRED
	UserURL *string `json:"user_url,omitempty"`
	TopicSearchURL *string `json:"topic_search_url,omitempty"`
}

// Runner - A self hosted runner
type Runner struct {
	// REQUIRED
	Busy *bool `json:"busy,omitempty"`

	// REQUIRED; The id of the runner.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Labels []*RunnerLabel `json:"labels,omitempty"`

	// REQUIRED; The name of the runner.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The Operating System of the runner.
	OS *string `json:"os,omitempty"`

	// REQUIRED; The status of the runner.
	Status *string `json:"status,omitempty"`
}

// RunnerApplication - Runner Application
type RunnerApplication struct {
	// REQUIRED
	Architecture *string `json:"architecture,omitempty"`

	// REQUIRED
	DownloadURL *string `json:"download_url,omitempty"`

	// REQUIRED
	Filename *string `json:"filename,omitempty"`

	// REQUIRED
	OS *string `json:"os,omitempty"`
	SHA256Checksum *string `json:"sha256_checksum,omitempty"`

	// A short lived bearer token used to download the runner, if needed.
	TempDownloadToken *string `json:"temp_download_token,omitempty"`
}

// RunnerLabel - A label for a self hosted runner
type RunnerLabel struct {
	// REQUIRED; Name of the label.
	Name *string `json:"name,omitempty"`

	// Unique identifier of the label.
	ID *int32 `json:"id,omitempty"`

	// The type of label. Read-only labels are applied automatically when the runner is configured.
	Type *RunnerLabelType `json:"type,omitempty"`
}

// SSHSigningKey - A public SSH key used to sign Git commits
type SSHSigningKey struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`
}

// ScimError - Scim Error
type ScimError struct {
	Detail *string `json:"detail,omitempty"`
	DocumentationURL *string `json:"documentation_url,omitempty"`
	Message *string `json:"message,omitempty"`
	Schemas []*string `json:"schemas,omitempty"`
	ScimType *string `json:"scimType,omitempty"`
	Status *int32 `json:"status,omitempty"`
}

type SearchResultTextMatchesItem struct {
	Fragment *string `json:"fragment,omitempty"`
	Matches []*SearchResultTextMatchesPropertiesItemsItem `json:"matches,omitempty"`
	ObjectType *string `json:"object_type,omitempty"`
	ObjectURL *string `json:"object_url,omitempty"`
	Property *string `json:"property,omitempty"`
}

type SearchResultTextMatchesPropertiesItemsItem struct {
	Indices []*int32 `json:"indices,omitempty"`
	Text *string `json:"text,omitempty"`
}

type SecretScanningAlert struct {
	// The REST API URL of the code locations for this alert.
	LocationsURL *string `json:"locations_url,omitempty"`

	// Whether push protection was bypassed for the detected secret.
	PushProtectionBypassed *bool `json:"push_protection_bypassed,omitempty"`

	// The time that push protection was bypassed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	PushProtectionBypassedAt *time.Time `json:"push_protection_bypassed_at,omitempty"`

	// A GitHub user.
	PushProtectionBypassedBy *NullableSimpleUser `json:"push_protection_bypassed_by,omitempty"`

	// Required when the state is resolved. The reason for resolving the alert.
	Resolution *SecretScanningAlertResolution `json:"resolution,omitempty"`

	// An optional comment to resolve an alert.
	ResolutionComment *string `json:"resolution_comment,omitempty"`

	// The time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	ResolvedAt *time.Time `json:"resolved_at,omitempty"`

	// A GitHub user.
	ResolvedBy *NullableSimpleUser `json:"resolved_by,omitempty"`

	// The secret that was detected.
	Secret *string `json:"secret,omitempty"`

	// The type of secret that secret scanning detected.
	SecretType *string `json:"secret_type,omitempty"`

	// User-friendly name for the detected secret, matching the secret_type. For a list of built-in patterns, see "Secret scanning
// patterns
// [https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security]."
	SecretTypeDisplayName *string `json:"secret_type_display_name,omitempty"`

	// Sets the state of the secret scanning alert. You must provide resolution when you set the state to resolved.
	State *SecretScanningAlertState `json:"state,omitempty"`

	// READ-ONLY; The time that the alert was created in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty" azure:"ro"`

	// READ-ONLY; The GitHub URL of the alert resource.
	HTMLURL *string `json:"html_url,omitempty" azure:"ro"`

	// READ-ONLY; The security alert number.
	Number *int32 `json:"number,omitempty" azure:"ro"`

	// READ-ONLY; The REST API URL of the alert resource.
	URL *string `json:"url,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was last updated in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	UpdatedAt *time.Time `json:"updated_at,omitempty" azure:"ro"`
}

type SecretScanningLocation struct {
	// REQUIRED
	Details *SecretScanningLocationDetails `json:"details,omitempty"`

	// REQUIRED; The location type. Because secrets may be found in different types of resources (ie. code, comments, issues),
// this field identifies the type of resource where the secret was found.
	Type *SecretScanningLocationType `json:"type,omitempty"`
}

// SecretScanningLocationCommit - Represents a 'commit' secret scanning location type. This location type shows that a secret
// was detected inside a commit to a repository.
type SecretScanningLocationCommit struct {
	// REQUIRED; SHA-1 hash ID of the associated blob
	BlobSHA *string `json:"blob_sha,omitempty"`

	// REQUIRED; The API URL to get the associated blob resource
	BlobURL *string `json:"blob_url,omitempty"`

	// REQUIRED; SHA-1 hash ID of the associated commit
	CommitSHA *string `json:"commit_sha,omitempty"`

	// REQUIRED; The API URL to get the associated commit resource
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED; The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
	EndColumn *float32 `json:"end_column,omitempty"`

	// REQUIRED; Line number at which the secret ends in the file
	EndLine *float32 `json:"end_line,omitempty"`

	// REQUIRED; The file path in the repository
	Path *string `json:"path,omitempty"`

	// REQUIRED; The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
	StartColumn *float32 `json:"start_column,omitempty"`

	// REQUIRED; Line number at which the secret starts in the file
	StartLine *float32 `json:"start_line,omitempty"`
}

type SecretScanningLocationDetails struct {
}

// SecretScanningLocationIssueBody - Represents an 'issue_body' secret scanning location type. This location type shows that
// a secret was detected in the body of an issue.
type SecretScanningLocationIssueBody struct {
	// REQUIRED; The API URL to get the issue where the secret was detected.
	IssueBodyURL *string `json:"issue_body_url,omitempty"`
}

// SecretScanningLocationIssueComment - Represents an 'issue_comment' secret scanning location type. This location type shows
// that a secret was detected in a comment on an issue.
type SecretScanningLocationIssueComment struct {
	// REQUIRED; The API URL to get the issue comment where the secret was detected.
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
}

// SecretScanningLocationIssueTitle - Represents an 'issue_title' secret scanning location type. This location type shows
// that a secret was detected in the title of an issue.
type SecretScanningLocationIssueTitle struct {
	// REQUIRED; The API URL to get the issue where the secret was detected.
	IssueTitleURL *string `json:"issue_title_url,omitempty"`
}

type SecurityAndAnalysis struct {
	AdvancedSecurity *SecurityAndAnalysisAdvancedSecurity `json:"advanced_security,omitempty"`
	SecretScanning *SecurityAndAnalysisSecretScanning `json:"secret_scanning,omitempty"`
	SecretScanningPushProtection *SecurityAndAnalysisSecretScanningPushProtection `json:"secret_scanning_push_protection,omitempty"`
}

type SecurityAndAnalysisAdvancedSecurity struct {
	Status *SecurityAndAnalysisAdvancedSecurityStatus `json:"status,omitempty"`
}

type SecurityAndAnalysisSecretScanning struct {
	Status *SecurityAndAnalysisSecretScanningStatus `json:"status,omitempty"`
}

type SecurityAndAnalysisSecretScanningPushProtection struct {
	Status *SecurityAndAnalysisSecretScanningPushProtectionStatus `json:"status,omitempty"`
}

type SelectedActions struct {
	// Whether GitHub-owned actions are allowed. For example, this includes the actions in the actions organization.
	GithubOwnedAllowed *bool `json:"github_owned_allowed,omitempty"`

	// Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and
// SHAs are allowed. For example, monalisa/octocat@*, monalisa/octocat@v2,
// monalisa/*.
// Note: The patterns_allowed setting only applies to public repositories.
	PatternsAllowed []*string `json:"patterns_allowed,omitempty"`

	// Whether actions from GitHub Marketplace verified creators are allowed. Set to true to allow all actions by GitHub Marketplace
// verified creators.
	VerifiedAllowed *bool `json:"verified_allowed,omitempty"`
}

// ShortBlob - Short Blob
type ShortBlob struct {
	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// ShortBranch - Short Branch
type ShortBranch struct {
	// REQUIRED
	Commit *ShortBranchCommit `json:"commit,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Protected *bool `json:"protected,omitempty"`

	// Branch Protection
	Protection *BranchProtection `json:"protection,omitempty"`
	ProtectionURL *string `json:"protection_url,omitempty"`
}

type ShortBranchCommit struct {
	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// SimpleCheckSuite - A suite of checks performed on the code of a given code change
type SimpleCheckSuite struct {
	After *string `json:"after,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	App *Integration `json:"app,omitempty"`
	Before *string `json:"before,omitempty"`
	Conclusion *SimpleCheckSuiteConclusion `json:"conclusion,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	HeadBranch *string `json:"head_branch,omitempty"`

	// The SHA of the head commit that is being checked.
	HeadSHA *string `json:"head_sha,omitempty"`
	ID *int32 `json:"id,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	PullRequests []*PullRequestMinimal `json:"pull_requests,omitempty"`

	// Minimal Repository
	Repository *MinimalRepository `json:"repository,omitempty"`
	Status *SimpleCheckSuiteStatus `json:"status,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// SimpleCommit - A commit.
type SimpleCommit struct {
	// REQUIRED
	Author *SimpleCommitAuthor `json:"author,omitempty"`

	// REQUIRED
	Committer *SimpleCommitCommitter `json:"committer,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// REQUIRED
	TreeID *string `json:"tree_id,omitempty"`
}

type SimpleCommitAuthor struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`
}

type SimpleCommitCommitter struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`
}

// SimpleCommitStatus - Simple Commit Status
type SimpleCommitStatus struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	Context *string `json:"context,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	TargetURL *string `json:"target_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Required *bool `json:"required,omitempty"`
}

// SimpleInstallation - The GitHub App installation. This property is included when the event is configured for and sent to
// a GitHub App.
type SimpleInstallation struct {
	// REQUIRED; The ID of the installation.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The global node ID of the installation.
	NodeID *string `json:"node_id,omitempty"`
}

// SimpleRepository - A GitHub repository.
type SimpleRepository struct {
	// REQUIRED; A template for the API URL to download the repository as an archive.
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; A template for the API URL to list the available assignees for issues in the repository.
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED; A template for the API URL to create or retrieve a raw Git blob in the repository.
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED; A template for the API URL to get information about branches in the repository.
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED; A template for the API URL to get information about collaborators of the repository.
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED; A template for the API URL to get information about comments on the repository.
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED; A template for the API URL to get information about commits on the repository.
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED; A template for the API URL to compare two commits or refs.
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED; A template for the API URL to get the contents of the repository.
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED; A template for the API URL to list the contributors to the repository.
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED; The API URL to list the deployments of the repository.
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED; The repository description.
	Description *string `json:"description,omitempty"`

	// REQUIRED; The API URL to list the downloads on the repository.
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED; The API URL to list the events of the repository.
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED; Whether the repository is a fork.
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED; The API URL to list the forks of the repository.
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED; The full, globally unique, name of the repository.
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED; A template for the API URL to get information about Git commits of the repository.
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED; A template for the API URL to get information about Git refs of the repository.
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED; A template for the API URL to get information about Git tags of the repository.
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED; The URL to view the repository on GitHub.com.
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The API URL to list the hooks on the repository.
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; A unique identifier of the repository.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; A template for the API URL to get information about issue comments on the repository.
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED; A template for the API URL to get information about issue events on the repository.
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED; A template for the API URL to get information about issues on the repository.
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED; A template for the API URL to get information about deploy keys on the repository.
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED; A template for the API URL to get information about labels of the repository.
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; The API URL to get information about the languages of the repository.
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; The API URL to merge branches in the repository.
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED; A template for the API URL to get information about milestones of the repository.
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The GraphQL identifier of the repository.
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; A template for the API URL to get information about notifications on the repository.
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED; A GitHub user.
	Owner *SimpleUser `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private.
	Private *bool `json:"private,omitempty"`

	// REQUIRED; A template for the API URL to get information about pull requests on the repository.
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED; A template for the API URL to get information about releases on the repository.
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED; The API URL to list the stargazers on the repository.
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED; A template for the API URL to get information about statuses of a commit.
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The API URL to list the subscribers on the repository.
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED; The API URL to subscribe to notifications for this repository.
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED; The API URL to get information about tags on the repository.
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED; The API URL to list the teams on the repository.
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED; A template for the API URL to create or retrieve a raw Git tree of the repository.
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED; The URL to get more information about the repository from the GitHub API.
	URL *string `json:"url,omitempty"`
}

// SimpleUser - A GitHub user.
type SimpleUser struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
	StarredAt *string `json:"starred_at,omitempty"`
}

// Snapshot - Create a new snapshot of a repository's dependencies.
type Snapshot struct {
	// REQUIRED; A description of the detector used.
	Detector *SnapshotDetector `json:"detector,omitempty"`

	// REQUIRED
	Job *SnapshotJob `json:"job,omitempty"`

	// REQUIRED; The repository branch that triggered this snapshot.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; The time at which the snapshot was scanned.
	Scanned *time.Time `json:"scanned,omitempty"`

	// REQUIRED; The version of the repository snapshot submission.
	Version *int32 `json:"version,omitempty"`

	// A collection of package manifests, which are a collection of related dependencies declared in a file or representing a
// logical group of dependencies.
	Manifests map[string]*Manifest `json:"manifests,omitempty"`

	// User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
	Metadata map[string]*Components1Lecw2JSchemasMetadataAdditionalproperties `json:"metadata,omitempty"`
}

// SnapshotDetector - A description of the detector used.
type SnapshotDetector struct {
	// REQUIRED; The name of the detector used.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The url of the detector used.
	URL *string `json:"url,omitempty"`

	// REQUIRED; The version of the detector used.
	Version *string `json:"version,omitempty"`
}

type SnapshotJob struct {
	// REQUIRED; Correlator provides a key that is used to group snapshots submitted over time. Only the "latest" submitted snapshot
// for a given combination of job.correlator and detector.name will be considered when
// calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection
// runs for a given "wave" of CI workflow you run. If you're using GitHub Actions,
// a good default value for this could be the environment variables GITHUBWORKFLOW and GITHUBJOB concatenated together. If
// you're using a build matrix, then you'll also need to add additional key(s) to
// distinguish between each submission inside a matrix variation.
	Correlator *string `json:"correlator,omitempty"`

	// REQUIRED; The external ID of the job.
	ID *string `json:"id,omitempty"`

	// The url for the job.
	HTMLURL *string `json:"html_url,omitempty"`
}

// Stargazer
type Stargazer struct {
	// REQUIRED
	StarredAt *time.Time `json:"starred_at,omitempty"`

	// REQUIRED; A GitHub user.
	User *NullableSimpleUser `json:"user,omitempty"`
}

// StarredRepository - Starred Repository
type StarredRepository struct {
	// REQUIRED; A repository on GitHub.
	Repo *Repository `json:"repo,omitempty"`

	// REQUIRED
	StarredAt *time.Time `json:"starred_at,omitempty"`
}

// StateChangeIssueEvent - State Change Issue Event
type StateChangeIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
}

// Status - The status of a commit.
type Status struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	Context *string `json:"context,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED; A GitHub user.
	Creator *NullableSimpleUser `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	TargetURL *string `json:"target_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// StatusCheckPolicy - Status Check Policy
type StatusCheckPolicy struct {
	// REQUIRED
	Checks []*StatusCheckPolicyChecksItem `json:"checks,omitempty"`

	// REQUIRED
	Contexts []*string `json:"contexts,omitempty"`

	// REQUIRED
	ContextsURL *string `json:"contexts_url,omitempty"`

	// REQUIRED
	Strict *bool `json:"strict,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type StatusCheckPolicyChecksItem struct {
	// REQUIRED
	AppID *int32 `json:"app_id,omitempty"`

	// REQUIRED
	Context *string `json:"context,omitempty"`
}

// Tag
type Tag struct {
	// REQUIRED
	Commit *TagCommit `json:"commit,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	TarballURL *string `json:"tarball_url,omitempty"`

	// REQUIRED
	ZipballURL *string `json:"zipball_url,omitempty"`
}

type TagCommit struct {
	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// TagProtection - Tag protection
type TagProtection struct {
	// REQUIRED
	Pattern *string `json:"pattern,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Enabled *bool `json:"enabled,omitempty"`
	ID *int32 `json:"id,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// Team - Groups of organization members that gives permissions on specified repositories.
type Team struct {
	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Groups of organization members that gives permissions on specified repositories.
	Parent *NullableTeamSimple `json:"parent,omitempty"`

	// REQUIRED
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	Permissions *TeamPermissions `json:"permissions,omitempty"`
	Privacy *string `json:"privacy,omitempty"`
}

// Team0 - Groups of organization members that gives permissions on specified repositories.
type Team0 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum1961 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *Components1Iy6Pf6SchemasWebhookPullRequestAutoMergeDisabledPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team1 - Groups of organization members that gives permissions on specified repositories.
type Team1 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum1992 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *Components2UfyedSchemasWebhookPullRequestAutoMergeEnabledPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team10 - Groups of organization members that gives permissions on specified repositories.
type Team10 struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *Components1Xj6672SchemasWebhookPullRequestMilestonedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *Enum2289 `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// Team11 - Groups of organization members that gives permissions on specified repositories.
type Team11 struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *Components1Njs4FmSchemasWebhookPullRequestOpenedPropertiesPullRequestOneof0PropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *Enum2320 `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// Team12 - Groups of organization members that gives permissions on specified repositories.
type Team12 struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *Components1Rl2SdjSchemasWebhookPullRequestReadyForReviewPropertiesPullRequestOneof0PropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *Enum2352 `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// Team13 - Groups of organization members that gives permissions on specified repositories.
type Team13 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2392 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *Components1Yr9X92SchemasWebhookPullRequestReopenedPropertiesPullRequestOneof0PropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team14 - Groups of organization members that gives permissions on specified repositories.
type Team14 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2435 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *Components9M39TrSchemasWebhookPullRequestReviewCommentCreatedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team15 - Groups of organization members that gives permissions on specified repositories.
type Team15 struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *ComponentsJ2U0OwSchemasWebhookPullRequestReviewCommentDeletedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *Enum2469 `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// Team16 - Groups of organization members that gives permissions on specified repositories.
type Team16 struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *ComponentsL7RmjaSchemasWebhookPullRequestReviewCommentEditedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *Enum2503 `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// Team17 - Groups of organization members that gives permissions on specified repositories.
type Team17 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2533 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *ComponentsEgrrdaSchemasWebhookPullRequestReviewDismissedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team18 - Groups of organization members that gives permissions on specified repositories.
type Team18 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2558 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *Components1N5ZfokSchemasWebhookPullRequestReviewEditedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team19 - Groups of organization members that gives permissions on specified repositories.
type Team19 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2591 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *Components4Qru5USchemasWebhookPullRequestReviewRequestRemovedOneof0PropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team2 - Groups of organization members that gives permissions on specified repositories.
type Team2 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2023 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *ComponentsMne9DhSchemasWebhookPullRequestClosedPropertiesPullRequestOneof0PropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team20 - Groups of organization members that gives permissions on specified repositories.
type Team20 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2623 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *Components19Ovj5KSchemasWebhookPullRequestReviewRequestRemovedOneof1PropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team21 - Groups of organization members that gives permissions on specified repositories.
type Team21 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2656 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *ComponentsBj8L9LSchemasWebhookPullRequestReviewRequestedOneof0PropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team22 - Groups of organization members that gives permissions on specified repositories.
type Team22 struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *Components1Co4B10SchemasWebhookPullRequestReviewRequestedOneof1PropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *Enum2688 `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// Team23 - Groups of organization members that gives permissions on specified repositories.
type Team23 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2720 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *Components2W5SemSchemasWebhookPullRequestReviewSubmittedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team24 - Groups of organization members that gives permissions on specified repositories.
type Team24 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2744 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *Components1R5Pj8PSchemasWebhookPullRequestReviewThreadResolvedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team25 - Groups of organization members that gives permissions on specified repositories.
type Team25 struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *Components7MjonlSchemasWebhookPullRequestReviewThreadUnresolvedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *Enum2770 `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// Team26 - Groups of organization members that gives permissions on specified repositories.
type Team26 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2805 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *Components1O4ZwjiSchemasWebhookPullRequestSynchronizePropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team27 - Groups of organization members that gives permissions on specified repositories.
type Team27 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2837 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *ComponentsHy4Th3SchemasWebhookPullRequestUnassignedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team28 - Groups of organization members that gives permissions on specified repositories.
type Team28 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2868 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *Components1Bj12XjSchemasWebhookPullRequestUnlabeledPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team29 - Groups of organization members that gives permissions on specified repositories.
type Team29 struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *Components15Qki0QSchemasWebhookPullRequestUnlockedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *Enum2899 `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// Team3 - Groups of organization members that gives permissions on specified repositories.
type Team3 struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *Components1F5Eq79SchemasWebhookPullRequestConvertedToDraftPropertiesPullRequestOneof0PropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *Enum2063 `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// Team4 - Groups of organization members that gives permissions on specified repositories.
type Team4 struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *Components15Rfly5SchemasWebhookPullRequestDemilestonedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *Enum2103 `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// Team5 - Groups of organization members that gives permissions on specified repositories.
type Team5 struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *ComponentsCorrpiSchemasWebhookPullRequestDequeuedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *Enum2134 `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// Team6 - Groups of organization members that gives permissions on specified repositories.
type Team6 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2165 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *Components10Djf4KSchemasWebhookPullRequestEditedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team7 - Groups of organization members that gives permissions on specified repositories.
type Team7 struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *ComponentsIsyf15SchemasWebhookPullRequestEnqueuedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *Enum2196 `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// Team8 - Groups of organization members that gives permissions on specified repositories.
type Team8 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2227 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *Components11Nne4LSchemasWebhookPullRequestLabeledPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// Team9 - Groups of organization members that gives permissions on specified repositories.
type Team9 struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2258 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *Components4My0ChSchemasWebhookPullRequestLockedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// TeamAutoGenerated - Groups of organization members that gives permissions on specified repositories.
type TeamAutoGenerated struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum1930 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *Components11WakocSchemasWebhookPullRequestAssignedPropertiesPullRequestPropertiesRequestedReviewersItemsOneof1PropertiesParent `json:"parent,omitempty"`
}

// TeamDiscussion - A team discussion is a persistent record of a free-form conversation within a team.
type TeamDiscussion struct {
	// REQUIRED; A GitHub user.
	Author *NullableSimpleUser `json:"author,omitempty"`

	// REQUIRED; The main text of the discussion.
	Body *string `json:"body,omitempty"`

	// REQUIRED
	BodyHTML *string `json:"body_html,omitempty"`

	// REQUIRED; The current version of the body content. If provided, this update operation will be rejected if the given version
// does not match the latest version on the server.
	BodyVersion *string `json:"body_version,omitempty"`

	// REQUIRED
	CommentsCount *int32 `json:"comments_count,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	LastEditedAt *time.Time `json:"last_edited_at,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The unique sequence number of a team discussion.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Whether or not this discussion should be pinned for easy retrieval.
	Pinned *bool `json:"pinned,omitempty"`

	// REQUIRED; Whether or not this discussion should be restricted to team members and organization administrators.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	TeamURL *string `json:"team_url,omitempty"`

	// REQUIRED; The title of the discussion.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Reaction Rollup
	Reactions *ReactionRollup `json:"reactions,omitempty"`
}

// TeamDiscussionComment - A reply to a discussion within a team.
type TeamDiscussionComment struct {
	// REQUIRED; A GitHub user.
	Author *NullableSimpleUser `json:"author,omitempty"`

	// REQUIRED; The main text of the comment.
	Body *string `json:"body,omitempty"`

	// REQUIRED
	BodyHTML *string `json:"body_html,omitempty"`

	// REQUIRED; The current version of the body content. If provided, this update operation will be rejected if the given version
// does not match the latest version on the server.
	BodyVersion *string `json:"body_version,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiscussionURL *string `json:"discussion_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	LastEditedAt *time.Time `json:"last_edited_at,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The unique sequence number of a team discussion comment.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Reaction Rollup
	Reactions *ReactionRollup `json:"reactions,omitempty"`
}

// TeamFull - Groups of organization members that gives permissions on specified repositories.
type TeamFull struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersCount *int32 `json:"members_count,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Team Organization
	Organization *TeamOrganization `json:"organization,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	ReposCount *int32 `json:"repos_count,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Distinguished Name (DN) that team maps to within LDAP environment
	LdapDn *string `json:"ldap_dn,omitempty"`

	// Groups of organization members that gives permissions on specified repositories.
	Parent *NullableTeamSimple `json:"parent,omitempty"`

	// The level of privacy this team should have
	Privacy *TeamFullPrivacy `json:"privacy,omitempty"`
}

// TeamMembership - Team Membership
type TeamMembership struct {
	// REQUIRED; The role of the user in the team.
	Role *TeamMembershipRole `json:"role,omitempty"`

	// REQUIRED; The state of the user's membership in the team.
	State *TeamMembershipState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// TeamOrganization - Team Organization
type TeamOrganization struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Followers *int32 `json:"followers,omitempty"`

	// REQUIRED
	Following *int32 `json:"following,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HasOrganizationProjects *bool `json:"has_organization_projects,omitempty"`

	// REQUIRED
	HasRepositoryProjects *bool `json:"has_repository_projects,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PublicGists *int32 `json:"public_gists,omitempty"`

	// REQUIRED
	PublicMembersURL *string `json:"public_members_url,omitempty"`

	// REQUIRED
	PublicRepos *int32 `json:"public_repos,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	BillingEmail *string `json:"billing_email,omitempty"`
	Blog *string `json:"blog,omitempty"`
	Collaborators *int32 `json:"collaborators,omitempty"`
	Company *string `json:"company,omitempty"`
	DefaultRepositoryPermission *string `json:"default_repository_permission,omitempty"`
	DiskUsage *int32 `json:"disk_usage,omitempty"`
	Email *string `json:"email,omitempty"`
	IsVerified *bool `json:"is_verified,omitempty"`
	Location *string `json:"location,omitempty"`
	MembersAllowedRepositoryCreationType *string `json:"members_allowed_repository_creation_type,omitempty"`
	MembersCanCreateInternalRepositories *bool `json:"members_can_create_internal_repositories,omitempty"`
	MembersCanCreatePages *bool `json:"members_can_create_pages,omitempty"`
	MembersCanCreatePrivatePages *bool `json:"members_can_create_private_pages,omitempty"`
	MembersCanCreatePrivateRepositories *bool `json:"members_can_create_private_repositories,omitempty"`
	MembersCanCreatePublicPages *bool `json:"members_can_create_public_pages,omitempty"`
	MembersCanCreatePublicRepositories *bool `json:"members_can_create_public_repositories,omitempty"`
	MembersCanCreateRepositories *bool `json:"members_can_create_repositories,omitempty"`
	MembersCanForkPrivateRepositories *bool `json:"members_can_fork_private_repositories,omitempty"`
	Name *string `json:"name,omitempty"`
	OwnedPrivateRepos *int32 `json:"owned_private_repos,omitempty"`
	Plan *TeamOrganizationPlan `json:"plan,omitempty"`
	PrivateGists *int32 `json:"private_gists,omitempty"`
	TotalPrivateRepos *int32 `json:"total_private_repos,omitempty"`
	TwitterUsername *string `json:"twitter_username,omitempty"`
	TwoFactorRequirementEnabled *bool `json:"two_factor_requirement_enabled,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type TeamOrganizationPlan struct {
	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PrivateRepos *int32 `json:"private_repos,omitempty"`

	// REQUIRED
	Space *int32 `json:"space,omitempty"`
	FilledSeats *int32 `json:"filled_seats,omitempty"`
	Seats *int32 `json:"seats,omitempty"`
}

type TeamPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Maintain *bool `json:"maintain,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`

	// REQUIRED
	Triage *bool `json:"triage,omitempty"`
}

// TeamProject - A team's access to a project.
type TeamProject struct {
	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ColumnsURL *string `json:"columns_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED; A GitHub user.
	Creator *SimpleUser `json:"creator,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OwnerURL *string `json:"owner_url,omitempty"`

	// REQUIRED
	Permissions *TeamProjectPermissions `json:"permissions,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// The organization permission for this project. Only present when owner is an organization.
	OrganizationPermission *string `json:"organization_permission,omitempty"`

	// Whether the project is private or not. Only present when owner is an organization.
	Private *bool `json:"private,omitempty"`
}

type TeamProjectPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Read *bool `json:"read,omitempty"`

	// REQUIRED
	Write *bool `json:"write,omitempty"`
}

// TeamRepository - A team's access to a repository.
type TeamRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED; Returns whether or not this repository disabled.
	Disabled *bool `json:"disabled,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License Simple
	License *NullableLicenseSimple `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; A GitHub user.
	Owner *NullableSimpleUser `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *time.Time `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow Auto-merge to be used on pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow forking this repo
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Whether this repository acts as a template that can be used to generate new repositories.
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	NetworkCount *int32 `json:"network_count,omitempty"`
	Permissions *TeamRepositoryPermissions `json:"permissions,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	SubscribersCount *int32 `json:"subscribers_count,omitempty"`
	TempCloneToken *string `json:"temp_clone_token,omitempty"`

	// A repository on GitHub.
	TemplateRepository *NullableRepository `json:"template_repository,omitempty"`
	Topics []*string `json:"topics,omitempty"`

	// The repository visibility: public, private, or internal.
	Visibility *string `json:"visibility,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type TeamRepositoryPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

// TeamSimple - Groups of organization members that gives permissions on specified repositories.
type TeamSimple struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`

	// Distinguished Name (DN) that team maps to within LDAP environment
	LdapDn *string `json:"ldap_dn,omitempty"`

	// The level of privacy this team should have
	Privacy *string `json:"privacy,omitempty"`
}

// Thread
type Thread struct {
	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	LastReadAt *string `json:"last_read_at,omitempty"`

	// REQUIRED
	Reason *string `json:"reason,omitempty"`

	// REQUIRED; Minimal Repository
	Repository *MinimalRepository `json:"repository,omitempty"`

	// REQUIRED
	Subject *ThreadSubject `json:"subject,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	Unread *bool `json:"unread,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type ThreadSubject struct {
	// REQUIRED
	LatestCommentURL *string `json:"latest_comment_url,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// ThreadSubscription - Thread Subscription
type ThreadSubscription struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Ignored *bool `json:"ignored,omitempty"`

	// REQUIRED
	Reason *string `json:"reason,omitempty"`

	// REQUIRED
	Subscribed *bool `json:"subscribed,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	RepositoryURL *string `json:"repository_url,omitempty"`
	ThreadURL *string `json:"thread_url,omitempty"`
}

// TimelineAssignedIssueEvent - Timeline Assigned Issue Event
type TimelineAssignedIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED; A GitHub user.
	Assignee *SimpleUser `json:"assignee,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// TimelineCommentEvent - Timeline Comment Event
type TimelineCommentEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the issue comment
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the issue comment
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; A GitHub user.
	User *SimpleUser `json:"user,omitempty"`

	// Contents of the issue comment
	Body *string `json:"body,omitempty"`
	BodyHTML *string `json:"body_html,omitempty"`
	BodyText *string `json:"body_text,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// Reaction Rollup
	Reactions *ReactionRollup `json:"reactions,omitempty"`
}

// TimelineCommitCommentedEvent - Timeline Commit Commented Event
type TimelineCommitCommentedEvent struct {
	Comments []*CommitComment `json:"comments,omitempty"`
	CommitID *string `json:"commit_id,omitempty"`
	Event *string `json:"event,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// TimelineCommittedEvent - Timeline Committed Event
type TimelineCommittedEvent struct {
	// REQUIRED; Identifying information for the git-user
	Author *TimelineCommittedEventAuthor `json:"author,omitempty"`

	// REQUIRED; Identifying information for the git-user
	Committer *TimelineCommittedEventCommitter `json:"committer,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Message describing the purpose of the commit
	Message *string `json:"message,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Parents []*TimelineCommittedEventParentsItem `json:"parents,omitempty"`

	// REQUIRED; SHA for the commit
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Tree *TimelineCommittedEventTree `json:"tree,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	Verification *TimelineCommittedEventVerification `json:"verification,omitempty"`
	Event *string `json:"event,omitempty"`
}

// TimelineCommittedEventAuthor - Identifying information for the git-user
type TimelineCommittedEventAuthor struct {
	// REQUIRED; Timestamp of the commit
	Date *time.Time `json:"date,omitempty"`

	// REQUIRED; Git email address of the user
	Email *string `json:"email,omitempty"`

	// REQUIRED; Name of the git user
	Name *string `json:"name,omitempty"`
}

// TimelineCommittedEventCommitter - Identifying information for the git-user
type TimelineCommittedEventCommitter struct {
	// REQUIRED; Timestamp of the commit
	Date *time.Time `json:"date,omitempty"`

	// REQUIRED; Git email address of the user
	Email *string `json:"email,omitempty"`

	// REQUIRED; Name of the git user
	Name *string `json:"name,omitempty"`
}

type TimelineCommittedEventParentsItem struct {
	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; SHA for the commit
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type TimelineCommittedEventTree struct {
	// REQUIRED; SHA for the commit
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type TimelineCommittedEventVerification struct {
	// REQUIRED
	Payload *string `json:"payload,omitempty"`

	// REQUIRED
	Reason *string `json:"reason,omitempty"`

	// REQUIRED
	Signature *string `json:"signature,omitempty"`

	// REQUIRED
	Verified *bool `json:"verified,omitempty"`
}

// TimelineCrossReferencedEvent - Timeline Cross Referenced Event
type TimelineCrossReferencedEvent struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	Source *TimelineCrossReferencedEventSource `json:"source,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`
}

type TimelineCrossReferencedEventSource struct {
	// Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
	Issue *Issue `json:"issue,omitempty"`
	Type *string `json:"type,omitempty"`
}

// TimelineIssueEvents - Timeline Event
type TimelineIssueEvents struct {
}

// TimelineLineCommentedEvent - Timeline Line Commented Event
type TimelineLineCommentedEvent struct {
	Comments []*PullRequestReviewComment `json:"comments,omitempty"`
	Event *string `json:"event,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// TimelineReviewedEvent - Timeline Reviewed Event
type TimelineReviewedEvent struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *AuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The text of the review.
	Body *string `json:"body,omitempty"`

	// REQUIRED; A commit SHA for the review.
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the review
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Links *TimelineReviewedEventLinks `json:"_links,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PullRequestURL *string `json:"pull_request_url,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED; A GitHub user.
	User *SimpleUser `json:"user,omitempty"`
	BodyHTML *string `json:"body_html,omitempty"`
	BodyText *string `json:"body_text,omitempty"`
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`
}

type TimelineReviewedEventLinks struct {
	// REQUIRED
	HTML *TimelineReviewedEventLinksHTML `json:"html,omitempty"`

	// REQUIRED
	PullRequest *TimelineReviewedEventLinksPullRequest `json:"pull_request,omitempty"`
}

type TimelineReviewedEventLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

type TimelineReviewedEventLinksPullRequest struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// TimelineUnassignedIssueEvent - Timeline Unassigned Issue Event
type TimelineUnassignedIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED; A GitHub user.
	Assignee *SimpleUser `json:"assignee,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// Topic - A topic aggregates entities that are related to a subject.
type Topic struct {
	// REQUIRED
	Names []*string `json:"names,omitempty"`
}

// TopicSearchResultItem - Topic Search Result Item
type TopicSearchResultItem struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	CreatedBy *string `json:"created_by,omitempty"`

	// REQUIRED
	Curated *bool `json:"curated,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DisplayName *string `json:"display_name,omitempty"`

	// REQUIRED
	Featured *bool `json:"featured,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Released *string `json:"released,omitempty"`

	// REQUIRED
	Score *float32 `json:"score,omitempty"`

	// REQUIRED
	ShortDescription *string `json:"short_description,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Aliases []*TopicSearchResultItemAliasesItem `json:"aliases,omitempty"`
	LogoURL *string `json:"logo_url,omitempty"`
	Related []*TopicSearchResultItemRelatedItem `json:"related,omitempty"`
	RepositoryCount *int32 `json:"repository_count,omitempty"`

	// Search Result Text Matches
	TextMatches []*SearchResultTextMatchesItem `json:"text_matches,omitempty"`
}

type TopicSearchResultItemAliasesItem struct {
	TopicRelation *TopicSearchResultItemAliasesItemTopicRelation `json:"topic_relation,omitempty"`
}

type TopicSearchResultItemAliasesItemTopicRelation struct {
	ID *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	RelationType *string `json:"relation_type,omitempty"`
	TopicID *int32 `json:"topic_id,omitempty"`
}

type TopicSearchResultItemRelatedItem struct {
	TopicRelation *TopicSearchResultItemRelatedItemTopicRelation `json:"topic_relation,omitempty"`
}

type TopicSearchResultItemRelatedItemTopicRelation struct {
	ID *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	RelationType *string `json:"relation_type,omitempty"`
	TopicID *int32 `json:"topic_id,omitempty"`
}

// Traffic
type Traffic struct {
	// REQUIRED
	Count *int32 `json:"count,omitempty"`

	// REQUIRED
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// REQUIRED
	Uniques *int32 `json:"uniques,omitempty"`
}

// UnassignedIssueEvent - Unassigned Issue Event
type UnassignedIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED; A GitHub user.
	Assignee *SimpleUser `json:"assignee,omitempty"`

	// REQUIRED; A GitHub user.
	Assigner *SimpleUser `json:"assigner,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// UnlabeledIssueEvent - Unlabeled Issue Event
type UnlabeledIssueEvent struct {
	// REQUIRED; A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// REQUIRED
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CommitURL *string `json:"commit_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Label *UnlabeledIssueEventLabel `json:"label,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type UnlabeledIssueEventLabel struct {
	// REQUIRED
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`
}

// User
type User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum1928 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User0 - User
type User0 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum1959 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User1 - User
type User1 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum1990 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User10 - User
type User10 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2287 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User11 - User
type User11 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2318 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User12 - User
type User12 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2350 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User13 - User
type User13 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2390 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User14 - User
type User14 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2433 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User15 - User
type User15 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2467 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User16 - User
type User16 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2501 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User17 - User
type User17 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2531 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User18 - User
type User18 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2556 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User19 - User
type User19 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2589 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User2 - User
type User2 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2021 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User20 - User
type User20 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2621 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User21 - User
type User21 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2654 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User22 - User
type User22 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2686 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User23 - User
type User23 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2718 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User24 - User
type User24 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2742 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User25 - User
type User25 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2768 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User26 - User
type User26 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2803 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User27 - User
type User27 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2835 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User28 - User
type User28 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2866 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User29 - User
type User29 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2897 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User3 - User
type User3 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2061 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User4 - User
type User4 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2101 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User5 - User
type User5 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2132 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User6 - User
type User6 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2163 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User7 - User
type User7 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2194 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User8 - User
type User8 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2225 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// User9 - User
type User9 struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2256 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// UserMarketplacePurchase - User Marketplace Purchase
type UserMarketplacePurchase struct {
	// REQUIRED; Marketplace Account
	Account *MarketplaceAccount `json:"account,omitempty"`

	// REQUIRED
	BillingCycle *string `json:"billing_cycle,omitempty"`

	// REQUIRED
	FreeTrialEndsOn *time.Time `json:"free_trial_ends_on,omitempty"`

	// REQUIRED
	NextBillingDate *time.Time `json:"next_billing_date,omitempty"`

	// REQUIRED
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`

	// REQUIRED; Marketplace Listing Plan
	Plan *MarketplaceListingPlan `json:"plan,omitempty"`

	// REQUIRED
	UnitCount *int32 `json:"unit_count,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// UserSearchResultItem - User Search Result Item
type UserSearchResultItem struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	Score *float32 `json:"score,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	Bio *string `json:"bio,omitempty"`
	Blog *string `json:"blog,omitempty"`
	Company *string `json:"company,omitempty"`
	CreatedAt *time.Time `json:"created_at,omitempty"`
	Email *string `json:"email,omitempty"`
	Followers *int32 `json:"followers,omitempty"`
	Following *int32 `json:"following,omitempty"`
	Hireable *bool `json:"hireable,omitempty"`
	Location *string `json:"location,omitempty"`
	Name *string `json:"name,omitempty"`
	PublicGists *int32 `json:"public_gists,omitempty"`
	PublicRepos *int32 `json:"public_repos,omitempty"`
	SuspendedAt *time.Time `json:"suspended_at,omitempty"`

	// Search Result Text Matches
	TextMatches []*SearchResultTextMatchesItem `json:"text_matches,omitempty"`
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// ValidationError - Validation Error
type ValidationError struct {
	// REQUIRED
	DocumentationURL *string `json:"documentation_url,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`
	Errors []*ValidationErrorErrorsItem `json:"errors,omitempty"`
}

type ValidationErrorErrorsItem struct {
	// REQUIRED
	Code *string `json:"code,omitempty"`
	Field *string `json:"field,omitempty"`
	Index *int32 `json:"index,omitempty"`
	Message *string `json:"message,omitempty"`
	Resource *string `json:"resource,omitempty"`
	Value *ValidationErrorErrorsItemValue `json:"value,omitempty"`
}

type ValidationErrorErrorsItemValue struct {
}

// ValidationErrorSimple - Validation Error Simple
type ValidationErrorSimple struct {
	// REQUIRED
	DocumentationURL *string `json:"documentation_url,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`
	Errors []*string `json:"errors,omitempty"`
}

// Verification
type Verification struct {
	// REQUIRED
	Payload *string `json:"payload,omitempty"`

	// REQUIRED
	Reason *string `json:"reason,omitempty"`

	// REQUIRED
	Signature *string `json:"signature,omitempty"`

	// REQUIRED
	Verified *bool `json:"verified,omitempty"`
}

// ViewTraffic - View Traffic
type ViewTraffic struct {
	// REQUIRED
	Count *int32 `json:"count,omitempty"`

	// REQUIRED
	Uniques *int32 `json:"uniques,omitempty"`

	// REQUIRED
	Views []*Traffic `json:"views,omitempty"`
}

// WebhookBranchProtectionRuleCreated - branch protection rule created event
type WebhookBranchProtectionRuleCreated struct {
	// REQUIRED
	Action *WebhookBranchProtectionRuleCreatedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; The branch protection rule. Includes a name and all the branch protection settings
// [https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings]
// applied to branches that match the
// name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build
// lists are arrays of strings.
	Rule *WebhookBranchProtectionRuleCreatedRule `json:"rule,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookBranchProtectionRuleCreatedRule - The branch protection rule. Includes a name and all the branch protection settings
// [https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings]
// applied to branches that match the
// name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build
// lists are arrays of strings.
type WebhookBranchProtectionRuleCreatedRule struct {
	// REQUIRED
	AdminEnforced *bool `json:"admin_enforced,omitempty"`

	// REQUIRED
	AllowDeletionsEnforcementLevel *WebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel `json:"allow_deletions_enforcement_level,omitempty"`

	// REQUIRED
	AllowForcePushesEnforcementLevel *WebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevel `json:"allow_force_pushes_enforcement_level,omitempty"`

	// REQUIRED
	AuthorizedActorNames []*string `json:"authorized_actor_names,omitempty"`

	// REQUIRED
	AuthorizedActorsOnly *bool `json:"authorized_actors_only,omitempty"`

	// REQUIRED
	AuthorizedDismissalActorsOnly *bool `json:"authorized_dismissal_actors_only,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DismissStaleReviewsOnPush *bool `json:"dismiss_stale_reviews_on_push,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IgnoreApprovalsFromContributors *bool `json:"ignore_approvals_from_contributors,omitempty"`

	// REQUIRED
	LinearHistoryRequirementEnforcementLevel *WebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevel `json:"linear_history_requirement_enforcement_level,omitempty"`

	// REQUIRED
	MergeQueueEnforcementLevel *WebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevel `json:"merge_queue_enforcement_level,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PullRequestReviewsEnforcementLevel *WebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevel `json:"pull_request_reviews_enforcement_level,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	RequireCodeOwnerReview *bool `json:"require_code_owner_review,omitempty"`

	// REQUIRED
	RequiredApprovingReviewCount *int32 `json:"required_approving_review_count,omitempty"`

	// REQUIRED
	RequiredConversationResolutionLevel *WebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevel `json:"required_conversation_resolution_level,omitempty"`

	// REQUIRED
	RequiredDeploymentsEnforcementLevel *WebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevel `json:"required_deployments_enforcement_level,omitempty"`

	// REQUIRED
	RequiredStatusChecks []*string `json:"required_status_checks,omitempty"`

	// REQUIRED
	RequiredStatusChecksEnforcementLevel *WebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevel `json:"required_status_checks_enforcement_level,omitempty"`

	// REQUIRED
	SignatureRequirementEnforcementLevel *WebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevel `json:"signature_requirement_enforcement_level,omitempty"`

	// REQUIRED
	StrictRequiredStatusChecksPolicy *bool `json:"strict_required_status_checks_policy,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	CreateProtected *bool `json:"create_protected,omitempty"`
}

// WebhookBranchProtectionRuleDeleted - branch protection rule deleted event
type WebhookBranchProtectionRuleDeleted struct {
	// REQUIRED
	Action *WebhookBranchProtectionRuleDeletedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; The branch protection rule. Includes a name and all the branch protection settings
// [https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings]
// applied to branches that match the
// name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build
// lists are arrays of strings.
	Rule *WebhookBranchProtectionRuleDeletedRule `json:"rule,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookBranchProtectionRuleDeletedRule - The branch protection rule. Includes a name and all the branch protection settings
// [https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings]
// applied to branches that match the
// name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build
// lists are arrays of strings.
type WebhookBranchProtectionRuleDeletedRule struct {
	// REQUIRED
	AdminEnforced *bool `json:"admin_enforced,omitempty"`

	// REQUIRED
	AllowDeletionsEnforcementLevel *WebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevel `json:"allow_deletions_enforcement_level,omitempty"`

	// REQUIRED
	AllowForcePushesEnforcementLevel *WebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevel `json:"allow_force_pushes_enforcement_level,omitempty"`

	// REQUIRED
	AuthorizedActorNames []*string `json:"authorized_actor_names,omitempty"`

	// REQUIRED
	AuthorizedActorsOnly *bool `json:"authorized_actors_only,omitempty"`

	// REQUIRED
	AuthorizedDismissalActorsOnly *bool `json:"authorized_dismissal_actors_only,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DismissStaleReviewsOnPush *bool `json:"dismiss_stale_reviews_on_push,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IgnoreApprovalsFromContributors *bool `json:"ignore_approvals_from_contributors,omitempty"`

	// REQUIRED
	LinearHistoryRequirementEnforcementLevel *WebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevel `json:"linear_history_requirement_enforcement_level,omitempty"`

	// REQUIRED
	MergeQueueEnforcementLevel *WebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevel `json:"merge_queue_enforcement_level,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PullRequestReviewsEnforcementLevel *WebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevel `json:"pull_request_reviews_enforcement_level,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	RequireCodeOwnerReview *bool `json:"require_code_owner_review,omitempty"`

	// REQUIRED
	RequiredApprovingReviewCount *int32 `json:"required_approving_review_count,omitempty"`

	// REQUIRED
	RequiredConversationResolutionLevel *WebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevel `json:"required_conversation_resolution_level,omitempty"`

	// REQUIRED
	RequiredDeploymentsEnforcementLevel *WebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevel `json:"required_deployments_enforcement_level,omitempty"`

	// REQUIRED
	RequiredStatusChecks []*string `json:"required_status_checks,omitempty"`

	// REQUIRED
	RequiredStatusChecksEnforcementLevel *WebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevel `json:"required_status_checks_enforcement_level,omitempty"`

	// REQUIRED
	SignatureRequirementEnforcementLevel *WebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevel `json:"signature_requirement_enforcement_level,omitempty"`

	// REQUIRED
	StrictRequiredStatusChecksPolicy *bool `json:"strict_required_status_checks_policy,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	CreateProtected *bool `json:"create_protected,omitempty"`
}

// WebhookBranchProtectionRuleEdited - branch protection rule edited event
type WebhookBranchProtectionRuleEdited struct {
	// REQUIRED
	Action *WebhookBranchProtectionRuleEditedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; The branch protection rule. Includes a name and all the branch protection settings
// [https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings]
// applied to branches that match the
// name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build
// lists are arrays of strings.
	Rule *WebhookBranchProtectionRuleEditedRule `json:"rule,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// If the action was edited, the changes to the rule.
	Changes *WebhookBranchProtectionRuleEditedChanges `json:"changes,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookBranchProtectionRuleEditedChanges - If the action was edited, the changes to the rule.
type WebhookBranchProtectionRuleEditedChanges struct {
	AdminEnforced *WebhookBranchProtectionRuleEditedChangesAdminEnforced `json:"admin_enforced,omitempty"`
	AuthorizedActorNames *WebhookBranchProtectionRuleEditedChangesAuthorizedActorNames `json:"authorized_actor_names,omitempty"`
	AuthorizedActorsOnly *WebhookBranchProtectionRuleEditedChangesAuthorizedActorsOnly `json:"authorized_actors_only,omitempty"`
	AuthorizedDismissalActorsOnly *WebhookBranchProtectionRuleEditedChangesAuthorizedDismissalActorsOnly `json:"authorized_dismissal_actors_only,omitempty"`
	LinearHistoryRequirementEnforcementLevel *WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel `json:"linear_history_requirement_enforcement_level,omitempty"`
	RequiredStatusChecks *WebhookBranchProtectionRuleEditedChangesRequiredStatusChecks `json:"required_status_checks,omitempty"`
	RequiredStatusChecksEnforcementLevel *WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevel `json:"required_status_checks_enforcement_level,omitempty"`
}

type WebhookBranchProtectionRuleEditedChangesAdminEnforced struct {
	// REQUIRED
	From *bool `json:"from,omitempty"`
}

type WebhookBranchProtectionRuleEditedChangesAuthorizedActorNames struct {
	// REQUIRED
	From []*string `json:"from,omitempty"`
}

type WebhookBranchProtectionRuleEditedChangesAuthorizedActorsOnly struct {
	// REQUIRED
	From *bool `json:"from,omitempty"`
}

type WebhookBranchProtectionRuleEditedChangesAuthorizedDismissalActorsOnly struct {
	// REQUIRED
	From *bool `json:"from,omitempty"`
}

type WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevel struct {
	// REQUIRED
	From *WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFrom `json:"from,omitempty"`
}

type WebhookBranchProtectionRuleEditedChangesRequiredStatusChecks struct {
	// REQUIRED
	From []*string `json:"from,omitempty"`
}

type WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevel struct {
	// REQUIRED
	From *WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFrom `json:"from,omitempty"`
}

// WebhookBranchProtectionRuleEditedRule - The branch protection rule. Includes a name and all the branch protection settings
// [https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings]
// applied to branches that match the
// name. Binary settings are boolean. Multi-level configurations are one of off, non_admins, or everyone. Actor and build
// lists are arrays of strings.
type WebhookBranchProtectionRuleEditedRule struct {
	// REQUIRED
	AdminEnforced *bool `json:"admin_enforced,omitempty"`

	// REQUIRED
	AllowDeletionsEnforcementLevel *WebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevel `json:"allow_deletions_enforcement_level,omitempty"`

	// REQUIRED
	AllowForcePushesEnforcementLevel *WebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevel `json:"allow_force_pushes_enforcement_level,omitempty"`

	// REQUIRED
	AuthorizedActorNames []*string `json:"authorized_actor_names,omitempty"`

	// REQUIRED
	AuthorizedActorsOnly *bool `json:"authorized_actors_only,omitempty"`

	// REQUIRED
	AuthorizedDismissalActorsOnly *bool `json:"authorized_dismissal_actors_only,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DismissStaleReviewsOnPush *bool `json:"dismiss_stale_reviews_on_push,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IgnoreApprovalsFromContributors *bool `json:"ignore_approvals_from_contributors,omitempty"`

	// REQUIRED
	LinearHistoryRequirementEnforcementLevel *WebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevel `json:"linear_history_requirement_enforcement_level,omitempty"`

	// REQUIRED
	MergeQueueEnforcementLevel *WebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevel `json:"merge_queue_enforcement_level,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PullRequestReviewsEnforcementLevel *WebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevel `json:"pull_request_reviews_enforcement_level,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	RequireCodeOwnerReview *bool `json:"require_code_owner_review,omitempty"`

	// REQUIRED
	RequiredApprovingReviewCount *int32 `json:"required_approving_review_count,omitempty"`

	// REQUIRED
	RequiredConversationResolutionLevel *WebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevel `json:"required_conversation_resolution_level,omitempty"`

	// REQUIRED
	RequiredDeploymentsEnforcementLevel *WebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevel `json:"required_deployments_enforcement_level,omitempty"`

	// REQUIRED
	RequiredStatusChecks []*string `json:"required_status_checks,omitempty"`

	// REQUIRED
	RequiredStatusChecksEnforcementLevel *WebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevel `json:"required_status_checks_enforcement_level,omitempty"`

	// REQUIRED
	SignatureRequirementEnforcementLevel *WebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevel `json:"signature_requirement_enforcement_level,omitempty"`

	// REQUIRED
	StrictRequiredStatusChecksPolicy *bool `json:"strict_required_status_checks_policy,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	CreateProtected *bool `json:"create_protected,omitempty"`
}

// WebhookCheckRunCompleted - Check Run Completed Event
type WebhookCheckRunCompleted struct {
	// REQUIRED; A check performed on the code of a given code change
	CheckRun *CheckRunWithSimpleCheckSuite `json:"check_run,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
	Action *WebhookCheckRunCompletedAction `json:"action,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookCheckRunCompletedFormEncoded - The check_run.completed webhook encoded with URL encoding
type WebhookCheckRunCompletedFormEncoded struct {
	// REQUIRED; A URL-encoded string of the check_run.completed JSON payload. The decoded payload is a JSON object.
	Payload *string `json:"payload,omitempty"`
}

// WebhookCheckRunCreated - Check Run Created Event
type WebhookCheckRunCreated struct {
	// REQUIRED; A check performed on the code of a given code change
	CheckRun *CheckRunWithSimpleCheckSuite `json:"check_run,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
	Action *WebhookCheckRunCreatedAction `json:"action,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookCheckRunCreatedFormEncoded - The check_run.created webhook encoded with URL encoding
type WebhookCheckRunCreatedFormEncoded struct {
	// REQUIRED; A URL-encoded string of the check_run.created JSON payload. The decoded payload is a JSON object.
	Payload *string `json:"payload,omitempty"`
}

// WebhookCheckRunRequestedAction - Check Run Requested Action Event
type WebhookCheckRunRequestedAction struct {
	// REQUIRED
	Action *WebhookCheckRunRequestedActionAction `json:"action,omitempty"`

	// REQUIRED; A check performed on the code of a given code change
	CheckRun *CheckRunWithSimpleCheckSuite `json:"check_run,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// The action requested by the user.
	RequestedAction *WebhookCheckRunRequestedActionRequestedAction `json:"requested_action,omitempty"`
}

// WebhookCheckRunRequestedActionFormEncoded - The checkrun.requestedaction webhook encoded with URL encoding
type WebhookCheckRunRequestedActionFormEncoded struct {
	// REQUIRED; A URL-encoded string of the checkrun.requestedaction JSON payload. The decoded payload is a JSON object.
	Payload *string `json:"payload,omitempty"`
}

// WebhookCheckRunRequestedActionRequestedAction - The action requested by the user.
type WebhookCheckRunRequestedActionRequestedAction struct {
	// The integrator reference of the action requested by the user.
	Identifier *string `json:"identifier,omitempty"`
}

// WebhookCheckRunRerequested - Check Run Re-Requested Event
type WebhookCheckRunRerequested struct {
	// REQUIRED; A check performed on the code of a given code change
	CheckRun *CheckRunWithSimpleCheckSuite `json:"check_run,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
	Action *WebhookCheckRunRerequestedAction `json:"action,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookCheckRunRerequestedFormEncoded - The check_run.rerequested webhook encoded with URL encoding
type WebhookCheckRunRerequestedFormEncoded struct {
	// REQUIRED; A URL-encoded string of the check_run.rerequested JSON payload. The decoded payload is a JSON object.
	Payload *string `json:"payload,omitempty"`
}

// WebhookCheckSuiteCompleted - check_suite completed event
type WebhookCheckSuiteCompleted struct {
	// REQUIRED
	Action *WebhookCheckSuiteCompletedAction `json:"action,omitempty"`

	// REQUIRED; The check_suite [https://docs.github.com/rest/reference/checks#suites].
	CheckSuite *WebhookCheckSuiteCompletedCheckSuite `json:"check_suite,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// Anything
	ActionsMeta any `json:"actions_meta,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookCheckSuiteCompletedCheckSuite - The check_suite [https://docs.github.com/rest/reference/checks#suites].
type WebhookCheckSuiteCompletedCheckSuite struct {
	// REQUIRED
	After *string `json:"after,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	App *WebhookCheckSuiteCompletedCheckSuiteApp `json:"app,omitempty"`

	// REQUIRED
	Before *string `json:"before,omitempty"`

	// REQUIRED
	CheckRunsURL *string `json:"check_runs_url,omitempty"`

	// REQUIRED; The summary conclusion for all check runs that are part of the check suite. Can be one of success, failure, neutral,
// cancelled, timed_out, action_required or stale. This value will be null until the
// check run has completed.
	Conclusion *WebhookCheckSuiteCompletedCheckSuiteConclusion `json:"conclusion,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The head branch name the changes are on.
	HeadBranch *string `json:"head_branch,omitempty"`

	// REQUIRED; SimpleCommit
	HeadCommit *WebhookCheckSuiteCompletedCheckSuiteHeadCommit `json:"head_commit,omitempty"`

	// REQUIRED; The SHA of the head commit that is being checked.
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LatestCheckRunsCount *int32 `json:"latest_check_runs_count,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; An array of pull requests that match this check suite. A pull request matches a check suite if they have the
// same head_sha and head_branch. When the check suite's head_branch is in a forked repository
// it will be null and the pull_requests array will be empty.
	PullRequests []*WebhookCheckSuiteCompletedCheckSuitePullRequestsItem `json:"pull_requests,omitempty"`

	// REQUIRED; The summary status for all check runs that are part of the check suite. Can be requested, in_progress, or completed.
	Status *WebhookCheckSuiteCompletedCheckSuiteStatus `json:"status,omitempty"`

	// REQUIRED; URL that points to the check suite API resource.
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Rerequestable *bool `json:"rerequestable,omitempty"`
	RunsRerequestable *bool `json:"runs_rerequestable,omitempty"`
}

// WebhookCheckSuiteCompletedCheckSuiteApp - GitHub apps are a new way to extend GitHub. They can be installed directly on
// organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookCheckSuiteCompletedCheckSuiteApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookCheckSuiteCompletedCheckSuiteAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookCheckSuiteCompletedCheckSuiteAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookCheckSuiteCompletedCheckSuiteAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookCheckSuiteCompletedCheckSuiteAppOwner - User
type WebhookCheckSuiteCompletedCheckSuiteAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookCheckSuiteCompletedCheckSuiteAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookCheckSuiteCompletedCheckSuiteAppPermissions - The set of permissions for the GitHub app
type WebhookCheckSuiteCompletedCheckSuiteAppPermissions struct {
	Actions *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookCheckSuiteCompletedCheckSuiteAppPermissionsWorkflows `json:"workflows,omitempty"`
}

// WebhookCheckSuiteCompletedCheckSuiteHeadCommit - SimpleCommit
type WebhookCheckSuiteCompletedCheckSuiteHeadCommit struct {
	// REQUIRED; Metaproperties for Git author/committer information.
	Author *WebhookCheckSuiteCompletedCheckSuiteHeadCommitAuthor `json:"author,omitempty"`

	// REQUIRED; Metaproperties for Git author/committer information.
	Committer *WebhookCheckSuiteCompletedCheckSuiteHeadCommitCommitter `json:"committer,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	Timestamp *string `json:"timestamp,omitempty"`

	// REQUIRED
	TreeID *string `json:"tree_id,omitempty"`
}

// WebhookCheckSuiteCompletedCheckSuiteHeadCommitAuthor - Metaproperties for Git author/committer information.
type WebhookCheckSuiteCompletedCheckSuiteHeadCommitAuthor struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookCheckSuiteCompletedCheckSuiteHeadCommitCommitter - Metaproperties for Git author/committer information.
type WebhookCheckSuiteCompletedCheckSuiteHeadCommitCommitter struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookCheckSuiteCompletedCheckSuitePullRequestsItem - Check Run Pull Request
type WebhookCheckSuiteCompletedCheckSuitePullRequestsItem struct {
	// REQUIRED
	Base *WebhookCheckSuiteCompletedCheckSuitePullRequestsItemBase `json:"base,omitempty"`

	// REQUIRED
	Head *WebhookCheckSuiteCompletedCheckSuitePullRequestsItemHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookCheckSuiteCompletedCheckSuitePullRequestsItemBase struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *Components1Yyin93SchemasWebhookCheckSuiteCompletedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesBasePropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

type WebhookCheckSuiteCompletedCheckSuitePullRequestsItemHead struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *Components1Oe8XblSchemasWebhookCheckSuiteCompletedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesHeadPropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

// WebhookCheckSuiteRequested - check_suite requested event
type WebhookCheckSuiteRequested struct {
	// REQUIRED
	Action *WebhookCheckSuiteRequestedAction `json:"action,omitempty"`

	// REQUIRED; The check_suite [https://docs.github.com/rest/reference/checks#suites].
	CheckSuite *WebhookCheckSuiteRequestedCheckSuite `json:"check_suite,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// Anything
	ActionsMeta any `json:"actions_meta,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookCheckSuiteRequestedCheckSuite - The check_suite [https://docs.github.com/rest/reference/checks#suites].
type WebhookCheckSuiteRequestedCheckSuite struct {
	// REQUIRED
	After *string `json:"after,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	App *WebhookCheckSuiteRequestedCheckSuiteApp `json:"app,omitempty"`

	// REQUIRED
	Before *string `json:"before,omitempty"`

	// REQUIRED
	CheckRunsURL *string `json:"check_runs_url,omitempty"`

	// REQUIRED; The summary conclusion for all check runs that are part of the check suite. Can be one of success, failure,neutral,
// cancelled, timed_out, action_required or stale. This value will be null until the
// check run has completed.
	Conclusion *WebhookCheckSuiteRequestedCheckSuiteConclusion `json:"conclusion,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The head branch name the changes are on.
	HeadBranch *string `json:"head_branch,omitempty"`

	// REQUIRED; SimpleCommit
	HeadCommit *WebhookCheckSuiteRequestedCheckSuiteHeadCommit `json:"head_commit,omitempty"`

	// REQUIRED; The SHA of the head commit that is being checked.
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LatestCheckRunsCount *int32 `json:"latest_check_runs_count,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; An array of pull requests that match this check suite. A pull request matches a check suite if they have the
// same head_sha and head_branch. When the check suite's head_branch is in a forked repository
// it will be null and the pull_requests array will be empty.
	PullRequests []*WebhookCheckSuiteRequestedCheckSuitePullRequestsItem `json:"pull_requests,omitempty"`

	// REQUIRED; The summary status for all check runs that are part of the check suite. Can be requested, in_progress, or completed.
	Status *WebhookCheckSuiteRequestedCheckSuiteStatus `json:"status,omitempty"`

	// REQUIRED; URL that points to the check suite API resource.
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Rerequestable *bool `json:"rerequestable,omitempty"`
	RunsRerequestable *bool `json:"runs_rerequestable,omitempty"`
}

// WebhookCheckSuiteRequestedCheckSuiteApp - GitHub apps are a new way to extend GitHub. They can be installed directly on
// organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookCheckSuiteRequestedCheckSuiteApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookCheckSuiteRequestedCheckSuiteAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookCheckSuiteRequestedCheckSuiteAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookCheckSuiteRequestedCheckSuiteAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookCheckSuiteRequestedCheckSuiteAppOwner - User
type WebhookCheckSuiteRequestedCheckSuiteAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookCheckSuiteRequestedCheckSuiteAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookCheckSuiteRequestedCheckSuiteAppPermissions - The set of permissions for the GitHub app
type WebhookCheckSuiteRequestedCheckSuiteAppPermissions struct {
	Actions *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookCheckSuiteRequestedCheckSuiteAppPermissionsWorkflows `json:"workflows,omitempty"`
}

// WebhookCheckSuiteRequestedCheckSuiteHeadCommit - SimpleCommit
type WebhookCheckSuiteRequestedCheckSuiteHeadCommit struct {
	// REQUIRED; Metaproperties for Git author/committer information.
	Author *WebhookCheckSuiteRequestedCheckSuiteHeadCommitAuthor `json:"author,omitempty"`

	// REQUIRED; Metaproperties for Git author/committer information.
	Committer *WebhookCheckSuiteRequestedCheckSuiteHeadCommitCommitter `json:"committer,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	Timestamp *string `json:"timestamp,omitempty"`

	// REQUIRED
	TreeID *string `json:"tree_id,omitempty"`
}

// WebhookCheckSuiteRequestedCheckSuiteHeadCommitAuthor - Metaproperties for Git author/committer information.
type WebhookCheckSuiteRequestedCheckSuiteHeadCommitAuthor struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookCheckSuiteRequestedCheckSuiteHeadCommitCommitter - Metaproperties for Git author/committer information.
type WebhookCheckSuiteRequestedCheckSuiteHeadCommitCommitter struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookCheckSuiteRequestedCheckSuitePullRequestsItem - Check Run Pull Request
type WebhookCheckSuiteRequestedCheckSuitePullRequestsItem struct {
	// REQUIRED
	Base *WebhookCheckSuiteRequestedCheckSuitePullRequestsItemBase `json:"base,omitempty"`

	// REQUIRED
	Head *WebhookCheckSuiteRequestedCheckSuitePullRequestsItemHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookCheckSuiteRequestedCheckSuitePullRequestsItemBase struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *Components1Yorx5LSchemasWebhookCheckSuiteRequestedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesBasePropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

type WebhookCheckSuiteRequestedCheckSuitePullRequestsItemHead struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *Components33M5EtSchemasWebhookCheckSuiteRequestedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesHeadPropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

// WebhookCheckSuiteRerequested - check_suite rerequested event
type WebhookCheckSuiteRerequested struct {
	// REQUIRED
	Action *WebhookCheckSuiteRerequestedAction `json:"action,omitempty"`

	// REQUIRED; The check_suite [https://docs.github.com/rest/reference/checks#suites].
	CheckSuite *WebhookCheckSuiteRerequestedCheckSuite `json:"check_suite,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
	ActionsMeta *WebhookCheckSuiteRerequestedActionsMeta `json:"actions_meta,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookCheckSuiteRerequestedActionsMeta struct {
	RerunInfo *WebhookCheckSuiteRerequestedActionsMetaRerunInfo `json:"rerun_info,omitempty"`
}

type WebhookCheckSuiteRerequestedActionsMetaRerunInfo struct {
	JobIDs []*string `json:"job_ids,omitempty"`
	PlanID *string `json:"plan_id,omitempty"`
}

// WebhookCheckSuiteRerequestedCheckSuite - The check_suite [https://docs.github.com/rest/reference/checks#suites].
type WebhookCheckSuiteRerequestedCheckSuite struct {
	// REQUIRED
	After *string `json:"after,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	App *WebhookCheckSuiteRerequestedCheckSuiteApp `json:"app,omitempty"`

	// REQUIRED
	Before *string `json:"before,omitempty"`

	// REQUIRED
	CheckRunsURL *string `json:"check_runs_url,omitempty"`

	// REQUIRED; The summary conclusion for all check runs that are part of the check suite. Can be one of success, failure,neutral,
// cancelled, timed_out, action_required or stale. This value will be null until the
// check run has completed.
	Conclusion *WebhookCheckSuiteRerequestedCheckSuiteConclusion `json:"conclusion,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The head branch name the changes are on.
	HeadBranch *string `json:"head_branch,omitempty"`

	// REQUIRED; SimpleCommit
	HeadCommit *WebhookCheckSuiteRerequestedCheckSuiteHeadCommit `json:"head_commit,omitempty"`

	// REQUIRED; The SHA of the head commit that is being checked.
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LatestCheckRunsCount *int32 `json:"latest_check_runs_count,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; An array of pull requests that match this check suite. A pull request matches a check suite if they have the
// same head_sha and head_branch. When the check suite's head_branch is in a forked repository
// it will be null and the pull_requests array will be empty.
	PullRequests []*WebhookCheckSuiteRerequestedCheckSuitePullRequestsItem `json:"pull_requests,omitempty"`

	// REQUIRED; The summary status for all check runs that are part of the check suite. Can be requested, in_progress, or completed.
	Status *WebhookCheckSuiteRerequestedCheckSuiteStatus `json:"status,omitempty"`

	// REQUIRED; URL that points to the check suite API resource.
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	Rerequestable *bool `json:"rerequestable,omitempty"`
	RunsRerequestable *bool `json:"runs_rerequestable,omitempty"`
}

// WebhookCheckSuiteRerequestedCheckSuiteApp - GitHub apps are a new way to extend GitHub. They can be installed directly
// on organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookCheckSuiteRerequestedCheckSuiteApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookCheckSuiteRerequestedCheckSuiteAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookCheckSuiteRerequestedCheckSuiteAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookCheckSuiteRerequestedCheckSuiteAppOwner - User
type WebhookCheckSuiteRerequestedCheckSuiteAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookCheckSuiteRerequestedCheckSuiteAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookCheckSuiteRerequestedCheckSuiteAppPermissions - The set of permissions for the GitHub app
type WebhookCheckSuiteRerequestedCheckSuiteAppPermissions struct {
	Actions *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsWorkflows `json:"workflows,omitempty"`
}

// WebhookCheckSuiteRerequestedCheckSuiteHeadCommit - SimpleCommit
type WebhookCheckSuiteRerequestedCheckSuiteHeadCommit struct {
	// REQUIRED; Metaproperties for Git author/committer information.
	Author *WebhookCheckSuiteRerequestedCheckSuiteHeadCommitAuthor `json:"author,omitempty"`

	// REQUIRED; Metaproperties for Git author/committer information.
	Committer *WebhookCheckSuiteRerequestedCheckSuiteHeadCommitCommitter `json:"committer,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	Timestamp *string `json:"timestamp,omitempty"`

	// REQUIRED
	TreeID *string `json:"tree_id,omitempty"`
}

// WebhookCheckSuiteRerequestedCheckSuiteHeadCommitAuthor - Metaproperties for Git author/committer information.
type WebhookCheckSuiteRerequestedCheckSuiteHeadCommitAuthor struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookCheckSuiteRerequestedCheckSuiteHeadCommitCommitter - Metaproperties for Git author/committer information.
type WebhookCheckSuiteRerequestedCheckSuiteHeadCommitCommitter struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookCheckSuiteRerequestedCheckSuitePullRequestsItem - Check Run Pull Request
type WebhookCheckSuiteRerequestedCheckSuitePullRequestsItem struct {
	// REQUIRED
	Base *WebhookCheckSuiteRerequestedCheckSuitePullRequestsItemBase `json:"base,omitempty"`

	// REQUIRED
	Head *WebhookCheckSuiteRerequestedCheckSuitePullRequestsItemHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookCheckSuiteRerequestedCheckSuitePullRequestsItemBase struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *Components96Tu29SchemasWebhookCheckSuiteRerequestedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesBasePropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

type WebhookCheckSuiteRerequestedCheckSuitePullRequestsItemHead struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *Components1Yu68GaSchemasWebhookCheckSuiteRerequestedPropertiesCheckSuitePropertiesPullRequestsItemsPropertiesHeadPropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

// WebhookCodeScanningAlertAppearedInBranch - codescanningalert appearedinbranch event
type WebhookCodeScanningAlertAppearedInBranch struct {
	// REQUIRED
	Action *WebhookCodeScanningAlertAppearedInBranchAction `json:"action,omitempty"`

	// REQUIRED; The code scanning alert involved in the event.
	Alert *WebhookCodeScanningAlertAppearedInBranchAlert `json:"alert,omitempty"`

	// REQUIRED; The commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was
// triggered by the sender and this value will be empty.
	CommitOid *string `json:"commit_oid,omitempty"`

	// REQUIRED; The Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event
// was triggered by the sender and this value will be empty.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookCodeScanningAlertAppearedInBranchAlert - The code scanning alert involved in the event.
type WebhookCodeScanningAlertAppearedInBranchAlert struct {
	// REQUIRED; The time that the alert was created in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The time that the alert was dismissed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	DismissedAt *time.Time `json:"dismissed_at,omitempty"`

	// REQUIRED; User
	DismissedBy *WebhookCodeScanningAlertAppearedInBranchAlertDismissedBy `json:"dismissed_by,omitempty"`

	// REQUIRED; The reason for dismissing or closing the alert. Can be one of: false positive, won't fix, and used in tests.
	DismissedReason *WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason `json:"dismissed_reason,omitempty"`

	// REQUIRED; The GitHub URL of the alert resource.
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The code scanning alert number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	Rule *WebhookCodeScanningAlertAppearedInBranchAlertRule `json:"rule,omitempty"`

	// REQUIRED; State of a code scanning alert.
	State *WebhookCodeScanningAlertAppearedInBranchAlertState `json:"state,omitempty"`

	// REQUIRED
	Tool *WebhookCodeScanningAlertAppearedInBranchAlertTool `json:"tool,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// Alert Instance
	MostRecentInstance *WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstance `json:"most_recent_instance,omitempty"`
}

// WebhookCodeScanningAlertAppearedInBranchAlertDismissedBy - User
type WebhookCodeScanningAlertAppearedInBranchAlertDismissedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookCodeScanningAlertAppearedInBranchAlertDismissedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstance - Alert Instance
type WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstance struct {
	// REQUIRED; Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes
// the workflow filename and job name.
	AnalysisKey *string `json:"analysis_key,omitempty"`

	// REQUIRED; Identifies the variable values associated with the environment in which the analysis that generated this alert
// instance was performed, such as the language that was analyzed.
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; The full Git reference, formatted as refs/heads/<branch name>.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; State of a code scanning alert.
	State *WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceState `json:"state,omitempty"`
	Classifications []*string `json:"classifications,omitempty"`
	CommitSHA *string `json:"commit_sha,omitempty"`
	Location *WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceLocation `json:"location,omitempty"`
	Message *WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceMessage `json:"message,omitempty"`
}

type WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceLocation struct {
	EndColumn *int32 `json:"end_column,omitempty"`
	EndLine *int32 `json:"end_line,omitempty"`
	Path *string `json:"path,omitempty"`
	StartColumn *int32 `json:"start_column,omitempty"`
	StartLine *int32 `json:"start_line,omitempty"`
}

type WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceMessage struct {
	Text *string `json:"text,omitempty"`
}

type WebhookCodeScanningAlertAppearedInBranchAlertRule struct {
	// REQUIRED; A short description of the rule used to detect the alert.
	Description *string `json:"description,omitempty"`

	// REQUIRED; A unique identifier for the rule used to detect the alert.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The severity of the alert.
	Severity *WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity `json:"severity,omitempty"`
}

type WebhookCodeScanningAlertAppearedInBranchAlertTool struct {
	// REQUIRED; The name of the tool used to generate the code scanning analysis alert.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The version of the tool used to detect the alert.
	Version *string `json:"version,omitempty"`
}

// WebhookCodeScanningAlertClosedByUser - codescanningalert closedbyuser event
type WebhookCodeScanningAlertClosedByUser struct {
	// REQUIRED
	Action *WebhookCodeScanningAlertClosedByUserAction `json:"action,omitempty"`

	// REQUIRED; The code scanning alert involved in the event.
	Alert *WebhookCodeScanningAlertClosedByUserAlert `json:"alert,omitempty"`

	// REQUIRED; The commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was
// triggered by the sender and this value will be empty.
	CommitOid *string `json:"commit_oid,omitempty"`

	// REQUIRED; The Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event
// was triggered by the sender and this value will be empty.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookCodeScanningAlertClosedByUserAlert - The code scanning alert involved in the event.
type WebhookCodeScanningAlertClosedByUserAlert struct {
	// REQUIRED; The time that the alert was created in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The time that the alert was dismissed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	DismissedAt *time.Time `json:"dismissed_at,omitempty"`

	// REQUIRED; User
	DismissedBy *WebhookCodeScanningAlertClosedByUserAlertDismissedBy `json:"dismissed_by,omitempty"`

	// REQUIRED; The reason for dismissing or closing the alert. Can be one of: false positive, won't fix, and used in tests.
	DismissedReason *WebhookCodeScanningAlertClosedByUserAlertDismissedReason `json:"dismissed_reason,omitempty"`

	// REQUIRED; The GitHub URL of the alert resource.
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The code scanning alert number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	Rule *WebhookCodeScanningAlertClosedByUserAlertRule `json:"rule,omitempty"`

	// REQUIRED; State of a code scanning alert.
	State *WebhookCodeScanningAlertClosedByUserAlertState `json:"state,omitempty"`

	// REQUIRED
	Tool *WebhookCodeScanningAlertClosedByUserAlertTool `json:"tool,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// Alert Instance
	MostRecentInstance *WebhookCodeScanningAlertClosedByUserAlertMostRecentInstance `json:"most_recent_instance,omitempty"`
}

// WebhookCodeScanningAlertClosedByUserAlertDismissedBy - User
type WebhookCodeScanningAlertClosedByUserAlertDismissedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookCodeScanningAlertClosedByUserAlertDismissedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookCodeScanningAlertClosedByUserAlertMostRecentInstance - Alert Instance
type WebhookCodeScanningAlertClosedByUserAlertMostRecentInstance struct {
	// REQUIRED; Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes
// the workflow filename and job name.
	AnalysisKey *string `json:"analysis_key,omitempty"`

	// REQUIRED; Identifies the variable values associated with the environment in which the analysis that generated this alert
// instance was performed, such as the language that was analyzed.
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; The full Git reference, formatted as refs/heads/<branch name>.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; State of a code scanning alert.
	State *WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceState `json:"state,omitempty"`
	Classifications []*string `json:"classifications,omitempty"`
	CommitSHA *string `json:"commit_sha,omitempty"`
	Location *WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceLocation `json:"location,omitempty"`
	Message *WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceMessage `json:"message,omitempty"`
}

type WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceLocation struct {
	EndColumn *int32 `json:"end_column,omitempty"`
	EndLine *int32 `json:"end_line,omitempty"`
	Path *string `json:"path,omitempty"`
	StartColumn *int32 `json:"start_column,omitempty"`
	StartLine *int32 `json:"start_line,omitempty"`
}

type WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceMessage struct {
	Text *string `json:"text,omitempty"`
}

type WebhookCodeScanningAlertClosedByUserAlertRule struct {
	// REQUIRED; A short description of the rule used to detect the alert.
	Description *string `json:"description,omitempty"`

	// REQUIRED; A unique identifier for the rule used to detect the alert.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The severity of the alert.
	Severity *WebhookCodeScanningAlertClosedByUserAlertRuleSeverity `json:"severity,omitempty"`
	FullDescription *string `json:"full_description,omitempty"`
	Help *string `json:"help,omitempty"`

	// A link to the documentation for the rule used to detect the alert.
	HelpURI *string `json:"help_uri,omitempty"`
	Name *string `json:"name,omitempty"`
	Tags []*string `json:"tags,omitempty"`
}

type WebhookCodeScanningAlertClosedByUserAlertTool struct {
	// REQUIRED; The name of the tool used to generate the code scanning analysis alert.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The version of the tool used to detect the alert.
	Version *string `json:"version,omitempty"`
	GUID *string `json:"guid,omitempty"`
}

// WebhookCodeScanningAlertCreated - codescanningalert created event
type WebhookCodeScanningAlertCreated struct {
	// REQUIRED
	Action *WebhookCodeScanningAlertCreatedAction `json:"action,omitempty"`

	// REQUIRED; The code scanning alert involved in the event.
	Alert *WebhookCodeScanningAlertCreatedAlert `json:"alert,omitempty"`

	// REQUIRED; The commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was
// triggered by the sender and this value will be empty.
	CommitOid *string `json:"commit_oid,omitempty"`

	// REQUIRED; The Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event
// was triggered by the sender and this value will be empty.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookCodeScanningAlertCreatedAlert - The code scanning alert involved in the event.
type WebhookCodeScanningAlertCreatedAlert struct {
	// REQUIRED; The time that the alert was created in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The time that the alert was dismissed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	DismissedAt any `json:"dismissed_at,omitempty"`

	// REQUIRED; Anything
	DismissedBy any `json:"dismissed_by,omitempty"`

	// REQUIRED; The reason for dismissing or closing the alert. Can be one of: false positive, won't fix, and used in tests.
	DismissedReason any `json:"dismissed_reason,omitempty"`

	// REQUIRED; The GitHub URL of the alert resource.
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The code scanning alert number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	Rule *WebhookCodeScanningAlertCreatedAlertRule `json:"rule,omitempty"`

	// REQUIRED; State of a code scanning alert.
	State *WebhookCodeScanningAlertCreatedAlertState `json:"state,omitempty"`

	// REQUIRED
	Tool *WebhookCodeScanningAlertCreatedAlertTool `json:"tool,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// The dismissal comment associated with the dismissal of the alert.
	DismissedComment *string `json:"dismissed_comment,omitempty"`

	// Anything
	FixedAt any `json:"fixed_at,omitempty"`
	InstancesURL *string `json:"instances_url,omitempty"`

	// Alert Instance
	MostRecentInstance *WebhookCodeScanningAlertCreatedAlertMostRecentInstance `json:"most_recent_instance,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// WebhookCodeScanningAlertCreatedAlertMostRecentInstance - Alert Instance
type WebhookCodeScanningAlertCreatedAlertMostRecentInstance struct {
	// REQUIRED; Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes
// the workflow filename and job name.
	AnalysisKey *string `json:"analysis_key,omitempty"`

	// REQUIRED; Identifies the variable values associated with the environment in which the analysis that generated this alert
// instance was performed, such as the language that was analyzed.
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; The full Git reference, formatted as refs/heads/<branch name>.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; State of a code scanning alert.
	State *WebhookCodeScanningAlertCreatedAlertMostRecentInstanceState `json:"state,omitempty"`
	Classifications []*string `json:"classifications,omitempty"`
	CommitSHA *string `json:"commit_sha,omitempty"`
	Location *WebhookCodeScanningAlertCreatedAlertMostRecentInstanceLocation `json:"location,omitempty"`
	Message *WebhookCodeScanningAlertCreatedAlertMostRecentInstanceMessage `json:"message,omitempty"`
}

type WebhookCodeScanningAlertCreatedAlertMostRecentInstanceLocation struct {
	EndColumn *int32 `json:"end_column,omitempty"`
	EndLine *int32 `json:"end_line,omitempty"`
	Path *string `json:"path,omitempty"`
	StartColumn *int32 `json:"start_column,omitempty"`
	StartLine *int32 `json:"start_line,omitempty"`
}

type WebhookCodeScanningAlertCreatedAlertMostRecentInstanceMessage struct {
	Text *string `json:"text,omitempty"`
}

type WebhookCodeScanningAlertCreatedAlertRule struct {
	// REQUIRED; A short description of the rule used to detect the alert.
	Description *string `json:"description,omitempty"`

	// REQUIRED; A unique identifier for the rule used to detect the alert.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The severity of the alert.
	Severity *WebhookCodeScanningAlertCreatedAlertRuleSeverity `json:"severity,omitempty"`
	FullDescription *string `json:"full_description,omitempty"`
	Help *string `json:"help,omitempty"`

	// A link to the documentation for the rule used to detect the alert.
	HelpURI *string `json:"help_uri,omitempty"`
	Name *string `json:"name,omitempty"`
	Tags []*string `json:"tags,omitempty"`
}

type WebhookCodeScanningAlertCreatedAlertTool struct {
	// REQUIRED; The name of the tool used to generate the code scanning analysis alert.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The version of the tool used to detect the alert.
	Version *string `json:"version,omitempty"`
	GUID *string `json:"guid,omitempty"`
}

// WebhookCodeScanningAlertFixed - codescanningalert fixed event
type WebhookCodeScanningAlertFixed struct {
	// REQUIRED
	Action *WebhookCodeScanningAlertFixedAction `json:"action,omitempty"`

	// REQUIRED; The code scanning alert involved in the event.
	Alert *WebhookCodeScanningAlertFixedAlert `json:"alert,omitempty"`

	// REQUIRED; The commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was
// triggered by the sender and this value will be empty.
	CommitOid *string `json:"commit_oid,omitempty"`

	// REQUIRED; The Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event
// was triggered by the sender and this value will be empty.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookCodeScanningAlertFixedAlert - The code scanning alert involved in the event.
type WebhookCodeScanningAlertFixedAlert struct {
	// REQUIRED; The time that the alert was created in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The time that the alert was dismissed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	DismissedAt *time.Time `json:"dismissed_at,omitempty"`

	// REQUIRED; User
	DismissedBy *WebhookCodeScanningAlertFixedAlertDismissedBy `json:"dismissed_by,omitempty"`

	// REQUIRED; The reason for dismissing or closing the alert. Can be one of: false positive, won't fix, and used in tests.
	DismissedReason *WebhookCodeScanningAlertFixedAlertDismissedReason `json:"dismissed_reason,omitempty"`

	// REQUIRED; The GitHub URL of the alert resource.
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The code scanning alert number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	Rule *WebhookCodeScanningAlertFixedAlertRule `json:"rule,omitempty"`

	// REQUIRED; State of a code scanning alert.
	State *WebhookCodeScanningAlertFixedAlertState `json:"state,omitempty"`

	// REQUIRED
	Tool *WebhookCodeScanningAlertFixedAlertTool `json:"tool,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	InstancesURL *string `json:"instances_url,omitempty"`

	// Alert Instance
	MostRecentInstance *WebhookCodeScanningAlertFixedAlertMostRecentInstance `json:"most_recent_instance,omitempty"`
}

// WebhookCodeScanningAlertFixedAlertDismissedBy - User
type WebhookCodeScanningAlertFixedAlertDismissedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookCodeScanningAlertFixedAlertDismissedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookCodeScanningAlertFixedAlertMostRecentInstance - Alert Instance
type WebhookCodeScanningAlertFixedAlertMostRecentInstance struct {
	// REQUIRED; Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes
// the workflow filename and job name.
	AnalysisKey *string `json:"analysis_key,omitempty"`

	// REQUIRED; Identifies the variable values associated with the environment in which the analysis that generated this alert
// instance was performed, such as the language that was analyzed.
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; The full Git reference, formatted as refs/heads/<branch name>.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; State of a code scanning alert.
	State *WebhookCodeScanningAlertFixedAlertMostRecentInstanceState `json:"state,omitempty"`
	Classifications []*string `json:"classifications,omitempty"`
	CommitSHA *string `json:"commit_sha,omitempty"`
	Location *WebhookCodeScanningAlertFixedAlertMostRecentInstanceLocation `json:"location,omitempty"`
	Message *WebhookCodeScanningAlertFixedAlertMostRecentInstanceMessage `json:"message,omitempty"`
}

type WebhookCodeScanningAlertFixedAlertMostRecentInstanceLocation struct {
	EndColumn *int32 `json:"end_column,omitempty"`
	EndLine *int32 `json:"end_line,omitempty"`
	Path *string `json:"path,omitempty"`
	StartColumn *int32 `json:"start_column,omitempty"`
	StartLine *int32 `json:"start_line,omitempty"`
}

type WebhookCodeScanningAlertFixedAlertMostRecentInstanceMessage struct {
	Text *string `json:"text,omitempty"`
}

type WebhookCodeScanningAlertFixedAlertRule struct {
	// REQUIRED; A short description of the rule used to detect the alert.
	Description *string `json:"description,omitempty"`

	// REQUIRED; A unique identifier for the rule used to detect the alert.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The severity of the alert.
	Severity *WebhookCodeScanningAlertFixedAlertRuleSeverity `json:"severity,omitempty"`
	FullDescription *string `json:"full_description,omitempty"`
	Help *string `json:"help,omitempty"`

	// A link to the documentation for the rule used to detect the alert.
	HelpURI *string `json:"help_uri,omitempty"`
	Name *string `json:"name,omitempty"`
	Tags []*string `json:"tags,omitempty"`
}

type WebhookCodeScanningAlertFixedAlertTool struct {
	// REQUIRED; The name of the tool used to generate the code scanning analysis alert.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The version of the tool used to detect the alert.
	Version *string `json:"version,omitempty"`
	GUID *string `json:"guid,omitempty"`
}

// WebhookCodeScanningAlertReopened - codescanningalert reopened event
type WebhookCodeScanningAlertReopened struct {
	// REQUIRED
	Action *WebhookCodeScanningAlertReopenedAction `json:"action,omitempty"`

	// REQUIRED; The code scanning alert involved in the event.
	Alert *WebhookCodeScanningAlertReopenedAlert `json:"alert,omitempty"`

	// REQUIRED; The commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was
// triggered by the sender and this value will be empty.
	CommitOid *string `json:"commit_oid,omitempty"`

	// REQUIRED; The Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event
// was triggered by the sender and this value will be empty.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookCodeScanningAlertReopenedAlert - The code scanning alert involved in the event.
type WebhookCodeScanningAlertReopenedAlert struct {
	// REQUIRED; The time that the alert was created in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The time that the alert was dismissed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	DismissedAt *string `json:"dismissed_at,omitempty"`

	// REQUIRED; Anything
	DismissedBy any `json:"dismissed_by,omitempty"`

	// REQUIRED; The reason for dismissing or closing the alert. Can be one of: false positive, won't fix, and used in tests.
	DismissedReason *string `json:"dismissed_reason,omitempty"`

	// REQUIRED; The GitHub URL of the alert resource.
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The code scanning alert number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	Rule *WebhookCodeScanningAlertReopenedAlertRule `json:"rule,omitempty"`

	// REQUIRED; State of a code scanning alert.
	State *WebhookCodeScanningAlertReopenedAlertState `json:"state,omitempty"`

	// REQUIRED
	Tool *WebhookCodeScanningAlertReopenedAlertTool `json:"tool,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// Alert Instance
	MostRecentInstance *WebhookCodeScanningAlertReopenedAlertMostRecentInstance `json:"most_recent_instance,omitempty"`
}

// WebhookCodeScanningAlertReopenedAlertMostRecentInstance - Alert Instance
type WebhookCodeScanningAlertReopenedAlertMostRecentInstance struct {
	// REQUIRED; Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes
// the workflow filename and job name.
	AnalysisKey *string `json:"analysis_key,omitempty"`

	// REQUIRED; Identifies the variable values associated with the environment in which the analysis that generated this alert
// instance was performed, such as the language that was analyzed.
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; The full Git reference, formatted as refs/heads/<branch name>.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; State of a code scanning alert.
	State *WebhookCodeScanningAlertReopenedAlertMostRecentInstanceState `json:"state,omitempty"`
	Classifications []*string `json:"classifications,omitempty"`
	CommitSHA *string `json:"commit_sha,omitempty"`
	Location *WebhookCodeScanningAlertReopenedAlertMostRecentInstanceLocation `json:"location,omitempty"`
	Message *WebhookCodeScanningAlertReopenedAlertMostRecentInstanceMessage `json:"message,omitempty"`
}

type WebhookCodeScanningAlertReopenedAlertMostRecentInstanceLocation struct {
	EndColumn *int32 `json:"end_column,omitempty"`
	EndLine *int32 `json:"end_line,omitempty"`
	Path *string `json:"path,omitempty"`
	StartColumn *int32 `json:"start_column,omitempty"`
	StartLine *int32 `json:"start_line,omitempty"`
}

type WebhookCodeScanningAlertReopenedAlertMostRecentInstanceMessage struct {
	Text *string `json:"text,omitempty"`
}

type WebhookCodeScanningAlertReopenedAlertRule struct {
	// REQUIRED; A short description of the rule used to detect the alert.
	Description *string `json:"description,omitempty"`

	// REQUIRED; A unique identifier for the rule used to detect the alert.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The severity of the alert.
	Severity *WebhookCodeScanningAlertReopenedAlertRuleSeverity `json:"severity,omitempty"`
	FullDescription *string `json:"full_description,omitempty"`
	Help *string `json:"help,omitempty"`

	// A link to the documentation for the rule used to detect the alert.
	HelpURI *string `json:"help_uri,omitempty"`
	Name *string `json:"name,omitempty"`
	Tags []*string `json:"tags,omitempty"`
}

type WebhookCodeScanningAlertReopenedAlertTool struct {
	// REQUIRED; The name of the tool used to generate the code scanning analysis alert.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The version of the tool used to detect the alert.
	Version *string `json:"version,omitempty"`
	GUID *string `json:"guid,omitempty"`
}

// WebhookCodeScanningAlertReopenedByUser - codescanningalert reopenedbyuser event
type WebhookCodeScanningAlertReopenedByUser struct {
	// REQUIRED
	Action *WebhookCodeScanningAlertReopenedByUserAction `json:"action,omitempty"`

	// REQUIRED; The code scanning alert involved in the event.
	Alert *WebhookCodeScanningAlertReopenedByUserAlert `json:"alert,omitempty"`

	// REQUIRED; The commit SHA of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event was
// triggered by the sender and this value will be empty.
	CommitOid *string `json:"commit_oid,omitempty"`

	// REQUIRED; The Git reference of the code scanning alert. When the action is reopened_by_user or closed_by_user, the event
// was triggered by the sender and this value will be empty.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookCodeScanningAlertReopenedByUserAlert - The code scanning alert involved in the event.
type WebhookCodeScanningAlertReopenedByUserAlert struct {
	// REQUIRED; The time that the alert was created in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The time that the alert was dismissed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	DismissedAt any `json:"dismissed_at,omitempty"`

	// REQUIRED; Anything
	DismissedBy any `json:"dismissed_by,omitempty"`

	// REQUIRED; The reason for dismissing or closing the alert. Can be one of: false positive, won't fix, and used in tests.
	DismissedReason any `json:"dismissed_reason,omitempty"`

	// REQUIRED; The GitHub URL of the alert resource.
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The code scanning alert number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	Rule *WebhookCodeScanningAlertReopenedByUserAlertRule `json:"rule,omitempty"`

	// REQUIRED; State of a code scanning alert.
	State *WebhookCodeScanningAlertReopenedByUserAlertState `json:"state,omitempty"`

	// REQUIRED
	Tool *WebhookCodeScanningAlertReopenedByUserAlertTool `json:"tool,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// Alert Instance
	MostRecentInstance *WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstance `json:"most_recent_instance,omitempty"`
}

// WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstance - Alert Instance
type WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstance struct {
	// REQUIRED; Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes
// the workflow filename and job name.
	AnalysisKey *string `json:"analysis_key,omitempty"`

	// REQUIRED; Identifies the variable values associated with the environment in which the analysis that generated this alert
// instance was performed, such as the language that was analyzed.
	Environment *string `json:"environment,omitempty"`

	// REQUIRED; The full Git reference, formatted as refs/heads/<branch name>.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; State of a code scanning alert.
	State *WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceState `json:"state,omitempty"`
	Classifications []*string `json:"classifications,omitempty"`
	CommitSHA *string `json:"commit_sha,omitempty"`
	Location *WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceLocation `json:"location,omitempty"`
	Message *WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceMessage `json:"message,omitempty"`
}

type WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceLocation struct {
	EndColumn *int32 `json:"end_column,omitempty"`
	EndLine *int32 `json:"end_line,omitempty"`
	Path *string `json:"path,omitempty"`
	StartColumn *int32 `json:"start_column,omitempty"`
	StartLine *int32 `json:"start_line,omitempty"`
}

type WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceMessage struct {
	Text *string `json:"text,omitempty"`
}

type WebhookCodeScanningAlertReopenedByUserAlertRule struct {
	// REQUIRED; A short description of the rule used to detect the alert.
	Description *string `json:"description,omitempty"`

	// REQUIRED; A unique identifier for the rule used to detect the alert.
	ID *string `json:"id,omitempty"`

	// REQUIRED; The severity of the alert.
	Severity *WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity `json:"severity,omitempty"`
}

type WebhookCodeScanningAlertReopenedByUserAlertTool struct {
	// REQUIRED; The name of the tool used to generate the code scanning analysis alert.
	Name *string `json:"name,omitempty"`

	// REQUIRED; The version of the tool used to detect the alert.
	Version *string `json:"version,omitempty"`
}

// WebhookCommitCommentCreated - commit_comment created event
type WebhookCommitCommentCreated struct {
	// REQUIRED; The action performed. Can be created.
	Action *WebhookCommitCommentCreatedAction `json:"action,omitempty"`

	// REQUIRED; The commit comment [https://docs.github.com/rest/reference/repos#get-a-commit-comment] resource.
	Comment *WebhookCommitCommentCreatedComment `json:"comment,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookCommitCommentCreatedComment - The commit comment [https://docs.github.com/rest/reference/repos#get-a-commit-comment]
// resource.
type WebhookCommitCommentCreatedComment struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookCommitCommentCreatedCommentAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The text of the comment.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The SHA of the commit to which the comment applies.
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The ID of the commit comment.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	Line *int32 `json:"line,omitempty"`

	// REQUIRED; The node ID of the commit comment.
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The relative path of the file to which the comment applies.
	Path *string `json:"path,omitempty"`

	// REQUIRED; The line index in the diff to which the comment applies.
	Position *int32 `json:"position,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookCommitCommentCreatedCommentUser `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookCommitCommentCreatedCommentReactions `json:"reactions,omitempty"`
}

// WebhookCommitCommentCreatedCommentReactions - Reactions
type WebhookCommitCommentCreatedCommentReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookCommitCommentCreatedCommentUser - User
type WebhookCommitCommentCreatedCommentUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookCommitCommentCreatedCommentUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookConfig - Configuration object of the webhook
type WebhookConfig struct {
	// The media type used to serialize the payloads. Supported values include json and form. The default is form.
	ContentType *string `json:"content_type,omitempty"`
	InsecureSSL *WebhookConfigInsecureSSL `json:"insecure_ssl,omitempty"`

	// If provided, the secret will be used as the key to generate the HMAC hex digest value for delivery signature headers [https://docs.github.com/webhooks/event-payloads/#delivery-headers].
	Secret *string `json:"secret,omitempty"`

	// The URL to which the payloads will be delivered.
	URL *string `json:"url,omitempty"`
}

type WebhookConfigInsecureSSL struct {
}

// WebhookCreate - create event
type WebhookCreate struct {
	// REQUIRED; The repository's current description.
	Description *string `json:"description,omitempty"`

	// REQUIRED; The name of the repository's default branch (usually main).
	MasterBranch *string `json:"master_branch,omitempty"`

	// REQUIRED; The pusher type for the event. Can be either user or a deploy key.
	PusherType *string `json:"pusher_type,omitempty"`

	// REQUIRED; The git ref [https://docs.github.com/rest/reference/git#get-a-reference] resource.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; The type of Git ref object created in the repository.
	RefType *WebhookCreateRefType `json:"ref_type,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookDelete - delete event
type WebhookDelete struct {
	// REQUIRED; The pusher type for the event. Can be either user or a deploy key.
	PusherType *string `json:"pusher_type,omitempty"`

	// REQUIRED; The git ref [https://docs.github.com/rest/reference/git#get-a-reference] resource.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; The type of Git ref object deleted in the repository.
	RefType *WebhookDeleteRefType `json:"ref_type,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookDependabotAlertCreated - Dependabot alert created event
type WebhookDependabotAlertCreated struct {
	// REQUIRED
	Action *WebhookDependabotAlertCreatedAction `json:"action,omitempty"`

	// REQUIRED; A Dependabot alert.
	Alert *DependabotAlert `json:"alert,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookDependabotAlertDismissed - Dependabot alert dismissed event
type WebhookDependabotAlertDismissed struct {
	// REQUIRED
	Action *WebhookDependabotAlertDismissedAction `json:"action,omitempty"`

	// REQUIRED; A Dependabot alert.
	Alert *DependabotAlert `json:"alert,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookDependabotAlertFixed - Dependabot alert fixed event
type WebhookDependabotAlertFixed struct {
	// REQUIRED
	Action *WebhookDependabotAlertFixedAction `json:"action,omitempty"`

	// REQUIRED; A Dependabot alert.
	Alert *DependabotAlert `json:"alert,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookDependabotAlertReintroduced - Dependabot alert reintroduced event
type WebhookDependabotAlertReintroduced struct {
	// REQUIRED
	Action *WebhookDependabotAlertReintroducedAction `json:"action,omitempty"`

	// REQUIRED; A Dependabot alert.
	Alert *DependabotAlert `json:"alert,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookDependabotAlertReopened - Dependabot alert reopened event
type WebhookDependabotAlertReopened struct {
	// REQUIRED
	Action *WebhookDependabotAlertReopenedAction `json:"action,omitempty"`

	// REQUIRED; A Dependabot alert.
	Alert *DependabotAlert `json:"alert,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookDeployKeyCreated - deploy_key created event
type WebhookDeployKeyCreated struct {
	// REQUIRED
	Action *WebhookDeployKeyCreatedAction `json:"action,omitempty"`

	// REQUIRED; The deploy key [https://docs.github.com/rest/reference/deployments#get-a-deploy-key] resource.
	Key *WebhookDeployKeyCreatedKey `json:"key,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookDeployKeyCreatedKey - The deploy key [https://docs.github.com/rest/reference/deployments#get-a-deploy-key] resource.
type WebhookDeployKeyCreatedKey struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	ReadOnly *bool `json:"read_only,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	Verified *bool `json:"verified,omitempty"`
	AddedBy *string `json:"added_by,omitempty"`
	LastUsed *string `json:"last_used,omitempty"`
}

// WebhookDeployKeyDeleted - deploy_key deleted event
type WebhookDeployKeyDeleted struct {
	// REQUIRED
	Action *WebhookDeployKeyDeletedAction `json:"action,omitempty"`

	// REQUIRED; The deploy key [https://docs.github.com/rest/reference/deployments#get-a-deploy-key] resource.
	Key *WebhookDeployKeyDeletedKey `json:"key,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookDeployKeyDeletedKey - The deploy key [https://docs.github.com/rest/reference/deployments#get-a-deploy-key] resource.
type WebhookDeployKeyDeletedKey struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	ReadOnly *bool `json:"read_only,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	Verified *bool `json:"verified,omitempty"`
	AddedBy *string `json:"added_by,omitempty"`
	LastUsed *string `json:"last_used,omitempty"`
}

// WebhookDeploymentCreated - deployment created event
type WebhookDeploymentCreated struct {
	// REQUIRED
	Action *WebhookDeploymentCreatedAction `json:"action,omitempty"`

	// REQUIRED; The deployment [https://docs.github.com/rest/reference/deployments#list-deployments].
	Deployment *WebhookDeploymentCreatedDeployment `json:"deployment,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED; Workflow
	Workflow *WebhookDeploymentCreatedWorkflow `json:"workflow,omitempty"`

	// REQUIRED; Deployment Workflow Run
	WorkflowRun *WebhookDeploymentCreatedWorkflowRun `json:"workflow_run,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookDeploymentCreatedDeployment - The deployment [https://docs.github.com/rest/reference/deployments#list-deployments].
type WebhookDeploymentCreatedDeployment struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookDeploymentCreatedDeploymentCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Environment *string `json:"environment,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OriginalEnvironment *string `json:"original_environment,omitempty"`

	// REQUIRED
	Payload *WebhookDeploymentCreatedDeploymentPayload `json:"payload,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	Task *string `json:"task,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookDeploymentCreatedDeploymentPerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	ProductionEnvironment *bool `json:"production_environment,omitempty"`
	TransientEnvironment *bool `json:"transient_environment,omitempty"`
}

// WebhookDeploymentCreatedDeploymentCreator - User
type WebhookDeploymentCreatedDeploymentCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDeploymentCreatedDeploymentCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDeploymentCreatedDeploymentPayload struct {
}

// WebhookDeploymentCreatedDeploymentPerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed
// directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions
// and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookDeploymentCreatedDeploymentPerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwner - User
type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissions struct {
	Actions *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

// WebhookDeploymentCreatedWorkflow - Workflow
type WebhookDeploymentCreatedWorkflow struct {
	// REQUIRED
	BadgeURL *string `json:"badge_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookDeploymentCreatedWorkflowRun - Deployment Workflow Run
type WebhookDeploymentCreatedWorkflowRun struct {
	// REQUIRED; User
	Actor *WebhookDeploymentCreatedWorkflowRunActor `json:"actor,omitempty"`

	// REQUIRED
	CheckSuiteID *int32 `json:"check_suite_id,omitempty"`

	// REQUIRED
	CheckSuiteNodeID *string `json:"check_suite_node_id,omitempty"`

	// REQUIRED
	Conclusion *WebhookDeploymentCreatedWorkflowRunConclusion `json:"conclusion,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DisplayTitle *string `json:"display_title,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HeadBranch *string `json:"head_branch,omitempty"`

	// REQUIRED
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	PullRequests []*WebhookDeploymentCreatedWorkflowRunPullRequestsItem `json:"pull_requests,omitempty"`

	// REQUIRED
	RunAttempt *int32 `json:"run_attempt,omitempty"`

	// REQUIRED
	RunNumber *int32 `json:"run_number,omitempty"`

	// REQUIRED
	RunStartedAt *time.Time `json:"run_started_at,omitempty"`

	// REQUIRED
	Status *WebhookDeploymentCreatedWorkflowRunStatus `json:"status,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	WorkflowID *int32 `json:"workflow_id,omitempty"`
	ArtifactsURL *string `json:"artifacts_url,omitempty"`
	CancelURL *string `json:"cancel_url,omitempty"`
	CheckSuiteURL *string `json:"check_suite_url,omitempty"`

	// Anything
	HeadCommit any `json:"head_commit,omitempty"`
	HeadRepository *WebhookDeploymentCreatedWorkflowRunHeadRepository `json:"head_repository,omitempty"`
	JobsURL *string `json:"jobs_url,omitempty"`
	LogsURL *string `json:"logs_url,omitempty"`

	// Anything
	PreviousAttemptURL any `json:"previous_attempt_url,omitempty"`
	ReferencedWorkflows []*WebhookDeploymentCreatedWorkflowRunReferencedWorkflowsItem `json:"referenced_workflows,omitempty"`
	Repository *WebhookDeploymentCreatedWorkflowRunRepository `json:"repository,omitempty"`
	RerunURL *string `json:"rerun_url,omitempty"`

	// User
	TriggeringActor *WebhookDeploymentCreatedWorkflowRunTriggeringActor `json:"triggering_actor,omitempty"`
	WorkflowURL *string `json:"workflow_url,omitempty"`
}

// WebhookDeploymentCreatedWorkflowRunActor - User
type WebhookDeploymentCreatedWorkflowRunActor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDeploymentCreatedWorkflowRunActorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDeploymentCreatedWorkflowRunHeadRepository struct {
	ArchiveURL *string `json:"archive_url,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// Anything
	Description any `json:"description,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	Owner *WebhookDeploymentCreatedWorkflowRunHeadRepositoryOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDeploymentCreatedWorkflowRunHeadRepositoryOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDeploymentCreatedWorkflowRunPullRequestsItem - Check Run Pull Request
type WebhookDeploymentCreatedWorkflowRunPullRequestsItem struct {
	// REQUIRED
	Base *WebhookDeploymentCreatedWorkflowRunPullRequestsItemBase `json:"base,omitempty"`

	// REQUIRED
	Head *WebhookDeploymentCreatedWorkflowRunPullRequestsItemHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookDeploymentCreatedWorkflowRunPullRequestsItemBase struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *Components151F0U9SchemasWebhookDeploymentCreatedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesBasePropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

type WebhookDeploymentCreatedWorkflowRunPullRequestsItemHead struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *ComponentsT5WxieSchemasWebhookDeploymentCreatedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesHeadPropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

type WebhookDeploymentCreatedWorkflowRunReferencedWorkflowsItem struct {
	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
	Ref *string `json:"ref,omitempty"`
}

type WebhookDeploymentCreatedWorkflowRunRepository struct {
	ArchiveURL *string `json:"archive_url,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// Anything
	Description any `json:"description,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	Owner *WebhookDeploymentCreatedWorkflowRunRepositoryOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDeploymentCreatedWorkflowRunRepositoryOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDeploymentCreatedWorkflowRunTriggeringActor - User
type WebhookDeploymentCreatedWorkflowRunTriggeringActor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDeploymentCreatedWorkflowRunTriggeringActorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDeploymentStatusCreated - deployment_status created event
type WebhookDeploymentStatusCreated struct {
	// REQUIRED
	Action *WebhookDeploymentStatusCreatedAction `json:"action,omitempty"`

	// REQUIRED; The deployment [https://docs.github.com/rest/reference/deployments#list-deployments].
	Deployment *WebhookDeploymentStatusCreatedDeployment `json:"deployment,omitempty"`

	// REQUIRED; The deployment status [https://docs.github.com/rest/reference/deployments#list-deployment-statuses].
	DeploymentStatus *WebhookDeploymentStatusCreatedDeploymentStatus `json:"deployment_status,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
	CheckRun *WebhookDeploymentStatusCreatedCheckRun `json:"check_run,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// Workflow
	Workflow *WebhookDeploymentStatusCreatedWorkflow `json:"workflow,omitempty"`

	// Deployment Workflow Run
	WorkflowRun *WebhookDeploymentStatusCreatedWorkflowRun `json:"workflow_run,omitempty"`
}

type WebhookDeploymentStatusCreatedCheckRun struct {
	// REQUIRED
	CompletedAt *time.Time `json:"completed_at,omitempty"`

	// REQUIRED; The result of the completed check run. Can be one of success, failure, neutral, cancelled, timed_out, action_required
// or stale. This value will be null until the check run has completed.
	Conclusion *WebhookDeploymentStatusCreatedCheckRunConclusion `json:"conclusion,omitempty"`

	// REQUIRED
	DetailsURL *string `json:"details_url,omitempty"`

	// REQUIRED
	ExternalID *string `json:"external_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The SHA of the commit that is being checked.
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED; The id of the check.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the check run.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	StartedAt *time.Time `json:"started_at,omitempty"`

	// REQUIRED; The current status of the check run. Can be queued, in_progress, or completed.
	Status *WebhookDeploymentStatusCreatedCheckRunStatus `json:"status,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDeploymentStatusCreatedDeployment - The deployment [https://docs.github.com/rest/reference/deployments#list-deployments].
type WebhookDeploymentStatusCreatedDeployment struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookDeploymentStatusCreatedDeploymentCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Environment *string `json:"environment,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OriginalEnvironment *string `json:"original_environment,omitempty"`

	// REQUIRED
	Payload *WebhookDeploymentStatusCreatedDeploymentPayload `json:"payload,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	Task *string `json:"task,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	ProductionEnvironment *bool `json:"production_environment,omitempty"`
	TransientEnvironment *bool `json:"transient_environment,omitempty"`
}

// WebhookDeploymentStatusCreatedDeploymentCreator - User
type WebhookDeploymentStatusCreatedDeploymentCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDeploymentStatusCreatedDeploymentCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDeploymentStatusCreatedDeploymentPayload struct {
}

// WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be
// installed directly on organizations and user accounts and granted access to specific repositories. They come with granular
// permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwner - User
type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissions struct {
	Actions *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

// WebhookDeploymentStatusCreatedDeploymentStatus - The deployment status [https://docs.github.com/rest/reference/deployments#list-deployment-statuses].
type WebhookDeploymentStatusCreatedDeploymentStatus struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookDeploymentStatusCreatedDeploymentStatusCreator `json:"creator,omitempty"`

	// REQUIRED
	DeploymentURL *string `json:"deployment_url,omitempty"`

	// REQUIRED; The optional human-readable description added to the status.
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Environment *string `json:"environment,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; The new state. Can be pending, success, failure, or error.
	State *string `json:"state,omitempty"`

	// REQUIRED; The optional link added to the status.
	TargetURL *string `json:"target_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	EnvironmentURL *string `json:"environment_url,omitempty"`
	LogURL *string `json:"log_url,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
}

// WebhookDeploymentStatusCreatedDeploymentStatusCreator - User
type WebhookDeploymentStatusCreatedDeploymentStatusCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDeploymentStatusCreatedDeploymentStatusCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They
// can be installed directly on organizations and user accounts and granted access to specific repositories. They come with
// granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwner - User
type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissions - The set of permissions for the GitHub
// app
type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissions struct {
	Actions *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

// WebhookDeploymentStatusCreatedWorkflow - Workflow
type WebhookDeploymentStatusCreatedWorkflow struct {
	// REQUIRED
	BadgeURL *string `json:"badge_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookDeploymentStatusCreatedWorkflowRun - Deployment Workflow Run
type WebhookDeploymentStatusCreatedWorkflowRun struct {
	// REQUIRED; User
	Actor *WebhookDeploymentStatusCreatedWorkflowRunActor `json:"actor,omitempty"`

	// REQUIRED
	CheckSuiteID *int32 `json:"check_suite_id,omitempty"`

	// REQUIRED
	CheckSuiteNodeID *string `json:"check_suite_node_id,omitempty"`

	// REQUIRED
	Conclusion *WebhookDeploymentStatusCreatedWorkflowRunConclusion `json:"conclusion,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DisplayTitle *string `json:"display_title,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HeadBranch *string `json:"head_branch,omitempty"`

	// REQUIRED
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	PullRequests []*WebhookDeploymentStatusCreatedWorkflowRunPullRequestsItem `json:"pull_requests,omitempty"`

	// REQUIRED
	RunAttempt *int32 `json:"run_attempt,omitempty"`

	// REQUIRED
	RunNumber *int32 `json:"run_number,omitempty"`

	// REQUIRED
	RunStartedAt *time.Time `json:"run_started_at,omitempty"`

	// REQUIRED
	Status *WebhookDeploymentStatusCreatedWorkflowRunStatus `json:"status,omitempty"`

	// REQUIRED; User
	TriggeringActor *WebhookDeploymentStatusCreatedWorkflowRunTriggeringActor `json:"triggering_actor,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	WorkflowID *int32 `json:"workflow_id,omitempty"`
	ArtifactsURL *string `json:"artifacts_url,omitempty"`
	CancelURL *string `json:"cancel_url,omitempty"`
	CheckSuiteURL *string `json:"check_suite_url,omitempty"`

	// Anything
	HeadCommit any `json:"head_commit,omitempty"`
	HeadRepository *WebhookDeploymentStatusCreatedWorkflowRunHeadRepository `json:"head_repository,omitempty"`
	JobsURL *string `json:"jobs_url,omitempty"`
	LogsURL *string `json:"logs_url,omitempty"`

	// Anything
	PreviousAttemptURL any `json:"previous_attempt_url,omitempty"`
	ReferencedWorkflows []*WebhookDeploymentStatusCreatedWorkflowRunReferencedWorkflowsItem `json:"referenced_workflows,omitempty"`
	Repository *WebhookDeploymentStatusCreatedWorkflowRunRepository `json:"repository,omitempty"`
	RerunURL *string `json:"rerun_url,omitempty"`
	WorkflowURL *string `json:"workflow_url,omitempty"`
}

// WebhookDeploymentStatusCreatedWorkflowRunActor - User
type WebhookDeploymentStatusCreatedWorkflowRunActor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDeploymentStatusCreatedWorkflowRunActorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDeploymentStatusCreatedWorkflowRunHeadRepository struct {
	ArchiveURL *string `json:"archive_url,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// Anything
	Description any `json:"description,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	Owner *WebhookDeploymentStatusCreatedWorkflowRunHeadRepositoryOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDeploymentStatusCreatedWorkflowRunHeadRepositoryOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDeploymentStatusCreatedWorkflowRunPullRequestsItem - Check Run Pull Request
type WebhookDeploymentStatusCreatedWorkflowRunPullRequestsItem struct {
	// REQUIRED
	Base *WebhookDeploymentStatusCreatedWorkflowRunPullRequestsItemBase `json:"base,omitempty"`

	// REQUIRED
	Head *WebhookDeploymentStatusCreatedWorkflowRunPullRequestsItemHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookDeploymentStatusCreatedWorkflowRunPullRequestsItemBase struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *ComponentsNnhm91SchemasWebhookDeploymentStatusCreatedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesBasePropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

type WebhookDeploymentStatusCreatedWorkflowRunPullRequestsItemHead struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *ComponentsVjsovjSchemasWebhookDeploymentStatusCreatedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesHeadPropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

type WebhookDeploymentStatusCreatedWorkflowRunReferencedWorkflowsItem struct {
	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
	Ref *string `json:"ref,omitempty"`
}

type WebhookDeploymentStatusCreatedWorkflowRunRepository struct {
	ArchiveURL *string `json:"archive_url,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// Anything
	Description any `json:"description,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	Owner *WebhookDeploymentStatusCreatedWorkflowRunRepositoryOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDeploymentStatusCreatedWorkflowRunRepositoryOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDeploymentStatusCreatedWorkflowRunTriggeringActor - User
type WebhookDeploymentStatusCreatedWorkflowRunTriggeringActor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDeploymentStatusCreatedWorkflowRunTriggeringActorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionAnswered - discussion answered event
type WebhookDiscussionAnswered struct {
	// REQUIRED
	Action *WebhookDiscussionAnsweredAction `json:"action,omitempty"`

	// REQUIRED
	Answer *WebhookDiscussionAnsweredAnswer `json:"answer,omitempty"`

	// REQUIRED
	Discussion *WebhookDiscussionAnsweredDiscussion `json:"discussion,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookDiscussionAnsweredAnswer struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionAnsweredAnswerAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ChildCommentCount *int32 `json:"child_comment_count,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiscussionID *int32 `json:"discussion_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Anything
	ParentID any `json:"parent_id,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionAnsweredAnswerUser `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionAnsweredAnswerReactions `json:"reactions,omitempty"`
}

// WebhookDiscussionAnsweredAnswerReactions - Reactions
type WebhookDiscussionAnsweredAnswerReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionAnsweredAnswerUser - User
type WebhookDiscussionAnsweredAnswerUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionAnsweredAnswerUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionAnsweredDiscussion struct {
}

// WebhookDiscussionAnsweredDiscussion0AnswerChosenBy - User
type WebhookDiscussionAnsweredDiscussion0AnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionAnsweredDiscussion0AnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionAnsweredDiscussion0Category struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionAnsweredDiscussion0Reactions - Reactions
type WebhookDiscussionAnsweredDiscussion0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionAnsweredDiscussion0User - User
type WebhookDiscussionAnsweredDiscussion0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionAnsweredDiscussion0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionAnsweredDiscussion1AnswerChosenBy - User
type WebhookDiscussionAnsweredDiscussion1AnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionAnsweredDiscussion1AnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionAnsweredDiscussion1Category struct {
	// REQUIRED
	IsAnswerable *Enum674 `json:"is_answerable,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Description *string `json:"description,omitempty"`
	Emoji *string `json:"emoji,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	RepositoryID *int32 `json:"repository_id,omitempty"`
	Slug *string `json:"slug,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type WebhookDiscussionAnsweredDiscussion1Reactions struct {
	ThumbsUp *int32 `json:"+1,omitempty"`
	ThumbsDown *int32 `json:"-1,omitempty"`
	Confused *int32 `json:"confused,omitempty"`
	Eyes *int32 `json:"eyes,omitempty"`
	Heart *int32 `json:"heart,omitempty"`
	Hooray *int32 `json:"hooray,omitempty"`
	Laugh *int32 `json:"laugh,omitempty"`
	Rocket *int32 `json:"rocket,omitempty"`
	TotalCount *int32 `json:"total_count,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionAnsweredDiscussion1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCategoryChanged - discussion category changed event
type WebhookDiscussionCategoryChanged struct {
	// REQUIRED
	Action *WebhookDiscussionCategoryChangedAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookDiscussionCategoryChangedChanges `json:"changes,omitempty"`

	// REQUIRED; Discussion
	Discussion *WebhookDiscussionCategoryChangedDiscussion `json:"discussion,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookDiscussionCategoryChangedChanges struct {
	// REQUIRED
	Category *WebhookDiscussionCategoryChangedChangesCategory `json:"category,omitempty"`
}

type WebhookDiscussionCategoryChangedChangesCategory struct {
	// REQUIRED
	From *WebhookDiscussionCategoryChangedChangesCategoryFrom `json:"from,omitempty"`
}

type WebhookDiscussionCategoryChangedChangesCategoryFrom struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionCategoryChangedDiscussion - Discussion
type WebhookDiscussionCategoryChangedDiscussion struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionCategoryChangedDiscussionAnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionCategoryChangedDiscussionAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionCategoryChangedDiscussionCategory `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionCategoryChangedDiscussionState `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionCategoryChangedDiscussionUser `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionCategoryChangedDiscussionReactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookDiscussionCategoryChangedDiscussionAnswerChosenBy - User
type WebhookDiscussionCategoryChangedDiscussionAnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionCategoryChangedDiscussionAnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionCategoryChangedDiscussionCategory struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionCategoryChangedDiscussionReactions - Reactions
type WebhookDiscussionCategoryChangedDiscussionReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCategoryChangedDiscussionUser - User
type WebhookDiscussionCategoryChangedDiscussionUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionCategoryChangedDiscussionUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCommentCreated - discussion_comment created event
type WebhookDiscussionCommentCreated struct {
	// REQUIRED
	Action *WebhookDiscussionCommentCreatedAction `json:"action,omitempty"`

	// REQUIRED
	Comment *WebhookDiscussionCommentCreatedComment `json:"comment,omitempty"`

	// REQUIRED; Discussion
	Discussion *WebhookDiscussionCommentCreatedDiscussion `json:"discussion,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookDiscussionCommentCreatedComment struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionCommentCreatedCommentAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ChildCommentCount *int32 `json:"child_comment_count,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	DiscussionID *int32 `json:"discussion_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	ParentID *int32 `json:"parent_id,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookDiscussionCommentCreatedCommentReactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionCommentCreatedCommentUser `json:"user,omitempty"`
}

// WebhookDiscussionCommentCreatedCommentReactions - Reactions
type WebhookDiscussionCommentCreatedCommentReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCommentCreatedCommentUser - User
type WebhookDiscussionCommentCreatedCommentUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionCommentCreatedCommentUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCommentCreatedDiscussion - Discussion
type WebhookDiscussionCommentCreatedDiscussion struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionCommentCreatedDiscussionAnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionCommentCreatedDiscussionAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionCommentCreatedDiscussionCategory `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionCommentCreatedDiscussionState `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionCommentCreatedDiscussionUser `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionCommentCreatedDiscussionReactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookDiscussionCommentCreatedDiscussionAnswerChosenBy - User
type WebhookDiscussionCommentCreatedDiscussionAnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionCommentCreatedDiscussionAnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionCommentCreatedDiscussionCategory struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionCommentCreatedDiscussionReactions - Reactions
type WebhookDiscussionCommentCreatedDiscussionReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCommentCreatedDiscussionUser - User
type WebhookDiscussionCommentCreatedDiscussionUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionCommentCreatedDiscussionUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCommentDeleted - discussion_comment deleted event
type WebhookDiscussionCommentDeleted struct {
	// REQUIRED
	Action *WebhookDiscussionCommentDeletedAction `json:"action,omitempty"`

	// REQUIRED
	Comment *WebhookDiscussionCommentDeletedComment `json:"comment,omitempty"`

	// REQUIRED; Discussion
	Discussion *WebhookDiscussionCommentDeletedDiscussion `json:"discussion,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookDiscussionCommentDeletedComment struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionCommentDeletedCommentAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ChildCommentCount *int32 `json:"child_comment_count,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	DiscussionID *int32 `json:"discussion_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	ParentID *int32 `json:"parent_id,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookDiscussionCommentDeletedCommentReactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionCommentDeletedCommentUser `json:"user,omitempty"`
}

// WebhookDiscussionCommentDeletedCommentReactions - Reactions
type WebhookDiscussionCommentDeletedCommentReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCommentDeletedCommentUser - User
type WebhookDiscussionCommentDeletedCommentUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionCommentDeletedCommentUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCommentDeletedDiscussion - Discussion
type WebhookDiscussionCommentDeletedDiscussion struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionCommentDeletedDiscussionAnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionCommentDeletedDiscussionAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionCommentDeletedDiscussionCategory `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionCommentDeletedDiscussionState `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionCommentDeletedDiscussionUser `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionCommentDeletedDiscussionReactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookDiscussionCommentDeletedDiscussionAnswerChosenBy - User
type WebhookDiscussionCommentDeletedDiscussionAnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionCommentDeletedDiscussionAnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionCommentDeletedDiscussionCategory struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionCommentDeletedDiscussionReactions - Reactions
type WebhookDiscussionCommentDeletedDiscussionReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCommentDeletedDiscussionUser - User
type WebhookDiscussionCommentDeletedDiscussionUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionCommentDeletedDiscussionUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCommentEdited - discussion_comment edited event
type WebhookDiscussionCommentEdited struct {
	// REQUIRED
	Action *WebhookDiscussionCommentEditedAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookDiscussionCommentEditedChanges `json:"changes,omitempty"`

	// REQUIRED
	Comment *WebhookDiscussionCommentEditedComment `json:"comment,omitempty"`

	// REQUIRED; Discussion
	Discussion *WebhookDiscussionCommentEditedDiscussion `json:"discussion,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookDiscussionCommentEditedChanges struct {
	// REQUIRED
	Body *WebhookDiscussionCommentEditedChangesBody `json:"body,omitempty"`
}

type WebhookDiscussionCommentEditedChangesBody struct {
	// REQUIRED
	From *string `json:"from,omitempty"`
}

type WebhookDiscussionCommentEditedComment struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionCommentEditedCommentAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ChildCommentCount *int32 `json:"child_comment_count,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	DiscussionID *int32 `json:"discussion_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	ParentID *int32 `json:"parent_id,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookDiscussionCommentEditedCommentReactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionCommentEditedCommentUser `json:"user,omitempty"`
}

// WebhookDiscussionCommentEditedCommentReactions - Reactions
type WebhookDiscussionCommentEditedCommentReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCommentEditedCommentUser - User
type WebhookDiscussionCommentEditedCommentUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionCommentEditedCommentUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCommentEditedDiscussion - Discussion
type WebhookDiscussionCommentEditedDiscussion struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionCommentEditedDiscussionAnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionCommentEditedDiscussionAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionCommentEditedDiscussionCategory `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionCommentEditedDiscussionState `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionCommentEditedDiscussionUser `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionCommentEditedDiscussionReactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookDiscussionCommentEditedDiscussionAnswerChosenBy - User
type WebhookDiscussionCommentEditedDiscussionAnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionCommentEditedDiscussionAnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionCommentEditedDiscussionCategory struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionCommentEditedDiscussionReactions - Reactions
type WebhookDiscussionCommentEditedDiscussionReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCommentEditedDiscussionUser - User
type WebhookDiscussionCommentEditedDiscussionUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionCommentEditedDiscussionUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCreated - discussion created event
type WebhookDiscussionCreated struct {
	// REQUIRED
	Action *WebhookDiscussionCreatedAction `json:"action,omitempty"`

	// REQUIRED
	Discussion *WebhookDiscussionCreatedDiscussion `json:"discussion,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookDiscussionCreatedDiscussion struct {
}

// WebhookDiscussionCreatedDiscussion0AnswerChosenBy - User
type WebhookDiscussionCreatedDiscussion0AnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionCreatedDiscussion0AnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionCreatedDiscussion0Category struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionCreatedDiscussion0Reactions - Reactions
type WebhookDiscussionCreatedDiscussion0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionCreatedDiscussion0User - User
type WebhookDiscussionCreatedDiscussion0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionCreatedDiscussion0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionCreatedDiscussion1Category struct {
	CreatedAt *string `json:"created_at,omitempty"`
	Description *string `json:"description,omitempty"`
	Emoji *string `json:"emoji,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsAnswerable *bool `json:"is_answerable,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	RepositoryID *int32 `json:"repository_id,omitempty"`
	Slug *string `json:"slug,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type WebhookDiscussionCreatedDiscussion1Reactions struct {
	ThumbsUp *int32 `json:"+1,omitempty"`
	ThumbsDown *int32 `json:"-1,omitempty"`
	Confused *int32 `json:"confused,omitempty"`
	Eyes *int32 `json:"eyes,omitempty"`
	Heart *int32 `json:"heart,omitempty"`
	Hooray *int32 `json:"hooray,omitempty"`
	Laugh *int32 `json:"laugh,omitempty"`
	Rocket *int32 `json:"rocket,omitempty"`
	TotalCount *int32 `json:"total_count,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionCreatedDiscussion1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionDeleted - discussion deleted event
type WebhookDiscussionDeleted struct {
	// REQUIRED
	Action *WebhookDiscussionDeletedAction `json:"action,omitempty"`

	// REQUIRED; Discussion
	Discussion *WebhookDiscussionDeletedDiscussion `json:"discussion,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookDiscussionDeletedDiscussion - Discussion
type WebhookDiscussionDeletedDiscussion struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionDeletedDiscussionAnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionDeletedDiscussionAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionDeletedDiscussionCategory `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionDeletedDiscussionState `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionDeletedDiscussionUser `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionDeletedDiscussionReactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookDiscussionDeletedDiscussionAnswerChosenBy - User
type WebhookDiscussionDeletedDiscussionAnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionDeletedDiscussionAnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionDeletedDiscussionCategory struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionDeletedDiscussionReactions - Reactions
type WebhookDiscussionDeletedDiscussionReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionDeletedDiscussionUser - User
type WebhookDiscussionDeletedDiscussionUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionDeletedDiscussionUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionEdited - discussion edited event
type WebhookDiscussionEdited struct {
	// REQUIRED
	Action *WebhookDiscussionEditedAction `json:"action,omitempty"`

	// REQUIRED; Discussion
	Discussion *WebhookDiscussionEditedDiscussion `json:"discussion,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
	Changes *WebhookDiscussionEditedChanges `json:"changes,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookDiscussionEditedChanges struct {
	Body *WebhookDiscussionEditedChangesBody `json:"body,omitempty"`
	Title *WebhookDiscussionEditedChangesTitle `json:"title,omitempty"`
}

type WebhookDiscussionEditedChangesBody struct {
	// REQUIRED
	From *string `json:"from,omitempty"`
}

type WebhookDiscussionEditedChangesTitle struct {
	// REQUIRED
	From *string `json:"from,omitempty"`
}

// WebhookDiscussionEditedDiscussion - Discussion
type WebhookDiscussionEditedDiscussion struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionEditedDiscussionAnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionEditedDiscussionAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionEditedDiscussionCategory `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionEditedDiscussionState `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionEditedDiscussionUser `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionEditedDiscussionReactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookDiscussionEditedDiscussionAnswerChosenBy - User
type WebhookDiscussionEditedDiscussionAnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionEditedDiscussionAnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionEditedDiscussionCategory struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionEditedDiscussionReactions - Reactions
type WebhookDiscussionEditedDiscussionReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionEditedDiscussionUser - User
type WebhookDiscussionEditedDiscussionUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionEditedDiscussionUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionLabeled - discussion labeled event
type WebhookDiscussionLabeled struct {
	// REQUIRED
	Action *WebhookDiscussionLabeledAction `json:"action,omitempty"`

	// REQUIRED; Discussion
	Discussion *WebhookDiscussionLabeledDiscussion `json:"discussion,omitempty"`

	// REQUIRED; Label
	Label *WebhookDiscussionLabeledLabel `json:"label,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookDiscussionLabeledDiscussion - Discussion
type WebhookDiscussionLabeledDiscussion struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionLabeledDiscussionAnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionLabeledDiscussionAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionLabeledDiscussionCategory `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionLabeledDiscussionState `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionLabeledDiscussionUser `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionLabeledDiscussionReactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookDiscussionLabeledDiscussionAnswerChosenBy - User
type WebhookDiscussionLabeledDiscussionAnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionLabeledDiscussionAnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionLabeledDiscussionCategory struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionLabeledDiscussionReactions - Reactions
type WebhookDiscussionLabeledDiscussionReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionLabeledDiscussionUser - User
type WebhookDiscussionLabeledDiscussionUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionLabeledDiscussionUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionLabeledLabel - Label
type WebhookDiscussionLabeledLabel struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionLocked - discussion locked event
type WebhookDiscussionLocked struct {
	// REQUIRED
	Action *WebhookDiscussionLockedAction `json:"action,omitempty"`

	// REQUIRED
	Discussion *WebhookDiscussionLockedDiscussion `json:"discussion,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookDiscussionLockedDiscussion struct {
}

// WebhookDiscussionLockedDiscussion0AnswerChosenBy - User
type WebhookDiscussionLockedDiscussion0AnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionLockedDiscussion0AnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionLockedDiscussion0Category struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionLockedDiscussion0Reactions - Reactions
type WebhookDiscussionLockedDiscussion0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionLockedDiscussion0User - User
type WebhookDiscussionLockedDiscussion0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionLockedDiscussion0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionLockedDiscussion1Category struct {
	CreatedAt *string `json:"created_at,omitempty"`
	Description *string `json:"description,omitempty"`
	Emoji *string `json:"emoji,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsAnswerable *bool `json:"is_answerable,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	RepositoryID *int32 `json:"repository_id,omitempty"`
	Slug *string `json:"slug,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type WebhookDiscussionLockedDiscussion1Reactions struct {
	ThumbsUp *int32 `json:"+1,omitempty"`
	ThumbsDown *int32 `json:"-1,omitempty"`
	Confused *int32 `json:"confused,omitempty"`
	Eyes *int32 `json:"eyes,omitempty"`
	Heart *int32 `json:"heart,omitempty"`
	Hooray *int32 `json:"hooray,omitempty"`
	Laugh *int32 `json:"laugh,omitempty"`
	Rocket *int32 `json:"rocket,omitempty"`
	TotalCount *int32 `json:"total_count,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionLockedDiscussion1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionPinned - discussion pinned event
type WebhookDiscussionPinned struct {
	// REQUIRED
	Action *WebhookDiscussionPinnedAction `json:"action,omitempty"`

	// REQUIRED; Discussion
	Discussion *WebhookDiscussionPinnedDiscussion `json:"discussion,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookDiscussionPinnedDiscussion - Discussion
type WebhookDiscussionPinnedDiscussion struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionPinnedDiscussionAnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionPinnedDiscussionAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionPinnedDiscussionCategory `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionPinnedDiscussionState `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionPinnedDiscussionUser `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionPinnedDiscussionReactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookDiscussionPinnedDiscussionAnswerChosenBy - User
type WebhookDiscussionPinnedDiscussionAnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionPinnedDiscussionAnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionPinnedDiscussionCategory struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionPinnedDiscussionReactions - Reactions
type WebhookDiscussionPinnedDiscussionReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionPinnedDiscussionUser - User
type WebhookDiscussionPinnedDiscussionUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionPinnedDiscussionUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionTransferred - discussion transferred event
type WebhookDiscussionTransferred struct {
	// REQUIRED
	Action *WebhookDiscussionTransferredAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookDiscussionTransferredChanges `json:"changes,omitempty"`

	// REQUIRED; Discussion
	Discussion *WebhookDiscussionTransferredDiscussion `json:"discussion,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookDiscussionTransferredChanges struct {
	// REQUIRED; Discussion
	NewDiscussion *WebhookDiscussionTransferredChangesNewDiscussion `json:"new_discussion,omitempty"`

	// REQUIRED; A git repository
	NewRepository *WebhookDiscussionTransferredChangesNewRepository `json:"new_repository,omitempty"`
}

// WebhookDiscussionTransferredChangesNewDiscussion - Discussion
type WebhookDiscussionTransferredChangesNewDiscussion struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionTransferredChangesNewDiscussionCategory `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionTransferredChangesNewDiscussionState `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionTransferredChangesNewDiscussionUser `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionTransferredChangesNewDiscussionReactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenBy - User
type WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionTransferredChangesNewDiscussionCategory struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionTransferredChangesNewDiscussionReactions - Reactions
type WebhookDiscussionTransferredChangesNewDiscussionReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionTransferredChangesNewDiscussionUser - User
type WebhookDiscussionTransferredChangesNewDiscussionUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionTransferredChangesNewDiscussionUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionTransferredChangesNewRepository - A git repository
type WebhookDiscussionTransferredChangesNewRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookDiscussionTransferredChangesNewRepositoryCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookDiscussionTransferredChangesNewRepositoryLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookDiscussionTransferredChangesNewRepositoryOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookDiscussionTransferredChangesNewRepositoryPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookDiscussionTransferredChangesNewRepositoryVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookDiscussionTransferredChangesNewRepositoryPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookDiscussionTransferredChangesNewRepositoryCreatedAt struct {
}

// WebhookDiscussionTransferredChangesNewRepositoryLicense - License
type WebhookDiscussionTransferredChangesNewRepositoryLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionTransferredChangesNewRepositoryOwner - User
type WebhookDiscussionTransferredChangesNewRepositoryOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionTransferredChangesNewRepositoryOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionTransferredChangesNewRepositoryPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookDiscussionTransferredChangesNewRepositoryPushedAt struct {
}

// WebhookDiscussionTransferredDiscussion - Discussion
type WebhookDiscussionTransferredDiscussion struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionTransferredDiscussionAnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionTransferredDiscussionAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionTransferredDiscussionCategory `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionTransferredDiscussionState `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionTransferredDiscussionUser `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionTransferredDiscussionReactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookDiscussionTransferredDiscussionAnswerChosenBy - User
type WebhookDiscussionTransferredDiscussionAnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionTransferredDiscussionAnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionTransferredDiscussionCategory struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionTransferredDiscussionReactions - Reactions
type WebhookDiscussionTransferredDiscussionReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionTransferredDiscussionUser - User
type WebhookDiscussionTransferredDiscussionUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionTransferredDiscussionUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionUnanswered - discussion unanswered event
type WebhookDiscussionUnanswered struct {
	// REQUIRED
	Action *WebhookDiscussionUnansweredAction `json:"action,omitempty"`

	// REQUIRED
	Discussion *WebhookDiscussionUnansweredDiscussion `json:"discussion,omitempty"`

	// REQUIRED
	OldAnswer *WebhookDiscussionUnansweredOldAnswer `json:"old_answer,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

type WebhookDiscussionUnansweredDiscussion struct {
}

// WebhookDiscussionUnansweredDiscussion0AnswerChosenBy - User
type WebhookDiscussionUnansweredDiscussion0AnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionUnansweredDiscussion0AnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionUnansweredDiscussion0Category struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionUnansweredDiscussion0Reactions - Reactions
type WebhookDiscussionUnansweredDiscussion0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionUnansweredDiscussion0User - User
type WebhookDiscussionUnansweredDiscussion0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionUnansweredDiscussion0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionUnansweredDiscussion1Category struct {
	// REQUIRED
	IsAnswerable *Enum674 `json:"is_answerable,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Description *string `json:"description,omitempty"`
	Emoji *string `json:"emoji,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	RepositoryID *int32 `json:"repository_id,omitempty"`
	Slug *string `json:"slug,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type WebhookDiscussionUnansweredDiscussion1Reactions struct {
	ThumbsUp *int32 `json:"+1,omitempty"`
	ThumbsDown *int32 `json:"-1,omitempty"`
	Confused *int32 `json:"confused,omitempty"`
	Eyes *int32 `json:"eyes,omitempty"`
	Heart *int32 `json:"heart,omitempty"`
	Hooray *int32 `json:"hooray,omitempty"`
	Laugh *int32 `json:"laugh,omitempty"`
	Rocket *int32 `json:"rocket,omitempty"`
	TotalCount *int32 `json:"total_count,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionUnansweredDiscussion1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionUnansweredOldAnswer struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionUnansweredOldAnswerAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ChildCommentCount *int32 `json:"child_comment_count,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiscussionID *int32 `json:"discussion_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Anything
	ParentID any `json:"parent_id,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionUnansweredOldAnswerUser `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionUnansweredOldAnswerReactions `json:"reactions,omitempty"`
}

// WebhookDiscussionUnansweredOldAnswerReactions - Reactions
type WebhookDiscussionUnansweredOldAnswerReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionUnansweredOldAnswerUser - User
type WebhookDiscussionUnansweredOldAnswerUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionUnansweredOldAnswerUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionUnlabeled - discussion unlabeled event
type WebhookDiscussionUnlabeled struct {
	// REQUIRED
	Action *WebhookDiscussionUnlabeledAction `json:"action,omitempty"`

	// REQUIRED; Discussion
	Discussion *WebhookDiscussionUnlabeledDiscussion `json:"discussion,omitempty"`

	// REQUIRED; Label
	Label *WebhookDiscussionUnlabeledLabel `json:"label,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookDiscussionUnlabeledDiscussion - Discussion
type WebhookDiscussionUnlabeledDiscussion struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionUnlabeledDiscussionAnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionUnlabeledDiscussionAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionUnlabeledDiscussionCategory `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionUnlabeledDiscussionState `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionUnlabeledDiscussionUser `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionUnlabeledDiscussionReactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookDiscussionUnlabeledDiscussionAnswerChosenBy - User
type WebhookDiscussionUnlabeledDiscussionAnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionUnlabeledDiscussionAnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionUnlabeledDiscussionCategory struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionUnlabeledDiscussionReactions - Reactions
type WebhookDiscussionUnlabeledDiscussionReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionUnlabeledDiscussionUser - User
type WebhookDiscussionUnlabeledDiscussionUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionUnlabeledDiscussionUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionUnlabeledLabel - Label
type WebhookDiscussionUnlabeledLabel struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionUnlocked - discussion unlocked event
type WebhookDiscussionUnlocked struct {
	// REQUIRED
	Action *WebhookDiscussionUnlockedAction `json:"action,omitempty"`

	// REQUIRED
	Discussion *WebhookDiscussionUnlockedDiscussion `json:"discussion,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookDiscussionUnlockedDiscussion struct {
}

// WebhookDiscussionUnlockedDiscussion0AnswerChosenBy - User
type WebhookDiscussionUnlockedDiscussion0AnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionUnlockedDiscussion0AnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionUnlockedDiscussion0Category struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionUnlockedDiscussion0Reactions - Reactions
type WebhookDiscussionUnlockedDiscussion0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionUnlockedDiscussion0User - User
type WebhookDiscussionUnlockedDiscussion0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionUnlockedDiscussion0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionUnlockedDiscussion1Category struct {
	CreatedAt *string `json:"created_at,omitempty"`
	Description *string `json:"description,omitempty"`
	Emoji *string `json:"emoji,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsAnswerable *bool `json:"is_answerable,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	RepositoryID *int32 `json:"repository_id,omitempty"`
	Slug *string `json:"slug,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type WebhookDiscussionUnlockedDiscussion1Reactions struct {
	ThumbsUp *int32 `json:"+1,omitempty"`
	ThumbsDown *int32 `json:"-1,omitempty"`
	Confused *int32 `json:"confused,omitempty"`
	Eyes *int32 `json:"eyes,omitempty"`
	Heart *int32 `json:"heart,omitempty"`
	Hooray *int32 `json:"hooray,omitempty"`
	Laugh *int32 `json:"laugh,omitempty"`
	Rocket *int32 `json:"rocket,omitempty"`
	TotalCount *int32 `json:"total_count,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionUnlockedDiscussion1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionUnpinned - discussion unpinned event
type WebhookDiscussionUnpinned struct {
	// REQUIRED
	Action *WebhookDiscussionUnpinnedAction `json:"action,omitempty"`

	// REQUIRED; Discussion
	Discussion *WebhookDiscussionUnpinnedDiscussion `json:"discussion,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookDiscussionUnpinnedDiscussion - Discussion
type WebhookDiscussionUnpinnedDiscussion struct {
	// REQUIRED
	ActiveLockReason *string `json:"active_lock_reason,omitempty"`

	// REQUIRED
	AnswerChosenAt *string `json:"answer_chosen_at,omitempty"`

	// REQUIRED; User
	AnswerChosenBy *WebhookDiscussionUnpinnedDiscussionAnswerChosenBy `json:"answer_chosen_by,omitempty"`

	// REQUIRED
	AnswerHTMLURL *string `json:"answer_html_url,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookDiscussionUnpinnedDiscussionAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	Category *WebhookDiscussionUnpinnedDiscussionCategory `json:"category,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED
	State *WebhookDiscussionUnpinnedDiscussionState `json:"state,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookDiscussionUnpinnedDiscussionUser `json:"user,omitempty"`

	// Reactions
	Reactions *WebhookDiscussionUnpinnedDiscussionReactions `json:"reactions,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookDiscussionUnpinnedDiscussionAnswerChosenBy - User
type WebhookDiscussionUnpinnedDiscussionAnswerChosenBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionUnpinnedDiscussionAnswerChosenByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookDiscussionUnpinnedDiscussionCategory struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Emoji *string `json:"emoji,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IsAnswerable *bool `json:"is_answerable,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	RepositoryID *int32 `json:"repository_id,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookDiscussionUnpinnedDiscussionReactions - Reactions
type WebhookDiscussionUnpinnedDiscussionReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookDiscussionUnpinnedDiscussionUser - User
type WebhookDiscussionUnpinnedDiscussionUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookDiscussionUnpinnedDiscussionUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookFork - A user forks a repository.
type WebhookFork struct {
	// REQUIRED; The created repository [https://docs.github.com/rest/reference/repos#get-a-repository] resource.
	Forkee *WebhookForkForkee `json:"forkee,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookForkForkee - The created repository [https://docs.github.com/rest/reference/repos#get-a-repository] resource.
type WebhookForkForkee struct {
}

type WebhookForkForkee0CreatedAt struct {
}

// WebhookForkForkee0License - License
type WebhookForkForkee0License struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookForkForkee0Owner - User
type WebhookForkForkee0Owner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookForkForkee0OwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookForkForkee0Permissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookForkForkee0PushedAt struct {
}

type WebhookForkForkee1Owner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookGithubAppAuthorizationRevoked - githubappauthorization revoked event
type WebhookGithubAppAuthorizationRevoked struct {
	// REQUIRED
	Action *WebhookGithubAppAuthorizationRevokedAction `json:"action,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

// WebhookGollum - gollum event
type WebhookGollum struct {
	// REQUIRED; The pages that were updated.
	Pages []*WebhookGollumPagesItem `json:"pages,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookGollumPagesItem struct {
	// REQUIRED; The action that was performed on the page. Can be created or edited.
	Action *WebhookGollumPagesItemAction `json:"action,omitempty"`

	// REQUIRED; Points to the HTML wiki page.
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The name of the page.
	PageName *string `json:"page_name,omitempty"`

	// REQUIRED; The latest commit SHA of the page.
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	Summary *string `json:"summary,omitempty"`

	// REQUIRED; The current page title.
	Title *string `json:"title,omitempty"`
}

// WebhookInstallationCreated - installation created event
type WebhookInstallationCreated struct {
	// REQUIRED
	Action *WebhookInstallationCreatedAction `json:"action,omitempty"`

	// REQUIRED; Installation
	Installation *Installation `json:"installation,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// An array of repository objects that the installation can access.
	Repositories []*WebhookInstallationCreatedRepositoriesItem `json:"repositories,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// User
	Requester *WebhookInstallationCreatedRequester `json:"requester,omitempty"`
}

type WebhookInstallationCreatedRepositoriesItem struct {
	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`
}

// WebhookInstallationCreatedRequester - User
type WebhookInstallationCreatedRequester struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookInstallationCreatedRequesterType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookInstallationDeleted - installation deleted event
type WebhookInstallationDeleted struct {
	// REQUIRED
	Action *WebhookInstallationDeletedAction `json:"action,omitempty"`

	// REQUIRED; Installation
	Installation *Installation `json:"installation,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// An array of repository objects that the installation can access.
	Repositories []*WebhookInstallationDeletedRepositoriesItem `json:"repositories,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// Anything
	Requester any `json:"requester,omitempty"`
}

type WebhookInstallationDeletedRepositoriesItem struct {
	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`
}

// WebhookInstallationNewPermissionsAccepted - installation newpermissionsaccepted event
type WebhookInstallationNewPermissionsAccepted struct {
	// REQUIRED
	Action *WebhookInstallationNewPermissionsAcceptedAction `json:"action,omitempty"`

	// REQUIRED; Installation
	Installation *Installation `json:"installation,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// An array of repository objects that the installation can access.
	Repositories []*WebhookInstallationNewPermissionsAcceptedRepositoriesItem `json:"repositories,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// Anything
	Requester any `json:"requester,omitempty"`
}

type WebhookInstallationNewPermissionsAcceptedRepositoriesItem struct {
	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`
}

// WebhookInstallationRepositoriesAdded - installation_repositories added event
type WebhookInstallationRepositoriesAdded struct {
	// REQUIRED
	Action *WebhookInstallationRepositoriesAddedAction `json:"action,omitempty"`

	// REQUIRED; Installation
	Installation *Installation `json:"installation,omitempty"`

	// REQUIRED; An array of repository objects, which were added to the installation.
	RepositoriesAdded []*WebhookInstallationRepositoriesAddedItem `json:"repositories_added,omitempty"`

	// REQUIRED; An array of repository objects, which were removed from the installation.
	RepositoriesRemoved []*WebhookInstallationRepositoriesAddedRepositoriesRemovedItem `json:"repositories_removed,omitempty"`

	// REQUIRED; Describe whether all repositories have been selected or there's a selection involved
	RepositorySelection *WebhookInstallationRepositoriesAddedRepositorySelection `json:"repository_selection,omitempty"`

	// REQUIRED; User
	Requester *WebhookInstallationRepositoriesAddedRequester `json:"requester,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookInstallationRepositoriesAddedItem struct {
	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`
}

type WebhookInstallationRepositoriesAddedRepositoriesRemovedItem struct {
	FullName *string `json:"full_name,omitempty"`

	// Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// The name of the repository.
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`

	// Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`
}

// WebhookInstallationRepositoriesAddedRequester - User
type WebhookInstallationRepositoriesAddedRequester struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookInstallationRepositoriesAddedRequesterType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookInstallationRepositoriesRemoved - installation_repositories removed event
type WebhookInstallationRepositoriesRemoved struct {
	// REQUIRED
	Action *WebhookInstallationRepositoriesRemovedAction `json:"action,omitempty"`

	// REQUIRED; Installation
	Installation *Installation `json:"installation,omitempty"`

	// REQUIRED; An array of repository objects, which were added to the installation.
	RepositoriesAdded []*WebhookInstallationRepositoriesRemovedRepositoriesAddedItem `json:"repositories_added,omitempty"`

	// REQUIRED; An array of repository objects, which were removed from the installation.
	RepositoriesRemoved []*WebhookInstallationRepositoriesRemovedItem `json:"repositories_removed,omitempty"`

	// REQUIRED; Describe whether all repositories have been selected or there's a selection involved
	RepositorySelection *WebhookInstallationRepositoriesRemovedRepositorySelection `json:"repository_selection,omitempty"`

	// REQUIRED; User
	Requester *WebhookInstallationRepositoriesRemovedRequester `json:"requester,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookInstallationRepositoriesRemovedItem struct {
	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`
}

type WebhookInstallationRepositoriesRemovedRepositoriesAddedItem struct {
	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`
}

// WebhookInstallationRepositoriesRemovedRequester - User
type WebhookInstallationRepositoriesRemovedRequester struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookInstallationRepositoriesRemovedRequesterType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookInstallationSuspend - installation suspend event
type WebhookInstallationSuspend struct {
	// REQUIRED
	Action *WebhookInstallationSuspendAction `json:"action,omitempty"`

	// REQUIRED; Installation
	Installation *Installation `json:"installation,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// An array of repository objects that the installation can access.
	Repositories []*WebhookInstallationSuspendRepositoriesItem `json:"repositories,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// Anything
	Requester any `json:"requester,omitempty"`
}

type WebhookInstallationSuspendRepositoriesItem struct {
	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`
}

type WebhookInstallationTargetRenamed struct {
	// REQUIRED
	Account *WebhookInstallationTargetRenamedAccount `json:"account,omitempty"`

	// REQUIRED
	Action *string `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookInstallationTargetRenamedChanges `json:"changes,omitempty"`

	// REQUIRED; The GitHub App installation. This property is included when the event is configured for and sent to a GitHub
// App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// REQUIRED
	TargetType *string `json:"target_type,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

type WebhookInstallationTargetRenamedAccount struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`

	// Anything
	Description any `json:"description,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Followers *int32 `json:"followers,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	Following *int32 `json:"following,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HasOrganizationProjects *bool `json:"has_organization_projects,omitempty"`
	HasRepositoryProjects *bool `json:"has_repository_projects,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	IsVerified *bool `json:"is_verified,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	Login *string `json:"login,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	Name *string `json:"name,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	PublicGists *int32 `json:"public_gists,omitempty"`
	PublicMembersURL *string `json:"public_members_url,omitempty"`
	PublicRepos *int32 `json:"public_repos,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	Slug *string `json:"slug,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`

	// Anything
	WebsiteURL any `json:"website_url,omitempty"`
}

type WebhookInstallationTargetRenamedChanges struct {
	Login *WebhookInstallationTargetRenamedChangesLogin `json:"login,omitempty"`
	Slug *WebhookInstallationTargetRenamedChangesSlug `json:"slug,omitempty"`
}

type WebhookInstallationTargetRenamedChangesLogin struct {
	// REQUIRED
	From *string `json:"from,omitempty"`
}

type WebhookInstallationTargetRenamedChangesSlug struct {
	// REQUIRED
	From *string `json:"from,omitempty"`
}

// WebhookInstallationUnsuspend - installation unsuspend event
type WebhookInstallationUnsuspend struct {
	// REQUIRED
	Action *WebhookInstallationUnsuspendAction `json:"action,omitempty"`

	// REQUIRED; Installation
	Installation *Installation `json:"installation,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// An array of repository objects that the installation can access.
	Repositories []*WebhookInstallationUnsuspendRepositoriesItem `json:"repositories,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// Anything
	Requester any `json:"requester,omitempty"`
}

type WebhookInstallationUnsuspendRepositoriesItem struct {
	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`
}

// WebhookIssueCommentCreated - issue_comment created event
type WebhookIssueCommentCreated struct {
	// REQUIRED
	Action *WebhookIssueCommentCreatedAction `json:"action,omitempty"`

	// REQUIRED; The comment [https://docs.github.com/rest/reference/issues#comments] itself.
	Comment *WebhookIssueCommentCreatedComment `json:"comment,omitempty"`

	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] the comment belongs to.
	Issue *WebhookIssueCommentCreatedIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookIssueCommentCreatedComment - The comment [https://docs.github.com/rest/reference/issues#comments] itself.
type WebhookIssueCommentCreatedComment struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssueCommentCreatedCommentAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue comment
	Body *string `json:"body,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the issue comment
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssueCommentCreatedCommentReactions `json:"reactions,omitempty"`

	// REQUIRED; URL for the issue comment
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssueCommentCreatedCommentUser `json:"user,omitempty"`
}

// WebhookIssueCommentCreatedCommentReactions - Reactions
type WebhookIssueCommentCreatedCommentReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentCreatedCommentUser - User
type WebhookIssueCommentCreatedCommentUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentCreatedCommentUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentCreatedIssue - The issue [https://docs.github.com/rest/reference/issues] the comment belongs to.
type WebhookIssueCommentCreatedIssue struct {
}

// WebhookIssueCommentCreatedIssue0Assignee - User
type WebhookIssueCommentCreatedIssue0Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentCreatedIssue0AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentCreatedIssue0AssigneesItem - User
type WebhookIssueCommentCreatedIssue0AssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentCreatedIssueOneOf0AssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentCreatedIssue0LabelsItem - Label
type WebhookIssueCommentCreatedIssue0LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentCreatedIssue0Milestone - A collection of related issues and pull requests.
type WebhookIssueCommentCreatedIssue0Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssueCommentCreatedIssue0MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssueCommentCreatedIssue0MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssueCommentCreatedIssue0MilestoneCreator - User
type WebhookIssueCommentCreatedIssue0MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentCreatedIssue0MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentCreatedIssue0PerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed
// directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions
// and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssueCommentCreatedIssue0PerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwner - User
type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissions struct {
	Actions *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssueCommentCreatedIssue0PullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentCreatedIssue0Reactions - Reactions
type WebhookIssueCommentCreatedIssue0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentCreatedIssue0User - User
type WebhookIssueCommentCreatedIssue0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentCreatedIssue0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentCreatedIssue1Assignee - User
type WebhookIssueCommentCreatedIssue1Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentCreatedIssue1AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentCreatedIssue1LabelsItem - Label
type WebhookIssueCommentCreatedIssue1LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookIssueCommentCreatedIssue1Reactions struct {
	ThumbsUp *int32 `json:"+1,omitempty"`
	ThumbsDown *int32 `json:"-1,omitempty"`
	Confused *int32 `json:"confused,omitempty"`
	Eyes *int32 `json:"eyes,omitempty"`
	Heart *int32 `json:"heart,omitempty"`
	Hooray *int32 `json:"hooray,omitempty"`
	Laugh *int32 `json:"laugh,omitempty"`
	Rocket *int32 `json:"rocket,omitempty"`
	TotalCount *int32 `json:"total_count,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssueCommentCreatedIssue1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentDeleted - issue_comment deleted event
type WebhookIssueCommentDeleted struct {
	// REQUIRED
	Action *WebhookIssueCommentDeletedAction `json:"action,omitempty"`

	// REQUIRED; The comment [https://docs.github.com/rest/reference/issues#comments] itself.
	Comment *WebhookIssueCommentDeletedComment `json:"comment,omitempty"`

	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] the comment belongs to.
	Issue *WebhookIssueCommentDeletedIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookIssueCommentDeletedComment - The comment [https://docs.github.com/rest/reference/issues#comments] itself.
type WebhookIssueCommentDeletedComment struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssueCommentDeletedCommentAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue comment
	Body *string `json:"body,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the issue comment
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssueCommentDeletedCommentReactions `json:"reactions,omitempty"`

	// REQUIRED; URL for the issue comment
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssueCommentDeletedCommentUser `json:"user,omitempty"`
}

// WebhookIssueCommentDeletedCommentReactions - Reactions
type WebhookIssueCommentDeletedCommentReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentDeletedCommentUser - User
type WebhookIssueCommentDeletedCommentUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentDeletedCommentUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentDeletedIssue - The issue [https://docs.github.com/rest/reference/issues] the comment belongs to.
type WebhookIssueCommentDeletedIssue struct {
}

// WebhookIssueCommentDeletedIssue0Assignee - User
type WebhookIssueCommentDeletedIssue0Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentDeletedIssue0AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentDeletedIssue0AssigneesItem - User
type WebhookIssueCommentDeletedIssue0AssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentDeletedIssueOneOf0AssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentDeletedIssue0LabelsItem - Label
type WebhookIssueCommentDeletedIssue0LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentDeletedIssue0Milestone - A collection of related issues and pull requests.
type WebhookIssueCommentDeletedIssue0Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssueCommentDeletedIssue0MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssueCommentDeletedIssue0MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssueCommentDeletedIssue0MilestoneCreator - User
type WebhookIssueCommentDeletedIssue0MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentDeletedIssue0MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentDeletedIssue0PerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed
// directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions
// and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssueCommentDeletedIssue0PerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwner - User
type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissions struct {
	Actions *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssueCommentDeletedIssue0PullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentDeletedIssue0Reactions - Reactions
type WebhookIssueCommentDeletedIssue0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentDeletedIssue0User - User
type WebhookIssueCommentDeletedIssue0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentDeletedIssue0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentDeletedIssue1Assignee - User
type WebhookIssueCommentDeletedIssue1Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentDeletedIssue1AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentDeletedIssue1LabelsItem - Label
type WebhookIssueCommentDeletedIssue1LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookIssueCommentDeletedIssue1Reactions struct {
	ThumbsUp *int32 `json:"+1,omitempty"`
	ThumbsDown *int32 `json:"-1,omitempty"`
	Confused *int32 `json:"confused,omitempty"`
	Eyes *int32 `json:"eyes,omitempty"`
	Heart *int32 `json:"heart,omitempty"`
	Hooray *int32 `json:"hooray,omitempty"`
	Laugh *int32 `json:"laugh,omitempty"`
	Rocket *int32 `json:"rocket,omitempty"`
	TotalCount *int32 `json:"total_count,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssueCommentDeletedIssue1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentEdited - issue_comment edited event
type WebhookIssueCommentEdited struct {
	// REQUIRED
	Action *WebhookIssueCommentEditedAction `json:"action,omitempty"`

	// REQUIRED; The changes to the comment.
	Changes *WebhookIssueCommentEditedChanges `json:"changes,omitempty"`

	// REQUIRED; The comment [https://docs.github.com/rest/reference/issues#comments] itself.
	Comment *WebhookIssueCommentEditedComment `json:"comment,omitempty"`

	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] the comment belongs to.
	Issue *WebhookIssueCommentEditedIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookIssueCommentEditedChanges - The changes to the comment.
type WebhookIssueCommentEditedChanges struct {
	Body *WebhookIssueCommentEditedChangesBody `json:"body,omitempty"`
}

type WebhookIssueCommentEditedChangesBody struct {
	// REQUIRED; The previous version of the body.
	From *string `json:"from,omitempty"`
}

// WebhookIssueCommentEditedComment - The comment [https://docs.github.com/rest/reference/issues#comments] itself.
type WebhookIssueCommentEditedComment struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssueCommentEditedCommentAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue comment
	Body *string `json:"body,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the issue comment
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts
// and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *NullableIntegration `json:"performed_via_github_app,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssueCommentEditedCommentReactions `json:"reactions,omitempty"`

	// REQUIRED; URL for the issue comment
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssueCommentEditedCommentUser `json:"user,omitempty"`
}

// WebhookIssueCommentEditedCommentReactions - Reactions
type WebhookIssueCommentEditedCommentReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentEditedCommentUser - User
type WebhookIssueCommentEditedCommentUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentEditedCommentUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentEditedIssue - The issue [https://docs.github.com/rest/reference/issues] the comment belongs to.
type WebhookIssueCommentEditedIssue struct {
}

// WebhookIssueCommentEditedIssue0Assignee - User
type WebhookIssueCommentEditedIssue0Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentEditedIssue0AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentEditedIssue0AssigneesItem - User
type WebhookIssueCommentEditedIssue0AssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentEditedIssueOneOf0AssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentEditedIssue0LabelsItem - Label
type WebhookIssueCommentEditedIssue0LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentEditedIssue0Milestone - A collection of related issues and pull requests.
type WebhookIssueCommentEditedIssue0Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssueCommentEditedIssue0MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssueCommentEditedIssue0MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssueCommentEditedIssue0MilestoneCreator - User
type WebhookIssueCommentEditedIssue0MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentEditedIssue0MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentEditedIssue0PerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed
// directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions
// and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssueCommentEditedIssue0PerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwner - User
type WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissions struct {
	Actions *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssueCommentEditedIssue0PullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentEditedIssue0Reactions - Reactions
type WebhookIssueCommentEditedIssue0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentEditedIssue0User - User
type WebhookIssueCommentEditedIssue0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentEditedIssue0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentEditedIssue1Assignee - User
type WebhookIssueCommentEditedIssue1Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssueCommentEditedIssue1AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssueCommentEditedIssue1LabelsItem - Label
type WebhookIssueCommentEditedIssue1LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookIssueCommentEditedIssue1Reactions struct {
	ThumbsUp *int32 `json:"+1,omitempty"`
	ThumbsDown *int32 `json:"-1,omitempty"`
	Confused *int32 `json:"confused,omitempty"`
	Eyes *int32 `json:"eyes,omitempty"`
	Heart *int32 `json:"heart,omitempty"`
	Hooray *int32 `json:"hooray,omitempty"`
	Laugh *int32 `json:"laugh,omitempty"`
	Rocket *int32 `json:"rocket,omitempty"`
	TotalCount *int32 `json:"total_count,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssueCommentEditedIssue1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesAssigned - issues assigned event
type WebhookIssuesAssigned struct {
	// REQUIRED; The action that was performed.
	Action *WebhookIssuesAssignedAction `json:"action,omitempty"`

	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] itself.
	Issue *WebhookIssuesAssignedIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// User
	Assignee *WebhookIssuesAssignedAssignee `json:"assignee,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookIssuesAssignedAssignee - User
type WebhookIssuesAssignedAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesAssignedAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesAssignedIssue - The issue [https://docs.github.com/rest/reference/issues] itself.
type WebhookIssuesAssignedIssue struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesAssignedIssueActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesAssignedIssueAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesAssignedIssueAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesAssignedIssueMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesAssignedIssueReactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesAssignedIssueUser `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesAssignedIssueAssignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesAssignedIssueLabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesAssignedIssuePerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesAssignedIssuePullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesAssignedIssueState `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookIssuesAssignedIssueAssignee - User
type WebhookIssuesAssignedIssueAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesAssignedIssueAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesAssignedIssueAssigneesItem - User
type WebhookIssuesAssignedIssueAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesAssignedIssueAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesAssignedIssueLabelsItem - Label
type WebhookIssuesAssignedIssueLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesAssignedIssueMilestone - A collection of related issues and pull requests.
type WebhookIssuesAssignedIssueMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesAssignedIssueMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesAssignedIssueMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesAssignedIssueMilestoneCreator - User
type WebhookIssuesAssignedIssueMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesAssignedIssueMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesAssignedIssuePerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed directly
// on organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesAssignedIssuePerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesAssignedIssuePerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesAssignedIssuePerformedViaGithubAppOwner - User
type WebhookIssuesAssignedIssuePerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesAssignedIssuePerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesAssignedIssuePerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesAssignedIssuePullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesAssignedIssueReactions - Reactions
type WebhookIssuesAssignedIssueReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesAssignedIssueUser - User
type WebhookIssuesAssignedIssueUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesAssignedIssueUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesClosed - issues closed event
type WebhookIssuesClosed struct {
	// REQUIRED; The action that was performed.
	Action *WebhookIssuesClosedAction `json:"action,omitempty"`

	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] itself.
	Issue *WebhookIssuesClosedIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookIssuesClosedIssue - The issue [https://docs.github.com/rest/reference/issues] itself.
type WebhookIssuesClosedIssue struct {
}

// WebhookIssuesClosedIssue0Assignee - User
type WebhookIssuesClosedIssue0Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesClosedIssue0AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesClosedIssue0AssigneesItem - User
type WebhookIssuesClosedIssue0AssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesClosedIssueOneOf0AssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesClosedIssue0LabelsItem - Label
type WebhookIssuesClosedIssue0LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesClosedIssue0Milestone - A collection of related issues and pull requests.
type WebhookIssuesClosedIssue0Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesClosedIssue0MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesClosedIssue0MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesClosedIssue0MilestoneCreator - User
type WebhookIssuesClosedIssue0MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesClosedIssue0MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesClosedIssue0PerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed directly
// on organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesClosedIssue0PerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesClosedIssue0PerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesClosedIssue0PerformedViaGithubAppOwner - User
type WebhookIssuesClosedIssue0PerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesClosedIssue0PerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesClosedIssue0PerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesClosedIssue0PullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesClosedIssue0Reactions - Reactions
type WebhookIssuesClosedIssue0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesClosedIssue0User - User
type WebhookIssuesClosedIssue0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesClosedIssue0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssuesClosedIssue1Reactions struct {
	ThumbsUp *int32 `json:"+1,omitempty"`
	ThumbsDown *int32 `json:"-1,omitempty"`
	Confused *int32 `json:"confused,omitempty"`
	Eyes *int32 `json:"eyes,omitempty"`
	Heart *int32 `json:"heart,omitempty"`
	Hooray *int32 `json:"hooray,omitempty"`
	Laugh *int32 `json:"laugh,omitempty"`
	Rocket *int32 `json:"rocket,omitempty"`
	TotalCount *int32 `json:"total_count,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssuesClosedIssue1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDeleted - issues deleted event
type WebhookIssuesDeleted struct {
	// REQUIRED
	Action *WebhookIssuesDeletedAction `json:"action,omitempty"`

	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] itself.
	Issue *WebhookIssuesDeletedIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookIssuesDeletedIssue - The issue [https://docs.github.com/rest/reference/issues] itself.
type WebhookIssuesDeletedIssue struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesDeletedIssueActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesDeletedIssueAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesDeletedIssueAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesDeletedIssueMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesDeletedIssueReactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesDeletedIssueUser `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesDeletedIssueAssignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesDeletedIssueLabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesDeletedIssuePerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesDeletedIssuePullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesDeletedIssueState `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookIssuesDeletedIssueAssignee - User
type WebhookIssuesDeletedIssueAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesDeletedIssueAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDeletedIssueAssigneesItem - User
type WebhookIssuesDeletedIssueAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesDeletedIssueAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDeletedIssueLabelsItem - Label
type WebhookIssuesDeletedIssueLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDeletedIssueMilestone - A collection of related issues and pull requests.
type WebhookIssuesDeletedIssueMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesDeletedIssueMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesDeletedIssueMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesDeletedIssueMilestoneCreator - User
type WebhookIssuesDeletedIssueMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesDeletedIssueMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDeletedIssuePerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed directly
// on organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesDeletedIssuePerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesDeletedIssuePerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesDeletedIssuePerformedViaGithubAppOwner - User
type WebhookIssuesDeletedIssuePerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesDeletedIssuePerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDeletedIssuePerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesDeletedIssuePullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDeletedIssueReactions - Reactions
type WebhookIssuesDeletedIssueReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDeletedIssueUser - User
type WebhookIssuesDeletedIssueUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesDeletedIssueUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDemilestoned - issues demilestoned event
type WebhookIssuesDemilestoned struct {
	// REQUIRED
	Action *WebhookIssuesDemilestonedAction `json:"action,omitempty"`

	// REQUIRED
	Issue *WebhookIssuesDemilestonedIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A collection of related issues and pull requests.
	Milestone *WebhookIssuesDemilestonedMilestone `json:"milestone,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookIssuesDemilestonedIssue struct {
}

// WebhookIssuesDemilestonedIssue0Assignee - User
type WebhookIssuesDemilestonedIssue0Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesDemilestonedIssue0AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDemilestonedIssue0AssigneesItem - User
type WebhookIssuesDemilestonedIssue0AssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesDemilestonedIssueOneOf0AssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDemilestonedIssue0LabelsItem - Label
type WebhookIssuesDemilestonedIssue0LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDemilestonedIssue0Milestone - A collection of related issues and pull requests.
type WebhookIssuesDemilestonedIssue0Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesDemilestonedIssue0MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesDemilestonedIssue0MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesDemilestonedIssue0MilestoneCreator - User
type WebhookIssuesDemilestonedIssue0MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesDemilestonedIssue0MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDemilestonedIssue0PerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed
// directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions
// and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesDemilestonedIssue0PerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwner - User
type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesDemilestonedIssue0PullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDemilestonedIssue0Reactions - Reactions
type WebhookIssuesDemilestonedIssue0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDemilestonedIssue0User - User
type WebhookIssuesDemilestonedIssue0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesDemilestonedIssue0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDemilestonedIssue1Milestone - A collection of related issues and pull requests.
type WebhookIssuesDemilestonedIssue1Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesDemilestonedIssue1MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesDemilestonedIssue1MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesDemilestonedIssue1MilestoneCreator - User
type WebhookIssuesDemilestonedIssue1MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesDemilestonedIssue1MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssuesDemilestonedIssue1Reactions struct {
	ThumbsUp *int32 `json:"+1,omitempty"`
	ThumbsDown *int32 `json:"-1,omitempty"`
	Confused *int32 `json:"confused,omitempty"`
	Eyes *int32 `json:"eyes,omitempty"`
	Heart *int32 `json:"heart,omitempty"`
	Hooray *int32 `json:"hooray,omitempty"`
	Laugh *int32 `json:"laugh,omitempty"`
	Rocket *int32 `json:"rocket,omitempty"`
	TotalCount *int32 `json:"total_count,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssuesDemilestonedIssue1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesDemilestonedMilestone - A collection of related issues and pull requests.
type WebhookIssuesDemilestonedMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesDemilestonedMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesDemilestonedMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesDemilestonedMilestoneCreator - User
type WebhookIssuesDemilestonedMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesDemilestonedMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesEdited - issues edited event
type WebhookIssuesEdited struct {
	// REQUIRED
	Action *WebhookIssuesEditedAction `json:"action,omitempty"`

	// REQUIRED; The changes to the issue.
	Changes *WebhookIssuesEditedChanges `json:"changes,omitempty"`

	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] itself.
	Issue *WebhookIssuesEditedIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// Label
	Label *WebhookIssuesEditedLabel `json:"label,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookIssuesEditedChanges - The changes to the issue.
type WebhookIssuesEditedChanges struct {
	Body *WebhookIssuesEditedChangesBody `json:"body,omitempty"`
	Title *WebhookIssuesEditedChangesTitle `json:"title,omitempty"`
}

type WebhookIssuesEditedChangesBody struct {
	// REQUIRED; The previous version of the body.
	From *string `json:"from,omitempty"`
}

type WebhookIssuesEditedChangesTitle struct {
	// REQUIRED; The previous version of the title.
	From *string `json:"from,omitempty"`
}

// WebhookIssuesEditedIssue - The issue [https://docs.github.com/rest/reference/issues] itself.
type WebhookIssuesEditedIssue struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesEditedIssueActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesEditedIssueAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesEditedIssueAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesEditedIssueMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesEditedIssueReactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesEditedIssueUser `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesEditedIssueAssignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesEditedIssueLabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesEditedIssuePerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesEditedIssuePullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesEditedIssueState `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookIssuesEditedIssueAssignee - User
type WebhookIssuesEditedIssueAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesEditedIssueAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesEditedIssueAssigneesItem - User
type WebhookIssuesEditedIssueAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesEditedIssueAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesEditedIssueLabelsItem - Label
type WebhookIssuesEditedIssueLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesEditedIssueMilestone - A collection of related issues and pull requests.
type WebhookIssuesEditedIssueMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesEditedIssueMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesEditedIssueMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesEditedIssueMilestoneCreator - User
type WebhookIssuesEditedIssueMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesEditedIssueMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesEditedIssuePerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed directly
// on organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesEditedIssuePerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesEditedIssuePerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesEditedIssuePerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesEditedIssuePerformedViaGithubAppOwner - User
type WebhookIssuesEditedIssuePerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesEditedIssuePerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesEditedIssuePerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesEditedIssuePerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesEditedIssuePullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesEditedIssueReactions - Reactions
type WebhookIssuesEditedIssueReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesEditedIssueUser - User
type WebhookIssuesEditedIssueUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesEditedIssueUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesEditedLabel - Label
type WebhookIssuesEditedLabel struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLabeled - issues labeled event
type WebhookIssuesLabeled struct {
	// REQUIRED
	Action *WebhookIssuesLabeledAction `json:"action,omitempty"`

	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] itself.
	Issue *WebhookIssuesLabeledIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// Label
	Label *WebhookIssuesLabeledLabel `json:"label,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookIssuesLabeledIssue - The issue [https://docs.github.com/rest/reference/issues] itself.
type WebhookIssuesLabeledIssue struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesLabeledIssueActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesLabeledIssueAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesLabeledIssueAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesLabeledIssueMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesLabeledIssueReactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesLabeledIssueUser `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesLabeledIssueAssignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesLabeledIssueLabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesLabeledIssuePerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesLabeledIssuePullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesLabeledIssueState `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookIssuesLabeledIssueAssignee - User
type WebhookIssuesLabeledIssueAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesLabeledIssueAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLabeledIssueAssigneesItem - User
type WebhookIssuesLabeledIssueAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesLabeledIssueAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLabeledIssueLabelsItem - Label
type WebhookIssuesLabeledIssueLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLabeledIssueMilestone - A collection of related issues and pull requests.
type WebhookIssuesLabeledIssueMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesLabeledIssueMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesLabeledIssueMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesLabeledIssueMilestoneCreator - User
type WebhookIssuesLabeledIssueMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesLabeledIssueMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLabeledIssuePerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed directly
// on organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesLabeledIssuePerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesLabeledIssuePerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesLabeledIssuePerformedViaGithubAppOwner - User
type WebhookIssuesLabeledIssuePerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesLabeledIssuePerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLabeledIssuePerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesLabeledIssuePullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLabeledIssueReactions - Reactions
type WebhookIssuesLabeledIssueReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLabeledIssueUser - User
type WebhookIssuesLabeledIssueUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesLabeledIssueUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLabeledLabel - Label
type WebhookIssuesLabeledLabel struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLocked - issues locked event
type WebhookIssuesLocked struct {
	// REQUIRED
	Action *WebhookIssuesLockedAction `json:"action,omitempty"`

	// REQUIRED
	Issue *WebhookIssuesLockedIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookIssuesLockedIssue struct {
}

// WebhookIssuesLockedIssue0Assignee - User
type WebhookIssuesLockedIssue0Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesLockedIssue0AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLockedIssue0AssigneesItem - User
type WebhookIssuesLockedIssue0AssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesLockedIssueOneOf0AssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLockedIssue0LabelsItem - Label
type WebhookIssuesLockedIssue0LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLockedIssue0Milestone - A collection of related issues and pull requests.
type WebhookIssuesLockedIssue0Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesLockedIssue0MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesLockedIssue0MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesLockedIssue0MilestoneCreator - User
type WebhookIssuesLockedIssue0MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesLockedIssue0MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLockedIssue0PerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed directly
// on organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesLockedIssue0PerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesLockedIssue0PerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesLockedIssue0PerformedViaGithubAppOwner - User
type WebhookIssuesLockedIssue0PerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesLockedIssue0PerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLockedIssue0PerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesLockedIssue0PullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLockedIssue0Reactions - Reactions
type WebhookIssuesLockedIssue0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesLockedIssue0User - User
type WebhookIssuesLockedIssue0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesLockedIssue0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssuesLockedIssue1Reactions struct {
	ThumbsUp *int32 `json:"+1,omitempty"`
	ThumbsDown *int32 `json:"-1,omitempty"`
	Confused *int32 `json:"confused,omitempty"`
	Eyes *int32 `json:"eyes,omitempty"`
	Heart *int32 `json:"heart,omitempty"`
	Hooray *int32 `json:"hooray,omitempty"`
	Laugh *int32 `json:"laugh,omitempty"`
	Rocket *int32 `json:"rocket,omitempty"`
	TotalCount *int32 `json:"total_count,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssuesLockedIssue1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesMilestoned - issues milestoned event
type WebhookIssuesMilestoned struct {
	// REQUIRED
	Action *WebhookIssuesMilestonedAction `json:"action,omitempty"`

	// REQUIRED
	Issue *WebhookIssuesMilestonedIssue `json:"issue,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesMilestonedMilestone `json:"milestone,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookIssuesMilestonedIssue struct {
}

// WebhookIssuesMilestonedIssue0Assignee - User
type WebhookIssuesMilestonedIssue0Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesMilestonedIssue0AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesMilestonedIssue0AssigneesItem - User
type WebhookIssuesMilestonedIssue0AssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesMilestonedIssueOneOf0AssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesMilestonedIssue0LabelsItem - Label
type WebhookIssuesMilestonedIssue0LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesMilestonedIssue0Milestone - A collection of related issues and pull requests.
type WebhookIssuesMilestonedIssue0Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesMilestonedIssue0MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesMilestonedIssue0MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesMilestonedIssue0MilestoneCreator - User
type WebhookIssuesMilestonedIssue0MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesMilestonedIssue0MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesMilestonedIssue0PerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed
// directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions
// and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesMilestonedIssue0PerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwner - User
type WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesMilestonedIssue0PullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesMilestonedIssue0Reactions - Reactions
type WebhookIssuesMilestonedIssue0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesMilestonedIssue0User - User
type WebhookIssuesMilestonedIssue0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesMilestonedIssue0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesMilestonedIssue1Milestone - A collection of related issues and pull requests.
type WebhookIssuesMilestonedIssue1Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesMilestonedIssue1MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesMilestonedIssue1MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesMilestonedIssue1MilestoneCreator - User
type WebhookIssuesMilestonedIssue1MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesMilestonedIssue1MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssuesMilestonedIssue1Reactions struct {
	ThumbsUp *int32 `json:"+1,omitempty"`
	ThumbsDown *int32 `json:"-1,omitempty"`
	Confused *int32 `json:"confused,omitempty"`
	Eyes *int32 `json:"eyes,omitempty"`
	Heart *int32 `json:"heart,omitempty"`
	Hooray *int32 `json:"hooray,omitempty"`
	Laugh *int32 `json:"laugh,omitempty"`
	Rocket *int32 `json:"rocket,omitempty"`
	TotalCount *int32 `json:"total_count,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssuesMilestonedIssue1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesMilestonedMilestone - A collection of related issues and pull requests.
type WebhookIssuesMilestonedMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesMilestonedMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesMilestonedMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesMilestonedMilestoneCreator - User
type WebhookIssuesMilestonedMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesMilestonedMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpened - issues opened event
type WebhookIssuesOpened struct {
	// REQUIRED
	Action *WebhookIssuesOpenedAction `json:"action,omitempty"`

	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] itself.
	Issue *WebhookIssuesOpenedIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
	Changes *WebhookIssuesOpenedChanges `json:"changes,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookIssuesOpenedChanges struct {
	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] itself.
	OldIssue *WebhookIssuesOpenedChangesOldIssue `json:"old_issue,omitempty"`

	// REQUIRED; A git repository
	OldRepository *WebhookIssuesOpenedChangesOldRepository `json:"old_repository,omitempty"`
}

// WebhookIssuesOpenedChangesOldIssue - The issue [https://docs.github.com/rest/reference/issues] itself.
type WebhookIssuesOpenedChangesOldIssue struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesOpenedChangesOldIssueActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesOpenedChangesOldIssueAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesOpenedChangesOldIssueAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesOpenedChangesOldIssueMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesOpenedChangesOldIssueReactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesOpenedChangesOldIssueUser `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesOpenedChangesOldIssueAssignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesOpenedChangesOldIssueLabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesOpenedChangesOldIssuePullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesOpenedChangesOldIssueState `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookIssuesOpenedChangesOldIssueAssignee - User
type WebhookIssuesOpenedChangesOldIssueAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesOpenedChangesOldIssueAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedChangesOldIssueAssigneesItem - User
type WebhookIssuesOpenedChangesOldIssueAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesOpenedChangesOldIssueAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedChangesOldIssueLabelsItem - Label
type WebhookIssuesOpenedChangesOldIssueLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedChangesOldIssueMilestone - A collection of related issues and pull requests.
type WebhookIssuesOpenedChangesOldIssueMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesOpenedChangesOldIssueMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesOpenedChangesOldIssueMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesOpenedChangesOldIssueMilestoneCreator - User
type WebhookIssuesOpenedChangesOldIssueMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesOpenedChangesOldIssueMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedChangesOldIssuePerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed
// directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions
// and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwner - User
type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesOpenedChangesOldIssuePullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedChangesOldIssueReactions - Reactions
type WebhookIssuesOpenedChangesOldIssueReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedChangesOldIssueUser - User
type WebhookIssuesOpenedChangesOldIssueUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesOpenedChangesOldIssueUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedChangesOldRepository - A git repository
type WebhookIssuesOpenedChangesOldRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookIssuesOpenedChangesOldRepositoryCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookIssuesOpenedChangesOldRepositoryLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesOpenedChangesOldRepositoryOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookIssuesOpenedChangesOldRepositoryPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookIssuesOpenedChangesOldRepositoryVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookIssuesOpenedChangesOldRepositoryPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`
}

type WebhookIssuesOpenedChangesOldRepositoryCreatedAt struct {
}

// WebhookIssuesOpenedChangesOldRepositoryLicense - License
type WebhookIssuesOpenedChangesOldRepositoryLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedChangesOldRepositoryOwner - User
type WebhookIssuesOpenedChangesOldRepositoryOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesOpenedChangesOldRepositoryOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssuesOpenedChangesOldRepositoryPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookIssuesOpenedChangesOldRepositoryPushedAt struct {
}

// WebhookIssuesOpenedIssue - The issue [https://docs.github.com/rest/reference/issues] itself.
type WebhookIssuesOpenedIssue struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesOpenedIssueActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesOpenedIssueAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesOpenedIssueAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesOpenedIssueMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesOpenedIssueReactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesOpenedIssueUser `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesOpenedIssueAssignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesOpenedIssueLabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesOpenedIssuePerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesOpenedIssuePullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesOpenedIssueState `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookIssuesOpenedIssueAssignee - User
type WebhookIssuesOpenedIssueAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesOpenedIssueAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedIssueAssigneesItem - User
type WebhookIssuesOpenedIssueAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesOpenedIssueAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedIssueLabelsItem - Label
type WebhookIssuesOpenedIssueLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedIssueMilestone - A collection of related issues and pull requests.
type WebhookIssuesOpenedIssueMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesOpenedIssueMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesOpenedIssueMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesOpenedIssueMilestoneCreator - User
type WebhookIssuesOpenedIssueMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesOpenedIssueMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedIssuePerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed directly
// on organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesOpenedIssuePerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesOpenedIssuePerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesOpenedIssuePerformedViaGithubAppOwner - User
type WebhookIssuesOpenedIssuePerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesOpenedIssuePerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedIssuePerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesOpenedIssuePullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedIssueReactions - Reactions
type WebhookIssuesOpenedIssueReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesOpenedIssueUser - User
type WebhookIssuesOpenedIssueUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesOpenedIssueUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesPinned - issues pinned event
type WebhookIssuesPinned struct {
	// REQUIRED
	Action *WebhookIssuesPinnedAction `json:"action,omitempty"`

	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] itself.
	Issue *WebhookIssuesPinnedIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookIssuesPinnedIssue - The issue [https://docs.github.com/rest/reference/issues] itself.
type WebhookIssuesPinnedIssue struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesPinnedIssueActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesPinnedIssueAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesPinnedIssueAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesPinnedIssueMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesPinnedIssueReactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesPinnedIssueUser `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesPinnedIssueAssignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesPinnedIssueLabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesPinnedIssuePerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesPinnedIssuePullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesPinnedIssueState `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookIssuesPinnedIssueAssignee - User
type WebhookIssuesPinnedIssueAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesPinnedIssueAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesPinnedIssueAssigneesItem - User
type WebhookIssuesPinnedIssueAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesPinnedIssueAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesPinnedIssueLabelsItem - Label
type WebhookIssuesPinnedIssueLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesPinnedIssueMilestone - A collection of related issues and pull requests.
type WebhookIssuesPinnedIssueMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesPinnedIssueMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesPinnedIssueMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesPinnedIssueMilestoneCreator - User
type WebhookIssuesPinnedIssueMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesPinnedIssueMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesPinnedIssuePerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed directly
// on organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesPinnedIssuePerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesPinnedIssuePerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesPinnedIssuePerformedViaGithubAppOwner - User
type WebhookIssuesPinnedIssuePerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesPinnedIssuePerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesPinnedIssuePerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesPinnedIssuePullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesPinnedIssueReactions - Reactions
type WebhookIssuesPinnedIssueReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesPinnedIssueUser - User
type WebhookIssuesPinnedIssueUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesPinnedIssueUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesReopened - issues reopened event
type WebhookIssuesReopened struct {
	// REQUIRED
	Action *WebhookIssuesReopenedAction `json:"action,omitempty"`

	// REQUIRED
	Issue *WebhookIssuesReopenedIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookIssuesReopenedIssue struct {
}

// WebhookIssuesReopenedIssue0Assignee - User
type WebhookIssuesReopenedIssue0Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesReopenedIssue0AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesReopenedIssue0AssigneesItem - User
type WebhookIssuesReopenedIssue0AssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesReopenedIssueOneOf0AssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesReopenedIssue0LabelsItem - Label
type WebhookIssuesReopenedIssue0LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesReopenedIssue0Milestone - A collection of related issues and pull requests.
type WebhookIssuesReopenedIssue0Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesReopenedIssue0MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesReopenedIssue0MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesReopenedIssue0MilestoneCreator - User
type WebhookIssuesReopenedIssue0MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesReopenedIssue0MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesReopenedIssue0PerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed directly
// on organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesReopenedIssue0PerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesReopenedIssue0PerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesReopenedIssue0PerformedViaGithubAppOwner - User
type WebhookIssuesReopenedIssue0PerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesReopenedIssue0PullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesReopenedIssue0Reactions - Reactions
type WebhookIssuesReopenedIssue0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesReopenedIssue0User - User
type WebhookIssuesReopenedIssue0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesReopenedIssue0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssuesReopenedIssue1Reactions struct {
	ThumbsUp *int32 `json:"+1,omitempty"`
	ThumbsDown *int32 `json:"-1,omitempty"`
	Confused *int32 `json:"confused,omitempty"`
	Eyes *int32 `json:"eyes,omitempty"`
	Heart *int32 `json:"heart,omitempty"`
	Hooray *int32 `json:"hooray,omitempty"`
	Laugh *int32 `json:"laugh,omitempty"`
	Rocket *int32 `json:"rocket,omitempty"`
	TotalCount *int32 `json:"total_count,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssuesReopenedIssue1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferred - issues transferred event
type WebhookIssuesTransferred struct {
	// REQUIRED
	Action *WebhookIssuesTransferredAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookIssuesTransferredChanges `json:"changes,omitempty"`

	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] itself.
	Issue *WebhookIssuesTransferredIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookIssuesTransferredChanges struct {
	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] itself.
	NewIssue *WebhookIssuesTransferredChangesNewIssue `json:"new_issue,omitempty"`

	// REQUIRED; A git repository
	NewRepository *WebhookIssuesTransferredChangesNewRepository `json:"new_repository,omitempty"`
}

// WebhookIssuesTransferredChangesNewIssue - The issue [https://docs.github.com/rest/reference/issues] itself.
type WebhookIssuesTransferredChangesNewIssue struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesTransferredChangesNewIssueActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesTransferredChangesNewIssueAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesTransferredChangesNewIssueAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesTransferredChangesNewIssueMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesTransferredChangesNewIssueReactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesTransferredChangesNewIssueUser `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesTransferredChangesNewIssueAssignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesTransferredChangesNewIssueLabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesTransferredChangesNewIssuePullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesTransferredChangesNewIssueState `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookIssuesTransferredChangesNewIssueAssignee - User
type WebhookIssuesTransferredChangesNewIssueAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesTransferredChangesNewIssueAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredChangesNewIssueAssigneesItem - User
type WebhookIssuesTransferredChangesNewIssueAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesTransferredChangesNewIssueAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredChangesNewIssueLabelsItem - Label
type WebhookIssuesTransferredChangesNewIssueLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredChangesNewIssueMilestone - A collection of related issues and pull requests.
type WebhookIssuesTransferredChangesNewIssueMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesTransferredChangesNewIssueMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesTransferredChangesNewIssueMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesTransferredChangesNewIssueMilestoneCreator - User
type WebhookIssuesTransferredChangesNewIssueMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesTransferredChangesNewIssueMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredChangesNewIssuePerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be
// installed directly on organizations and user accounts and granted access to specific repositories. They come with granular
// permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwner - User
type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesTransferredChangesNewIssuePullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredChangesNewIssueReactions - Reactions
type WebhookIssuesTransferredChangesNewIssueReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredChangesNewIssueUser - User
type WebhookIssuesTransferredChangesNewIssueUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesTransferredChangesNewIssueUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredChangesNewRepository - A git repository
type WebhookIssuesTransferredChangesNewRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookIssuesTransferredChangesNewRepositoryCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookIssuesTransferredChangesNewRepositoryLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesTransferredChangesNewRepositoryOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookIssuesTransferredChangesNewRepositoryPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookIssuesTransferredChangesNewRepositoryVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookIssuesTransferredChangesNewRepositoryPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookIssuesTransferredChangesNewRepositoryCreatedAt struct {
}

// WebhookIssuesTransferredChangesNewRepositoryLicense - License
type WebhookIssuesTransferredChangesNewRepositoryLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredChangesNewRepositoryOwner - User
type WebhookIssuesTransferredChangesNewRepositoryOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesTransferredChangesNewRepositoryOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssuesTransferredChangesNewRepositoryPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookIssuesTransferredChangesNewRepositoryPushedAt struct {
}

// WebhookIssuesTransferredIssue - The issue [https://docs.github.com/rest/reference/issues] itself.
type WebhookIssuesTransferredIssue struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesTransferredIssueActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesTransferredIssueAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesTransferredIssueAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesTransferredIssueMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesTransferredIssueReactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesTransferredIssueUser `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesTransferredIssueAssignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesTransferredIssueLabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesTransferredIssuePerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesTransferredIssuePullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesTransferredIssueState `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookIssuesTransferredIssueAssignee - User
type WebhookIssuesTransferredIssueAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesTransferredIssueAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredIssueAssigneesItem - User
type WebhookIssuesTransferredIssueAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesTransferredIssueAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredIssueLabelsItem - Label
type WebhookIssuesTransferredIssueLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredIssueMilestone - A collection of related issues and pull requests.
type WebhookIssuesTransferredIssueMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesTransferredIssueMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesTransferredIssueMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesTransferredIssueMilestoneCreator - User
type WebhookIssuesTransferredIssueMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesTransferredIssueMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredIssuePerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed
// directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions
// and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesTransferredIssuePerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesTransferredIssuePerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesTransferredIssuePerformedViaGithubAppOwner - User
type WebhookIssuesTransferredIssuePerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesTransferredIssuePerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredIssuePerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesTransferredIssuePullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredIssueReactions - Reactions
type WebhookIssuesTransferredIssueReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesTransferredIssueUser - User
type WebhookIssuesTransferredIssueUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesTransferredIssueUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnassigned - issues unassigned event
type WebhookIssuesUnassigned struct {
	// REQUIRED; The action that was performed.
	Action *WebhookIssuesUnassignedAction `json:"action,omitempty"`

	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] itself.
	Issue *WebhookIssuesUnassignedIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// User
	Assignee *WebhookIssuesUnassignedAssignee `json:"assignee,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookIssuesUnassignedAssignee - User
type WebhookIssuesUnassignedAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnassignedAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnassignedIssue - The issue [https://docs.github.com/rest/reference/issues] itself.
type WebhookIssuesUnassignedIssue struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesUnassignedIssueActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesUnassignedIssueAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesUnassignedIssueAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesUnassignedIssueMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesUnassignedIssueReactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesUnassignedIssueUser `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesUnassignedIssueAssignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesUnassignedIssueLabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesUnassignedIssuePerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesUnassignedIssuePullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesUnassignedIssueState `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookIssuesUnassignedIssueAssignee - User
type WebhookIssuesUnassignedIssueAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnassignedIssueAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnassignedIssueAssigneesItem - User
type WebhookIssuesUnassignedIssueAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnassignedIssueAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnassignedIssueLabelsItem - Label
type WebhookIssuesUnassignedIssueLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnassignedIssueMilestone - A collection of related issues and pull requests.
type WebhookIssuesUnassignedIssueMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesUnassignedIssueMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesUnassignedIssueMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesUnassignedIssueMilestoneCreator - User
type WebhookIssuesUnassignedIssueMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnassignedIssueMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnassignedIssuePerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed directly
// on organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesUnassignedIssuePerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesUnassignedIssuePerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesUnassignedIssuePerformedViaGithubAppOwner - User
type WebhookIssuesUnassignedIssuePerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesUnassignedIssuePullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnassignedIssueReactions - Reactions
type WebhookIssuesUnassignedIssueReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnassignedIssueUser - User
type WebhookIssuesUnassignedIssueUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnassignedIssueUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlabeled - issues unlabeled event
type WebhookIssuesUnlabeled struct {
	// REQUIRED
	Action *WebhookIssuesUnlabeledAction `json:"action,omitempty"`

	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] itself.
	Issue *WebhookIssuesUnlabeledIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// Label
	Label *WebhookIssuesUnlabeledLabel `json:"label,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookIssuesUnlabeledIssue - The issue [https://docs.github.com/rest/reference/issues] itself.
type WebhookIssuesUnlabeledIssue struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesUnlabeledIssueActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesUnlabeledIssueAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesUnlabeledIssueAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesUnlabeledIssueMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesUnlabeledIssueReactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesUnlabeledIssueUser `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesUnlabeledIssueAssignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesUnlabeledIssueLabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesUnlabeledIssuePerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesUnlabeledIssuePullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesUnlabeledIssueState `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookIssuesUnlabeledIssueAssignee - User
type WebhookIssuesUnlabeledIssueAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnlabeledIssueAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlabeledIssueAssigneesItem - User
type WebhookIssuesUnlabeledIssueAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnlabeledIssueAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlabeledIssueLabelsItem - Label
type WebhookIssuesUnlabeledIssueLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlabeledIssueMilestone - A collection of related issues and pull requests.
type WebhookIssuesUnlabeledIssueMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesUnlabeledIssueMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesUnlabeledIssueMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesUnlabeledIssueMilestoneCreator - User
type WebhookIssuesUnlabeledIssueMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnlabeledIssueMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlabeledIssuePerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed directly
// on organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesUnlabeledIssuePerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwner - User
type WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesUnlabeledIssuePullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlabeledIssueReactions - Reactions
type WebhookIssuesUnlabeledIssueReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlabeledIssueUser - User
type WebhookIssuesUnlabeledIssueUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnlabeledIssueUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlabeledLabel - Label
type WebhookIssuesUnlabeledLabel struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlocked - issues unlocked event
type WebhookIssuesUnlocked struct {
	// REQUIRED
	Action *WebhookIssuesUnlockedAction `json:"action,omitempty"`

	// REQUIRED
	Issue *WebhookIssuesUnlockedIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookIssuesUnlockedIssue struct {
}

// WebhookIssuesUnlockedIssue0Assignee - User
type WebhookIssuesUnlockedIssue0Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnlockedIssue0AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlockedIssue0AssigneesItem - User
type WebhookIssuesUnlockedIssue0AssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnlockedIssueOneOf0AssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlockedIssue0LabelsItem - Label
type WebhookIssuesUnlockedIssue0LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlockedIssue0Milestone - A collection of related issues and pull requests.
type WebhookIssuesUnlockedIssue0Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesUnlockedIssue0MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesUnlockedIssue0MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesUnlockedIssue0MilestoneCreator - User
type WebhookIssuesUnlockedIssue0MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnlockedIssue0MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlockedIssue0PerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed directly
// on organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesUnlockedIssue0PerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwner - User
type WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesUnlockedIssue0PullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlockedIssue0Reactions - Reactions
type WebhookIssuesUnlockedIssue0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnlockedIssue0User - User
type WebhookIssuesUnlockedIssue0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnlockedIssue0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssuesUnlockedIssue1Reactions struct {
	ThumbsUp *int32 `json:"+1,omitempty"`
	ThumbsDown *int32 `json:"-1,omitempty"`
	Confused *int32 `json:"confused,omitempty"`
	Eyes *int32 `json:"eyes,omitempty"`
	Heart *int32 `json:"heart,omitempty"`
	Hooray *int32 `json:"hooray,omitempty"`
	Laugh *int32 `json:"laugh,omitempty"`
	Rocket *int32 `json:"rocket,omitempty"`
	TotalCount *int32 `json:"total_count,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookIssuesUnlockedIssue1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnpinned - issues unpinned event
type WebhookIssuesUnpinned struct {
	// REQUIRED
	Action *WebhookIssuesUnpinnedAction `json:"action,omitempty"`

	// REQUIRED; The issue [https://docs.github.com/rest/reference/issues] itself.
	Issue *WebhookIssuesUnpinnedIssue `json:"issue,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookIssuesUnpinnedIssue - The issue [https://docs.github.com/rest/reference/issues] itself.
type WebhookIssuesUnpinnedIssue struct {
	// REQUIRED
	ActiveLockReason *WebhookIssuesUnpinnedIssueActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED
	Assignees []*WebhookIssuesUnpinnedIssueAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookIssuesUnpinnedIssueAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; Contents of the issue
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	Comments *int32 `json:"comments,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookIssuesUnpinnedIssueMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookIssuesUnpinnedIssueReactions `json:"reactions,omitempty"`

	// REQUIRED
	RepositoryURL *string `json:"repository_url,omitempty"`

	// REQUIRED; Title of the issue
	Title *string `json:"title,omitempty"`

	// REQUIRED; URL for the issue
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookIssuesUnpinnedIssueUser `json:"user,omitempty"`

	// User
	Assignee *WebhookIssuesUnpinnedIssueAssignee `json:"assignee,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Labels []*WebhookIssuesUnpinnedIssueLabelsItem `json:"labels,omitempty"`
	Locked *bool `json:"locked,omitempty"`

	// GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted
// access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
	PerformedViaGithubApp *WebhookIssuesUnpinnedIssuePerformedViaGithubApp `json:"performed_via_github_app,omitempty"`
	PullRequest *WebhookIssuesUnpinnedIssuePullRequest `json:"pull_request,omitempty"`

	// State of the issue; either 'open' or 'closed'
	State *WebhookIssuesUnpinnedIssueState `json:"state,omitempty"`
	StateReason *string `json:"state_reason,omitempty"`
	TimelineURL *string `json:"timeline_url,omitempty"`
}

// WebhookIssuesUnpinnedIssueAssignee - User
type WebhookIssuesUnpinnedIssueAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnpinnedIssueAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnpinnedIssueAssigneesItem - User
type WebhookIssuesUnpinnedIssueAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnpinnedIssueAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnpinnedIssueLabelsItem - Label
type WebhookIssuesUnpinnedIssueLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnpinnedIssueMilestone - A collection of related issues and pull requests.
type WebhookIssuesUnpinnedIssueMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookIssuesUnpinnedIssueMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookIssuesUnpinnedIssueMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookIssuesUnpinnedIssueMilestoneCreator - User
type WebhookIssuesUnpinnedIssueMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnpinnedIssueMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnpinnedIssuePerformedViaGithubApp - GitHub apps are a new way to extend GitHub. They can be installed directly
// on organizations and user accounts and granted access to specific repositories. They come with granular permissions and
// built-in webhooks. GitHub apps are first class actors within GitHub.
type WebhookIssuesUnpinnedIssuePerformedViaGithubApp struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ExternalURL *string `json:"external_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the GitHub app
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the GitHub app
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; User
	Owner *WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwner `json:"owner,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// The list of events for the GitHub app
	Events []*WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem `json:"events,omitempty"`

	// The set of permissions for the GitHub app
	Permissions *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissions `json:"permissions,omitempty"`

	// The slug name of the GitHub app
	Slug *string `json:"slug,omitempty"`
}

// WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwner - User
type WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissions - The set of permissions for the GitHub app
type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissions struct {
	Actions *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsActions `json:"actions,omitempty"`
	Administration *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsAdministration `json:"administration,omitempty"`
	Checks *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsChecks `json:"checks,omitempty"`
	ContentReferences *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentReferences `json:"content_references,omitempty"`
	Contents *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContents `json:"contents,omitempty"`
	Deployments *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDeployments `json:"deployments,omitempty"`
	Discussions *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDiscussions `json:"discussions,omitempty"`
	Emails *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEmails `json:"emails,omitempty"`
	Environments *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEnvironments `json:"environments,omitempty"`
	Issues *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsIssues `json:"issues,omitempty"`
	Keys *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsKeys `json:"keys,omitempty"`
	Members *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMembers `json:"members,omitempty"`
	Metadata *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMetadata `json:"metadata,omitempty"`
	OrganizationAdministration *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministration `json:"organization_administration,omitempty"`
	OrganizationHooks *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationHooks `json:"organization_hooks,omitempty"`
	OrganizationPackages *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPackages `json:"organization_packages,omitempty"`
	OrganizationPlan *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPlan `json:"organization_plan,omitempty"`
	OrganizationProjects *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationProjects `json:"organization_projects,omitempty"`
	OrganizationSecrets *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSecrets `json:"organization_secrets,omitempty"`
	OrganizationSelfHostedRunners *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners `json:"organization_self_hosted_runners,omitempty"`
	OrganizationUserBlocking *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking `json:"organization_user_blocking,omitempty"`
	Packages *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPackages `json:"packages,omitempty"`
	Pages *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPages `json:"pages,omitempty"`
	PullRequests *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPullRequests `json:"pull_requests,omitempty"`
	RepositoryHooks *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryHooks `json:"repository_hooks,omitempty"`
	RepositoryProjects *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryProjects `json:"repository_projects,omitempty"`
	SecretScanningAlerts *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts `json:"secret_scanning_alerts,omitempty"`
	Secrets *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecrets `json:"secrets,omitempty"`
	SecurityEvents *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityEvents `json:"security_events,omitempty"`
	SecurityScanningAlert *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert `json:"security_scanning_alert,omitempty"`
	SingleFile *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSingleFile `json:"single_file,omitempty"`
	Statuses *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsStatuses `json:"statuses,omitempty"`
	TeamDiscussions *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsTeamDiscussions `json:"team_discussions,omitempty"`
	VulnerabilityAlerts *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts `json:"vulnerability_alerts,omitempty"`
	Workflows *WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsWorkflows `json:"workflows,omitempty"`
}

type WebhookIssuesUnpinnedIssuePullRequest struct {
	DiffURL *string `json:"diff_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MergedAt *time.Time `json:"merged_at,omitempty"`
	PatchURL *string `json:"patch_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnpinnedIssueReactions - Reactions
type WebhookIssuesUnpinnedIssueReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookIssuesUnpinnedIssueUser - User
type WebhookIssuesUnpinnedIssueUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookIssuesUnpinnedIssueUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookLabelCreated - label created event
type WebhookLabelCreated struct {
	// REQUIRED
	Action *WebhookLabelCreatedAction `json:"action,omitempty"`

	// REQUIRED; Label
	Label *WebhookLabelCreatedLabel `json:"label,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookLabelCreatedLabel - Label
type WebhookLabelCreatedLabel struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookLabelDeleted - label deleted event
type WebhookLabelDeleted struct {
	// REQUIRED
	Action *WebhookLabelDeletedAction `json:"action,omitempty"`

	// REQUIRED; Label
	Label *WebhookLabelDeletedLabel `json:"label,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookLabelDeletedLabel - Label
type WebhookLabelDeletedLabel struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookLabelEdited - label edited event
type WebhookLabelEdited struct {
	// REQUIRED
	Action *WebhookLabelEditedAction `json:"action,omitempty"`

	// REQUIRED; Label
	Label *WebhookLabelEditedLabel `json:"label,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// The changes to the label if the action was edited.
	Changes *WebhookLabelEditedChanges `json:"changes,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookLabelEditedChanges - The changes to the label if the action was edited.
type WebhookLabelEditedChanges struct {
	Color *WebhookLabelEditedChangesColor `json:"color,omitempty"`
	Description *WebhookLabelEditedChangesDescription `json:"description,omitempty"`
	Name *WebhookLabelEditedChangesName `json:"name,omitempty"`
}

type WebhookLabelEditedChangesColor struct {
	// REQUIRED; The previous version of the color if the action was edited.
	From *string `json:"from,omitempty"`
}

type WebhookLabelEditedChangesDescription struct {
	// REQUIRED; The previous version of the description if the action was edited.
	From *string `json:"from,omitempty"`
}

type WebhookLabelEditedChangesName struct {
	// REQUIRED; The previous version of the name if the action was edited.
	From *string `json:"from,omitempty"`
}

// WebhookLabelEditedLabel - Label
type WebhookLabelEditedLabel struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookMarketplacePurchaseCancelled - marketplace_purchase cancelled event
type WebhookMarketplacePurchaseCancelled struct {
	// REQUIRED
	Action *WebhookMarketplacePurchaseCancelledAction `json:"action,omitempty"`

	// REQUIRED
	EffectiveDate *string `json:"effective_date,omitempty"`

	// REQUIRED
	MarketplacePurchase *WebhookMarketplacePurchaseCancelledMarketplacePurchase `json:"marketplace_purchase,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// Marketplace Purchase
	PreviousMarketplacePurchase *WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchase `json:"previous_marketplace_purchase,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookMarketplacePurchaseCancelledMarketplacePurchase struct {
}

type WebhookMarketplacePurchaseCancelledMarketplacePurchase0Account struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`
}

type WebhookMarketplacePurchaseCancelledMarketplacePurchase0Plan struct {
	// REQUIRED
	Bullets []*string `json:"bullets,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HasFreeTrial *bool `json:"has_free_trial,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PriceModel *WebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModel `json:"price_model,omitempty"`

	// REQUIRED
	UnitName *string `json:"unit_name,omitempty"`

	// REQUIRED
	YearlyPriceInCents *int32 `json:"yearly_price_in_cents,omitempty"`
}

type WebhookMarketplacePurchaseCancelledMarketplacePurchase1Account struct {
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`
	Type *string `json:"type,omitempty"`
}

type WebhookMarketplacePurchaseCancelledMarketplacePurchase1Plan struct {
	Bullets []*string `json:"bullets,omitempty"`
	Description *string `json:"description,omitempty"`
	HasFreeTrial *bool `json:"has_free_trial,omitempty"`
	ID *int32 `json:"id,omitempty"`
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`
	Name *string `json:"name,omitempty"`
	PriceModel *WebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModel `json:"price_model,omitempty"`
	UnitName *string `json:"unit_name,omitempty"`
	YearlyPriceInCents *int32 `json:"yearly_price_in_cents,omitempty"`
}

// WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchase - Marketplace Purchase
type WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchase struct {
	// REQUIRED
	Account *WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchaseAccount `json:"account,omitempty"`

	// REQUIRED
	BillingCycle *string `json:"billing_cycle,omitempty"`

	// REQUIRED; Anything
	FreeTrialEndsOn any `json:"free_trial_ends_on,omitempty"`

	// REQUIRED
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`

	// REQUIRED
	Plan *WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlan `json:"plan,omitempty"`

	// REQUIRED
	UnitCount *int32 `json:"unit_count,omitempty"`
	NextBillingDate *string `json:"next_billing_date,omitempty"`
}

type WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchaseAccount struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`
}

type WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlan struct {
	// REQUIRED
	Bullets []*string `json:"bullets,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HasFreeTrial *bool `json:"has_free_trial,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PriceModel *WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModel `json:"price_model,omitempty"`

	// REQUIRED
	UnitName *string `json:"unit_name,omitempty"`

	// REQUIRED
	YearlyPriceInCents *int32 `json:"yearly_price_in_cents,omitempty"`
}

// WebhookMarketplacePurchaseChanged - marketplace_purchase changed event
type WebhookMarketplacePurchaseChanged struct {
	// REQUIRED
	Action *WebhookMarketplacePurchaseChangedAction `json:"action,omitempty"`

	// REQUIRED
	EffectiveDate *string `json:"effective_date,omitempty"`

	// REQUIRED
	MarketplacePurchase *WebhookMarketplacePurchaseChangedMarketplacePurchase `json:"marketplace_purchase,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// Marketplace Purchase
	PreviousMarketplacePurchase *WebhookMarketplacePurchaseChangedPreviousMarketplacePurchase `json:"previous_marketplace_purchase,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookMarketplacePurchaseChangedMarketplacePurchase struct {
}

type WebhookMarketplacePurchaseChangedMarketplacePurchase0Account struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`
}

type WebhookMarketplacePurchaseChangedMarketplacePurchase0Plan struct {
	// REQUIRED
	Bullets []*string `json:"bullets,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HasFreeTrial *bool `json:"has_free_trial,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PriceModel *WebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModel `json:"price_model,omitempty"`

	// REQUIRED
	UnitName *string `json:"unit_name,omitempty"`

	// REQUIRED
	YearlyPriceInCents *int32 `json:"yearly_price_in_cents,omitempty"`
}

type WebhookMarketplacePurchaseChangedMarketplacePurchase1Account struct {
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`
	Type *string `json:"type,omitempty"`
}

type WebhookMarketplacePurchaseChangedMarketplacePurchase1Plan struct {
	Bullets []*string `json:"bullets,omitempty"`
	Description *string `json:"description,omitempty"`
	HasFreeTrial *bool `json:"has_free_trial,omitempty"`
	ID *int32 `json:"id,omitempty"`
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`
	Name *string `json:"name,omitempty"`
	PriceModel *WebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModel `json:"price_model,omitempty"`
	UnitName *string `json:"unit_name,omitempty"`
	YearlyPriceInCents *int32 `json:"yearly_price_in_cents,omitempty"`
}

// WebhookMarketplacePurchaseChangedPreviousMarketplacePurchase - Marketplace Purchase
type WebhookMarketplacePurchaseChangedPreviousMarketplacePurchase struct {
	// REQUIRED
	Account *WebhookMarketplacePurchaseChangedPreviousMarketplacePurchaseAccount `json:"account,omitempty"`

	// REQUIRED
	BillingCycle *string `json:"billing_cycle,omitempty"`

	// REQUIRED
	FreeTrialEndsOn *string `json:"free_trial_ends_on,omitempty"`

	// REQUIRED
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`

	// REQUIRED
	Plan *WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlan `json:"plan,omitempty"`

	// REQUIRED
	UnitCount *int32 `json:"unit_count,omitempty"`
	NextBillingDate *string `json:"next_billing_date,omitempty"`
}

type WebhookMarketplacePurchaseChangedPreviousMarketplacePurchaseAccount struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`
}

type WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlan struct {
	// REQUIRED
	Bullets []*string `json:"bullets,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HasFreeTrial *bool `json:"has_free_trial,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PriceModel *WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModel `json:"price_model,omitempty"`

	// REQUIRED
	UnitName *string `json:"unit_name,omitempty"`

	// REQUIRED
	YearlyPriceInCents *int32 `json:"yearly_price_in_cents,omitempty"`
}

// WebhookMarketplacePurchasePendingChange - marketplacepurchase pendingchange event
type WebhookMarketplacePurchasePendingChange struct {
	// REQUIRED
	Action *WebhookMarketplacePurchasePendingChangeAction `json:"action,omitempty"`

	// REQUIRED
	EffectiveDate *string `json:"effective_date,omitempty"`

	// REQUIRED
	MarketplacePurchase *WebhookMarketplacePurchasePendingChangeMarketplacePurchase `json:"marketplace_purchase,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// Marketplace Purchase
	PreviousMarketplacePurchase *WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchase `json:"previous_marketplace_purchase,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

// WebhookMarketplacePurchasePendingChangeCancelled - marketplacepurchase pendingchange_cancelled event
type WebhookMarketplacePurchasePendingChangeCancelled struct {
	// REQUIRED
	Action *WebhookMarketplacePurchasePendingChangeCancelledAction `json:"action,omitempty"`

	// REQUIRED
	EffectiveDate *string `json:"effective_date,omitempty"`

	// REQUIRED
	MarketplacePurchase *WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase `json:"marketplace_purchase,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// Marketplace Purchase
	PreviousMarketplacePurchase *WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchase `json:"previous_marketplace_purchase,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase struct {
}

type WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0Account struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`
}

type WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0Plan struct {
	// REQUIRED
	Bullets []*string `json:"bullets,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HasFreeTrial *bool `json:"has_free_trial,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PriceModel *WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModel `json:"price_model,omitempty"`

	// REQUIRED
	UnitName *string `json:"unit_name,omitempty"`

	// REQUIRED
	YearlyPriceInCents *int32 `json:"yearly_price_in_cents,omitempty"`
}

// WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchase - Marketplace Purchase
type WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchase struct {
	// REQUIRED
	Account *WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchaseAccount `json:"account,omitempty"`

	// REQUIRED
	BillingCycle *string `json:"billing_cycle,omitempty"`

	// REQUIRED; Anything
	FreeTrialEndsOn any `json:"free_trial_ends_on,omitempty"`

	// REQUIRED
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`

	// REQUIRED
	Plan *WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlan `json:"plan,omitempty"`

	// REQUIRED
	UnitCount *int32 `json:"unit_count,omitempty"`
	NextBillingDate *string `json:"next_billing_date,omitempty"`
}

type WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchaseAccount struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`
}

type WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlan struct {
	// REQUIRED
	Bullets []*string `json:"bullets,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HasFreeTrial *bool `json:"has_free_trial,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PriceModel *WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModel `json:"price_model,omitempty"`

	// REQUIRED
	UnitName *string `json:"unit_name,omitempty"`

	// REQUIRED
	YearlyPriceInCents *int32 `json:"yearly_price_in_cents,omitempty"`
}

type WebhookMarketplacePurchasePendingChangeMarketplacePurchase struct {
}

type WebhookMarketplacePurchasePendingChangeMarketplacePurchase0Account struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`
}

type WebhookMarketplacePurchasePendingChangeMarketplacePurchase0Plan struct {
	// REQUIRED
	Bullets []*string `json:"bullets,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HasFreeTrial *bool `json:"has_free_trial,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PriceModel *WebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModel `json:"price_model,omitempty"`

	// REQUIRED
	UnitName *string `json:"unit_name,omitempty"`

	// REQUIRED
	YearlyPriceInCents *int32 `json:"yearly_price_in_cents,omitempty"`
}

type WebhookMarketplacePurchasePendingChangeMarketplacePurchase1Account struct {
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`
	Type *string `json:"type,omitempty"`
}

type WebhookMarketplacePurchasePendingChangeMarketplacePurchase1Plan struct {
	Bullets []*string `json:"bullets,omitempty"`
	Description *string `json:"description,omitempty"`
	HasFreeTrial *bool `json:"has_free_trial,omitempty"`
	ID *int32 `json:"id,omitempty"`
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`
	Name *string `json:"name,omitempty"`
	PriceModel *WebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModel `json:"price_model,omitempty"`
	UnitName *string `json:"unit_name,omitempty"`
	YearlyPriceInCents *int32 `json:"yearly_price_in_cents,omitempty"`
}

// WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchase - Marketplace Purchase
type WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchase struct {
	// REQUIRED
	Account *WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchaseAccount `json:"account,omitempty"`

	// REQUIRED
	BillingCycle *string `json:"billing_cycle,omitempty"`

	// REQUIRED
	FreeTrialEndsOn *string `json:"free_trial_ends_on,omitempty"`

	// REQUIRED
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`

	// REQUIRED
	Plan *WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlan `json:"plan,omitempty"`

	// REQUIRED
	UnitCount *int32 `json:"unit_count,omitempty"`
	NextBillingDate *string `json:"next_billing_date,omitempty"`
}

type WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchaseAccount struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`
}

type WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlan struct {
	// REQUIRED
	Bullets []*string `json:"bullets,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HasFreeTrial *bool `json:"has_free_trial,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PriceModel *WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModel `json:"price_model,omitempty"`

	// REQUIRED
	UnitName *string `json:"unit_name,omitempty"`

	// REQUIRED
	YearlyPriceInCents *int32 `json:"yearly_price_in_cents,omitempty"`
}

// WebhookMarketplacePurchasePurchased - marketplace_purchase purchased event
type WebhookMarketplacePurchasePurchased struct {
	// REQUIRED
	Action *WebhookMarketplacePurchasePurchasedAction `json:"action,omitempty"`

	// REQUIRED
	EffectiveDate *string `json:"effective_date,omitempty"`

	// REQUIRED
	MarketplacePurchase *WebhookMarketplacePurchasePurchasedMarketplacePurchase `json:"marketplace_purchase,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// Marketplace Purchase
	PreviousMarketplacePurchase *WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchase `json:"previous_marketplace_purchase,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookMarketplacePurchasePurchasedMarketplacePurchase struct {
}

type WebhookMarketplacePurchasePurchasedMarketplacePurchase0Account struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`
}

type WebhookMarketplacePurchasePurchasedMarketplacePurchase0Plan struct {
	// REQUIRED
	Bullets []*string `json:"bullets,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HasFreeTrial *bool `json:"has_free_trial,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PriceModel *WebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModel `json:"price_model,omitempty"`

	// REQUIRED
	UnitName *string `json:"unit_name,omitempty"`

	// REQUIRED
	YearlyPriceInCents *int32 `json:"yearly_price_in_cents,omitempty"`
}

type WebhookMarketplacePurchasePurchasedMarketplacePurchase1Account struct {
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`
	Type *string `json:"type,omitempty"`
}

type WebhookMarketplacePurchasePurchasedMarketplacePurchase1Plan struct {
	Bullets []*string `json:"bullets,omitempty"`
	Description *string `json:"description,omitempty"`
	HasFreeTrial *bool `json:"has_free_trial,omitempty"`
	ID *int32 `json:"id,omitempty"`
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`
	Name *string `json:"name,omitempty"`
	PriceModel *WebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModel `json:"price_model,omitempty"`
	UnitName *string `json:"unit_name,omitempty"`
	YearlyPriceInCents *int32 `json:"yearly_price_in_cents,omitempty"`
}

// WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchase - Marketplace Purchase
type WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchase struct {
	// REQUIRED
	Account *WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchaseAccount `json:"account,omitempty"`

	// REQUIRED
	BillingCycle *string `json:"billing_cycle,omitempty"`

	// REQUIRED; Anything
	FreeTrialEndsOn any `json:"free_trial_ends_on,omitempty"`

	// REQUIRED
	OnFreeTrial *bool `json:"on_free_trial,omitempty"`

	// REQUIRED
	Plan *WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlan `json:"plan,omitempty"`

	// REQUIRED
	UnitCount *int32 `json:"unit_count,omitempty"`
	NextBillingDate *string `json:"next_billing_date,omitempty"`
}

type WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchaseAccount struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationBillingEmail *string `json:"organization_billing_email,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`
}

type WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlan struct {
	// REQUIRED
	Bullets []*string `json:"bullets,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HasFreeTrial *bool `json:"has_free_trial,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PriceModel *WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModel `json:"price_model,omitempty"`

	// REQUIRED
	UnitName *string `json:"unit_name,omitempty"`

	// REQUIRED
	YearlyPriceInCents *int32 `json:"yearly_price_in_cents,omitempty"`
}

// WebhookMemberAdded - member added event
type WebhookMemberAdded struct {
	// REQUIRED
	Action *WebhookMemberAddedAction `json:"action,omitempty"`

	// REQUIRED; User
	Member *WebhookMemberAddedMember `json:"member,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
	Changes *WebhookMemberAddedChanges `json:"changes,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookMemberAddedChanges struct {
	Permission *WebhookMemberAddedChangesPermission `json:"permission,omitempty"`
}

type WebhookMemberAddedChangesPermission struct {
	// REQUIRED
	To *WebhookMemberAddedChangesPermissionTo `json:"to,omitempty"`
}

// WebhookMemberAddedMember - User
type WebhookMemberAddedMember struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookMemberAddedMemberType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookMemberEdited - member edited event
type WebhookMemberEdited struct {
	// REQUIRED
	Action *WebhookMemberEditedAction `json:"action,omitempty"`

	// REQUIRED; The changes to the collaborator permissions
	Changes *WebhookMemberEditedChanges `json:"changes,omitempty"`

	// REQUIRED; User
	Member *WebhookMemberEditedMember `json:"member,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookMemberEditedChanges - The changes to the collaborator permissions
type WebhookMemberEditedChanges struct {
	OldPermission *WebhookMemberEditedChangesOldPermission `json:"old_permission,omitempty"`
	Permission *WebhookMemberEditedChangesPermission `json:"permission,omitempty"`
}

type WebhookMemberEditedChangesOldPermission struct {
	// REQUIRED; The previous permissions of the collaborator if the action was edited.
	From *string `json:"from,omitempty"`
}

type WebhookMemberEditedChangesPermission struct {
	From *string `json:"from,omitempty"`
	To *string `json:"to,omitempty"`
}

// WebhookMemberEditedMember - User
type WebhookMemberEditedMember struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookMemberEditedMemberType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookMemberRemoved - member removed event
type WebhookMemberRemoved struct {
	// REQUIRED
	Action *WebhookMemberRemovedAction `json:"action,omitempty"`

	// REQUIRED; User
	Member *WebhookMemberRemovedMember `json:"member,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookMemberRemovedMember - User
type WebhookMemberRemovedMember struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookMemberRemovedMemberType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookMembershipAdded - membership added event
type WebhookMembershipAdded struct {
	// REQUIRED
	Action *WebhookMembershipAddedAction `json:"action,omitempty"`

	// REQUIRED; User
	Member *WebhookMembershipAddedMember `json:"member,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; The scope of the membership. Currently, can only be team.
	Scope *WebhookMembershipAddedScope `json:"scope,omitempty"`

	// REQUIRED; User
	Sender *WebhookMembershipAddedSender `json:"sender,omitempty"`

	// REQUIRED; Groups of organization members that gives permissions on specified repositories.
	Team *WebhookMembershipAddedTeam `json:"team,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

// WebhookMembershipAddedMember - User
type WebhookMembershipAddedMember struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookMembershipAddedMemberType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookMembershipAddedSender - User
type WebhookMembershipAddedSender struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookMembershipAddedSenderType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookMembershipAddedTeam - Groups of organization members that gives permissions on specified repositories.
type WebhookMembershipAddedTeam struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookMembershipAddedTeamParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookMembershipAddedTeamPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookMembershipAddedTeamParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *WebhookMembershipAddedTeamParentPrivacy `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookMembershipRemoved - membership removed event
type WebhookMembershipRemoved struct {
	// REQUIRED
	Action *WebhookMembershipRemovedAction `json:"action,omitempty"`

	// REQUIRED; User
	Member *WebhookMembershipRemovedMember `json:"member,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; The scope of the membership. Currently, can only be team.
	Scope *WebhookMembershipRemovedScope `json:"scope,omitempty"`

	// REQUIRED; User
	Sender *WebhookMembershipRemovedSender `json:"sender,omitempty"`

	// REQUIRED; Groups of organization members that gives permissions on specified repositories.
	Team *WebhookMembershipRemovedTeam `json:"team,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

// WebhookMembershipRemovedMember - User
type WebhookMembershipRemovedMember struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookMembershipRemovedMemberType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookMembershipRemovedSender - User
type WebhookMembershipRemovedSender struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookMembershipRemovedSenderType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookMembershipRemovedTeam - Groups of organization members that gives permissions on specified repositories.
type WebhookMembershipRemovedTeam struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookMembershipRemovedTeamParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookMembershipRemovedTeamPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookMembershipRemovedTeamParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *WebhookMembershipRemovedTeamParentPrivacy `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookMergeGroupChecksRequested struct {
	// REQUIRED
	Action *string `json:"action,omitempty"`

	// REQUIRED; MergeGroup
	MergeGroup *WebhookMergeGroupChecksRequestedMergeGroup `json:"merge_group,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookMergeGroupChecksRequestedMergeGroup - MergeGroup
type WebhookMergeGroupChecksRequestedMergeGroup struct {
	// REQUIRED; The full ref of the branch the merge group will be merged into.
	BaseRef *string `json:"base_ref,omitempty"`

	// REQUIRED; The SHA of the merge group's parent commit.
	BaseSHA *string `json:"base_sha,omitempty"`

	// REQUIRED; SimpleCommit
	HeadCommit *WebhookMergeGroupChecksRequestedMergeGroupHeadCommit `json:"head_commit,omitempty"`

	// REQUIRED; The full ref of the merge group.
	HeadRef *string `json:"head_ref,omitempty"`

	// REQUIRED; The SHA of the merge group.
	HeadSHA *string `json:"head_sha,omitempty"`
}

// WebhookMergeGroupChecksRequestedMergeGroupHeadCommit - SimpleCommit
type WebhookMergeGroupChecksRequestedMergeGroupHeadCommit struct {
	// REQUIRED; Metaproperties for Git author/committer information.
	Author *WebhookMergeGroupChecksRequestedMergeGroupHeadCommitAuthor `json:"author,omitempty"`

	// REQUIRED; Metaproperties for Git author/committer information.
	Committer *WebhookMergeGroupChecksRequestedMergeGroupHeadCommitCommitter `json:"committer,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	Timestamp *string `json:"timestamp,omitempty"`

	// REQUIRED
	TreeID *string `json:"tree_id,omitempty"`
}

// WebhookMergeGroupChecksRequestedMergeGroupHeadCommitAuthor - Metaproperties for Git author/committer information.
type WebhookMergeGroupChecksRequestedMergeGroupHeadCommitAuthor struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookMergeGroupChecksRequestedMergeGroupHeadCommitCommitter - Metaproperties for Git author/committer information.
type WebhookMergeGroupChecksRequestedMergeGroupHeadCommitCommitter struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookMetaDeleted - meta deleted event
type WebhookMetaDeleted struct {
	// REQUIRED
	Action *WebhookMetaDeletedAction `json:"action,omitempty"`

	// REQUIRED; The modified webhook. This will contain different keys based on the type of webhook it is: repository, organization,
// business, app, or GitHub Marketplace.
	Hook *WebhookMetaDeletedHook `json:"hook,omitempty"`

	// REQUIRED; The id of the modified webhook.
	HookID *int32 `json:"hook_id,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *NullableRepository `json:"repository,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookMetaDeletedHook - The modified webhook. This will contain different keys based on the type of webhook it is: repository,
// organization, business, app, or GitHub Marketplace.
type WebhookMetaDeletedHook struct {
	// REQUIRED
	Active *bool `json:"active,omitempty"`

	// REQUIRED
	Config *WebhookMetaDeletedHookConfig `json:"config,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Events []*WebhookMetaDeletedHookEventsItem `json:"events,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type WebhookMetaDeletedHookConfig struct {
	// REQUIRED
	ContentType *WebhookMetaDeletedHookConfigContentType `json:"content_type,omitempty"`

	// REQUIRED
	InsecureSSL *string `json:"insecure_ssl,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	Secret *string `json:"secret,omitempty"`
}

// WebhookMilestoneClosed - milestone closed event
type WebhookMilestoneClosed struct {
	// REQUIRED
	Action *WebhookMilestoneClosedAction `json:"action,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookMilestoneClosedMilestone `json:"milestone,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookMilestoneClosedMilestone - A collection of related issues and pull requests.
type WebhookMilestoneClosedMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookMilestoneClosedMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookMilestoneClosedMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookMilestoneClosedMilestoneCreator - User
type WebhookMilestoneClosedMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookMilestoneClosedMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookMilestoneCreated - milestone created event
type WebhookMilestoneCreated struct {
	// REQUIRED
	Action *WebhookMilestoneCreatedAction `json:"action,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookMilestoneCreatedMilestone `json:"milestone,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookMilestoneCreatedMilestone - A collection of related issues and pull requests.
type WebhookMilestoneCreatedMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookMilestoneCreatedMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookMilestoneCreatedMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookMilestoneCreatedMilestoneCreator - User
type WebhookMilestoneCreatedMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookMilestoneCreatedMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookMilestoneDeleted - milestone deleted event
type WebhookMilestoneDeleted struct {
	// REQUIRED
	Action *WebhookMilestoneDeletedAction `json:"action,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookMilestoneDeletedMilestone `json:"milestone,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookMilestoneDeletedMilestone - A collection of related issues and pull requests.
type WebhookMilestoneDeletedMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookMilestoneDeletedMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookMilestoneDeletedMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookMilestoneDeletedMilestoneCreator - User
type WebhookMilestoneDeletedMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookMilestoneDeletedMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookMilestoneEdited - milestone edited event
type WebhookMilestoneEdited struct {
	// REQUIRED
	Action *WebhookMilestoneEditedAction `json:"action,omitempty"`

	// REQUIRED; The changes to the milestone if the action was edited.
	Changes *WebhookMilestoneEditedChanges `json:"changes,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookMilestoneEditedMilestone `json:"milestone,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookMilestoneEditedChanges - The changes to the milestone if the action was edited.
type WebhookMilestoneEditedChanges struct {
	Description *WebhookMilestoneEditedChangesDescription `json:"description,omitempty"`
	DueOn *WebhookMilestoneEditedChangesDueOn `json:"due_on,omitempty"`
	Title *WebhookMilestoneEditedChangesTitle `json:"title,omitempty"`
}

type WebhookMilestoneEditedChangesDescription struct {
	// REQUIRED; The previous version of the description if the action was edited.
	From *string `json:"from,omitempty"`
}

type WebhookMilestoneEditedChangesDueOn struct {
	// REQUIRED; The previous version of the due date if the action was edited.
	From *string `json:"from,omitempty"`
}

type WebhookMilestoneEditedChangesTitle struct {
	// REQUIRED; The previous version of the title if the action was edited.
	From *string `json:"from,omitempty"`
}

// WebhookMilestoneEditedMilestone - A collection of related issues and pull requests.
type WebhookMilestoneEditedMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookMilestoneEditedMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookMilestoneEditedMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookMilestoneEditedMilestoneCreator - User
type WebhookMilestoneEditedMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookMilestoneEditedMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookMilestoneOpened - milestone opened event
type WebhookMilestoneOpened struct {
	// REQUIRED
	Action *WebhookMilestoneOpenedAction `json:"action,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookMilestoneOpenedMilestone `json:"milestone,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookMilestoneOpenedMilestone - A collection of related issues and pull requests.
type WebhookMilestoneOpenedMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookMilestoneOpenedMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookMilestoneOpenedMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookMilestoneOpenedMilestoneCreator - User
type WebhookMilestoneOpenedMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookMilestoneOpenedMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookOrgBlockBlocked - org_block blocked event
type WebhookOrgBlockBlocked struct {
	// REQUIRED
	Action *WebhookOrgBlockBlockedAction `json:"action,omitempty"`

	// REQUIRED; User
	BlockedUser *WebhookOrgBlockBlockedUser `json:"blocked_user,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

// WebhookOrgBlockBlockedUser - User
type WebhookOrgBlockBlockedUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookOrgBlockBlockedUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookOrgBlockUnblocked - org_block unblocked event
type WebhookOrgBlockUnblocked struct {
	// REQUIRED
	Action *WebhookOrgBlockUnblockedAction `json:"action,omitempty"`

	// REQUIRED; User
	BlockedUser *WebhookOrgBlockUnblockedBlockedUser `json:"blocked_user,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

// WebhookOrgBlockUnblockedBlockedUser - User
type WebhookOrgBlockUnblockedBlockedUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookOrgBlockUnblockedBlockedUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookOrganizationDeleted - organization deleted event
type WebhookOrganizationDeleted struct {
	// REQUIRED
	Action *WebhookOrganizationDeletedAction `json:"action,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// The membership between the user and the organization. Not present when the action is member_invited.
	Membership *WebhookOrganizationDeletedMembership `json:"membership,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

// WebhookOrganizationDeletedMembership - The membership between the user and the organization. Not present when the action
// is member_invited.
type WebhookOrganizationDeletedMembership struct {
	// REQUIRED
	OrganizationURL *string `json:"organization_url,omitempty"`

	// REQUIRED
	Role *string `json:"role,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED; User
	User *WebhookOrganizationDeletedMembershipUser `json:"user,omitempty"`
}

// WebhookOrganizationDeletedMembershipUser - User
type WebhookOrganizationDeletedMembershipUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookOrganizationDeletedMembershipUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookOrganizationMemberAdded - organization member_added event
type WebhookOrganizationMemberAdded struct {
	// REQUIRED
	Action *WebhookOrganizationMemberAddedAction `json:"action,omitempty"`

	// REQUIRED; The membership between the user and the organization. Not present when the action is member_invited.
	Membership *WebhookOrganizationMemberAddedMembership `json:"membership,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

// WebhookOrganizationMemberAddedMembership - The membership between the user and the organization. Not present when the action
// is member_invited.
type WebhookOrganizationMemberAddedMembership struct {
	// REQUIRED
	OrganizationURL *string `json:"organization_url,omitempty"`

	// REQUIRED
	Role *string `json:"role,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED; User
	User *WebhookOrganizationMemberAddedMembershipUser `json:"user,omitempty"`
}

// WebhookOrganizationMemberAddedMembershipUser - User
type WebhookOrganizationMemberAddedMembershipUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookOrganizationMemberAddedMembershipUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookOrganizationMemberInvited - organization member_invited event
type WebhookOrganizationMemberInvited struct {
	// REQUIRED
	Action *WebhookOrganizationMemberInvitedAction `json:"action,omitempty"`

	// REQUIRED; The invitation for the user or email if the action is member_invited.
	Invitation *WebhookOrganizationMemberInvitedInvitation `json:"invitation,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// User
	User *WebhookOrganizationMemberInvitedUser `json:"user,omitempty"`
}

// WebhookOrganizationMemberInvitedInvitation - The invitation for the user or email if the action is member_invited.
type WebhookOrganizationMemberInvitedInvitation struct {
	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED
	FailedAt *time.Time `json:"failed_at,omitempty"`

	// REQUIRED
	FailedReason *string `json:"failed_reason,omitempty"`

	// REQUIRED
	ID *float32 `json:"id,omitempty"`

	// REQUIRED
	InvitationTeamsURL *string `json:"invitation_teams_url,omitempty"`

	// REQUIRED; User
	Inviter *WebhookOrganizationMemberInvitedInvitationInviter `json:"inviter,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Role *string `json:"role,omitempty"`

	// REQUIRED
	TeamCount *float32 `json:"team_count,omitempty"`
	InvitationSource *string `json:"invitation_source,omitempty"`
}

// WebhookOrganizationMemberInvitedInvitationInviter - User
type WebhookOrganizationMemberInvitedInvitationInviter struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookOrganizationMemberInvitedInvitationInviterType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookOrganizationMemberInvitedUser - User
type WebhookOrganizationMemberInvitedUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookOrganizationMemberInvitedUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookOrganizationMemberRemoved - organization member_removed event
type WebhookOrganizationMemberRemoved struct {
	// REQUIRED
	Action *WebhookOrganizationMemberRemovedAction `json:"action,omitempty"`

	// REQUIRED; The membership between the user and the organization. Not present when the action is member_invited.
	Membership *WebhookOrganizationMemberRemovedMembership `json:"membership,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

// WebhookOrganizationMemberRemovedMembership - The membership between the user and the organization. Not present when the
// action is member_invited.
type WebhookOrganizationMemberRemovedMembership struct {
	// REQUIRED
	OrganizationURL *string `json:"organization_url,omitempty"`

	// REQUIRED
	Role *string `json:"role,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED; User
	User *WebhookOrganizationMemberRemovedMembershipUser `json:"user,omitempty"`
}

// WebhookOrganizationMemberRemovedMembershipUser - User
type WebhookOrganizationMemberRemovedMembershipUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookOrganizationMemberRemovedMembershipUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookOrganizationRenamed - organization renamed event
type WebhookOrganizationRenamed struct {
	// REQUIRED
	Action *WebhookOrganizationRenamedAction `json:"action,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
	Changes *WebhookOrganizationRenamedChanges `json:"changes,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// The membership between the user and the organization. Not present when the action is member_invited.
	Membership *WebhookOrganizationRenamedMembership `json:"membership,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookOrganizationRenamedChanges struct {
	Login *WebhookOrganizationRenamedChangesLogin `json:"login,omitempty"`
}

type WebhookOrganizationRenamedChangesLogin struct {
	From *string `json:"from,omitempty"`
}

// WebhookOrganizationRenamedMembership - The membership between the user and the organization. Not present when the action
// is member_invited.
type WebhookOrganizationRenamedMembership struct {
	// REQUIRED
	OrganizationURL *string `json:"organization_url,omitempty"`

	// REQUIRED
	Role *string `json:"role,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED; User
	User *WebhookOrganizationRenamedMembershipUser `json:"user,omitempty"`
}

// WebhookOrganizationRenamedMembershipUser - User
type WebhookOrganizationRenamedMembershipUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookOrganizationRenamedMembershipUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPackagePublished - package published event
type WebhookPackagePublished struct {
	// REQUIRED
	Action *WebhookPackagePublishedAction `json:"action,omitempty"`

	// REQUIRED; Information about the package.
	Package *WebhookPackagePublishedPackage `json:"package,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

// WebhookPackagePublishedPackage - Information about the package.
type WebhookPackagePublishedPackage struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Ecosystem *string `json:"ecosystem,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Namespace *string `json:"namespace,omitempty"`

	// REQUIRED; User
	Owner *WebhookPackagePublishedPackageOwner `json:"owner,omitempty"`

	// REQUIRED
	PackageType *string `json:"package_type,omitempty"`

	// REQUIRED
	PackageVersion *WebhookPackagePublishedPackageVersion `json:"package_version,omitempty"`

	// REQUIRED
	Registry *WebhookPackagePublishedPackageRegistry `json:"registry,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// WebhookPackagePublishedPackageOwner - User
type WebhookPackagePublishedPackageOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPackagePublishedPackageOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPackagePublishedPackageRegistry struct {
	// REQUIRED
	AboutURL *string `json:"about_url,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	Vendor *string `json:"vendor,omitempty"`
}

type WebhookPackagePublishedPackageVersion struct {
	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	InstallationCommand *string `json:"installation_command,omitempty"`

	// REQUIRED
	Metadata []map[string]any `json:"metadata,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PackageFiles []*WebhookPackagePublishedPackageVersionPackageFilesItem `json:"package_files,omitempty"`

	// REQUIRED
	Summary *string `json:"summary,omitempty"`

	// REQUIRED
	Version *string `json:"version,omitempty"`

	// User
	Author *WebhookPackagePublishedPackageVersionAuthor `json:"author,omitempty"`
	Body *WebhookPackagePublishedPackageVersionBody `json:"body,omitempty"`
	BodyHTML *string `json:"body_html,omitempty"`
	ContainerMetadata *WebhookPackagePublishedPackageVersionContainerMetadata `json:"container_metadata,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DockerMetadata []any `json:"docker_metadata,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Manifest *string `json:"manifest,omitempty"`
	NpmMetadata *WebhookPackagePublishedPackageVersionNpmMetadata `json:"npm_metadata,omitempty"`
	NugetMetadata []*WebhookPackagePublishedPackageVersionNugetMetadataItem `json:"nuget_metadata,omitempty"`
	PackageURL *string `json:"package_url,omitempty"`
	Prerelease *bool `json:"prerelease,omitempty"`
	Release *WebhookPackagePublishedPackageVersionRelease `json:"release,omitempty"`
	RubygemsMetadata []any `json:"rubygems_metadata,omitempty"`
	SourceURL *string `json:"source_url,omitempty"`
	TagName *string `json:"tag_name,omitempty"`
	TargetCommitish *string `json:"target_commitish,omitempty"`
	TargetOid *string `json:"target_oid,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// WebhookPackagePublishedPackageVersionAuthor - User
type WebhookPackagePublishedPackageVersionAuthor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPackagePublishedPackageVersionAuthorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPackagePublishedPackageVersionBody struct {
}

type WebhookPackagePublishedPackageVersionContainerMetadata struct {
	// Anything
	Labels any `json:"labels,omitempty"`

	// Anything
	Manifest any `json:"manifest,omitempty"`
	Tag *WebhookPackagePublishedPackageVersionContainerMetadataTag `json:"tag,omitempty"`
}

type WebhookPackagePublishedPackageVersionContainerMetadataTag struct {
	Digest *string `json:"digest,omitempty"`
	Name *string `json:"name,omitempty"`
}

type WebhookPackagePublishedPackageVersionNpmMetadata struct {
	// Anything
	Author any `json:"author,omitempty"`

	// Anything
	Bin any `json:"bin,omitempty"`

	// Anything
	Bugs any `json:"bugs,omitempty"`
	CPU []*string `json:"cpu,omitempty"`
	CommitOid *string `json:"commit_oid,omitempty"`
	Contributors []any `json:"contributors,omitempty"`
	DeletedByID *int32 `json:"deleted_by_id,omitempty"`

	// Anything
	Dependencies any `json:"dependencies,omitempty"`
	Description *string `json:"description,omitempty"`

	// Anything
	DevDependencies any `json:"dev_dependencies,omitempty"`

	// Anything
	Directories any `json:"directories,omitempty"`

	// Anything
	Dist any `json:"dist,omitempty"`

	// Anything
	Engines any `json:"engines,omitempty"`
	Files []*string `json:"files,omitempty"`
	GitHead *string `json:"git_head,omitempty"`
	HasShrinkwrap *bool `json:"has_shrinkwrap,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	ID *string `json:"id,omitempty"`
	InstallationCommand *string `json:"installation_command,omitempty"`
	Keywords []*string `json:"keywords,omitempty"`
	License *string `json:"license,omitempty"`
	Main *string `json:"main,omitempty"`
	Maintainers []any `json:"maintainers,omitempty"`

	// Anything
	Man any `json:"man,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeVersion *string `json:"node_version,omitempty"`
	NpmUser *string `json:"npm_user,omitempty"`
	NpmVersion *string `json:"npm_version,omitempty"`
	OS []*string `json:"os,omitempty"`

	// Anything
	OptionalDependencies any `json:"optional_dependencies,omitempty"`

	// Anything
	PeerDependencies any `json:"peer_dependencies,omitempty"`
	PublishedViaActions *bool `json:"published_via_actions,omitempty"`
	Readme *string `json:"readme,omitempty"`
	ReleaseID *int32 `json:"release_id,omitempty"`

	// Anything
	Repository any `json:"repository,omitempty"`

	// Anything
	Scripts any `json:"scripts,omitempty"`
	Version *string `json:"version,omitempty"`
}

type WebhookPackagePublishedPackageVersionNugetMetadataItem struct {
	ID *WebhookPackagePublishedPackageVersionNugetMetadataItemID `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Value *WebhookPackagePublishedPackageVersionNugetMetadataItemValue `json:"value,omitempty"`
}

type WebhookPackagePublishedPackageVersionNugetMetadataItemID struct {
}

type WebhookPackagePublishedPackageVersionNugetMetadataItemValue struct {
}

type WebhookPackagePublishedPackageVersionPackageFilesItem struct {
	// REQUIRED
	ContentType *string `json:"content_type,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	DownloadURL *string `json:"download_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MD5 *string `json:"md5,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	SHA1 *string `json:"sha1,omitempty"`

	// REQUIRED
	SHA256 *string `json:"sha256,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type WebhookPackagePublishedPackageVersionRelease struct {
	// REQUIRED; User
	Author *WebhookPackagePublishedPackageVersionReleaseAuthor `json:"author,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Prerelease *bool `json:"prerelease,omitempty"`

	// REQUIRED
	PublishedAt *string `json:"published_at,omitempty"`

	// REQUIRED
	TagName *string `json:"tag_name,omitempty"`

	// REQUIRED
	TargetCommitish *string `json:"target_commitish,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPackagePublishedPackageVersionReleaseAuthor - User
type WebhookPackagePublishedPackageVersionReleaseAuthor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPackagePublishedPackageVersionReleaseAuthorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPackageUpdated - package updated event
type WebhookPackageUpdated struct {
	// REQUIRED
	Action *WebhookPackageUpdatedAction `json:"action,omitempty"`

	// REQUIRED; Information about the package.
	Package *WebhookPackageUpdatedPackage `json:"package,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPackageUpdatedPackage - Information about the package.
type WebhookPackageUpdatedPackage struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Ecosystem *string `json:"ecosystem,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Namespace *string `json:"namespace,omitempty"`

	// REQUIRED; User
	Owner *WebhookPackageUpdatedPackageOwner `json:"owner,omitempty"`

	// REQUIRED
	PackageType *string `json:"package_type,omitempty"`

	// REQUIRED
	PackageVersion *WebhookPackageUpdatedPackageVersion `json:"package_version,omitempty"`

	// REQUIRED
	Registry *WebhookPackageUpdatedPackageRegistry `json:"registry,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
}

// WebhookPackageUpdatedPackageOwner - User
type WebhookPackageUpdatedPackageOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPackageUpdatedPackageOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPackageUpdatedPackageRegistry struct {
	// REQUIRED
	AboutURL *string `json:"about_url,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	Vendor *string `json:"vendor,omitempty"`
}

type WebhookPackageUpdatedPackageVersion struct {
	// REQUIRED; User
	Author *WebhookPackageUpdatedPackageVersionAuthor `json:"author,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	BodyHTML *string `json:"body_html,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	InstallationCommand *string `json:"installation_command,omitempty"`

	// REQUIRED
	Metadata []any `json:"metadata,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PackageFiles []*WebhookPackageUpdatedPackageVersionPackageFilesItem `json:"package_files,omitempty"`

	// REQUIRED
	Summary *string `json:"summary,omitempty"`

	// REQUIRED
	TargetCommitish *string `json:"target_commitish,omitempty"`

	// REQUIRED
	TargetOid *string `json:"target_oid,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED
	Version *string `json:"version,omitempty"`
	DockerMetadata []any `json:"docker_metadata,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Manifest *string `json:"manifest,omitempty"`
	PackageURL *string `json:"package_url,omitempty"`
	Prerelease *bool `json:"prerelease,omitempty"`
	Release *WebhookPackageUpdatedPackageVersionRelease `json:"release,omitempty"`
	RubygemsMetadata []any `json:"rubygems_metadata,omitempty"`
	SourceURL *string `json:"source_url,omitempty"`
	TagName *string `json:"tag_name,omitempty"`
}

// WebhookPackageUpdatedPackageVersionAuthor - User
type WebhookPackageUpdatedPackageVersionAuthor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPackageUpdatedPackageVersionAuthorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPackageUpdatedPackageVersionPackageFilesItem struct {
	// REQUIRED
	ContentType *string `json:"content_type,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	DownloadURL *string `json:"download_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MD5 *string `json:"md5,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	SHA1 *string `json:"sha1,omitempty"`

	// REQUIRED
	SHA256 *string `json:"sha256,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type WebhookPackageUpdatedPackageVersionRelease struct {
	// REQUIRED; User
	Author *WebhookPackageUpdatedPackageVersionReleaseAuthor `json:"author,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Prerelease *bool `json:"prerelease,omitempty"`

	// REQUIRED
	PublishedAt *string `json:"published_at,omitempty"`

	// REQUIRED
	TagName *string `json:"tag_name,omitempty"`

	// REQUIRED
	TargetCommitish *string `json:"target_commitish,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPackageUpdatedPackageVersionReleaseAuthor - User
type WebhookPackageUpdatedPackageVersionReleaseAuthor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPackageUpdatedPackageVersionReleaseAuthorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPageBuild - page_build event
type WebhookPageBuild struct {
	// REQUIRED; The List GitHub Pages builds [https://docs.github.com/rest/reference/repos#list-github-pages-builds] itself.
	Build *WebhookPageBuildBuild `json:"build,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPageBuildBuild - The List GitHub Pages builds [https://docs.github.com/rest/reference/repos#list-github-pages-builds]
// itself.
type WebhookPageBuildBuild struct {
	// REQUIRED
	Commit *string `json:"commit,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Duration *int32 `json:"duration,omitempty"`

	// REQUIRED
	Error *WebhookPageBuildError `json:"error,omitempty"`

	// REQUIRED; User
	Pusher *WebhookPageBuildPusher `json:"pusher,omitempty"`

	// REQUIRED
	Status *string `json:"status,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type WebhookPageBuildError struct {
	// REQUIRED
	Message *string `json:"message,omitempty"`
}

// WebhookPageBuildPusher - User
type WebhookPageBuildPusher struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPageBuildPusherType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPing struct {
	// The webhook that is being pinged
	Hook *WebhookPingHook `json:"hook,omitempty"`

	// The ID of the webhook that triggered the ping.
	HookID *int32 `json:"hook_id,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// Random string of GitHub zen.
	Zen *string `json:"zen,omitempty"`
}

// WebhookPingFormEncoded - The webhooks ping payload encoded with URL encoding.
type WebhookPingFormEncoded struct {
	// REQUIRED; A URL-encoded string of the ping JSON payload. The decoded payload is a JSON object.
	Payload *string `json:"payload,omitempty"`
}

// WebhookPingHook - The webhook that is being pinged
type WebhookPingHook struct {
	// REQUIRED; Determines whether the hook is actually triggered for the events it subscribes to.
	Active *bool `json:"active,omitempty"`

	// REQUIRED
	Config *WebhookPingHookConfig `json:"config,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; Determines what events the hook is triggered for. Default: ['push'].
	Events []*string `json:"events,omitempty"`

	// REQUIRED; Unique identifier of the webhook.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The type of webhook. The only valid value is 'web'.
	Name *WebhookPingHookName `json:"name,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// Only included for GitHub Apps. When you register a new GitHub App, GitHub sends a ping event to the webhook URL you specified
// during registration. The GitHub App ID sent in this field is required for
// authenticating an app.
	AppID *int32 `json:"app_id,omitempty"`
	DeliveriesURL *string `json:"deliveries_url,omitempty"`

	// Hook Response
	LastResponse *HookResponse `json:"last_response,omitempty"`
	PingURL *string `json:"ping_url,omitempty"`
	TestURL *string `json:"test_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPingHookConfig struct {
	// The media type used to serialize the payloads. Supported values include json and form. The default is form.
	ContentType *string `json:"content_type,omitempty"`
	InsecureSSL *WebhookConfigInsecureSSL `json:"insecure_ssl,omitempty"`

	// If provided, the secret will be used as the key to generate the HMAC hex digest value for delivery signature headers [https://docs.github.com/webhooks/event-payloads/#delivery-headers].
	Secret *string `json:"secret,omitempty"`

	// The URL to which the payloads will be delivered.
	URL *string `json:"url,omitempty"`
}

// WebhookProjectCardConverted - project_card converted event
type WebhookProjectCardConverted struct {
	// REQUIRED
	Action *WebhookProjectCardConvertedAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookProjectCardConvertedChanges `json:"changes,omitempty"`

	// REQUIRED; Project Card
	ProjectCard *WebhookProjectCardConvertedProjectCard `json:"project_card,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookProjectCardConvertedChanges struct {
	// REQUIRED
	Note *WebhookProjectCardConvertedChangesNote `json:"note,omitempty"`
}

type WebhookProjectCardConvertedChangesNote struct {
	// REQUIRED
	From *string `json:"from,omitempty"`
}

// WebhookProjectCardConvertedProjectCard - Project Card
type WebhookProjectCardConvertedProjectCard struct {
	// REQUIRED; Whether or not the card is archived
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	ColumnID *int32 `json:"column_id,omitempty"`

	// REQUIRED
	ColumnURL *string `json:"column_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookProjectCardConvertedProjectCardCreator `json:"creator,omitempty"`

	// REQUIRED; The project card's ID
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Note *string `json:"note,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	AfterID *int32 `json:"after_id,omitempty"`
	ContentURL *string `json:"content_url,omitempty"`
}

// WebhookProjectCardConvertedProjectCardCreator - User
type WebhookProjectCardConvertedProjectCardCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookProjectCardConvertedProjectCardCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookProjectCardCreated - project_card created event
type WebhookProjectCardCreated struct {
	// REQUIRED
	Action *WebhookProjectCardCreatedAction `json:"action,omitempty"`

	// REQUIRED; Project Card
	ProjectCard *WebhookProjectCardCreatedProjectCard `json:"project_card,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

// WebhookProjectCardCreatedProjectCard - Project Card
type WebhookProjectCardCreatedProjectCard struct {
	// REQUIRED; Whether or not the card is archived
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	ColumnID *int32 `json:"column_id,omitempty"`

	// REQUIRED
	ColumnURL *string `json:"column_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookProjectCardCreatedProjectCardCreator `json:"creator,omitempty"`

	// REQUIRED; The project card's ID
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Note *string `json:"note,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	AfterID *int32 `json:"after_id,omitempty"`
	ContentURL *string `json:"content_url,omitempty"`
}

// WebhookProjectCardCreatedProjectCardCreator - User
type WebhookProjectCardCreatedProjectCardCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookProjectCardCreatedProjectCardCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookProjectCardDeleted - project_card deleted event
type WebhookProjectCardDeleted struct {
	// REQUIRED
	Action *WebhookProjectCardDeletedAction `json:"action,omitempty"`

	// REQUIRED; Project Card
	ProjectCard *WebhookProjectCardDeletedProjectCard `json:"project_card,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *NullableRepository `json:"repository,omitempty"`
}

// WebhookProjectCardDeletedProjectCard - Project Card
type WebhookProjectCardDeletedProjectCard struct {
	// REQUIRED; Whether or not the card is archived
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	ColumnID *int32 `json:"column_id,omitempty"`

	// REQUIRED
	ColumnURL *string `json:"column_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookProjectCardDeletedProjectCardCreator `json:"creator,omitempty"`

	// REQUIRED; The project card's ID
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Note *string `json:"note,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	AfterID *int32 `json:"after_id,omitempty"`
	ContentURL *string `json:"content_url,omitempty"`
}

// WebhookProjectCardDeletedProjectCardCreator - User
type WebhookProjectCardDeletedProjectCardCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookProjectCardDeletedProjectCardCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookProjectCardEdited - project_card edited event
type WebhookProjectCardEdited struct {
	// REQUIRED
	Action *WebhookProjectCardEditedAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookProjectCardEditedChanges `json:"changes,omitempty"`

	// REQUIRED; Project Card
	ProjectCard *WebhookProjectCardEditedProjectCard `json:"project_card,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookProjectCardEditedChanges struct {
	// REQUIRED
	Note *WebhookProjectCardEditedChangesNote `json:"note,omitempty"`
}

type WebhookProjectCardEditedChangesNote struct {
	// REQUIRED
	From *string `json:"from,omitempty"`
}

// WebhookProjectCardEditedProjectCard - Project Card
type WebhookProjectCardEditedProjectCard struct {
	// REQUIRED; Whether or not the card is archived
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	ColumnID *int32 `json:"column_id,omitempty"`

	// REQUIRED
	ColumnURL *string `json:"column_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookProjectCardEditedProjectCardCreator `json:"creator,omitempty"`

	// REQUIRED; The project card's ID
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Note *string `json:"note,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	AfterID *int32 `json:"after_id,omitempty"`
	ContentURL *string `json:"content_url,omitempty"`
}

// WebhookProjectCardEditedProjectCardCreator - User
type WebhookProjectCardEditedProjectCardCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookProjectCardEditedProjectCardCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookProjectCardMoved - project_card moved event
type WebhookProjectCardMoved struct {
	// REQUIRED
	Action *WebhookProjectCardMovedAction `json:"action,omitempty"`

	// REQUIRED
	ProjectCard *WebhookProjectCardMovedProjectCard `json:"project_card,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
	Changes *WebhookProjectCardMovedChanges `json:"changes,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookProjectCardMovedChanges struct {
	// REQUIRED
	ColumnID *WebhookProjectCardMovedChangesColumnID `json:"column_id,omitempty"`
}

type WebhookProjectCardMovedChangesColumnID struct {
	// REQUIRED
	From *int32 `json:"from,omitempty"`
}

type WebhookProjectCardMovedProjectCard struct {
}

// WebhookProjectCardMovedProjectCard0Creator - User
type WebhookProjectCardMovedProjectCard0Creator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookProjectCardMovedProjectCard0CreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookProjectCardMovedProjectCard1Creator struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookProjectClosed - project closed event
type WebhookProjectClosed struct {
	// REQUIRED
	Action *WebhookProjectClosedAction `json:"action,omitempty"`

	// REQUIRED; Project
	Project *WebhookProjectClosedProject `json:"project,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

// WebhookProjectClosedProject - Project
type WebhookProjectClosedProject struct {
	// REQUIRED; Body of the project
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ColumnsURL *string `json:"columns_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookProjectClosedProjectCreator `json:"creator,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the project
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OwnerURL *string `json:"owner_url,omitempty"`

	// REQUIRED; State of the project; either 'open' or 'closed'
	State *WebhookProjectClosedProjectState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookProjectClosedProjectCreator - User
type WebhookProjectClosedProjectCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookProjectClosedProjectCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookProjectColumnCreated - project_column created event
type WebhookProjectColumnCreated struct {
	// REQUIRED
	Action *WebhookProjectColumnCreatedAction `json:"action,omitempty"`

	// REQUIRED; Project Column
	ProjectColumn *WebhookProjectColumnCreatedProjectColumn `json:"project_column,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookProjectColumnCreatedProjectColumn - Project Column
type WebhookProjectColumnCreatedProjectColumn struct {
	// REQUIRED
	CardsURL *string `json:"cards_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The unique identifier of the project column
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the project column
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	AfterID *int32 `json:"after_id,omitempty"`
}

// WebhookProjectColumnDeleted - project_column deleted event
type WebhookProjectColumnDeleted struct {
	// REQUIRED
	Action *WebhookProjectColumnDeletedAction `json:"action,omitempty"`

	// REQUIRED; Project Column
	ProjectColumn *WebhookProjectColumnDeletedProjectColumn `json:"project_column,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *NullableRepository `json:"repository,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookProjectColumnDeletedProjectColumn - Project Column
type WebhookProjectColumnDeletedProjectColumn struct {
	// REQUIRED
	CardsURL *string `json:"cards_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The unique identifier of the project column
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the project column
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	AfterID *int32 `json:"after_id,omitempty"`
}

// WebhookProjectColumnEdited - project_column edited event
type WebhookProjectColumnEdited struct {
	// REQUIRED
	Action *WebhookProjectColumnEditedAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookProjectColumnEditedChanges `json:"changes,omitempty"`

	// REQUIRED; Project Column
	ProjectColumn *WebhookProjectColumnEditedProjectColumn `json:"project_column,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

type WebhookProjectColumnEditedChanges struct {
	Name *WebhookProjectColumnEditedChangesName `json:"name,omitempty"`
}

type WebhookProjectColumnEditedChangesName struct {
	// REQUIRED
	From *string `json:"from,omitempty"`
}

// WebhookProjectColumnEditedProjectColumn - Project Column
type WebhookProjectColumnEditedProjectColumn struct {
	// REQUIRED
	CardsURL *string `json:"cards_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The unique identifier of the project column
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the project column
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	AfterID *int32 `json:"after_id,omitempty"`
}

// WebhookProjectColumnMoved - project_column moved event
type WebhookProjectColumnMoved struct {
	// REQUIRED
	Action *WebhookProjectColumnMovedAction `json:"action,omitempty"`

	// REQUIRED; Project Column
	ProjectColumn *WebhookProjectColumnMovedProjectColumn `json:"project_column,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

// WebhookProjectColumnMovedProjectColumn - Project Column
type WebhookProjectColumnMovedProjectColumn struct {
	// REQUIRED
	CardsURL *string `json:"cards_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The unique identifier of the project column
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the project column
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	ProjectURL *string `json:"project_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	AfterID *int32 `json:"after_id,omitempty"`
}

// WebhookProjectCreated - project created event
type WebhookProjectCreated struct {
	// REQUIRED
	Action *WebhookProjectCreatedAction `json:"action,omitempty"`

	// REQUIRED; Project
	Project *WebhookProjectCreatedProject `json:"project,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

// WebhookProjectCreatedProject - Project
type WebhookProjectCreatedProject struct {
	// REQUIRED; Body of the project
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ColumnsURL *string `json:"columns_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookProjectCreatedProjectCreator `json:"creator,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the project
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OwnerURL *string `json:"owner_url,omitempty"`

	// REQUIRED; State of the project; either 'open' or 'closed'
	State *WebhookProjectCreatedProjectState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookProjectCreatedProjectCreator - User
type WebhookProjectCreatedProjectCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookProjectCreatedProjectCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookProjectDeleted - project deleted event
type WebhookProjectDeleted struct {
	// REQUIRED
	Action *WebhookProjectDeletedAction `json:"action,omitempty"`

	// REQUIRED; Project
	Project *WebhookProjectDeletedProject `json:"project,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *NullableRepository `json:"repository,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookProjectDeletedProject - Project
type WebhookProjectDeletedProject struct {
	// REQUIRED; Body of the project
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ColumnsURL *string `json:"columns_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookProjectDeletedProjectCreator `json:"creator,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the project
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OwnerURL *string `json:"owner_url,omitempty"`

	// REQUIRED; State of the project; either 'open' or 'closed'
	State *WebhookProjectDeletedProjectState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookProjectDeletedProjectCreator - User
type WebhookProjectDeletedProjectCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookProjectDeletedProjectCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookProjectEdited - project edited event
type WebhookProjectEdited struct {
	// REQUIRED
	Action *WebhookProjectEditedAction `json:"action,omitempty"`

	// REQUIRED; Project
	Project *WebhookProjectEditedProject `json:"project,omitempty"`

	// The changes to the project if the action was edited.
	Changes *WebhookProjectEditedChanges `json:"changes,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookProjectEditedChanges - The changes to the project if the action was edited.
type WebhookProjectEditedChanges struct {
	Body *WebhookProjectEditedChangesBody `json:"body,omitempty"`
	Name *WebhookProjectEditedChangesName `json:"name,omitempty"`
}

type WebhookProjectEditedChangesBody struct {
	// REQUIRED; The previous version of the body if the action was edited.
	From *string `json:"from,omitempty"`
}

type WebhookProjectEditedChangesName struct {
	// REQUIRED; The changes to the project if the action was edited.
	From *string `json:"from,omitempty"`
}

// WebhookProjectEditedProject - Project
type WebhookProjectEditedProject struct {
	// REQUIRED; Body of the project
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ColumnsURL *string `json:"columns_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookProjectEditedProjectCreator `json:"creator,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the project
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OwnerURL *string `json:"owner_url,omitempty"`

	// REQUIRED; State of the project; either 'open' or 'closed'
	State *WebhookProjectEditedProjectState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookProjectEditedProjectCreator - User
type WebhookProjectEditedProjectCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookProjectEditedProjectCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookProjectReopened - project reopened event
type WebhookProjectReopened struct {
	// REQUIRED
	Action *WebhookProjectReopenedAction `json:"action,omitempty"`

	// REQUIRED; Project
	Project *WebhookProjectReopenedProject `json:"project,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

// WebhookProjectReopenedProject - Project
type WebhookProjectReopenedProject struct {
	// REQUIRED; Body of the project
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ColumnsURL *string `json:"columns_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookProjectReopenedProjectCreator `json:"creator,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the project
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OwnerURL *string `json:"owner_url,omitempty"`

	// REQUIRED; State of the project; either 'open' or 'closed'
	State *WebhookProjectReopenedProjectState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookProjectReopenedProjectCreator - User
type WebhookProjectReopenedProjectCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookProjectReopenedProjectCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookProjectsV2ItemArchived - Projects v2 Item Archived Event
type WebhookProjectsV2ItemArchived struct {
	// REQUIRED
	Action *WebhookProjectsV2ItemArchivedAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookProjectsV2ItemArchivedChanges `json:"changes,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; An item belonging to a project
	ProjectsV2Item *ProjectsV2Item `json:"projects_v2_item,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`
}

type WebhookProjectsV2ItemArchivedChanges struct {
	ArchivedAt *WebhookProjectsV2ItemArchivedChangesArchivedAt `json:"archived_at,omitempty"`
}

type WebhookProjectsV2ItemArchivedChangesArchivedAt struct {
	From *time.Time `json:"from,omitempty"`
	To *time.Time `json:"to,omitempty"`
}

// WebhookProjectsV2ItemConverted - Projects v2 Item Converted Event
type WebhookProjectsV2ItemConverted struct {
	// REQUIRED
	Action *WebhookProjectsV2ItemConvertedAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookProjectsV2ItemConvertedChanges `json:"changes,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; An item belonging to a project
	ProjectsV2Item *ProjectsV2Item `json:"projects_v2_item,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`
}

type WebhookProjectsV2ItemConvertedChanges struct {
	ContentType *WebhookProjectsV2ItemConvertedChangesContentType `json:"content_type,omitempty"`
}

type WebhookProjectsV2ItemConvertedChangesContentType struct {
	From *string `json:"from,omitempty"`
	To *string `json:"to,omitempty"`
}

// WebhookProjectsV2ItemCreated - Projects v2 Item Created Event
type WebhookProjectsV2ItemCreated struct {
	// REQUIRED
	Action *WebhookProjectsV2ItemCreatedAction `json:"action,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; An item belonging to a project
	ProjectsV2Item *ProjectsV2Item `json:"projects_v2_item,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`
}

// WebhookProjectsV2ItemDeleted - Projects v2 Item Deleted Event
type WebhookProjectsV2ItemDeleted struct {
	// REQUIRED
	Action *WebhookProjectsV2ItemDeletedAction `json:"action,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; An item belonging to a project
	ProjectsV2Item *ProjectsV2Item `json:"projects_v2_item,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`
}

// WebhookProjectsV2ItemEdited - Projects v2 Item Edited Event
type WebhookProjectsV2ItemEdited struct {
	// REQUIRED
	Action *WebhookProjectsV2ItemEditedAction `json:"action,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; An item belonging to a project
	ProjectsV2Item *ProjectsV2Item `json:"projects_v2_item,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
	Changes *WebhookProjectsV2ItemEditedChanges `json:"changes,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`
}

type WebhookProjectsV2ItemEditedChanges struct {
}

type WebhookProjectsV2ItemEditedChanges0FieldValue struct {
	FieldNodeID *string `json:"field_node_id,omitempty"`
	FieldType *string `json:"field_type,omitempty"`
}

type WebhookProjectsV2ItemEditedChanges1Body struct {
	From *string `json:"from,omitempty"`
	To *string `json:"to,omitempty"`
}

// WebhookProjectsV2ItemReordered - Projects v2 Item Reordered Event
type WebhookProjectsV2ItemReordered struct {
	// REQUIRED
	Action *WebhookProjectsV2ItemReorderedAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookProjectsV2ItemReorderedChanges `json:"changes,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; An item belonging to a project
	ProjectsV2Item *ProjectsV2Item `json:"projects_v2_item,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`
}

type WebhookProjectsV2ItemReorderedChanges struct {
	PreviousProjectsV2ItemNodeID *WebhookProjectsV2ItemReorderedChangesPreviousProjectsV2ItemNodeID `json:"previous_projects_v2_item_node_id,omitempty"`
}

type WebhookProjectsV2ItemReorderedChangesPreviousProjectsV2ItemNodeID struct {
	From *string `json:"from,omitempty"`
	To *string `json:"to,omitempty"`
}

// WebhookProjectsV2ItemRestored - Projects v2 Item Restored Event
type WebhookProjectsV2ItemRestored struct {
	// REQUIRED
	Action *WebhookProjectsV2ItemRestoredAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookProjectsV2ItemRestoredChanges `json:"changes,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; An item belonging to a project
	ProjectsV2Item *ProjectsV2Item `json:"projects_v2_item,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`
}

type WebhookProjectsV2ItemRestoredChanges struct {
	ArchivedAt *WebhookProjectsV2ItemRestoredChangesArchivedAt `json:"archived_at,omitempty"`
}

type WebhookProjectsV2ItemRestoredChangesArchivedAt struct {
	From *time.Time `json:"from,omitempty"`
	To *time.Time `json:"to,omitempty"`
}

// WebhookProjectsV2ProjectClosed - Projects v2 Project Closed Event
type WebhookProjectsV2ProjectClosed struct {
	// REQUIRED
	Action *WebhookProjectsV2ProjectClosedAction `json:"action,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; A projects v2 project
	ProjectsV2 *ProjectsV2 `json:"projects_v2,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookProjectsV2ProjectCreated - A project was created
type WebhookProjectsV2ProjectCreated struct {
	// REQUIRED
	Action *WebhookProjectsV2ProjectCreatedAction `json:"action,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; A projects v2 project
	ProjectsV2 *ProjectsV2 `json:"projects_v2,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookProjectsV2ProjectEdited - Projects v2 Project Edited Event
type WebhookProjectsV2ProjectEdited struct {
	// REQUIRED
	Action *WebhookProjectsV2ProjectEditedAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookProjectsV2ProjectEditedChanges `json:"changes,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; A projects v2 project
	ProjectsV2 *ProjectsV2 `json:"projects_v2,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

type WebhookProjectsV2ProjectEditedChanges struct {
	Description *WebhookProjectsV2ProjectEditedChangesDescription `json:"description,omitempty"`
	Public *WebhookProjectsV2ProjectEditedChangesPublic `json:"public,omitempty"`
	ShortDescription *WebhookProjectsV2ProjectEditedChangesShortDescription `json:"short_description,omitempty"`
	Title *WebhookProjectsV2ProjectEditedChangesTitle `json:"title,omitempty"`
}

type WebhookProjectsV2ProjectEditedChangesDescription struct {
	From *string `json:"from,omitempty"`
	To *string `json:"to,omitempty"`
}

type WebhookProjectsV2ProjectEditedChangesPublic struct {
	From *bool `json:"from,omitempty"`
	To *bool `json:"to,omitempty"`
}

type WebhookProjectsV2ProjectEditedChangesShortDescription struct {
	From *string `json:"from,omitempty"`
	To *string `json:"to,omitempty"`
}

type WebhookProjectsV2ProjectEditedChangesTitle struct {
	From *string `json:"from,omitempty"`
	To *string `json:"to,omitempty"`
}

// WebhookProjectsV2ProjectReopened - Projects v2 Project Reopened Event
type WebhookProjectsV2ProjectReopened struct {
	// REQUIRED
	Action *WebhookProjectsV2ProjectReopenedAction `json:"action,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; A projects v2 project
	ProjectsV2 *ProjectsV2 `json:"projects_v2,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookPublic - public event
type WebhookPublic struct {
	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPullRequestAssigned - pull_request assigned event
type WebhookPullRequestAssigned struct {
	// REQUIRED
	Action *WebhookPullRequestAssignedAction `json:"action,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestAssignedAssignee `json:"assignee,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestAssignedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPullRequestAssignedAssignee - User
type WebhookPullRequestAssignedAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAssignedAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAssignedPullRequest - Pull Request
type WebhookPullRequestAssignedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestAssignedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestAssignedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestAssignedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestAssignedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestAssignedPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestAssignedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestAssignedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestAssignedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestAssignedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestAssignedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestAssignedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestAssignedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestAssignedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestAssignedPullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestAssignedPullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestAssignedPullRequestAssignee - User
type WebhookPullRequestAssignedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAssignedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAssignedPullRequestAssigneesItem - User
type WebhookPullRequestAssignedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAssignedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAssignedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestAssignedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestAssignedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestAssignedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestAssignedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestAssignedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAssignedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAssignedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestAssignedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestAssignedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestAssignedPullRequestBaseRepo - A git repository
type WebhookPullRequestAssignedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestAssignedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestAssignedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestAssignedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestAssignedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestAssignedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestAssignedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestAssignedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestAssignedPullRequestBaseRepoLicense - License
type WebhookPullRequestAssignedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAssignedPullRequestBaseRepoOwner - User
type WebhookPullRequestAssignedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAssignedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAssignedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestAssignedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestAssignedPullRequestBaseUser - User
type WebhookPullRequestAssignedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAssignedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAssignedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestAssignedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestAssignedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestAssignedPullRequestHeadRepo - A git repository
type WebhookPullRequestAssignedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestAssignedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestAssignedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestAssignedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestAssignedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestAssignedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestAssignedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestAssignedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestAssignedPullRequestHeadRepoLicense - License
type WebhookPullRequestAssignedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAssignedPullRequestHeadRepoOwner - User
type WebhookPullRequestAssignedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAssignedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAssignedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestAssignedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestAssignedPullRequestHeadUser - User
type WebhookPullRequestAssignedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAssignedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAssignedPullRequestLabelsItem - Label
type WebhookPullRequestAssignedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAssignedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestAssignedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestAssignedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestAssignedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestAssignedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestAssignedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestAssignedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestAssignedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestAssignedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestAssignedPullRequestLinksComments - Link
type WebhookPullRequestAssignedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAssignedPullRequestLinksCommits - Link
type WebhookPullRequestAssignedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAssignedPullRequestLinksHTML - Link
type WebhookPullRequestAssignedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAssignedPullRequestLinksIssue - Link
type WebhookPullRequestAssignedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAssignedPullRequestLinksReviewComment - Link
type WebhookPullRequestAssignedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAssignedPullRequestLinksReviewComments - Link
type WebhookPullRequestAssignedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAssignedPullRequestLinksSelf - Link
type WebhookPullRequestAssignedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAssignedPullRequestLinksStatuses - Link
type WebhookPullRequestAssignedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAssignedPullRequestMergedBy - User
type WebhookPullRequestAssignedPullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAssignedPullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAssignedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestAssignedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestAssignedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestAssignedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestAssignedPullRequestMilestoneCreator - User
type WebhookPullRequestAssignedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAssignedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAssignedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestAssignedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions on specified
// repositories.
type WebhookPullRequestAssignedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestAssignedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAssignedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum1931 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAssignedPullRequestUser - User
type WebhookPullRequestAssignedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAssignedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeDisabled - pullrequest automerge_disabled event
type WebhookPullRequestAutoMergeDisabled struct {
	// REQUIRED
	Action *WebhookPullRequestAutoMergeDisabledAction `json:"action,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestAutoMergeDisabledPullRequest `json:"pull_request,omitempty"`

	// REQUIRED
	Reason *string `json:"reason,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequest - Pull Request
type WebhookPullRequestAutoMergeDisabledPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestAutoMergeDisabledPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestAutoMergeDisabledPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestAutoMergeDisabledPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestAutoMergeDisabledPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestAutoMergeDisabledPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestAutoMergeDisabledPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestAutoMergeDisabledPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestAutoMergeDisabledPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestAutoMergeDisabledPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestAutoMergeDisabledPullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestAutoMergeDisabledPullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestAssignee - User
type WebhookPullRequestAutoMergeDisabledPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeDisabledPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItem - User
type WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestAutoMergeDisabledPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAutoMergeDisabledPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestAutoMergeDisabledPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestAutoMergeDisabledPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestBaseRepo - A git repository
type WebhookPullRequestAutoMergeDisabledPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoLicense - License
type WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwner - User
type WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestAutoMergeDisabledPullRequestBaseUser - User
type WebhookPullRequestAutoMergeDisabledPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeDisabledPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAutoMergeDisabledPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestAutoMergeDisabledPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestAutoMergeDisabledPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestHeadRepo - A git repository
type WebhookPullRequestAutoMergeDisabledPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoLicense - License
type WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwner - User
type WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestAutoMergeDisabledPullRequestHeadUser - User
type WebhookPullRequestAutoMergeDisabledPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeDisabledPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestLabelsItem - Label
type WebhookPullRequestAutoMergeDisabledPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAutoMergeDisabledPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestAutoMergeDisabledPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestAutoMergeDisabledPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestAutoMergeDisabledPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestAutoMergeDisabledPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestAutoMergeDisabledPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestAutoMergeDisabledPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestAutoMergeDisabledPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestAutoMergeDisabledPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestLinksComments - Link
type WebhookPullRequestAutoMergeDisabledPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestLinksCommits - Link
type WebhookPullRequestAutoMergeDisabledPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestLinksHTML - Link
type WebhookPullRequestAutoMergeDisabledPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestLinksIssue - Link
type WebhookPullRequestAutoMergeDisabledPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestLinksReviewComment - Link
type WebhookPullRequestAutoMergeDisabledPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestLinksReviewComments - Link
type WebhookPullRequestAutoMergeDisabledPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestLinksSelf - Link
type WebhookPullRequestAutoMergeDisabledPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestLinksStatuses - Link
type WebhookPullRequestAutoMergeDisabledPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestMergedBy - User
type WebhookPullRequestAutoMergeDisabledPullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeDisabledPullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestAutoMergeDisabledPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestAutoMergeDisabledPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreator - User
type WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAutoMergeDisabledPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItem - Groups of organization members that gives permissions
// on specified repositories.
type WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum1962 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeDisabledPullRequestUser - User
type WebhookPullRequestAutoMergeDisabledPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeDisabledPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeEnabled - pullrequest automerge_enabled event
type WebhookPullRequestAutoMergeEnabled struct {
	// REQUIRED
	Action *WebhookPullRequestAutoMergeEnabledAction `json:"action,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestAutoMergeEnabledPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
	Reason *string `json:"reason,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequest - Pull Request
type WebhookPullRequestAutoMergeEnabledPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestAutoMergeEnabledPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestAutoMergeEnabledPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestAutoMergeEnabledPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestAutoMergeEnabledPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestAutoMergeEnabledPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestAutoMergeEnabledPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestAutoMergeEnabledPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestAutoMergeEnabledPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestAutoMergeEnabledPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestAutoMergeEnabledPullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestAutoMergeEnabledPullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestAssignee - User
type WebhookPullRequestAutoMergeEnabledPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeEnabledPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItem - User
type WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestAutoMergeEnabledPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAutoMergeEnabledPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestAutoMergeEnabledPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestAutoMergeEnabledPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestBaseRepo - A git repository
type WebhookPullRequestAutoMergeEnabledPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoLicense - License
type WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwner - User
type WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestAutoMergeEnabledPullRequestBaseUser - User
type WebhookPullRequestAutoMergeEnabledPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeEnabledPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAutoMergeEnabledPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestAutoMergeEnabledPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestAutoMergeEnabledPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestHeadRepo - A git repository
type WebhookPullRequestAutoMergeEnabledPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoLicense - License
type WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwner - User
type WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestAutoMergeEnabledPullRequestHeadUser - User
type WebhookPullRequestAutoMergeEnabledPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeEnabledPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestLabelsItem - Label
type WebhookPullRequestAutoMergeEnabledPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAutoMergeEnabledPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestAutoMergeEnabledPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestAutoMergeEnabledPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestAutoMergeEnabledPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestAutoMergeEnabledPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestAutoMergeEnabledPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestAutoMergeEnabledPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestAutoMergeEnabledPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestAutoMergeEnabledPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestLinksComments - Link
type WebhookPullRequestAutoMergeEnabledPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestLinksCommits - Link
type WebhookPullRequestAutoMergeEnabledPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestLinksHTML - Link
type WebhookPullRequestAutoMergeEnabledPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestLinksIssue - Link
type WebhookPullRequestAutoMergeEnabledPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestLinksReviewComment - Link
type WebhookPullRequestAutoMergeEnabledPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestLinksReviewComments - Link
type WebhookPullRequestAutoMergeEnabledPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestLinksSelf - Link
type WebhookPullRequestAutoMergeEnabledPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestLinksStatuses - Link
type WebhookPullRequestAutoMergeEnabledPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestMergedBy - User
type WebhookPullRequestAutoMergeEnabledPullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeEnabledPullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestAutoMergeEnabledPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestAutoMergeEnabledPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreator - User
type WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAutoMergeEnabledPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItem - Groups of organization members that gives permissions
// on specified repositories.
type WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum1993 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestAutoMergeEnabledPullRequestUser - User
type WebhookPullRequestAutoMergeEnabledPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestAutoMergeEnabledPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestClosed - pull_request closed event
type WebhookPullRequestClosed struct {
	// REQUIRED
	Action *WebhookPullRequestClosedAction `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PullRequest *WebhookPullRequestClosedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookPullRequestClosedPullRequest struct {
}

// WebhookPullRequestClosedPullRequest0Assignee - User
type WebhookPullRequestClosedPullRequest0Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestClosedPullRequest0AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestClosedPullRequest0AssigneesItem - User
type WebhookPullRequestClosedPullRequest0AssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestClosedPullRequestOneOf0AssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestClosedPullRequest0AutoMerge - The status of auto merging a pull request.
type WebhookPullRequestClosedPullRequest0AutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestClosedPullRequest0AutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestClosedPullRequest0AutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestClosedPullRequest0AutoMergeEnabledBy - User
type WebhookPullRequestClosedPullRequest0AutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestClosedPullRequest0AutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestClosedPullRequest0Base struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestClosedPullRequest0BaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestClosedPullRequest0BaseUser `json:"user,omitempty"`
}

// WebhookPullRequestClosedPullRequest0BaseRepo - A git repository
type WebhookPullRequestClosedPullRequest0BaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestClosedPullRequest0BaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestClosedPullRequest0BaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestClosedPullRequest0BaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestClosedPullRequest0BaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestClosedPullRequest0BaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestClosedPullRequest0BaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestClosedPullRequest0BaseRepoCreatedAt struct {
}

// WebhookPullRequestClosedPullRequest0BaseRepoLicense - License
type WebhookPullRequestClosedPullRequest0BaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestClosedPullRequest0BaseRepoOwner - User
type WebhookPullRequestClosedPullRequest0BaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestClosedPullRequest0BaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestClosedPullRequest0BaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestClosedPullRequest0BaseRepoPushedAt struct {
}

// WebhookPullRequestClosedPullRequest0BaseUser - User
type WebhookPullRequestClosedPullRequest0BaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestClosedPullRequest0BaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestClosedPullRequest0Head struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestClosedPullRequest0HeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestClosedPullRequest0HeadUser `json:"user,omitempty"`
}

// WebhookPullRequestClosedPullRequest0HeadRepo - A git repository
type WebhookPullRequestClosedPullRequest0HeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestClosedPullRequest0HeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestClosedPullRequest0HeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestClosedPullRequest0HeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestClosedPullRequest0HeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestClosedPullRequest0HeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
	MergeCommitMessage *WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit message title.
	MergeCommitTitle *WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestClosedPullRequest0HeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message.
	SquashMergeCommitMessage *WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title.
	SquashMergeCommitTitle *WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestClosedPullRequest0HeadRepoCreatedAt struct {
}

// WebhookPullRequestClosedPullRequest0HeadRepoLicense - License
type WebhookPullRequestClosedPullRequest0HeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestClosedPullRequest0HeadRepoOwner - User
type WebhookPullRequestClosedPullRequest0HeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestClosedPullRequest0HeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestClosedPullRequest0HeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestClosedPullRequest0HeadRepoPushedAt struct {
}

// WebhookPullRequestClosedPullRequest0HeadUser - User
type WebhookPullRequestClosedPullRequest0HeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestClosedPullRequest0HeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestClosedPullRequest0LabelsItem - Label
type WebhookPullRequestClosedPullRequest0LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestClosedPullRequest0Links struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestClosedPullRequest0LinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestClosedPullRequest0LinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestClosedPullRequest0LinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestClosedPullRequest0LinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestClosedPullRequest0LinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestClosedPullRequest0LinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestClosedPullRequest0LinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestClosedPullRequest0LinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestClosedPullRequest0LinksComments - Link
type WebhookPullRequestClosedPullRequest0LinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestClosedPullRequest0LinksCommits - Link
type WebhookPullRequestClosedPullRequest0LinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestClosedPullRequest0LinksHTML - Link
type WebhookPullRequestClosedPullRequest0LinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestClosedPullRequest0LinksIssue - Link
type WebhookPullRequestClosedPullRequest0LinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestClosedPullRequest0LinksReviewComment - Link
type WebhookPullRequestClosedPullRequest0LinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestClosedPullRequest0LinksReviewComments - Link
type WebhookPullRequestClosedPullRequest0LinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestClosedPullRequest0LinksSelf - Link
type WebhookPullRequestClosedPullRequest0LinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestClosedPullRequest0LinksStatuses - Link
type WebhookPullRequestClosedPullRequest0LinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestClosedPullRequest0MergedBy - User
type WebhookPullRequestClosedPullRequest0MergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestClosedPullRequest0MergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestClosedPullRequest0Milestone - A collection of related issues and pull requests.
type WebhookPullRequestClosedPullRequest0Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestClosedPullRequest0MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestClosedPullRequest0MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestClosedPullRequest0MilestoneCreator - User
type WebhookPullRequestClosedPullRequest0MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestClosedPullRequest0MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestClosedPullRequest0RequestedReviewersItem struct {
}

// WebhookPullRequestClosedPullRequest0RequestedTeamsItem - Groups of organization members that gives permissions on specified
// repositories.
type WebhookPullRequestClosedPullRequest0RequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestClosedPullRequest0User - User
type WebhookPullRequestClosedPullRequest0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestClosedPullRequest0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestClosedPullRequest1Base struct {
	Label *string `json:"label,omitempty"`
	Ref *string `json:"ref,omitempty"`
	Repo *WebhookPullRequestClosedPullRequest1BaseRepo `json:"repo,omitempty"`
	SHA *string `json:"sha,omitempty"`
	User *WebhookPullRequestClosedPullRequest1BaseUser `json:"user,omitempty"`
}

type WebhookPullRequestClosedPullRequest1BaseRepo struct {
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`
	ArchiveURL *string `json:"archive_url,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CloneURL *string `json:"clone_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	Forks *int32 `json:"forks,omitempty"`
	ForksCount *int32 `json:"forks_count,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HasDownloads *bool `json:"has_downloads,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPages *bool `json:"has_pages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Language *string `json:"language,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`

	// Anything
	License any `json:"license,omitempty"`
	MergeCommitMessage *WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`
	MergeCommitTitle *WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	MirrorURL *string `json:"mirror_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	OpenIssues *int32 `json:"open_issues,omitempty"`
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`
	Owner *WebhookPullRequestClosedPullRequest1BaseRepoOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	PushedAt *string `json:"pushed_at,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	SSHURL *string `json:"ssh_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
	SquashMergeCommitMessage *WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`
	SquashMergeCommitTitle *WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	StargazersCount *int32 `json:"stargazers_count,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	SvnURL *string `json:"svn_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	Topics []*string `json:"topics,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Watchers *int32 `json:"watchers,omitempty"`
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestClosedPullRequest1BaseRepoOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestClosedPullRequest1BaseUser struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestClosedPullRequest1Head struct {
	Label *string `json:"label,omitempty"`
	Ref *string `json:"ref,omitempty"`
	Repo *WebhookPullRequestClosedPullRequest1HeadRepo `json:"repo,omitempty"`
	SHA *string `json:"sha,omitempty"`
	User *WebhookPullRequestClosedPullRequest1HeadUser `json:"user,omitempty"`
}

type WebhookPullRequestClosedPullRequest1HeadRepo struct {
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`
	ArchiveURL *string `json:"archive_url,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CloneURL *string `json:"clone_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	Forks *int32 `json:"forks,omitempty"`
	ForksCount *int32 `json:"forks_count,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HasDownloads *bool `json:"has_downloads,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPages *bool `json:"has_pages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Language *string `json:"language,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`

	// Anything
	License any `json:"license,omitempty"`
	MergeCommitMessage *WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`
	MergeCommitTitle *WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	MirrorURL *string `json:"mirror_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	OpenIssues *int32 `json:"open_issues,omitempty"`
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`
	Owner *WebhookPullRequestClosedPullRequest1HeadRepoOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	PushedAt *string `json:"pushed_at,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	SSHURL *string `json:"ssh_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
	SquashMergeCommitMessage *WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`
	SquashMergeCommitTitle *WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	StargazersCount *int32 `json:"stargazers_count,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	SvnURL *string `json:"svn_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	Topics []*string `json:"topics,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Watchers *int32 `json:"watchers,omitempty"`
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestClosedPullRequest1HeadRepoOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestClosedPullRequest1HeadUser struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestClosedPullRequest1Links struct {
	Comments *WebhookPullRequestClosedPullRequest1LinksComments `json:"comments,omitempty"`
	Commits *WebhookPullRequestClosedPullRequest1LinksCommits `json:"commits,omitempty"`
	HTML *WebhookPullRequestClosedPullRequest1LinksHTML `json:"html,omitempty"`
	Issue *WebhookPullRequestClosedPullRequest1LinksIssue `json:"issue,omitempty"`
	ReviewComment *WebhookPullRequestClosedPullRequest1LinksReviewComment `json:"review_comment,omitempty"`
	ReviewComments *WebhookPullRequestClosedPullRequest1LinksReviewComments `json:"review_comments,omitempty"`
	Self *WebhookPullRequestClosedPullRequest1LinksSelf `json:"self,omitempty"`
	Statuses *WebhookPullRequestClosedPullRequest1LinksStatuses `json:"statuses,omitempty"`
}

type WebhookPullRequestClosedPullRequest1LinksComments struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestClosedPullRequest1LinksCommits struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestClosedPullRequest1LinksHTML struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestClosedPullRequest1LinksIssue struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestClosedPullRequest1LinksReviewComment struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestClosedPullRequest1LinksReviewComments struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestClosedPullRequest1LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestClosedPullRequest1LinksStatuses struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestClosedPullRequest1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2024 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestConvertedToDraft - pullrequest convertedto_draft event
type WebhookPullRequestConvertedToDraft struct {
	// REQUIRED
	Action *WebhookPullRequestConvertedToDraftAction `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PullRequest *WebhookPullRequestConvertedToDraftPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest struct {
}

// WebhookPullRequestConvertedToDraftPullRequest0Assignee - User
type WebhookPullRequestConvertedToDraftPullRequest0Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestConvertedToDraftPullRequest0AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0AssigneesItem - User
type WebhookPullRequestConvertedToDraftPullRequest0AssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0AutoMerge - The status of auto merging a pull request.
type WebhookPullRequestConvertedToDraftPullRequest0AutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledBy - User
type WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest0Base struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestConvertedToDraftPullRequest0BaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestConvertedToDraftPullRequest0BaseUser `json:"user,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0BaseRepo - A git repository
type WebhookPullRequestConvertedToDraftPullRequest0BaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestConvertedToDraftPullRequest0BaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestConvertedToDraftPullRequest0BaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestConvertedToDraftPullRequest0BaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestConvertedToDraftPullRequest0BaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest0BaseRepoCreatedAt struct {
}

// WebhookPullRequestConvertedToDraftPullRequest0BaseRepoLicense - License
type WebhookPullRequestConvertedToDraftPullRequest0BaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwner - User
type WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest0BaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest0BaseRepoPushedAt struct {
}

// WebhookPullRequestConvertedToDraftPullRequest0BaseUser - User
type WebhookPullRequestConvertedToDraftPullRequest0BaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestConvertedToDraftPullRequest0BaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest0Head struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestConvertedToDraftPullRequest0HeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestConvertedToDraftPullRequest0HeadUser `json:"user,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0HeadRepo - A git repository
type WebhookPullRequestConvertedToDraftPullRequest0HeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestConvertedToDraftPullRequest0HeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestConvertedToDraftPullRequest0HeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestConvertedToDraftPullRequest0HeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestConvertedToDraftPullRequest0HeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest0HeadRepoCreatedAt struct {
}

// WebhookPullRequestConvertedToDraftPullRequest0HeadRepoLicense - License
type WebhookPullRequestConvertedToDraftPullRequest0HeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwner - User
type WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest0HeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest0HeadRepoPushedAt struct {
}

// WebhookPullRequestConvertedToDraftPullRequest0HeadUser - User
type WebhookPullRequestConvertedToDraftPullRequest0HeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestConvertedToDraftPullRequest0HeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0LabelsItem - Label
type WebhookPullRequestConvertedToDraftPullRequest0LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest0Links struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestConvertedToDraftPullRequest0LinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestConvertedToDraftPullRequest0LinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestConvertedToDraftPullRequest0LinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestConvertedToDraftPullRequest0LinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestConvertedToDraftPullRequest0LinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestConvertedToDraftPullRequest0LinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestConvertedToDraftPullRequest0LinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestConvertedToDraftPullRequest0LinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0LinksComments - Link
type WebhookPullRequestConvertedToDraftPullRequest0LinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0LinksCommits - Link
type WebhookPullRequestConvertedToDraftPullRequest0LinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0LinksHTML - Link
type WebhookPullRequestConvertedToDraftPullRequest0LinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0LinksIssue - Link
type WebhookPullRequestConvertedToDraftPullRequest0LinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0LinksReviewComment - Link
type WebhookPullRequestConvertedToDraftPullRequest0LinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0LinksReviewComments - Link
type WebhookPullRequestConvertedToDraftPullRequest0LinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0LinksSelf - Link
type WebhookPullRequestConvertedToDraftPullRequest0LinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0LinksStatuses - Link
type WebhookPullRequestConvertedToDraftPullRequest0LinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0MergedBy - User
type WebhookPullRequestConvertedToDraftPullRequest0MergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestConvertedToDraftPullRequest0MergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0Milestone - A collection of related issues and pull requests.
type WebhookPullRequestConvertedToDraftPullRequest0Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestConvertedToDraftPullRequest0MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreator - User
type WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest0RequestedReviewersItem struct {
}

// WebhookPullRequestConvertedToDraftPullRequest0RequestedTeamsItem - Groups of organization members that gives permissions
// on specified repositories.
type WebhookPullRequestConvertedToDraftPullRequest0RequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestConvertedToDraftPullRequest0User - User
type WebhookPullRequestConvertedToDraftPullRequest0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestConvertedToDraftPullRequest0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1Base struct {
	Label *string `json:"label,omitempty"`
	Ref *string `json:"ref,omitempty"`
	Repo *WebhookPullRequestConvertedToDraftPullRequest1BaseRepo `json:"repo,omitempty"`
	SHA *string `json:"sha,omitempty"`
	User *WebhookPullRequestConvertedToDraftPullRequest1BaseUser `json:"user,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1BaseRepo struct {
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`
	ArchiveURL *string `json:"archive_url,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CloneURL *string `json:"clone_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	Forks *int32 `json:"forks,omitempty"`
	ForksCount *int32 `json:"forks_count,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HasDownloads *bool `json:"has_downloads,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPages *bool `json:"has_pages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Language *string `json:"language,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`

	// Anything
	License any `json:"license,omitempty"`
	MergeCommitMessage *WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`
	MergeCommitTitle *WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// Anything
	MirrorURL any `json:"mirror_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	OpenIssues *int32 `json:"open_issues,omitempty"`
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`
	Owner *WebhookPullRequestConvertedToDraftPullRequest1BaseRepoOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	PushedAt *string `json:"pushed_at,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	SSHURL *string `json:"ssh_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
	SquashMergeCommitMessage *WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`
	SquashMergeCommitTitle *WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	StargazersCount *int32 `json:"stargazers_count,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	SvnURL *string `json:"svn_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	Topics []*string `json:"topics,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Watchers *int32 `json:"watchers,omitempty"`
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1BaseRepoOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1BaseUser struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1Head struct {
	Label *string `json:"label,omitempty"`
	Ref *string `json:"ref,omitempty"`
	Repo *WebhookPullRequestConvertedToDraftPullRequest1HeadRepo `json:"repo,omitempty"`
	SHA *string `json:"sha,omitempty"`
	User *WebhookPullRequestConvertedToDraftPullRequest1HeadUser `json:"user,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1HeadRepo struct {
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`
	ArchiveURL *string `json:"archive_url,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CloneURL *string `json:"clone_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	Forks *int32 `json:"forks,omitempty"`
	ForksCount *int32 `json:"forks_count,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HasDownloads *bool `json:"has_downloads,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPages *bool `json:"has_pages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Language *string `json:"language,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`

	// Anything
	License any `json:"license,omitempty"`
	MergeCommitMessage *WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`
	MergeCommitTitle *WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// Anything
	MirrorURL any `json:"mirror_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	OpenIssues *int32 `json:"open_issues,omitempty"`
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`
	Owner *WebhookPullRequestConvertedToDraftPullRequest1HeadRepoOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	PushedAt *string `json:"pushed_at,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	SSHURL *string `json:"ssh_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
	SquashMergeCommitMessage *WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`
	SquashMergeCommitTitle *WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	StargazersCount *int32 `json:"stargazers_count,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	SvnURL *string `json:"svn_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	Topics []*string `json:"topics,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Watchers *int32 `json:"watchers,omitempty"`
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1HeadRepoOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1HeadUser struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1Links struct {
	Comments *WebhookPullRequestConvertedToDraftPullRequest1LinksComments `json:"comments,omitempty"`
	Commits *WebhookPullRequestConvertedToDraftPullRequest1LinksCommits `json:"commits,omitempty"`
	HTML *WebhookPullRequestConvertedToDraftPullRequest1LinksHTML `json:"html,omitempty"`
	Issue *WebhookPullRequestConvertedToDraftPullRequest1LinksIssue `json:"issue,omitempty"`
	ReviewComment *WebhookPullRequestConvertedToDraftPullRequest1LinksReviewComment `json:"review_comment,omitempty"`
	ReviewComments *WebhookPullRequestConvertedToDraftPullRequest1LinksReviewComments `json:"review_comments,omitempty"`
	Self *WebhookPullRequestConvertedToDraftPullRequest1LinksSelf `json:"self,omitempty"`
	Statuses *WebhookPullRequestConvertedToDraftPullRequest1LinksStatuses `json:"statuses,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1LinksComments struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1LinksCommits struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1LinksHTML struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1LinksIssue struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1LinksReviewComment struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1LinksReviewComments struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1LinksStatuses struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequest1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2064 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDemilestoned - pull_request demilestoned event
type WebhookPullRequestDemilestoned struct {
	// REQUIRED
	Action *WebhookPullRequestDemilestonedAction `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestDemilestonedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// A collection of related issues and pull requests.
	Milestone *Milestone `json:"milestone,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequest - Pull Request
type WebhookPullRequestDemilestonedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestDemilestonedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestDemilestonedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestDemilestonedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestDemilestonedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestDemilestonedPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestDemilestonedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestDemilestonedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestDemilestonedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestDemilestonedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestDemilestonedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestDemilestonedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestDemilestonedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestDemilestonedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestDemilestonedPullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestDemilestonedPullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestAssignee - User
type WebhookPullRequestDemilestonedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDemilestonedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestAssigneesItem - User
type WebhookPullRequestDemilestonedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDemilestonedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestDemilestonedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestDemilestonedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestDemilestonedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestDemilestonedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestDemilestonedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestBaseRepo - A git repository
type WebhookPullRequestDemilestonedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestDemilestonedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestDemilestonedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestDemilestonedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestDemilestonedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestDemilestonedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestDemilestonedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestDemilestonedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestDemilestonedPullRequestBaseRepoLicense - License
type WebhookPullRequestDemilestonedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestBaseRepoOwner - User
type WebhookPullRequestDemilestonedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDemilestonedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestDemilestonedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestDemilestonedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestDemilestonedPullRequestBaseUser - User
type WebhookPullRequestDemilestonedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDemilestonedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestDemilestonedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestDemilestonedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestDemilestonedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestHeadRepo - A git repository
type WebhookPullRequestDemilestonedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestDemilestonedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestDemilestonedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestDemilestonedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestDemilestonedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestDemilestonedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestDemilestonedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestDemilestonedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestDemilestonedPullRequestHeadRepoLicense - License
type WebhookPullRequestDemilestonedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestHeadRepoOwner - User
type WebhookPullRequestDemilestonedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDemilestonedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestDemilestonedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestDemilestonedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestDemilestonedPullRequestHeadUser - User
type WebhookPullRequestDemilestonedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDemilestonedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestLabelsItem - Label
type WebhookPullRequestDemilestonedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestDemilestonedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestDemilestonedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestDemilestonedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestDemilestonedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestDemilestonedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestDemilestonedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestDemilestonedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestDemilestonedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestDemilestonedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestLinksComments - Link
type WebhookPullRequestDemilestonedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestLinksCommits - Link
type WebhookPullRequestDemilestonedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestLinksHTML - Link
type WebhookPullRequestDemilestonedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestLinksIssue - Link
type WebhookPullRequestDemilestonedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestLinksReviewComment - Link
type WebhookPullRequestDemilestonedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestLinksReviewComments - Link
type WebhookPullRequestDemilestonedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestLinksSelf - Link
type WebhookPullRequestDemilestonedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestLinksStatuses - Link
type WebhookPullRequestDemilestonedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestMergedBy - User
type WebhookPullRequestDemilestonedPullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDemilestonedPullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestDemilestonedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestDemilestonedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestDemilestonedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestMilestoneCreator - User
type WebhookPullRequestDemilestonedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDemilestonedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestDemilestonedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestDemilestonedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions on
// specified repositories.
type WebhookPullRequestDemilestonedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2104 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDemilestonedPullRequestUser - User
type WebhookPullRequestDemilestonedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDemilestonedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDequeued - pull_request dequeued event
type WebhookPullRequestDequeued struct {
	// REQUIRED
	Action *WebhookPullRequestDequeuedAction `json:"action,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestDequeuedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED
	Reason *string `json:"reason,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPullRequestDequeuedPullRequest - Pull Request
type WebhookPullRequestDequeuedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestDequeuedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestDequeuedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestDequeuedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestDequeuedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestDequeuedPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestDequeuedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestDequeuedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestDequeuedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestDequeuedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestDequeuedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestDequeuedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestDequeuedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestDequeuedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestDequeuedPullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestDequeuedPullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestAssignee - User
type WebhookPullRequestDequeuedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDequeuedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestAssigneesItem - User
type WebhookPullRequestDequeuedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDequeuedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestDequeuedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestDequeuedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestDequeuedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestDequeuedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDequeuedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestDequeuedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestDequeuedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestDequeuedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestBaseRepo - A git repository
type WebhookPullRequestDequeuedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestDequeuedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestDequeuedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestDequeuedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestDequeuedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestDequeuedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestDequeuedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestDequeuedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestDequeuedPullRequestBaseRepoLicense - License
type WebhookPullRequestDequeuedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestBaseRepoOwner - User
type WebhookPullRequestDequeuedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDequeuedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestDequeuedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestDequeuedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestDequeuedPullRequestBaseUser - User
type WebhookPullRequestDequeuedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDequeuedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestDequeuedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestDequeuedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestDequeuedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestHeadRepo - A git repository
type WebhookPullRequestDequeuedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestDequeuedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestDequeuedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestDequeuedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestDequeuedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestDequeuedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestDequeuedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestDequeuedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestDequeuedPullRequestHeadRepoLicense - License
type WebhookPullRequestDequeuedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestHeadRepoOwner - User
type WebhookPullRequestDequeuedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDequeuedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestDequeuedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestDequeuedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestDequeuedPullRequestHeadUser - User
type WebhookPullRequestDequeuedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDequeuedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestLabelsItem - Label
type WebhookPullRequestDequeuedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestDequeuedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestDequeuedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestDequeuedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestDequeuedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestDequeuedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestDequeuedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestDequeuedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestDequeuedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestDequeuedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestLinksComments - Link
type WebhookPullRequestDequeuedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestLinksCommits - Link
type WebhookPullRequestDequeuedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestLinksHTML - Link
type WebhookPullRequestDequeuedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestLinksIssue - Link
type WebhookPullRequestDequeuedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestLinksReviewComment - Link
type WebhookPullRequestDequeuedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestLinksReviewComments - Link
type WebhookPullRequestDequeuedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestLinksSelf - Link
type WebhookPullRequestDequeuedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestLinksStatuses - Link
type WebhookPullRequestDequeuedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestMergedBy - User
type WebhookPullRequestDequeuedPullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDequeuedPullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestDequeuedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestDequeuedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestDequeuedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestMilestoneCreator - User
type WebhookPullRequestDequeuedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDequeuedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestDequeuedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestDequeuedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions on specified
// repositories.
type WebhookPullRequestDequeuedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestDequeuedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestDequeuedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2135 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestDequeuedPullRequestUser - User
type WebhookPullRequestDequeuedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestDequeuedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEdited - pull_request edited event
type WebhookPullRequestEdited struct {
	// REQUIRED
	Action *WebhookPullRequestEditedAction `json:"action,omitempty"`

	// REQUIRED; The changes to the comment if the action was edited.
	Changes *WebhookPullRequestEditedChanges `json:"changes,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestEditedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookPullRequestEditedChanges - The changes to the comment if the action was edited.
type WebhookPullRequestEditedChanges struct {
	Base *WebhookPullRequestEditedChangesBase `json:"base,omitempty"`
	Body *WebhookPullRequestEditedChangesBody `json:"body,omitempty"`
	Title *WebhookPullRequestEditedChangesTitle `json:"title,omitempty"`
}

type WebhookPullRequestEditedChangesBase struct {
	// REQUIRED
	Ref *WebhookPullRequestEditedChangesBaseRef `json:"ref,omitempty"`

	// REQUIRED
	SHA *WebhookPullRequestEditedChangesBaseSHA `json:"sha,omitempty"`
}

type WebhookPullRequestEditedChangesBaseRef struct {
	// REQUIRED
	From *string `json:"from,omitempty"`
}

type WebhookPullRequestEditedChangesBaseSHA struct {
	// REQUIRED
	From *string `json:"from,omitempty"`
}

type WebhookPullRequestEditedChangesBody struct {
	// REQUIRED; The previous version of the body if the action was edited.
	From *string `json:"from,omitempty"`
}

type WebhookPullRequestEditedChangesTitle struct {
	// REQUIRED; The previous version of the title if the action was edited.
	From *string `json:"from,omitempty"`
}

// WebhookPullRequestEditedPullRequest - Pull Request
type WebhookPullRequestEditedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestEditedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestEditedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestEditedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestEditedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestEditedPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestEditedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestEditedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestEditedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestEditedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestEditedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestEditedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestEditedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestEditedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestEditedPullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestEditedPullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestEditedPullRequestAssignee - User
type WebhookPullRequestEditedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEditedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEditedPullRequestAssigneesItem - User
type WebhookPullRequestEditedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEditedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEditedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestEditedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestEditedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestEditedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestEditedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestEditedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEditedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestEditedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestEditedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestEditedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestEditedPullRequestBaseRepo - A git repository
type WebhookPullRequestEditedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestEditedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestEditedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestEditedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestEditedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestEditedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestEditedPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestEditedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestEditedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestEditedPullRequestBaseRepoLicense - License
type WebhookPullRequestEditedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEditedPullRequestBaseRepoOwner - User
type WebhookPullRequestEditedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEditedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestEditedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestEditedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestEditedPullRequestBaseUser - User
type WebhookPullRequestEditedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEditedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestEditedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestEditedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestEditedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestEditedPullRequestHeadRepo - A git repository
type WebhookPullRequestEditedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestEditedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestEditedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestEditedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestEditedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestEditedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestEditedPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestEditedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestEditedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestEditedPullRequestHeadRepoLicense - License
type WebhookPullRequestEditedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEditedPullRequestHeadRepoOwner - User
type WebhookPullRequestEditedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEditedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestEditedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestEditedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestEditedPullRequestHeadUser - User
type WebhookPullRequestEditedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEditedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEditedPullRequestLabelsItem - Label
type WebhookPullRequestEditedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestEditedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestEditedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestEditedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestEditedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestEditedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestEditedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestEditedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestEditedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestEditedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestEditedPullRequestLinksComments - Link
type WebhookPullRequestEditedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEditedPullRequestLinksCommits - Link
type WebhookPullRequestEditedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEditedPullRequestLinksHTML - Link
type WebhookPullRequestEditedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEditedPullRequestLinksIssue - Link
type WebhookPullRequestEditedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEditedPullRequestLinksReviewComment - Link
type WebhookPullRequestEditedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEditedPullRequestLinksReviewComments - Link
type WebhookPullRequestEditedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEditedPullRequestLinksSelf - Link
type WebhookPullRequestEditedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEditedPullRequestLinksStatuses - Link
type WebhookPullRequestEditedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEditedPullRequestMergedBy - User
type WebhookPullRequestEditedPullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEditedPullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEditedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestEditedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestEditedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestEditedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestEditedPullRequestMilestoneCreator - User
type WebhookPullRequestEditedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEditedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestEditedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestEditedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions on specified
// repositories.
type WebhookPullRequestEditedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestEditedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestEditedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2166 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEditedPullRequestUser - User
type WebhookPullRequestEditedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEditedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEnqueued - pull_request enqueued event
type WebhookPullRequestEnqueued struct {
	// REQUIRED
	Action *WebhookPullRequestEnqueuedAction `json:"action,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestEnqueuedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequest - Pull Request
type WebhookPullRequestEnqueuedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestEnqueuedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestEnqueuedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestEnqueuedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestEnqueuedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestEnqueuedPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestEnqueuedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestEnqueuedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestEnqueuedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestEnqueuedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestEnqueuedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestEnqueuedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestEnqueuedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestEnqueuedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestEnqueuedPullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestEnqueuedPullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestAssignee - User
type WebhookPullRequestEnqueuedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEnqueuedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestAssigneesItem - User
type WebhookPullRequestEnqueuedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEnqueuedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestEnqueuedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestEnqueuedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestEnqueuedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestEnqueuedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestEnqueuedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestBaseRepo - A git repository
type WebhookPullRequestEnqueuedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestEnqueuedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestEnqueuedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestEnqueuedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestEnqueuedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestEnqueuedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestEnqueuedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestEnqueuedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestEnqueuedPullRequestBaseRepoLicense - License
type WebhookPullRequestEnqueuedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestBaseRepoOwner - User
type WebhookPullRequestEnqueuedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEnqueuedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestEnqueuedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestEnqueuedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestEnqueuedPullRequestBaseUser - User
type WebhookPullRequestEnqueuedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEnqueuedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestEnqueuedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestEnqueuedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestEnqueuedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestHeadRepo - A git repository
type WebhookPullRequestEnqueuedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestEnqueuedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestEnqueuedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestEnqueuedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestEnqueuedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestEnqueuedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestEnqueuedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestEnqueuedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestEnqueuedPullRequestHeadRepoLicense - License
type WebhookPullRequestEnqueuedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestHeadRepoOwner - User
type WebhookPullRequestEnqueuedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEnqueuedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestEnqueuedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestEnqueuedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestEnqueuedPullRequestHeadUser - User
type WebhookPullRequestEnqueuedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEnqueuedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestLabelsItem - Label
type WebhookPullRequestEnqueuedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestEnqueuedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestEnqueuedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestEnqueuedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestEnqueuedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestEnqueuedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestEnqueuedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestEnqueuedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestEnqueuedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestEnqueuedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestLinksComments - Link
type WebhookPullRequestEnqueuedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestLinksCommits - Link
type WebhookPullRequestEnqueuedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestLinksHTML - Link
type WebhookPullRequestEnqueuedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestLinksIssue - Link
type WebhookPullRequestEnqueuedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestLinksReviewComment - Link
type WebhookPullRequestEnqueuedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestLinksReviewComments - Link
type WebhookPullRequestEnqueuedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestLinksSelf - Link
type WebhookPullRequestEnqueuedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestLinksStatuses - Link
type WebhookPullRequestEnqueuedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestMergedBy - User
type WebhookPullRequestEnqueuedPullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEnqueuedPullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestEnqueuedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestEnqueuedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestEnqueuedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestMilestoneCreator - User
type WebhookPullRequestEnqueuedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEnqueuedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestEnqueuedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestEnqueuedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions on specified
// repositories.
type WebhookPullRequestEnqueuedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2197 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestEnqueuedPullRequestUser - User
type WebhookPullRequestEnqueuedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestEnqueuedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLabeled - pull_request labeled event
type WebhookPullRequestLabeled struct {
	// REQUIRED
	Action *WebhookPullRequestLabeledAction `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestLabeledPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// Label
	Label *WebhookPullRequestLabeledLabel `json:"label,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPullRequestLabeledLabel - Label
type WebhookPullRequestLabeledLabel struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLabeledPullRequest - Pull Request
type WebhookPullRequestLabeledPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestLabeledPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestLabeledPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestLabeledPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestLabeledPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestLabeledPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestLabeledPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestLabeledPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestLabeledPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestLabeledPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestLabeledPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestLabeledPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestLabeledPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestLabeledPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestLabeledPullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestLabeledPullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestLabeledPullRequestAssignee - User
type WebhookPullRequestLabeledPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLabeledPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLabeledPullRequestAssigneesItem - User
type WebhookPullRequestLabeledPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLabeledPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLabeledPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestLabeledPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestLabeledPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestLabeledPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestLabeledPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestLabeledPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLabeledPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestLabeledPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestLabeledPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestLabeledPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestLabeledPullRequestBaseRepo - A git repository
type WebhookPullRequestLabeledPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestLabeledPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestLabeledPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestLabeledPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestLabeledPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestLabeledPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestLabeledPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestLabeledPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestLabeledPullRequestBaseRepoLicense - License
type WebhookPullRequestLabeledPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLabeledPullRequestBaseRepoOwner - User
type WebhookPullRequestLabeledPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLabeledPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestLabeledPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestLabeledPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestLabeledPullRequestBaseUser - User
type WebhookPullRequestLabeledPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLabeledPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestLabeledPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestLabeledPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestLabeledPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestLabeledPullRequestHeadRepo - A git repository
type WebhookPullRequestLabeledPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestLabeledPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestLabeledPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestLabeledPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestLabeledPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestLabeledPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestLabeledPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestLabeledPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestLabeledPullRequestHeadRepoLicense - License
type WebhookPullRequestLabeledPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLabeledPullRequestHeadRepoOwner - User
type WebhookPullRequestLabeledPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLabeledPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestLabeledPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestLabeledPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestLabeledPullRequestHeadUser - User
type WebhookPullRequestLabeledPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLabeledPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLabeledPullRequestLabelsItem - Label
type WebhookPullRequestLabeledPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestLabeledPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestLabeledPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestLabeledPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestLabeledPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestLabeledPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestLabeledPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestLabeledPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestLabeledPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestLabeledPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestLabeledPullRequestLinksComments - Link
type WebhookPullRequestLabeledPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLabeledPullRequestLinksCommits - Link
type WebhookPullRequestLabeledPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLabeledPullRequestLinksHTML - Link
type WebhookPullRequestLabeledPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLabeledPullRequestLinksIssue - Link
type WebhookPullRequestLabeledPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLabeledPullRequestLinksReviewComment - Link
type WebhookPullRequestLabeledPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLabeledPullRequestLinksReviewComments - Link
type WebhookPullRequestLabeledPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLabeledPullRequestLinksSelf - Link
type WebhookPullRequestLabeledPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLabeledPullRequestLinksStatuses - Link
type WebhookPullRequestLabeledPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLabeledPullRequestMergedBy - User
type WebhookPullRequestLabeledPullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLabeledPullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLabeledPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestLabeledPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestLabeledPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestLabeledPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestLabeledPullRequestMilestoneCreator - User
type WebhookPullRequestLabeledPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLabeledPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestLabeledPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestLabeledPullRequestRequestedTeamsItem - Groups of organization members that gives permissions on specified
// repositories.
type WebhookPullRequestLabeledPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestLabeledPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestLabeledPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2228 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLabeledPullRequestUser - User
type WebhookPullRequestLabeledPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLabeledPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLocked - pull_request locked event
type WebhookPullRequestLocked struct {
	// REQUIRED
	Action *WebhookPullRequestLockedAction `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestLockedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPullRequestLockedPullRequest - Pull Request
type WebhookPullRequestLockedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestLockedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestLockedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestLockedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestLockedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestLockedPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestLockedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestLockedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestLockedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestLockedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestLockedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestLockedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestLockedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestLockedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestLockedPullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestLockedPullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestLockedPullRequestAssignee - User
type WebhookPullRequestLockedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLockedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLockedPullRequestAssigneesItem - User
type WebhookPullRequestLockedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLockedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLockedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestLockedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestLockedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestLockedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestLockedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestLockedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLockedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestLockedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestLockedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestLockedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestLockedPullRequestBaseRepo - A git repository
type WebhookPullRequestLockedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestLockedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestLockedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestLockedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestLockedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestLockedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestLockedPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestLockedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestLockedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestLockedPullRequestBaseRepoLicense - License
type WebhookPullRequestLockedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLockedPullRequestBaseRepoOwner - User
type WebhookPullRequestLockedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLockedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestLockedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestLockedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestLockedPullRequestBaseUser - User
type WebhookPullRequestLockedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLockedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestLockedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestLockedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestLockedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestLockedPullRequestHeadRepo - A git repository
type WebhookPullRequestLockedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestLockedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestLockedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestLockedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestLockedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestLockedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestLockedPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestLockedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestLockedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestLockedPullRequestHeadRepoLicense - License
type WebhookPullRequestLockedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLockedPullRequestHeadRepoOwner - User
type WebhookPullRequestLockedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLockedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestLockedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestLockedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestLockedPullRequestHeadUser - User
type WebhookPullRequestLockedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLockedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLockedPullRequestLabelsItem - Label
type WebhookPullRequestLockedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestLockedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestLockedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestLockedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestLockedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestLockedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestLockedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestLockedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestLockedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestLockedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestLockedPullRequestLinksComments - Link
type WebhookPullRequestLockedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLockedPullRequestLinksCommits - Link
type WebhookPullRequestLockedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLockedPullRequestLinksHTML - Link
type WebhookPullRequestLockedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLockedPullRequestLinksIssue - Link
type WebhookPullRequestLockedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLockedPullRequestLinksReviewComment - Link
type WebhookPullRequestLockedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLockedPullRequestLinksReviewComments - Link
type WebhookPullRequestLockedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLockedPullRequestLinksSelf - Link
type WebhookPullRequestLockedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLockedPullRequestLinksStatuses - Link
type WebhookPullRequestLockedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestLockedPullRequestMergedBy - User
type WebhookPullRequestLockedPullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLockedPullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLockedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestLockedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestLockedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestLockedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestLockedPullRequestMilestoneCreator - User
type WebhookPullRequestLockedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLockedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestLockedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestLockedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions on specified
// repositories.
type WebhookPullRequestLockedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestLockedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestLockedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2259 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestLockedPullRequestUser - User
type WebhookPullRequestLockedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestLockedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestMilestoned - pull_request milestoned event
type WebhookPullRequestMilestoned struct {
	// REQUIRED
	Action *WebhookPullRequestMilestonedAction `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestMilestonedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// A collection of related issues and pull requests.
	Milestone *Milestone `json:"milestone,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookPullRequestMilestonedPullRequest - Pull Request
type WebhookPullRequestMilestonedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestMilestonedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestMilestonedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestMilestonedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestMilestonedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestMilestonedPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestMilestonedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestMilestonedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestMilestonedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestMilestonedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestMilestonedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestMilestonedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestMilestonedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestMilestonedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestMilestonedPullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestMilestonedPullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestAssignee - User
type WebhookPullRequestMilestonedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestMilestonedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestAssigneesItem - User
type WebhookPullRequestMilestonedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestMilestonedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestMilestonedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestMilestonedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestMilestonedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestMilestonedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestMilestonedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestMilestonedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestMilestonedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestMilestonedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestBaseRepo - A git repository
type WebhookPullRequestMilestonedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestMilestonedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestMilestonedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestMilestonedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestMilestonedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestMilestonedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestMilestonedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestMilestonedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestMilestonedPullRequestBaseRepoLicense - License
type WebhookPullRequestMilestonedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestBaseRepoOwner - User
type WebhookPullRequestMilestonedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestMilestonedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestMilestonedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestMilestonedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestMilestonedPullRequestBaseUser - User
type WebhookPullRequestMilestonedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestMilestonedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestMilestonedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestMilestonedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestMilestonedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestHeadRepo - A git repository
type WebhookPullRequestMilestonedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestMilestonedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestMilestonedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestMilestonedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestMilestonedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestMilestonedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestMilestonedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestMilestonedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestMilestonedPullRequestHeadRepoLicense - License
type WebhookPullRequestMilestonedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestHeadRepoOwner - User
type WebhookPullRequestMilestonedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestMilestonedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestMilestonedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestMilestonedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestMilestonedPullRequestHeadUser - User
type WebhookPullRequestMilestonedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestMilestonedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestLabelsItem - Label
type WebhookPullRequestMilestonedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestMilestonedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestMilestonedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestMilestonedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestMilestonedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestMilestonedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestMilestonedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestMilestonedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestMilestonedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestMilestonedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestLinksComments - Link
type WebhookPullRequestMilestonedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestLinksCommits - Link
type WebhookPullRequestMilestonedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestLinksHTML - Link
type WebhookPullRequestMilestonedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestLinksIssue - Link
type WebhookPullRequestMilestonedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestLinksReviewComment - Link
type WebhookPullRequestMilestonedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestLinksReviewComments - Link
type WebhookPullRequestMilestonedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestLinksSelf - Link
type WebhookPullRequestMilestonedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestLinksStatuses - Link
type WebhookPullRequestMilestonedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestMergedBy - User
type WebhookPullRequestMilestonedPullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestMilestonedPullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestMilestonedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestMilestonedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestMilestonedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestMilestoneCreator - User
type WebhookPullRequestMilestonedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestMilestonedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestMilestonedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestMilestonedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions on specified
// repositories.
type WebhookPullRequestMilestonedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestMilestonedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestMilestonedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2290 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestMilestonedPullRequestUser - User
type WebhookPullRequestMilestonedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestMilestonedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestOpened - pull_request opened event
type WebhookPullRequestOpened struct {
	// REQUIRED
	Action *WebhookPullRequestOpenedAction `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PullRequest *WebhookPullRequestOpenedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookPullRequestOpenedPullRequest struct {
}

// WebhookPullRequestOpenedPullRequest0Assignee - User
type WebhookPullRequestOpenedPullRequest0Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestOpenedPullRequest0AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0AssigneesItem - User
type WebhookPullRequestOpenedPullRequest0AssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestOpenedPullRequestOneOf0AssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0AutoMerge - The status of auto merging a pull request.
type WebhookPullRequestOpenedPullRequest0AutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestOpenedPullRequest0AutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestOpenedPullRequest0AutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0AutoMergeEnabledBy - User
type WebhookPullRequestOpenedPullRequest0AutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestOpenedPullRequest0AutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestOpenedPullRequest0Base struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestOpenedPullRequest0BaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestOpenedPullRequest0BaseUser `json:"user,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0BaseRepo - A git repository
type WebhookPullRequestOpenedPullRequest0BaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestOpenedPullRequest0BaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestOpenedPullRequest0BaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestOpenedPullRequest0BaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestOpenedPullRequest0BaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestOpenedPullRequest0BaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestOpenedPullRequest0BaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestOpenedPullRequest0BaseRepoCreatedAt struct {
}

// WebhookPullRequestOpenedPullRequest0BaseRepoLicense - License
type WebhookPullRequestOpenedPullRequest0BaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0BaseRepoOwner - User
type WebhookPullRequestOpenedPullRequest0BaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestOpenedPullRequest0BaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestOpenedPullRequest0BaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestOpenedPullRequest0BaseRepoPushedAt struct {
}

// WebhookPullRequestOpenedPullRequest0BaseUser - User
type WebhookPullRequestOpenedPullRequest0BaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestOpenedPullRequest0BaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestOpenedPullRequest0Head struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestOpenedPullRequest0HeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestOpenedPullRequest0HeadUser `json:"user,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0HeadRepo - A git repository
type WebhookPullRequestOpenedPullRequest0HeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestOpenedPullRequest0HeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestOpenedPullRequest0HeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestOpenedPullRequest0HeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestOpenedPullRequest0HeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestOpenedPullRequest0HeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
	MergeCommitMessage *WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit message title.
	MergeCommitTitle *WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestOpenedPullRequest0HeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestOpenedPullRequest0HeadRepoCreatedAt struct {
}

// WebhookPullRequestOpenedPullRequest0HeadRepoLicense - License
type WebhookPullRequestOpenedPullRequest0HeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0HeadRepoOwner - User
type WebhookPullRequestOpenedPullRequest0HeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestOpenedPullRequest0HeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestOpenedPullRequest0HeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestOpenedPullRequest0HeadRepoPushedAt struct {
}

// WebhookPullRequestOpenedPullRequest0HeadUser - User
type WebhookPullRequestOpenedPullRequest0HeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestOpenedPullRequest0HeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0LabelsItem - Label
type WebhookPullRequestOpenedPullRequest0LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestOpenedPullRequest0Links struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestOpenedPullRequest0LinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestOpenedPullRequest0LinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestOpenedPullRequest0LinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestOpenedPullRequest0LinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestOpenedPullRequest0LinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestOpenedPullRequest0LinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestOpenedPullRequest0LinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestOpenedPullRequest0LinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0LinksComments - Link
type WebhookPullRequestOpenedPullRequest0LinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0LinksCommits - Link
type WebhookPullRequestOpenedPullRequest0LinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0LinksHTML - Link
type WebhookPullRequestOpenedPullRequest0LinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0LinksIssue - Link
type WebhookPullRequestOpenedPullRequest0LinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0LinksReviewComment - Link
type WebhookPullRequestOpenedPullRequest0LinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0LinksReviewComments - Link
type WebhookPullRequestOpenedPullRequest0LinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0LinksSelf - Link
type WebhookPullRequestOpenedPullRequest0LinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0LinksStatuses - Link
type WebhookPullRequestOpenedPullRequest0LinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0MergedBy - User
type WebhookPullRequestOpenedPullRequest0MergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestOpenedPullRequest0MergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0Milestone - A collection of related issues and pull requests.
type WebhookPullRequestOpenedPullRequest0Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestOpenedPullRequest0MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestOpenedPullRequest0MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0MilestoneCreator - User
type WebhookPullRequestOpenedPullRequest0MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestOpenedPullRequest0MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestOpenedPullRequest0RequestedReviewersItem struct {
}

// WebhookPullRequestOpenedPullRequest0RequestedTeamsItem - Groups of organization members that gives permissions on specified
// repositories.
type WebhookPullRequestOpenedPullRequest0RequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestOpenedPullRequest0User - User
type WebhookPullRequestOpenedPullRequest0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestOpenedPullRequest0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1Base struct {
	Label *string `json:"label,omitempty"`
	Ref *string `json:"ref,omitempty"`
	Repo *WebhookPullRequestOpenedPullRequest1BaseRepo `json:"repo,omitempty"`
	SHA *string `json:"sha,omitempty"`
	User *WebhookPullRequestOpenedPullRequest1BaseUser `json:"user,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1BaseRepo struct {
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`
	ArchiveURL *string `json:"archive_url,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CloneURL *string `json:"clone_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	Forks *int32 `json:"forks,omitempty"`
	ForksCount *int32 `json:"forks_count,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HasDownloads *bool `json:"has_downloads,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPages *bool `json:"has_pages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Language *string `json:"language,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`

	// Anything
	License any `json:"license,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	MirrorURL *string `json:"mirror_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	OpenIssues *int32 `json:"open_issues,omitempty"`
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`
	Owner *WebhookPullRequestOpenedPullRequest1BaseRepoOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	PushedAt *string `json:"pushed_at,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	SSHURL *string `json:"ssh_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
	StargazersCount *int32 `json:"stargazers_count,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	SvnURL *string `json:"svn_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	Topics []*string `json:"topics,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Watchers *int32 `json:"watchers,omitempty"`
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1BaseRepoOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1BaseUser struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1Head struct {
	Label *string `json:"label,omitempty"`
	Ref *string `json:"ref,omitempty"`
	Repo *WebhookPullRequestOpenedPullRequest1HeadRepo `json:"repo,omitempty"`
	SHA *string `json:"sha,omitempty"`
	User *WebhookPullRequestOpenedPullRequest1HeadUser `json:"user,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1HeadRepo struct {
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`
	ArchiveURL *string `json:"archive_url,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CloneURL *string `json:"clone_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	Forks *int32 `json:"forks,omitempty"`
	ForksCount *int32 `json:"forks_count,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HasDownloads *bool `json:"has_downloads,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPages *bool `json:"has_pages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Language *string `json:"language,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`

	// Anything
	License any `json:"license,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	MirrorURL *string `json:"mirror_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	OpenIssues *int32 `json:"open_issues,omitempty"`
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`
	Owner *WebhookPullRequestOpenedPullRequest1HeadRepoOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	PushedAt *string `json:"pushed_at,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	SSHURL *string `json:"ssh_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
	StargazersCount *int32 `json:"stargazers_count,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	SvnURL *string `json:"svn_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	Topics []*string `json:"topics,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Watchers *int32 `json:"watchers,omitempty"`
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1HeadRepoOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1HeadUser struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1Links struct {
	Comments *WebhookPullRequestOpenedPullRequest1LinksComments `json:"comments,omitempty"`
	Commits *WebhookPullRequestOpenedPullRequest1LinksCommits `json:"commits,omitempty"`
	HTML *WebhookPullRequestOpenedPullRequest1LinksHTML `json:"html,omitempty"`
	Issue *WebhookPullRequestOpenedPullRequest1LinksIssue `json:"issue,omitempty"`
	ReviewComment *WebhookPullRequestOpenedPullRequest1LinksReviewComment `json:"review_comment,omitempty"`
	ReviewComments *WebhookPullRequestOpenedPullRequest1LinksReviewComments `json:"review_comments,omitempty"`
	Self *WebhookPullRequestOpenedPullRequest1LinksSelf `json:"self,omitempty"`
	Statuses *WebhookPullRequestOpenedPullRequest1LinksStatuses `json:"statuses,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1LinksComments struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1LinksCommits struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1LinksHTML struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1LinksIssue struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1LinksReviewComment struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1LinksReviewComments struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1LinksStatuses struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestOpenedPullRequest1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2321 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReadyForReview - pullrequest readyfor_review event
type WebhookPullRequestReadyForReview struct {
	// REQUIRED
	Action *WebhookPullRequestReadyForReviewAction `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PullRequest *WebhookPullRequestReadyForReviewPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest struct {
}

// WebhookPullRequestReadyForReviewPullRequest0Assignee - User
type WebhookPullRequestReadyForReviewPullRequest0Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReadyForReviewPullRequest0AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0AssigneesItem - User
type WebhookPullRequestReadyForReviewPullRequest0AssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0AutoMerge - The status of auto merging a pull request.
type WebhookPullRequestReadyForReviewPullRequest0AutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestReadyForReviewPullRequest0AutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledBy - User
type WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest0Base struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReadyForReviewPullRequest0BaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReadyForReviewPullRequest0BaseUser `json:"user,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0BaseRepo - A git repository
type WebhookPullRequestReadyForReviewPullRequest0BaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReadyForReviewPullRequest0BaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReadyForReviewPullRequest0BaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReadyForReviewPullRequest0BaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReadyForReviewPullRequest0BaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest0BaseRepoCreatedAt struct {
}

// WebhookPullRequestReadyForReviewPullRequest0BaseRepoLicense - License
type WebhookPullRequestReadyForReviewPullRequest0BaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwner - User
type WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest0BaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest0BaseRepoPushedAt struct {
}

// WebhookPullRequestReadyForReviewPullRequest0BaseUser - User
type WebhookPullRequestReadyForReviewPullRequest0BaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReadyForReviewPullRequest0BaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest0Head struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReadyForReviewPullRequest0HeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReadyForReviewPullRequest0HeadUser `json:"user,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0HeadRepo - A git repository
type WebhookPullRequestReadyForReviewPullRequest0HeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReadyForReviewPullRequest0HeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReadyForReviewPullRequest0HeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReadyForReviewPullRequest0HeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReadyForReviewPullRequest0HeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest0HeadRepoCreatedAt struct {
}

// WebhookPullRequestReadyForReviewPullRequest0HeadRepoLicense - License
type WebhookPullRequestReadyForReviewPullRequest0HeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwner - User
type WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest0HeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest0HeadRepoPushedAt struct {
}

// WebhookPullRequestReadyForReviewPullRequest0HeadUser - User
type WebhookPullRequestReadyForReviewPullRequest0HeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReadyForReviewPullRequest0HeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0LabelsItem - Label
type WebhookPullRequestReadyForReviewPullRequest0LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest0Links struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestReadyForReviewPullRequest0LinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestReadyForReviewPullRequest0LinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestReadyForReviewPullRequest0LinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestReadyForReviewPullRequest0LinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestReadyForReviewPullRequest0LinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestReadyForReviewPullRequest0LinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReadyForReviewPullRequest0LinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestReadyForReviewPullRequest0LinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0LinksComments - Link
type WebhookPullRequestReadyForReviewPullRequest0LinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0LinksCommits - Link
type WebhookPullRequestReadyForReviewPullRequest0LinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0LinksHTML - Link
type WebhookPullRequestReadyForReviewPullRequest0LinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0LinksIssue - Link
type WebhookPullRequestReadyForReviewPullRequest0LinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0LinksReviewComment - Link
type WebhookPullRequestReadyForReviewPullRequest0LinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0LinksReviewComments - Link
type WebhookPullRequestReadyForReviewPullRequest0LinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0LinksSelf - Link
type WebhookPullRequestReadyForReviewPullRequest0LinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0LinksStatuses - Link
type WebhookPullRequestReadyForReviewPullRequest0LinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0MergedBy - User
type WebhookPullRequestReadyForReviewPullRequest0MergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReadyForReviewPullRequest0MergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0Milestone - A collection of related issues and pull requests.
type WebhookPullRequestReadyForReviewPullRequest0Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestReadyForReviewPullRequest0MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestReadyForReviewPullRequest0MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0MilestoneCreator - User
type WebhookPullRequestReadyForReviewPullRequest0MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest0RequestedReviewersItem struct {
}

// WebhookPullRequestReadyForReviewPullRequest0RequestedTeamsItem - Groups of organization members that gives permissions
// on specified repositories.
type WebhookPullRequestReadyForReviewPullRequest0RequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReadyForReviewPullRequest0User - User
type WebhookPullRequestReadyForReviewPullRequest0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReadyForReviewPullRequest0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1Base struct {
	Label *string `json:"label,omitempty"`
	Ref *string `json:"ref,omitempty"`
	Repo *WebhookPullRequestReadyForReviewPullRequest1BaseRepo `json:"repo,omitempty"`
	SHA *string `json:"sha,omitempty"`
	User *WebhookPullRequestReadyForReviewPullRequest1BaseUser `json:"user,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1BaseRepo struct {
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`
	ArchiveURL *string `json:"archive_url,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CloneURL *string `json:"clone_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	Forks *int32 `json:"forks,omitempty"`
	ForksCount *int32 `json:"forks_count,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HasDownloads *bool `json:"has_downloads,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPages *bool `json:"has_pages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Language *string `json:"language,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`

	// Anything
	License any `json:"license,omitempty"`
	MergeCommitMessage *WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`
	MergeCommitTitle *WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	MirrorURL *string `json:"mirror_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	OpenIssues *int32 `json:"open_issues,omitempty"`
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`
	Owner *WebhookPullRequestReadyForReviewPullRequest1BaseRepoOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	PushedAt *string `json:"pushed_at,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	SSHURL *string `json:"ssh_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
	SquashMergeCommitMessage *WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`
	SquashMergeCommitTitle *WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	StargazersCount *int32 `json:"stargazers_count,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	SvnURL *string `json:"svn_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	Topics []*string `json:"topics,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Watchers *int32 `json:"watchers,omitempty"`
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1BaseRepoOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1BaseUser struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1Head struct {
	Label *string `json:"label,omitempty"`
	Ref *string `json:"ref,omitempty"`
	Repo *WebhookPullRequestReadyForReviewPullRequest1HeadRepo `json:"repo,omitempty"`
	SHA *string `json:"sha,omitempty"`
	User *WebhookPullRequestReadyForReviewPullRequest1HeadUser `json:"user,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1HeadRepo struct {
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`
	ArchiveURL *string `json:"archive_url,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CloneURL *string `json:"clone_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	Forks *int32 `json:"forks,omitempty"`
	ForksCount *int32 `json:"forks_count,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HasDownloads *bool `json:"has_downloads,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPages *bool `json:"has_pages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Language *string `json:"language,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`

	// Anything
	License any `json:"license,omitempty"`
	MergeCommitMessage *WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`
	MergeCommitTitle *WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	MirrorURL *string `json:"mirror_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	OpenIssues *int32 `json:"open_issues,omitempty"`
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`
	Owner *WebhookPullRequestReadyForReviewPullRequest1HeadRepoOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	PushedAt *string `json:"pushed_at,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	SSHURL *string `json:"ssh_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
	SquashMergeCommitMessage *WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`
	SquashMergeCommitTitle *WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	StargazersCount *int32 `json:"stargazers_count,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	SvnURL *string `json:"svn_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	Topics []*string `json:"topics,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Watchers *int32 `json:"watchers,omitempty"`
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1HeadRepoOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1HeadUser struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1Links struct {
	Comments *WebhookPullRequestReadyForReviewPullRequest1LinksComments `json:"comments,omitempty"`
	Commits *WebhookPullRequestReadyForReviewPullRequest1LinksCommits `json:"commits,omitempty"`
	HTML *WebhookPullRequestReadyForReviewPullRequest1LinksHTML `json:"html,omitempty"`
	Issue *WebhookPullRequestReadyForReviewPullRequest1LinksIssue `json:"issue,omitempty"`
	ReviewComment *WebhookPullRequestReadyForReviewPullRequest1LinksReviewComment `json:"review_comment,omitempty"`
	ReviewComments *WebhookPullRequestReadyForReviewPullRequest1LinksReviewComments `json:"review_comments,omitempty"`
	Self *WebhookPullRequestReadyForReviewPullRequest1LinksSelf `json:"self,omitempty"`
	Statuses *WebhookPullRequestReadyForReviewPullRequest1LinksStatuses `json:"statuses,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1LinksComments struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1LinksCommits struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1LinksHTML struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1LinksIssue struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1LinksReviewComment struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1LinksReviewComments struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1LinksStatuses struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequest1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2353 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReopened - pull_request reopened event
type WebhookPullRequestReopened struct {
	// REQUIRED
	Action *WebhookPullRequestReopenedAction `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PullRequest *WebhookPullRequestReopenedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookPullRequestReopenedPullRequest struct {
}

// WebhookPullRequestReopenedPullRequest0Assignee - User
type WebhookPullRequestReopenedPullRequest0Assignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReopenedPullRequest0AssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0AssigneesItem - User
type WebhookPullRequestReopenedPullRequest0AssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReopenedPullRequestOneOf0AssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0AutoMerge - The status of auto merging a pull request.
type WebhookPullRequestReopenedPullRequest0AutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestReopenedPullRequest0AutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestReopenedPullRequest0AutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0AutoMergeEnabledBy - User
type WebhookPullRequestReopenedPullRequest0AutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReopenedPullRequest0AutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReopenedPullRequest0Base struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReopenedPullRequest0BaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReopenedPullRequest0BaseUser `json:"user,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0BaseRepo - A git repository
type WebhookPullRequestReopenedPullRequest0BaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReopenedPullRequest0BaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReopenedPullRequest0BaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReopenedPullRequest0BaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReopenedPullRequest0BaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReopenedPullRequest0BaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReopenedPullRequest0BaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReopenedPullRequest0BaseRepoCreatedAt struct {
}

// WebhookPullRequestReopenedPullRequest0BaseRepoLicense - License
type WebhookPullRequestReopenedPullRequest0BaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0BaseRepoOwner - User
type WebhookPullRequestReopenedPullRequest0BaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReopenedPullRequest0BaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReopenedPullRequest0BaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReopenedPullRequest0BaseRepoPushedAt struct {
}

// WebhookPullRequestReopenedPullRequest0BaseUser - User
type WebhookPullRequestReopenedPullRequest0BaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReopenedPullRequest0BaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReopenedPullRequest0Head struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReopenedPullRequest0HeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReopenedPullRequest0HeadUser `json:"user,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0HeadRepo - A git repository
type WebhookPullRequestReopenedPullRequest0HeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReopenedPullRequest0HeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReopenedPullRequest0HeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReopenedPullRequest0HeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReopenedPullRequest0HeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReopenedPullRequest0HeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
	MergeCommitMessage *WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit message title.
	MergeCommitTitle *WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReopenedPullRequest0HeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReopenedPullRequest0HeadRepoCreatedAt struct {
}

// WebhookPullRequestReopenedPullRequest0HeadRepoLicense - License
type WebhookPullRequestReopenedPullRequest0HeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0HeadRepoOwner - User
type WebhookPullRequestReopenedPullRequest0HeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReopenedPullRequest0HeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReopenedPullRequest0HeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReopenedPullRequest0HeadRepoPushedAt struct {
}

// WebhookPullRequestReopenedPullRequest0HeadUser - User
type WebhookPullRequestReopenedPullRequest0HeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReopenedPullRequest0HeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0LabelsItem - Label
type WebhookPullRequestReopenedPullRequest0LabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReopenedPullRequest0Links struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestReopenedPullRequest0LinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestReopenedPullRequest0LinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestReopenedPullRequest0LinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestReopenedPullRequest0LinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestReopenedPullRequest0LinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestReopenedPullRequest0LinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReopenedPullRequest0LinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestReopenedPullRequest0LinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0LinksComments - Link
type WebhookPullRequestReopenedPullRequest0LinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0LinksCommits - Link
type WebhookPullRequestReopenedPullRequest0LinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0LinksHTML - Link
type WebhookPullRequestReopenedPullRequest0LinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0LinksIssue - Link
type WebhookPullRequestReopenedPullRequest0LinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0LinksReviewComment - Link
type WebhookPullRequestReopenedPullRequest0LinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0LinksReviewComments - Link
type WebhookPullRequestReopenedPullRequest0LinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0LinksSelf - Link
type WebhookPullRequestReopenedPullRequest0LinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0LinksStatuses - Link
type WebhookPullRequestReopenedPullRequest0LinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0MergedBy - User
type WebhookPullRequestReopenedPullRequest0MergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReopenedPullRequest0MergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0Milestone - A collection of related issues and pull requests.
type WebhookPullRequestReopenedPullRequest0Milestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestReopenedPullRequest0MilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestReopenedPullRequest0MilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0MilestoneCreator - User
type WebhookPullRequestReopenedPullRequest0MilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReopenedPullRequest0MilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReopenedPullRequest0RequestedReviewersItem struct {
}

// WebhookPullRequestReopenedPullRequest0RequestedTeamsItem - Groups of organization members that gives permissions on specified
// repositories.
type WebhookPullRequestReopenedPullRequest0RequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReopenedPullRequest0User - User
type WebhookPullRequestReopenedPullRequest0User struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReopenedPullRequest0UserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1Base struct {
	Label *string `json:"label,omitempty"`
	Ref *string `json:"ref,omitempty"`
	Repo *WebhookPullRequestReopenedPullRequest1BaseRepo `json:"repo,omitempty"`
	SHA *string `json:"sha,omitempty"`
	User *WebhookPullRequestReopenedPullRequest1BaseUser `json:"user,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1BaseRepo struct {
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`
	ArchiveURL *string `json:"archive_url,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CloneURL *string `json:"clone_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	Forks *int32 `json:"forks,omitempty"`
	ForksCount *int32 `json:"forks_count,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HasDownloads *bool `json:"has_downloads,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPages *bool `json:"has_pages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Language *string `json:"language,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`

	// Anything
	License any `json:"license,omitempty"`
	MergeCommitMessage *WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`
	MergeCommitTitle *WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// Anything
	MirrorURL any `json:"mirror_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	OpenIssues *int32 `json:"open_issues,omitempty"`
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`
	Owner *WebhookPullRequestReopenedPullRequest1BaseRepoOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	PushedAt *string `json:"pushed_at,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	SSHURL *string `json:"ssh_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
	SquashMergeCommitMessage *WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`
	SquashMergeCommitTitle *WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	StargazersCount *int32 `json:"stargazers_count,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	SvnURL *string `json:"svn_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	Topics []*string `json:"topics,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Watchers *int32 `json:"watchers,omitempty"`
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1BaseRepoOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1BaseUser struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1Head struct {
	Label *string `json:"label,omitempty"`
	Ref *string `json:"ref,omitempty"`
	Repo *WebhookPullRequestReopenedPullRequest1HeadRepo `json:"repo,omitempty"`
	SHA *string `json:"sha,omitempty"`
	User *WebhookPullRequestReopenedPullRequest1HeadUser `json:"user,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1HeadRepo struct {
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`
	AllowForking *bool `json:"allow_forking,omitempty"`
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`
	ArchiveURL *string `json:"archive_url,omitempty"`
	Archived *bool `json:"archived,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CloneURL *string `json:"clone_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DefaultBranch *string `json:"default_branch,omitempty"`
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	Disabled *bool `json:"disabled,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	Forks *int32 `json:"forks,omitempty"`
	ForksCount *int32 `json:"forks_count,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	GitURL *string `json:"git_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HasDownloads *bool `json:"has_downloads,omitempty"`
	HasIssues *bool `json:"has_issues,omitempty"`
	HasPages *bool `json:"has_pages,omitempty"`
	HasProjects *bool `json:"has_projects,omitempty"`
	HasWiki *bool `json:"has_wiki,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	Language *string `json:"language,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`

	// Anything
	License any `json:"license,omitempty"`
	MergeCommitMessage *WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`
	MergeCommitTitle *WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// Anything
	MirrorURL any `json:"mirror_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	OpenIssues *int32 `json:"open_issues,omitempty"`
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`
	Owner *WebhookPullRequestReopenedPullRequest1HeadRepoOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	PushedAt *string `json:"pushed_at,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	SSHURL *string `json:"ssh_url,omitempty"`
	Size *int32 `json:"size,omitempty"`
	SquashMergeCommitMessage *WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`
	SquashMergeCommitTitle *WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	StargazersCount *int32 `json:"stargazers_count,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	SvnURL *string `json:"svn_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	Topics []*string `json:"topics,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`
	Visibility *string `json:"visibility,omitempty"`
	Watchers *int32 `json:"watchers,omitempty"`
	WatchersCount *int32 `json:"watchers_count,omitempty"`
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1HeadRepoOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1HeadUser struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1Links struct {
	Comments *WebhookPullRequestReopenedPullRequest1LinksComments `json:"comments,omitempty"`
	Commits *WebhookPullRequestReopenedPullRequest1LinksCommits `json:"commits,omitempty"`
	HTML *WebhookPullRequestReopenedPullRequest1LinksHTML `json:"html,omitempty"`
	Issue *WebhookPullRequestReopenedPullRequest1LinksIssue `json:"issue,omitempty"`
	ReviewComment *WebhookPullRequestReopenedPullRequest1LinksReviewComment `json:"review_comment,omitempty"`
	ReviewComments *WebhookPullRequestReopenedPullRequest1LinksReviewComments `json:"review_comments,omitempty"`
	Self *WebhookPullRequestReopenedPullRequest1LinksSelf `json:"self,omitempty"`
	Statuses *WebhookPullRequestReopenedPullRequest1LinksStatuses `json:"statuses,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1LinksComments struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1LinksCommits struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1LinksHTML struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1LinksIssue struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1LinksReviewComment struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1LinksReviewComments struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1LinksSelf struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1LinksStatuses struct {
	Href *string `json:"href,omitempty"`
}

type WebhookPullRequestReopenedPullRequest1User struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2393 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentCreated - pullrequestreview_comment created event
type WebhookPullRequestReviewCommentCreated struct {
	// REQUIRED
	Action *WebhookPullRequestReviewCommentCreatedAction `json:"action,omitempty"`

	// REQUIRED; The comment [https://docs.github.com/rest/reference/pulls#comments] itself.
	Comment *WebhookPullRequestReviewCommentCreatedComment `json:"comment,omitempty"`

	// REQUIRED
	PullRequest *WebhookPullRequestReviewCommentCreatedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedComment - The comment [https://docs.github.com/rest/reference/pulls#comments] itself.
type WebhookPullRequestReviewCommentCreatedComment struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewCommentCreatedCommentAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The text of the comment.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The SHA of the commit to which the comment applies.
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The diff of the line that the comment refers to.
	DiffHunk *string `json:"diff_hunk,omitempty"`

	// REQUIRED; HTML URL for the pull request review comment.
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The ID of the pull request review comment.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	Line *int32 `json:"line,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewCommentCreatedCommentLinks `json:"_links,omitempty"`

	// REQUIRED; The node ID of the pull request review comment.
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The SHA of the original commit to which the comment applies.
	OriginalCommitID *string `json:"original_commit_id,omitempty"`

	// REQUIRED; The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	OriginalLine *int32 `json:"original_line,omitempty"`

	// REQUIRED; The index of the original line in the diff to which the comment applies.
	OriginalPosition *int32 `json:"original_position,omitempty"`

	// REQUIRED; The first line of the range for a multi-line comment.
	OriginalStartLine *int32 `json:"original_start_line,omitempty"`

	// REQUIRED; The relative path of the file to which the comment applies.
	Path *string `json:"path,omitempty"`

	// REQUIRED; The line index in the diff to which the comment applies.
	Position *int32 `json:"position,omitempty"`

	// REQUIRED; The ID of the pull request review to which the comment belongs.
	PullRequestReviewID *int32 `json:"pull_request_review_id,omitempty"`

	// REQUIRED; URL for the pull request that the review comment belongs to.
	PullRequestURL *string `json:"pull_request_url,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookPullRequestReviewCommentCreatedCommentReactions `json:"reactions,omitempty"`

	// REQUIRED; The side of the first line of the range for a multi-line comment.
	Side *WebhookPullRequestReviewCommentCreatedCommentSide `json:"side,omitempty"`

	// REQUIRED; The first line of the range for a multi-line comment.
	StartLine *int32 `json:"start_line,omitempty"`

	// REQUIRED; The side of the first line of the range for a multi-line comment.
	StartSide *WebhookPullRequestReviewCommentCreatedCommentStartSide `json:"start_side,omitempty"`

	// REQUIRED; URL for the pull request review comment
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewCommentCreatedCommentUser `json:"user,omitempty"`

	// The comment ID to reply to.
	InReplyToID *int32 `json:"in_reply_to_id,omitempty"`
}

type WebhookPullRequestReviewCommentCreatedCommentLinks struct {
	// REQUIRED; Link
	HTML *WebhookPullRequestReviewCommentCreatedCommentLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	PullRequest *WebhookPullRequestReviewCommentCreatedCommentLinksPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReviewCommentCreatedCommentLinksSelf `json:"self,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedCommentLinksHTML - Link
type WebhookPullRequestReviewCommentCreatedCommentLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedCommentLinksPullRequest - Link
type WebhookPullRequestReviewCommentCreatedCommentLinksPullRequest struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedCommentLinksSelf - Link
type WebhookPullRequestReviewCommentCreatedCommentLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedCommentReactions - Reactions
type WebhookPullRequestReviewCommentCreatedCommentReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedCommentUser - User
type WebhookPullRequestReviewCommentCreatedCommentUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentCreatedCommentUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentCreatedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestReviewCommentCreatedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestReviewCommentCreatedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *string `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestReviewCommentCreatedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestReviewCommentCreatedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewCommentCreatedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *string `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestReviewCommentCreatedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestReviewCommentCreatedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED
	State *WebhookPullRequestReviewCommentCreatedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewCommentCreatedPullRequestUser `json:"user,omitempty"`

	// The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestReviewCommentCreatedPullRequestAutoMerge `json:"auto_merge,omitempty"`
	Draft *bool `json:"draft,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestAssignee - User
type WebhookPullRequestReviewCommentCreatedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentCreatedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItem - User
type WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestReviewCommentCreatedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentCreatedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewCommentCreatedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewCommentCreatedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestBaseRepo - A git repository
type WebhookPullRequestReviewCommentCreatedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoLicense - License
type WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwner - User
type WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestReviewCommentCreatedPullRequestBaseUser - User
type WebhookPullRequestReviewCommentCreatedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentCreatedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentCreatedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewCommentCreatedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewCommentCreatedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestHeadRepo - A git repository
type WebhookPullRequestReviewCommentCreatedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`

	// Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoLicense - License
type WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwner - User
type WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestReviewCommentCreatedPullRequestHeadUser - User
type WebhookPullRequestReviewCommentCreatedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentCreatedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestLabelsItem - Label
type WebhookPullRequestReviewCommentCreatedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentCreatedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestReviewCommentCreatedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestReviewCommentCreatedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestReviewCommentCreatedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestReviewCommentCreatedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestReviewCommentCreatedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestReviewCommentCreatedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReviewCommentCreatedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestReviewCommentCreatedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestLinksComments - Link
type WebhookPullRequestReviewCommentCreatedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestLinksCommits - Link
type WebhookPullRequestReviewCommentCreatedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestLinksHTML - Link
type WebhookPullRequestReviewCommentCreatedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestLinksIssue - Link
type WebhookPullRequestReviewCommentCreatedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestLinksReviewComment - Link
type WebhookPullRequestReviewCommentCreatedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestLinksReviewComments - Link
type WebhookPullRequestReviewCommentCreatedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestLinksSelf - Link
type WebhookPullRequestReviewCommentCreatedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestLinksStatuses - Link
type WebhookPullRequestReviewCommentCreatedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestReviewCommentCreatedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestReviewCommentCreatedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreator - User
type WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentCreatedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions
// on specified repositories.
type WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2436 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentCreatedPullRequestUser - User
type WebhookPullRequestReviewCommentCreatedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentCreatedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentDeleted - pullrequestreview_comment deleted event
type WebhookPullRequestReviewCommentDeleted struct {
	// REQUIRED
	Action *WebhookPullRequestReviewCommentDeletedAction `json:"action,omitempty"`

	// REQUIRED; The comment [https://docs.github.com/rest/reference/pulls#comments] itself.
	Comment *WebhookPullRequestReviewCommentDeletedComment `json:"comment,omitempty"`

	// REQUIRED
	PullRequest *WebhookPullRequestReviewCommentDeletedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedComment - The comment [https://docs.github.com/rest/reference/pulls#comments] itself.
type WebhookPullRequestReviewCommentDeletedComment struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewCommentDeletedCommentAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The text of the comment.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The SHA of the commit to which the comment applies.
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The diff of the line that the comment refers to.
	DiffHunk *string `json:"diff_hunk,omitempty"`

	// REQUIRED; HTML URL for the pull request review comment.
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The ID of the pull request review comment.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	Line *int32 `json:"line,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewCommentDeletedCommentLinks `json:"_links,omitempty"`

	// REQUIRED; The node ID of the pull request review comment.
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The SHA of the original commit to which the comment applies.
	OriginalCommitID *string `json:"original_commit_id,omitempty"`

	// REQUIRED; The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	OriginalLine *int32 `json:"original_line,omitempty"`

	// REQUIRED; The index of the original line in the diff to which the comment applies.
	OriginalPosition *int32 `json:"original_position,omitempty"`

	// REQUIRED; The first line of the range for a multi-line comment.
	OriginalStartLine *int32 `json:"original_start_line,omitempty"`

	// REQUIRED; The relative path of the file to which the comment applies.
	Path *string `json:"path,omitempty"`

	// REQUIRED; The line index in the diff to which the comment applies.
	Position *int32 `json:"position,omitempty"`

	// REQUIRED; The ID of the pull request review to which the comment belongs.
	PullRequestReviewID *int32 `json:"pull_request_review_id,omitempty"`

	// REQUIRED; URL for the pull request that the review comment belongs to.
	PullRequestURL *string `json:"pull_request_url,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookPullRequestReviewCommentDeletedCommentReactions `json:"reactions,omitempty"`

	// REQUIRED; The side of the first line of the range for a multi-line comment.
	Side *WebhookPullRequestReviewCommentDeletedCommentSide `json:"side,omitempty"`

	// REQUIRED; The first line of the range for a multi-line comment.
	StartLine *int32 `json:"start_line,omitempty"`

	// REQUIRED; The side of the first line of the range for a multi-line comment.
	StartSide *WebhookPullRequestReviewCommentDeletedCommentStartSide `json:"start_side,omitempty"`

	// REQUIRED; URL for the pull request review comment
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewCommentDeletedCommentUser `json:"user,omitempty"`

	// The comment ID to reply to.
	InReplyToID *int32 `json:"in_reply_to_id,omitempty"`
}

type WebhookPullRequestReviewCommentDeletedCommentLinks struct {
	// REQUIRED; Link
	HTML *WebhookPullRequestReviewCommentDeletedCommentLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	PullRequest *WebhookPullRequestReviewCommentDeletedCommentLinksPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReviewCommentDeletedCommentLinksSelf `json:"self,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedCommentLinksHTML - Link
type WebhookPullRequestReviewCommentDeletedCommentLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedCommentLinksPullRequest - Link
type WebhookPullRequestReviewCommentDeletedCommentLinksPullRequest struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedCommentLinksSelf - Link
type WebhookPullRequestReviewCommentDeletedCommentLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedCommentReactions - Reactions
type WebhookPullRequestReviewCommentDeletedCommentReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedCommentUser - User
type WebhookPullRequestReviewCommentDeletedCommentUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentDeletedCommentUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentDeletedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestReviewCommentDeletedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestReviewCommentDeletedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *string `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestReviewCommentDeletedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestReviewCommentDeletedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewCommentDeletedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *string `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestReviewCommentDeletedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestReviewCommentDeletedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED
	State *WebhookPullRequestReviewCommentDeletedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewCommentDeletedPullRequestUser `json:"user,omitempty"`

	// The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestReviewCommentDeletedPullRequestAutoMerge `json:"auto_merge,omitempty"`
	Draft *bool `json:"draft,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestAssignee - User
type WebhookPullRequestReviewCommentDeletedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentDeletedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItem - User
type WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestReviewCommentDeletedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentDeletedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewCommentDeletedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewCommentDeletedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestBaseRepo - A git repository
type WebhookPullRequestReviewCommentDeletedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoLicense - License
type WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwner - User
type WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestReviewCommentDeletedPullRequestBaseUser - User
type WebhookPullRequestReviewCommentDeletedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentDeletedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentDeletedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewCommentDeletedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewCommentDeletedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestHeadRepo - A git repository
type WebhookPullRequestReviewCommentDeletedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoLicense - License
type WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwner - User
type WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestReviewCommentDeletedPullRequestHeadUser - User
type WebhookPullRequestReviewCommentDeletedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentDeletedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestLabelsItem - Label
type WebhookPullRequestReviewCommentDeletedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentDeletedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestReviewCommentDeletedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestReviewCommentDeletedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestReviewCommentDeletedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestReviewCommentDeletedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestReviewCommentDeletedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestReviewCommentDeletedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReviewCommentDeletedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestReviewCommentDeletedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestLinksComments - Link
type WebhookPullRequestReviewCommentDeletedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestLinksCommits - Link
type WebhookPullRequestReviewCommentDeletedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestLinksHTML - Link
type WebhookPullRequestReviewCommentDeletedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestLinksIssue - Link
type WebhookPullRequestReviewCommentDeletedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestLinksReviewComment - Link
type WebhookPullRequestReviewCommentDeletedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestLinksReviewComments - Link
type WebhookPullRequestReviewCommentDeletedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestLinksSelf - Link
type WebhookPullRequestReviewCommentDeletedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestLinksStatuses - Link
type WebhookPullRequestReviewCommentDeletedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestReviewCommentDeletedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestReviewCommentDeletedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreator - User
type WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentDeletedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions
// on specified repositories.
type WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2470 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentDeletedPullRequestUser - User
type WebhookPullRequestReviewCommentDeletedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentDeletedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentEdited - pullrequestreview_comment edited event
type WebhookPullRequestReviewCommentEdited struct {
	// REQUIRED
	Action *WebhookPullRequestReviewCommentEditedAction `json:"action,omitempty"`

	// REQUIRED; The changes to the comment.
	Changes *WebhookPullRequestReviewCommentEditedChanges `json:"changes,omitempty"`

	// REQUIRED; The comment [https://docs.github.com/rest/reference/pulls#comments] itself.
	Comment *WebhookPullRequestReviewCommentEditedComment `json:"comment,omitempty"`

	// REQUIRED
	PullRequest *WebhookPullRequestReviewCommentEditedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPullRequestReviewCommentEditedChanges - The changes to the comment.
type WebhookPullRequestReviewCommentEditedChanges struct {
	Body *WebhookPullRequestReviewCommentEditedChangesBody `json:"body,omitempty"`
}

type WebhookPullRequestReviewCommentEditedChangesBody struct {
	// REQUIRED; The previous version of the body.
	From *string `json:"from,omitempty"`
}

// WebhookPullRequestReviewCommentEditedComment - The comment [https://docs.github.com/rest/reference/pulls#comments] itself.
type WebhookPullRequestReviewCommentEditedComment struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewCommentEditedCommentAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The text of the comment.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The SHA of the commit to which the comment applies.
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The diff of the line that the comment refers to.
	DiffHunk *string `json:"diff_hunk,omitempty"`

	// REQUIRED; HTML URL for the pull request review comment.
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The ID of the pull request review comment.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	Line *int32 `json:"line,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewCommentEditedCommentLinks `json:"_links,omitempty"`

	// REQUIRED; The node ID of the pull request review comment.
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The SHA of the original commit to which the comment applies.
	OriginalCommitID *string `json:"original_commit_id,omitempty"`

	// REQUIRED; The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	OriginalLine *int32 `json:"original_line,omitempty"`

	// REQUIRED; The index of the original line in the diff to which the comment applies.
	OriginalPosition *int32 `json:"original_position,omitempty"`

	// REQUIRED; The first line of the range for a multi-line comment.
	OriginalStartLine *int32 `json:"original_start_line,omitempty"`

	// REQUIRED; The relative path of the file to which the comment applies.
	Path *string `json:"path,omitempty"`

	// REQUIRED; The line index in the diff to which the comment applies.
	Position *int32 `json:"position,omitempty"`

	// REQUIRED; The ID of the pull request review to which the comment belongs.
	PullRequestReviewID *int32 `json:"pull_request_review_id,omitempty"`

	// REQUIRED; URL for the pull request that the review comment belongs to.
	PullRequestURL *string `json:"pull_request_url,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookPullRequestReviewCommentEditedCommentReactions `json:"reactions,omitempty"`

	// REQUIRED; The side of the first line of the range for a multi-line comment.
	Side *WebhookPullRequestReviewCommentEditedCommentSide `json:"side,omitempty"`

	// REQUIRED; The first line of the range for a multi-line comment.
	StartLine *int32 `json:"start_line,omitempty"`

	// REQUIRED; The side of the first line of the range for a multi-line comment.
	StartSide *WebhookPullRequestReviewCommentEditedCommentStartSide `json:"start_side,omitempty"`

	// REQUIRED; URL for the pull request review comment
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewCommentEditedCommentUser `json:"user,omitempty"`

	// The comment ID to reply to.
	InReplyToID *int32 `json:"in_reply_to_id,omitempty"`
}

type WebhookPullRequestReviewCommentEditedCommentLinks struct {
	// REQUIRED; Link
	HTML *WebhookPullRequestReviewCommentEditedCommentLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	PullRequest *WebhookPullRequestReviewCommentEditedCommentLinksPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReviewCommentEditedCommentLinksSelf `json:"self,omitempty"`
}

// WebhookPullRequestReviewCommentEditedCommentLinksHTML - Link
type WebhookPullRequestReviewCommentEditedCommentLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentEditedCommentLinksPullRequest - Link
type WebhookPullRequestReviewCommentEditedCommentLinksPullRequest struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentEditedCommentLinksSelf - Link
type WebhookPullRequestReviewCommentEditedCommentLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentEditedCommentReactions - Reactions
type WebhookPullRequestReviewCommentEditedCommentReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentEditedCommentUser - User
type WebhookPullRequestReviewCommentEditedCommentUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentEditedCommentUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentEditedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestReviewCommentEditedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestReviewCommentEditedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestReviewCommentEditedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *string `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestReviewCommentEditedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestReviewCommentEditedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewCommentEditedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *string `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestReviewCommentEditedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestReviewCommentEditedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED
	State *WebhookPullRequestReviewCommentEditedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewCommentEditedPullRequestUser `json:"user,omitempty"`

	// The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestReviewCommentEditedPullRequestAutoMerge `json:"auto_merge,omitempty"`
	Draft *bool `json:"draft,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestAssignee - User
type WebhookPullRequestReviewCommentEditedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentEditedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestAssigneesItem - User
type WebhookPullRequestReviewCommentEditedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentEditedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestReviewCommentEditedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentEditedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewCommentEditedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewCommentEditedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestBaseRepo - A git repository
type WebhookPullRequestReviewCommentEditedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewCommentEditedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewCommentEditedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewCommentEditedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewCommentEditedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewCommentEditedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestReviewCommentEditedPullRequestBaseRepoLicense - License
type WebhookPullRequestReviewCommentEditedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwner - User
type WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentEditedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewCommentEditedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestReviewCommentEditedPullRequestBaseUser - User
type WebhookPullRequestReviewCommentEditedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentEditedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentEditedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewCommentEditedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewCommentEditedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestHeadRepo - A git repository
type WebhookPullRequestReviewCommentEditedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewCommentEditedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewCommentEditedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewCommentEditedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewCommentEditedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewCommentEditedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestReviewCommentEditedPullRequestHeadRepoLicense - License
type WebhookPullRequestReviewCommentEditedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwner - User
type WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentEditedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewCommentEditedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestReviewCommentEditedPullRequestHeadUser - User
type WebhookPullRequestReviewCommentEditedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentEditedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestLabelsItem - Label
type WebhookPullRequestReviewCommentEditedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentEditedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestReviewCommentEditedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestReviewCommentEditedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestReviewCommentEditedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestReviewCommentEditedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestReviewCommentEditedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestReviewCommentEditedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReviewCommentEditedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestReviewCommentEditedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestLinksComments - Link
type WebhookPullRequestReviewCommentEditedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestLinksCommits - Link
type WebhookPullRequestReviewCommentEditedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestLinksHTML - Link
type WebhookPullRequestReviewCommentEditedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestLinksIssue - Link
type WebhookPullRequestReviewCommentEditedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestLinksReviewComment - Link
type WebhookPullRequestReviewCommentEditedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestLinksReviewComments - Link
type WebhookPullRequestReviewCommentEditedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestLinksSelf - Link
type WebhookPullRequestReviewCommentEditedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestLinksStatuses - Link
type WebhookPullRequestReviewCommentEditedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestReviewCommentEditedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestReviewCommentEditedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreator - User
type WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentEditedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions
// on specified repositories.
type WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2504 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewCommentEditedPullRequestUser - User
type WebhookPullRequestReviewCommentEditedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewCommentEditedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewDismissed - pullrequestreview dismissed event
type WebhookPullRequestReviewDismissed struct {
	// REQUIRED
	Action *WebhookPullRequestReviewDismissedAction `json:"action,omitempty"`

	// REQUIRED; Simple Pull Request
	PullRequest *WebhookPullRequestReviewDismissedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; The review that was affected.
	Review *WebhookPullRequestReviewDismissedReview `json:"review,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequest - Simple Pull Request
type WebhookPullRequestReviewDismissedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestReviewDismissedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestReviewDismissedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestReviewDismissedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewDismissedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestReviewDismissedPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestReviewDismissedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *string `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestReviewDismissedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestReviewDismissedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewDismissedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *string `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestReviewDismissedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestReviewDismissedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED
	State *WebhookPullRequestReviewDismissedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewDismissedPullRequestUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestAssignee - User
type WebhookPullRequestReviewDismissedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewDismissedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestAssigneesItem - User
type WebhookPullRequestReviewDismissedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewDismissedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestReviewDismissedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestReviewDismissedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewDismissedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewDismissedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewDismissedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestBaseRepo - A git repository
type WebhookPullRequestReviewDismissedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewDismissedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewDismissedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewDismissedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewDismissedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewDismissedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewDismissedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewDismissedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestReviewDismissedPullRequestBaseRepoLicense - License
type WebhookPullRequestReviewDismissedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestBaseRepoOwner - User
type WebhookPullRequestReviewDismissedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewDismissedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewDismissedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestReviewDismissedPullRequestBaseUser - User
type WebhookPullRequestReviewDismissedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewDismissedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewDismissedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewDismissedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewDismissedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestHeadRepo - A git repository
type WebhookPullRequestReviewDismissedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewDismissedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewDismissedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewDismissedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewDismissedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewDismissedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewDismissedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewDismissedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestReviewDismissedPullRequestHeadRepoLicense - License
type WebhookPullRequestReviewDismissedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestHeadRepoOwner - User
type WebhookPullRequestReviewDismissedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewDismissedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewDismissedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestReviewDismissedPullRequestHeadUser - User
type WebhookPullRequestReviewDismissedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewDismissedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestLabelsItem - Label
type WebhookPullRequestReviewDismissedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewDismissedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestReviewDismissedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestReviewDismissedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestReviewDismissedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestReviewDismissedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestReviewDismissedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestReviewDismissedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReviewDismissedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestReviewDismissedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestLinksComments - Link
type WebhookPullRequestReviewDismissedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestLinksCommits - Link
type WebhookPullRequestReviewDismissedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestLinksHTML - Link
type WebhookPullRequestReviewDismissedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestLinksIssue - Link
type WebhookPullRequestReviewDismissedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestLinksReviewComment - Link
type WebhookPullRequestReviewDismissedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestLinksReviewComments - Link
type WebhookPullRequestReviewDismissedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestLinksSelf - Link
type WebhookPullRequestReviewDismissedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestLinksStatuses - Link
type WebhookPullRequestReviewDismissedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestReviewDismissedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestReviewDismissedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestReviewDismissedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestMilestoneCreator - User
type WebhookPullRequestReviewDismissedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewDismissedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewDismissedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions
// on specified repositories.
type WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2534 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewDismissedPullRequestUser - User
type WebhookPullRequestReviewDismissedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewDismissedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewDismissedReview - The review that was affected.
type WebhookPullRequestReviewDismissedReview struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewDismissedReviewAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The text of the review.
	Body *string `json:"body,omitempty"`

	// REQUIRED; A commit SHA for the review.
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the review
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewDismissedReviewLinks `json:"_links,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PullRequestURL *string `json:"pull_request_url,omitempty"`

	// REQUIRED
	State *WebhookPullRequestReviewDismissedReviewState `json:"state,omitempty"`

	// REQUIRED
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewDismissedReviewUser `json:"user,omitempty"`
}

type WebhookPullRequestReviewDismissedReviewLinks struct {
	// REQUIRED; Link
	HTML *WebhookPullRequestReviewDismissedReviewLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	PullRequest *WebhookPullRequestReviewDismissedReviewLinksPullRequest `json:"pull_request,omitempty"`
}

// WebhookPullRequestReviewDismissedReviewLinksHTML - Link
type WebhookPullRequestReviewDismissedReviewLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewDismissedReviewLinksPullRequest - Link
type WebhookPullRequestReviewDismissedReviewLinksPullRequest struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewDismissedReviewUser - User
type WebhookPullRequestReviewDismissedReviewUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewDismissedReviewUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewEdited - pullrequestreview edited event
type WebhookPullRequestReviewEdited struct {
	// REQUIRED
	Action *WebhookPullRequestReviewEditedAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookPullRequestReviewEditedChanges `json:"changes,omitempty"`

	// REQUIRED; Simple Pull Request
	PullRequest *WebhookPullRequestReviewEditedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; The review that was affected.
	Review *WebhookPullRequestReviewEditedReview `json:"review,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookPullRequestReviewEditedChanges struct {
	Body *WebhookPullRequestReviewEditedChangesBody `json:"body,omitempty"`
}

type WebhookPullRequestReviewEditedChangesBody struct {
	// REQUIRED; The previous version of the body if the action was edited.
	From *string `json:"from,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequest - Simple Pull Request
type WebhookPullRequestReviewEditedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestReviewEditedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestReviewEditedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestReviewEditedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewEditedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestReviewEditedPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestReviewEditedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *string `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestReviewEditedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestReviewEditedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewEditedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *string `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestReviewEditedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestReviewEditedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestReviewEditedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED
	State *WebhookPullRequestReviewEditedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewEditedPullRequestUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestAssignee - User
type WebhookPullRequestReviewEditedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewEditedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestAssigneesItem - User
type WebhookPullRequestReviewEditedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewEditedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestReviewEditedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestReviewEditedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewEditedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewEditedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewEditedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestBaseRepo - A git repository
type WebhookPullRequestReviewEditedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewEditedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewEditedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewEditedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewEditedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewEditedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewEditedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`
}

type WebhookPullRequestReviewEditedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestReviewEditedPullRequestBaseRepoLicense - License
type WebhookPullRequestReviewEditedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestBaseRepoOwner - User
type WebhookPullRequestReviewEditedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewEditedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewEditedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewEditedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestReviewEditedPullRequestBaseUser - User
type WebhookPullRequestReviewEditedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewEditedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewEditedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewEditedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewEditedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestHeadRepo - A git repository
type WebhookPullRequestReviewEditedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewEditedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewEditedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewEditedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewEditedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewEditedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewEditedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`
}

type WebhookPullRequestReviewEditedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestReviewEditedPullRequestHeadRepoLicense - License
type WebhookPullRequestReviewEditedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestHeadRepoOwner - User
type WebhookPullRequestReviewEditedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewEditedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewEditedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewEditedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestReviewEditedPullRequestHeadUser - User
type WebhookPullRequestReviewEditedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewEditedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestLabelsItem - Label
type WebhookPullRequestReviewEditedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewEditedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestReviewEditedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestReviewEditedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestReviewEditedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestReviewEditedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestReviewEditedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestReviewEditedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReviewEditedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestReviewEditedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestLinksComments - Link
type WebhookPullRequestReviewEditedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestLinksCommits - Link
type WebhookPullRequestReviewEditedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestLinksHTML - Link
type WebhookPullRequestReviewEditedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestLinksIssue - Link
type WebhookPullRequestReviewEditedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestLinksReviewComment - Link
type WebhookPullRequestReviewEditedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestLinksReviewComments - Link
type WebhookPullRequestReviewEditedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestLinksSelf - Link
type WebhookPullRequestReviewEditedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestLinksStatuses - Link
type WebhookPullRequestReviewEditedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestReviewEditedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestReviewEditedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestReviewEditedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestMilestoneCreator - User
type WebhookPullRequestReviewEditedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewEditedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewEditedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestReviewEditedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions on
// specified repositories.
type WebhookPullRequestReviewEditedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2559 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewEditedPullRequestUser - User
type WebhookPullRequestReviewEditedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewEditedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewEditedReview - The review that was affected.
type WebhookPullRequestReviewEditedReview struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewEditedReviewAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The text of the review.
	Body *string `json:"body,omitempty"`

	// REQUIRED; A commit SHA for the review.
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the review
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewEditedReviewLinks `json:"_links,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PullRequestURL *string `json:"pull_request_url,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewEditedReviewUser `json:"user,omitempty"`
}

type WebhookPullRequestReviewEditedReviewLinks struct {
	// REQUIRED; Link
	HTML *WebhookPullRequestReviewEditedReviewLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	PullRequest *WebhookPullRequestReviewEditedReviewLinksPullRequest `json:"pull_request,omitempty"`
}

// WebhookPullRequestReviewEditedReviewLinksHTML - Link
type WebhookPullRequestReviewEditedReviewLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewEditedReviewLinksPullRequest - Link
type WebhookPullRequestReviewEditedReviewLinksPullRequest struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewEditedReviewUser - User
type WebhookPullRequestReviewEditedReviewUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewEditedReviewUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved - pullrequest reviewrequest_removed event
type WebhookPullRequestReviewRequestRemoved struct {
}

// WebhookPullRequestReviewRequestRemoved0PullRequest - Pull Request
type WebhookPullRequestReviewRequestRemoved0PullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestReviewRequestRemoved0PullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestReviewRequestRemoved0PullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestReviewRequestRemoved0PullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestReviewRequestRemoved0PullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestReviewRequestRemoved0PullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestReviewRequestRemoved0PullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewRequestRemoved0PullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestReviewRequestRemoved0PullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestReviewRequestRemoved0PullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestReviewRequestRemoved0PullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestReviewRequestRemoved0PullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewRequestRemoved0PullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestReviewRequestRemoved0PullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestAssignee - User
type WebhookPullRequestReviewRequestRemoved0PullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved0PullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestAssigneesItem - User
type WebhookPullRequestReviewRequestRemoved0PullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestReviewRequestRemoved0PullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledBy - User
type WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved0PullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewRequestRemoved0PullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepo - A git repository
type WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title.
	SquashMergeCommitTitle *WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoLicense - License
type WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwner - User
type WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestReviewRequestRemoved0PullRequestBaseUser - User
type WebhookPullRequestReviewRequestRemoved0PullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved0PullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved0PullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewRequestRemoved0PullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepo - A git repository
type WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoLicense - License
type WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwner - User
type WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestReviewRequestRemoved0PullRequestHeadUser - User
type WebhookPullRequestReviewRequestRemoved0PullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved0PullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestLabelsItem - Label
type WebhookPullRequestReviewRequestRemoved0PullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved0PullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestReviewRequestRemoved0PullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestReviewRequestRemoved0PullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestReviewRequestRemoved0PullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestReviewRequestRemoved0PullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestReviewRequestRemoved0PullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestReviewRequestRemoved0PullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReviewRequestRemoved0PullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestReviewRequestRemoved0PullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestLinksComments - Link
type WebhookPullRequestReviewRequestRemoved0PullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestLinksCommits - Link
type WebhookPullRequestReviewRequestRemoved0PullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestLinksHTML - Link
type WebhookPullRequestReviewRequestRemoved0PullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestLinksIssue - Link
type WebhookPullRequestReviewRequestRemoved0PullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestLinksReviewComment - Link
type WebhookPullRequestReviewRequestRemoved0PullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestLinksReviewComments - Link
type WebhookPullRequestReviewRequestRemoved0PullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestLinksSelf - Link
type WebhookPullRequestReviewRequestRemoved0PullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestLinksStatuses - Link
type WebhookPullRequestReviewRequestRemoved0PullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestMergedBy - User
type WebhookPullRequestReviewRequestRemoved0PullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved0PullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestReviewRequestRemoved0PullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreator - User
type WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved0PullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestReviewRequestRemoved0PullRequestRequestedTeamsItem - Groups of organization members that gives permissions
// on specified repositories.
type WebhookPullRequestReviewRequestRemoved0PullRequestRequestedTeamsItem struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemParent `json:"parent,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0PullRequestUser - User
type WebhookPullRequestReviewRequestRemoved0PullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved0PullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved0RequestedReviewer - User
type WebhookPullRequestReviewRequestRemoved0RequestedReviewer struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved0RequestedReviewerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequest - Pull Request
type WebhookPullRequestReviewRequestRemoved1PullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestReviewRequestRemoved1PullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestReviewRequestRemoved1PullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestReviewRequestRemoved1PullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestReviewRequestRemoved1PullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestReviewRequestRemoved1PullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestReviewRequestRemoved1PullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewRequestRemoved1PullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestReviewRequestRemoved1PullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestReviewRequestRemoved1PullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestReviewRequestRemoved1PullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestReviewRequestRemoved1PullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewRequestRemoved1PullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestReviewRequestRemoved1PullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestAssignee - User
type WebhookPullRequestReviewRequestRemoved1PullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved1PullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestAssigneesItem - User
type WebhookPullRequestReviewRequestRemoved1PullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestReviewRequestRemoved1PullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledBy - User
type WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved1PullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewRequestRemoved1PullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepo - A git repository
type WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoLicense - License
type WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwner - User
type WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestReviewRequestRemoved1PullRequestBaseUser - User
type WebhookPullRequestReviewRequestRemoved1PullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved1PullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved1PullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewRequestRemoved1PullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepo - A git repository
type WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoLicense - License
type WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwner - User
type WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestReviewRequestRemoved1PullRequestHeadUser - User
type WebhookPullRequestReviewRequestRemoved1PullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved1PullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestLabelsItem - Label
type WebhookPullRequestReviewRequestRemoved1PullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved1PullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestReviewRequestRemoved1PullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestReviewRequestRemoved1PullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestReviewRequestRemoved1PullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestReviewRequestRemoved1PullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestReviewRequestRemoved1PullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestReviewRequestRemoved1PullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReviewRequestRemoved1PullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestReviewRequestRemoved1PullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestLinksComments - Link
type WebhookPullRequestReviewRequestRemoved1PullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestLinksCommits - Link
type WebhookPullRequestReviewRequestRemoved1PullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestLinksHTML - Link
type WebhookPullRequestReviewRequestRemoved1PullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestLinksIssue - Link
type WebhookPullRequestReviewRequestRemoved1PullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestLinksReviewComment - Link
type WebhookPullRequestReviewRequestRemoved1PullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestLinksReviewComments - Link
type WebhookPullRequestReviewRequestRemoved1PullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestLinksSelf - Link
type WebhookPullRequestReviewRequestRemoved1PullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestLinksStatuses - Link
type WebhookPullRequestReviewRequestRemoved1PullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestMergedBy - User
type WebhookPullRequestReviewRequestRemoved1PullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved1PullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestReviewRequestRemoved1PullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreator - User
type WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved1PullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestReviewRequestRemoved1PullRequestRequestedTeamsItem - Groups of organization members that gives permissions
// on specified repositories.
type WebhookPullRequestReviewRequestRemoved1PullRequestRequestedTeamsItem struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemParent `json:"parent,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1PullRequestUser - User
type WebhookPullRequestReviewRequestRemoved1PullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestRemoved1PullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequestRemoved1RequestedTeam - Groups of organization members that gives permissions on specified
// repositories.
type WebhookPullRequestReviewRequestRemoved1RequestedTeam struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *WebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacy `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Parent *WebhookPullRequestReviewRequestRemoved1RequestedTeamParent `json:"parent,omitempty"`
}

type WebhookPullRequestReviewRequestRemoved1RequestedTeamParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *WebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacy `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2592 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2624 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested - pullrequest reviewrequested event
type WebhookPullRequestReviewRequested struct {
}

// WebhookPullRequestReviewRequested0PullRequest - Pull Request
type WebhookPullRequestReviewRequested0PullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestReviewRequested0PullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestReviewRequested0PullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestReviewRequested0PullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewRequested0PullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestReviewRequested0PullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestReviewRequested0PullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestReviewRequested0PullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestReviewRequested0PullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewRequested0PullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestReviewRequested0PullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestReviewRequested0PullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestReviewRequested0PullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestReviewRequested0PullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewRequested0PullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestReviewRequested0PullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestAssignee - User
type WebhookPullRequestReviewRequested0PullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested0PullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestAssigneesItem - User
type WebhookPullRequestReviewRequested0PullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestReviewRequested0PullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestReviewRequested0PullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledBy - User
type WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequested0PullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewRequested0PullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewRequested0PullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestBaseRepo - A git repository
type WebhookPullRequestReviewRequested0PullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewRequested0PullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewRequested0PullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewRequested0PullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewRequested0PullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewRequested0PullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewRequested0PullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewRequested0PullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestReviewRequested0PullRequestBaseRepoLicense - License
type WebhookPullRequestReviewRequested0PullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestBaseRepoOwner - User
type WebhookPullRequestReviewRequested0PullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequested0PullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewRequested0PullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestReviewRequested0PullRequestBaseUser - User
type WebhookPullRequestReviewRequested0PullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested0PullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequested0PullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewRequested0PullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewRequested0PullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestHeadRepo - A git repository
type WebhookPullRequestReviewRequested0PullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewRequested0PullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewRequested0PullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewRequested0PullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewRequested0PullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewRequested0PullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewRequested0PullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewRequested0PullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestReviewRequested0PullRequestHeadRepoLicense - License
type WebhookPullRequestReviewRequested0PullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestHeadRepoOwner - User
type WebhookPullRequestReviewRequested0PullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequested0PullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewRequested0PullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestReviewRequested0PullRequestHeadUser - User
type WebhookPullRequestReviewRequested0PullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested0PullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestLabelsItem - Label
type WebhookPullRequestReviewRequested0PullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequested0PullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestReviewRequested0PullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestReviewRequested0PullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestReviewRequested0PullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestReviewRequested0PullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestReviewRequested0PullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestReviewRequested0PullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReviewRequested0PullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestReviewRequested0PullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestLinksComments - Link
type WebhookPullRequestReviewRequested0PullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestLinksCommits - Link
type WebhookPullRequestReviewRequested0PullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestLinksHTML - Link
type WebhookPullRequestReviewRequested0PullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestLinksIssue - Link
type WebhookPullRequestReviewRequested0PullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestLinksReviewComment - Link
type WebhookPullRequestReviewRequested0PullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestLinksReviewComments - Link
type WebhookPullRequestReviewRequested0PullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestLinksSelf - Link
type WebhookPullRequestReviewRequested0PullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestLinksStatuses - Link
type WebhookPullRequestReviewRequested0PullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestMergedBy - User
type WebhookPullRequestReviewRequested0PullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested0PullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestReviewRequested0PullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestReviewRequested0PullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestReviewRequested0PullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestMilestoneCreator - User
type WebhookPullRequestReviewRequested0PullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequested0PullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestReviewRequested0PullRequestRequestedTeamsItem - Groups of organization members that gives permissions
// on specified repositories.
type WebhookPullRequestReviewRequested0PullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested0PullRequestUser - User
type WebhookPullRequestReviewRequested0PullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested0PullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested0RequestedReviewer - User
type WebhookPullRequestReviewRequested0RequestedReviewer struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested0RequestedReviewerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequest - Pull Request
type WebhookPullRequestReviewRequested1PullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestReviewRequested1PullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestReviewRequested1PullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestReviewRequested1PullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewRequested1PullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestReviewRequested1PullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestReviewRequested1PullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestReviewRequested1PullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestReviewRequested1PullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewRequested1PullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestReviewRequested1PullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestReviewRequested1PullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestReviewRequested1PullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestReviewRequested1PullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewRequested1PullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestReviewRequested1PullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestAssignee - User
type WebhookPullRequestReviewRequested1PullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested1PullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestAssigneesItem - User
type WebhookPullRequestReviewRequested1PullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestReviewRequested1PullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestReviewRequested1PullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledBy - User
type WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequested1PullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewRequested1PullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewRequested1PullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestBaseRepo - A git repository
type WebhookPullRequestReviewRequested1PullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewRequested1PullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewRequested1PullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewRequested1PullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewRequested1PullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewRequested1PullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewRequested1PullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewRequested1PullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestReviewRequested1PullRequestBaseRepoLicense - License
type WebhookPullRequestReviewRequested1PullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestBaseRepoOwner - User
type WebhookPullRequestReviewRequested1PullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequested1PullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewRequested1PullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestReviewRequested1PullRequestBaseUser - User
type WebhookPullRequestReviewRequested1PullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested1PullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequested1PullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewRequested1PullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewRequested1PullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestHeadRepo - A git repository
type WebhookPullRequestReviewRequested1PullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewRequested1PullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewRequested1PullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewRequested1PullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewRequested1PullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewRequested1PullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewRequested1PullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewRequested1PullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestReviewRequested1PullRequestHeadRepoLicense - License
type WebhookPullRequestReviewRequested1PullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestHeadRepoOwner - User
type WebhookPullRequestReviewRequested1PullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequested1PullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewRequested1PullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestReviewRequested1PullRequestHeadUser - User
type WebhookPullRequestReviewRequested1PullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested1PullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestLabelsItem - Label
type WebhookPullRequestReviewRequested1PullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequested1PullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestReviewRequested1PullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestReviewRequested1PullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestReviewRequested1PullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestReviewRequested1PullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestReviewRequested1PullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestReviewRequested1PullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReviewRequested1PullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestReviewRequested1PullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestLinksComments - Link
type WebhookPullRequestReviewRequested1PullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestLinksCommits - Link
type WebhookPullRequestReviewRequested1PullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestLinksHTML - Link
type WebhookPullRequestReviewRequested1PullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestLinksIssue - Link
type WebhookPullRequestReviewRequested1PullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestLinksReviewComment - Link
type WebhookPullRequestReviewRequested1PullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestLinksReviewComments - Link
type WebhookPullRequestReviewRequested1PullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestLinksSelf - Link
type WebhookPullRequestReviewRequested1PullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestLinksStatuses - Link
type WebhookPullRequestReviewRequested1PullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestMergedBy - User
type WebhookPullRequestReviewRequested1PullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested1PullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestReviewRequested1PullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestReviewRequested1PullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestReviewRequested1PullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestMilestoneCreator - User
type WebhookPullRequestReviewRequested1PullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequested1PullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestReviewRequested1PullRequestRequestedTeamsItem - Groups of organization members that gives permissions
// on specified repositories.
type WebhookPullRequestReviewRequested1PullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested1PullRequestUser - User
type WebhookPullRequestReviewRequested1PullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewRequested1PullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewRequested1RequestedTeam - Groups of organization members that gives permissions on specified repositories.
type WebhookPullRequestReviewRequested1RequestedTeam struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestReviewRequested1RequestedTeamParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestReviewRequested1RequestedTeamPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequested1RequestedTeamParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *WebhookPullRequestReviewRequested1RequestedTeamParentPrivacy `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2657 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2689 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewSubmitted - pullrequestreview submitted event
type WebhookPullRequestReviewSubmitted struct {
	// REQUIRED
	Action *WebhookPullRequestReviewSubmittedAction `json:"action,omitempty"`

	// REQUIRED; Simple Pull Request
	PullRequest *WebhookPullRequestReviewSubmittedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; The review that was affected.
	Review *WebhookPullRequestReviewSubmittedReview `json:"review,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequest - Simple Pull Request
type WebhookPullRequestReviewSubmittedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestReviewSubmittedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestReviewSubmittedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestReviewSubmittedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewSubmittedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestReviewSubmittedPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestReviewSubmittedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *string `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestReviewSubmittedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestReviewSubmittedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewSubmittedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *string `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestReviewSubmittedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestReviewSubmittedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED
	State *WebhookPullRequestReviewSubmittedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewSubmittedPullRequestUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestAssignee - User
type WebhookPullRequestReviewSubmittedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewSubmittedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestAssigneesItem - User
type WebhookPullRequestReviewSubmittedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewSubmittedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestReviewSubmittedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestReviewSubmittedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewSubmittedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewSubmittedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewSubmittedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestBaseRepo - A git repository
type WebhookPullRequestReviewSubmittedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewSubmittedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewSubmittedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewSubmittedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewSubmittedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewSubmittedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestReviewSubmittedPullRequestBaseRepoLicense - License
type WebhookPullRequestReviewSubmittedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwner - User
type WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewSubmittedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewSubmittedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestReviewSubmittedPullRequestBaseUser - User
type WebhookPullRequestReviewSubmittedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewSubmittedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewSubmittedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewSubmittedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewSubmittedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestHeadRepo - A git repository
type WebhookPullRequestReviewSubmittedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewSubmittedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewSubmittedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewSubmittedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewSubmittedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewSubmittedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestReviewSubmittedPullRequestHeadRepoLicense - License
type WebhookPullRequestReviewSubmittedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwner - User
type WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewSubmittedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewSubmittedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestReviewSubmittedPullRequestHeadUser - User
type WebhookPullRequestReviewSubmittedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewSubmittedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestLabelsItem - Label
type WebhookPullRequestReviewSubmittedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewSubmittedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestReviewSubmittedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestReviewSubmittedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestReviewSubmittedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestReviewSubmittedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestReviewSubmittedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestReviewSubmittedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReviewSubmittedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestReviewSubmittedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestLinksComments - Link
type WebhookPullRequestReviewSubmittedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestLinksCommits - Link
type WebhookPullRequestReviewSubmittedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestLinksHTML - Link
type WebhookPullRequestReviewSubmittedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestLinksIssue - Link
type WebhookPullRequestReviewSubmittedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestLinksReviewComment - Link
type WebhookPullRequestReviewSubmittedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestLinksReviewComments - Link
type WebhookPullRequestReviewSubmittedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestLinksSelf - Link
type WebhookPullRequestReviewSubmittedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestLinksStatuses - Link
type WebhookPullRequestReviewSubmittedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestReviewSubmittedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestReviewSubmittedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestReviewSubmittedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestMilestoneCreator - User
type WebhookPullRequestReviewSubmittedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewSubmittedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions
// on specified repositories.
type WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2721 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewSubmittedPullRequestUser - User
type WebhookPullRequestReviewSubmittedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewSubmittedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewSubmittedReview - The review that was affected.
type WebhookPullRequestReviewSubmittedReview struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewSubmittedReviewAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The text of the review.
	Body *string `json:"body,omitempty"`

	// REQUIRED; A commit SHA for the review.
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the review
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewSubmittedReviewLinks `json:"_links,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PullRequestURL *string `json:"pull_request_url,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	SubmittedAt *time.Time `json:"submitted_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewSubmittedReviewUser `json:"user,omitempty"`
}

type WebhookPullRequestReviewSubmittedReviewLinks struct {
	// REQUIRED; Link
	HTML *WebhookPullRequestReviewSubmittedReviewLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	PullRequest *WebhookPullRequestReviewSubmittedReviewLinksPullRequest `json:"pull_request,omitempty"`
}

// WebhookPullRequestReviewSubmittedReviewLinksHTML - Link
type WebhookPullRequestReviewSubmittedReviewLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewSubmittedReviewLinksPullRequest - Link
type WebhookPullRequestReviewSubmittedReviewLinksPullRequest struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewSubmittedReviewUser - User
type WebhookPullRequestReviewSubmittedReviewUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewSubmittedReviewUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadResolved - pullrequestreview_thread resolved event
type WebhookPullRequestReviewThreadResolved struct {
	// REQUIRED
	Action *WebhookPullRequestReviewThreadResolvedAction `json:"action,omitempty"`

	// REQUIRED; Simple Pull Request
	PullRequest *WebhookPullRequestReviewThreadResolvedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED
	Thread *WebhookPullRequestReviewThreadResolvedThread `json:"thread,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequest - Simple Pull Request
type WebhookPullRequestReviewThreadResolvedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestReviewThreadResolvedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestReviewThreadResolvedPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestReviewThreadResolvedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *string `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestReviewThreadResolvedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestReviewThreadResolvedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewThreadResolvedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *string `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestReviewThreadResolvedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestReviewThreadResolvedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED
	State *WebhookPullRequestReviewThreadResolvedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewThreadResolvedPullRequestUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestAssignee - User
type WebhookPullRequestReviewThreadResolvedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadResolvedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItem - User
type WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestReviewThreadResolvedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadResolvedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewThreadResolvedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewThreadResolvedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestBaseRepo - A git repository
type WebhookPullRequestReviewThreadResolvedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoLicense - License
type WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwner - User
type WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestReviewThreadResolvedPullRequestBaseUser - User
type WebhookPullRequestReviewThreadResolvedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadResolvedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadResolvedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewThreadResolvedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewThreadResolvedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestHeadRepo - A git repository
type WebhookPullRequestReviewThreadResolvedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoLicense - License
type WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwner - User
type WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestReviewThreadResolvedPullRequestHeadUser - User
type WebhookPullRequestReviewThreadResolvedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadResolvedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestLabelsItem - Label
type WebhookPullRequestReviewThreadResolvedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadResolvedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestReviewThreadResolvedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestReviewThreadResolvedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestReviewThreadResolvedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestReviewThreadResolvedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestReviewThreadResolvedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestReviewThreadResolvedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReviewThreadResolvedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestReviewThreadResolvedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestLinksComments - Link
type WebhookPullRequestReviewThreadResolvedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestLinksCommits - Link
type WebhookPullRequestReviewThreadResolvedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestLinksHTML - Link
type WebhookPullRequestReviewThreadResolvedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestLinksIssue - Link
type WebhookPullRequestReviewThreadResolvedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestLinksReviewComment - Link
type WebhookPullRequestReviewThreadResolvedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestLinksReviewComments - Link
type WebhookPullRequestReviewThreadResolvedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestLinksSelf - Link
type WebhookPullRequestReviewThreadResolvedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestLinksStatuses - Link
type WebhookPullRequestReviewThreadResolvedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestReviewThreadResolvedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestReviewThreadResolvedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreator - User
type WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadResolvedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions
// on specified repositories.
type WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2745 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedPullRequestUser - User
type WebhookPullRequestReviewThreadResolvedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadResolvedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadResolvedThread struct {
	// REQUIRED
	Comments []*WebhookPullRequestReviewThreadResolvedThreadCommentsItem `json:"comments,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedThreadCommentsItem - The comment [https://docs.github.com/rest/reference/pulls#comments]
// itself.
type WebhookPullRequestReviewThreadResolvedThreadCommentsItem struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The text of the comment.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The SHA of the commit to which the comment applies.
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The diff of the line that the comment refers to.
	DiffHunk *string `json:"diff_hunk,omitempty"`

	// REQUIRED; HTML URL for the pull request review comment.
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The ID of the pull request review comment.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	Line *int32 `json:"line,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewThreadResolvedThreadCommentsItemLinks `json:"_links,omitempty"`

	// REQUIRED; The node ID of the pull request review comment.
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The SHA of the original commit to which the comment applies.
	OriginalCommitID *string `json:"original_commit_id,omitempty"`

	// REQUIRED; The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	OriginalLine *int32 `json:"original_line,omitempty"`

	// REQUIRED; The index of the original line in the diff to which the comment applies.
	OriginalPosition *int32 `json:"original_position,omitempty"`

	// REQUIRED; The first line of the range for a multi-line comment.
	OriginalStartLine *int32 `json:"original_start_line,omitempty"`

	// REQUIRED; The relative path of the file to which the comment applies.
	Path *string `json:"path,omitempty"`

	// REQUIRED; The line index in the diff to which the comment applies.
	Position *int32 `json:"position,omitempty"`

	// REQUIRED; The ID of the pull request review to which the comment belongs.
	PullRequestReviewID *int32 `json:"pull_request_review_id,omitempty"`

	// REQUIRED; URL for the pull request that the review comment belongs to.
	PullRequestURL *string `json:"pull_request_url,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookPullRequestReviewThreadResolvedThreadCommentsItemReactions `json:"reactions,omitempty"`

	// REQUIRED; The side of the first line of the range for a multi-line comment.
	Side *WebhookPullRequestReviewThreadResolvedThreadCommentsItemSide `json:"side,omitempty"`

	// REQUIRED; The first line of the range for a multi-line comment.
	StartLine *int32 `json:"start_line,omitempty"`

	// REQUIRED; The side of the first line of the range for a multi-line comment.
	StartSide *WebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSide `json:"start_side,omitempty"`

	// REQUIRED; URL for the pull request review comment
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewThreadResolvedThreadCommentsItemUser `json:"user,omitempty"`

	// The comment ID to reply to.
	InReplyToID *int32 `json:"in_reply_to_id,omitempty"`
}

type WebhookPullRequestReviewThreadResolvedThreadCommentsItemLinks struct {
	// REQUIRED; Link
	HTML *WebhookPullRequestReviewThreadResolvedThreadCommentsProperties `json:"html,omitempty"`

	// REQUIRED; Link
	PullRequest *Components1NwcxrdSchemasWebhookPullRequestReviewThreadResolvedPropertiesThreadPropertiesCommentsItemsPropertiesLinksPropertiesPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; Link
	Self *Components15OzrzoSchemasWebhookPullRequestReviewThreadResolvedPropertiesThreadPropertiesCommentsItemsPropertiesLinksPropertiesSelf `json:"self,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedThreadCommentsItemReactions - Reactions
type WebhookPullRequestReviewThreadResolvedThreadCommentsItemReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedThreadCommentsItemUser - User
type WebhookPullRequestReviewThreadResolvedThreadCommentsItemUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2752 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadResolvedThreadCommentsProperties - Link
type WebhookPullRequestReviewThreadResolvedThreadCommentsProperties struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolved - pullrequestreview_thread unresolved event
type WebhookPullRequestReviewThreadUnresolved struct {
	// REQUIRED
	Action *WebhookPullRequestReviewThreadUnresolvedAction `json:"action,omitempty"`

	// REQUIRED; Simple Pull Request
	PullRequest *WebhookPullRequestReviewThreadUnresolvedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED
	Thread *WebhookPullRequestReviewThreadUnresolvedThread `json:"thread,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequest - Simple Pull Request
type WebhookPullRequestReviewThreadUnresolvedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestReviewThreadUnresolvedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestReviewThreadUnresolvedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *string `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestReviewThreadUnresolvedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestReviewThreadUnresolvedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewThreadUnresolvedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *string `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestReviewThreadUnresolvedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED
	State *WebhookPullRequestReviewThreadUnresolvedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewThreadUnresolvedPullRequestUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestAssignee - User
type WebhookPullRequestReviewThreadUnresolvedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItem - User
type WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepo - A git repository
type WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoLicense - License
type WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwner - User
type WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUser - User
type WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepo - A git repository
type WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoLicense - License
type WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwner - User
type WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUser - User
type WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestLabelsItem - Label
type WebhookPullRequestReviewThreadUnresolvedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestReviewThreadUnresolvedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestReviewThreadUnresolvedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestReviewThreadUnresolvedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestReviewThreadUnresolvedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestReviewThreadUnresolvedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestReviewThreadUnresolvedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestReviewThreadUnresolvedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestReviewThreadUnresolvedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestLinksComments - Link
type WebhookPullRequestReviewThreadUnresolvedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestLinksCommits - Link
type WebhookPullRequestReviewThreadUnresolvedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestLinksHTML - Link
type WebhookPullRequestReviewThreadUnresolvedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestLinksIssue - Link
type WebhookPullRequestReviewThreadUnresolvedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestLinksReviewComment - Link
type WebhookPullRequestReviewThreadUnresolvedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestLinksReviewComments - Link
type WebhookPullRequestReviewThreadUnresolvedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestLinksSelf - Link
type WebhookPullRequestReviewThreadUnresolvedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestLinksStatuses - Link
type WebhookPullRequestReviewThreadUnresolvedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestReviewThreadUnresolvedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreator - User
type WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions
// on specified repositories.
type WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2771 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestUser - User
type WebhookPullRequestReviewThreadUnresolvedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestReviewThreadUnresolvedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestReviewThreadUnresolvedThread struct {
	// REQUIRED
	Comments []*WebhookPullRequestReviewThreadUnresolvedThreadCommentsItem `json:"comments,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedThreadCommentsItem - The comment [https://docs.github.com/rest/reference/pulls#comments]
// itself.
type WebhookPullRequestReviewThreadUnresolvedThreadCommentsItem struct {
	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The text of the comment.
	Body *string `json:"body,omitempty"`

	// REQUIRED; The SHA of the commit to which the comment applies.
	CommitID *string `json:"commit_id,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The diff of the line that the comment refers to.
	DiffHunk *string `json:"diff_hunk,omitempty"`

	// REQUIRED; HTML URL for the pull request review comment.
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The ID of the pull request review comment.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	Line *int32 `json:"line,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemLinks `json:"_links,omitempty"`

	// REQUIRED; The node ID of the pull request review comment.
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The SHA of the original commit to which the comment applies.
	OriginalCommitID *string `json:"original_commit_id,omitempty"`

	// REQUIRED; The line of the blob to which the comment applies. The last line of the range for a multi-line comment
	OriginalLine *int32 `json:"original_line,omitempty"`

	// REQUIRED; The index of the original line in the diff to which the comment applies.
	OriginalPosition *int32 `json:"original_position,omitempty"`

	// REQUIRED; The first line of the range for a multi-line comment.
	OriginalStartLine *int32 `json:"original_start_line,omitempty"`

	// REQUIRED; The relative path of the file to which the comment applies.
	Path *string `json:"path,omitempty"`

	// REQUIRED; The line index in the diff to which the comment applies.
	Position *int32 `json:"position,omitempty"`

	// REQUIRED; The ID of the pull request review to which the comment belongs.
	PullRequestReviewID *int32 `json:"pull_request_review_id,omitempty"`

	// REQUIRED; URL for the pull request that the review comment belongs to.
	PullRequestURL *string `json:"pull_request_url,omitempty"`

	// REQUIRED; Reactions
	Reactions *WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemReactions `json:"reactions,omitempty"`

	// REQUIRED; The side of the first line of the range for a multi-line comment.
	Side *WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemSide `json:"side,omitempty"`

	// REQUIRED; The first line of the range for a multi-line comment.
	StartLine *int32 `json:"start_line,omitempty"`

	// REQUIRED; The side of the first line of the range for a multi-line comment.
	StartSide *WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSide `json:"start_side,omitempty"`

	// REQUIRED; URL for the pull request review comment
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemUser `json:"user,omitempty"`

	// The comment ID to reply to.
	InReplyToID *int32 `json:"in_reply_to_id,omitempty"`
}

type WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemLinks struct {
	// REQUIRED; Link
	HTML *WebhookPullRequestReviewThreadUnresolvedThreadCommentsProperties `json:"html,omitempty"`

	// REQUIRED; Link
	PullRequest *Components9SkyhcSchemasWebhookPullRequestReviewThreadUnresolvedPropertiesThreadPropertiesCommentsItemsPropertiesLinksPropertiesPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; Link
	Self *Components1KvyuqiSchemasWebhookPullRequestReviewThreadUnresolvedPropertiesThreadPropertiesCommentsItemsPropertiesLinksPropertiesSelf `json:"self,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemReactions - Reactions
type WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemUser - User
type WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2778 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestReviewThreadUnresolvedThreadCommentsProperties - Link
type WebhookPullRequestReviewThreadUnresolvedThreadCommentsProperties struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestSynchronize - pull_request synchronize event
type WebhookPullRequestSynchronize struct {
	// REQUIRED
	Action *WebhookPullRequestSynchronizeAction `json:"action,omitempty"`

	// REQUIRED
	After *string `json:"after,omitempty"`

	// REQUIRED
	Before *string `json:"before,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestSynchronizePullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPullRequestSynchronizePullRequest - Pull Request
type WebhookPullRequestSynchronizePullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestSynchronizePullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestSynchronizePullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestSynchronizePullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestSynchronizePullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestSynchronizePullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestSynchronizePullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestSynchronizePullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestSynchronizePullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestSynchronizePullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestSynchronizePullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestSynchronizePullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestSynchronizePullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestSynchronizePullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestSynchronizePullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestSynchronizePullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestAssignee - User
type WebhookPullRequestSynchronizePullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestSynchronizePullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestAssigneesItem - User
type WebhookPullRequestSynchronizePullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestSynchronizePullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestSynchronizePullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestSynchronizePullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestSynchronizePullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestAutoMergeEnabledBy - User
type WebhookPullRequestSynchronizePullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestSynchronizePullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestSynchronizePullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestSynchronizePullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestSynchronizePullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestBaseRepo - A git repository
type WebhookPullRequestSynchronizePullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestSynchronizePullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestSynchronizePullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestSynchronizePullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestSynchronizePullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestSynchronizePullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestSynchronizePullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestSynchronizePullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestSynchronizePullRequestBaseRepoLicense - License
type WebhookPullRequestSynchronizePullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestBaseRepoOwner - User
type WebhookPullRequestSynchronizePullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestSynchronizePullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestSynchronizePullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestSynchronizePullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestSynchronizePullRequestBaseUser - User
type WebhookPullRequestSynchronizePullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestSynchronizePullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestSynchronizePullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestSynchronizePullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestSynchronizePullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestHeadRepo - A git repository
type WebhookPullRequestSynchronizePullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestSynchronizePullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestSynchronizePullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestSynchronizePullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestSynchronizePullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestSynchronizePullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
	MergeCommitMessage *WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit message title.
	MergeCommitTitle *WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestSynchronizePullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestSynchronizePullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestSynchronizePullRequestHeadRepoLicense - License
type WebhookPullRequestSynchronizePullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestHeadRepoOwner - User
type WebhookPullRequestSynchronizePullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestSynchronizePullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestSynchronizePullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestSynchronizePullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestSynchronizePullRequestHeadUser - User
type WebhookPullRequestSynchronizePullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestSynchronizePullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestLabelsItem - Label
type WebhookPullRequestSynchronizePullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestSynchronizePullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestSynchronizePullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestSynchronizePullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestSynchronizePullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestSynchronizePullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestSynchronizePullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestSynchronizePullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestSynchronizePullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestSynchronizePullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestLinksComments - Link
type WebhookPullRequestSynchronizePullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestLinksCommits - Link
type WebhookPullRequestSynchronizePullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestLinksHTML - Link
type WebhookPullRequestSynchronizePullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestLinksIssue - Link
type WebhookPullRequestSynchronizePullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestLinksReviewComment - Link
type WebhookPullRequestSynchronizePullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestLinksReviewComments - Link
type WebhookPullRequestSynchronizePullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestLinksSelf - Link
type WebhookPullRequestSynchronizePullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestLinksStatuses - Link
type WebhookPullRequestSynchronizePullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestMergedBy - User
type WebhookPullRequestSynchronizePullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestSynchronizePullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestSynchronizePullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestSynchronizePullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestSynchronizePullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestMilestoneCreator - User
type WebhookPullRequestSynchronizePullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestSynchronizePullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestSynchronizePullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestSynchronizePullRequestRequestedTeamsItem - Groups of organization members that gives permissions on specified
// repositories.
type WebhookPullRequestSynchronizePullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestSynchronizePullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestSynchronizePullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2806 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestSynchronizePullRequestUser - User
type WebhookPullRequestSynchronizePullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestSynchronizePullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnassigned - pull_request unassigned event
type WebhookPullRequestUnassigned struct {
	// REQUIRED
	Action *WebhookPullRequestUnassignedAction `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestUnassignedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// User
	Assignee *WebhookPullRequestUnassignedAssignee `json:"assignee,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookPullRequestUnassignedAssignee - User
type WebhookPullRequestUnassignedAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnassignedAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnassignedPullRequest - Pull Request
type WebhookPullRequestUnassignedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestUnassignedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestUnassignedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestUnassignedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestUnassignedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestUnassignedPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestUnassignedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestUnassignedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestUnassignedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestUnassignedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestUnassignedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestUnassignedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestUnassignedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestUnassignedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestUnassignedPullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestUnassignedPullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestAssignee - User
type WebhookPullRequestUnassignedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnassignedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestAssigneesItem - User
type WebhookPullRequestUnassignedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnassignedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestUnassignedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestUnassignedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestUnassignedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestUnassignedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnassignedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnassignedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestUnassignedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestUnassignedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestBaseRepo - A git repository
type WebhookPullRequestUnassignedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestUnassignedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestUnassignedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestUnassignedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestUnassignedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestUnassignedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestUnassignedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestUnassignedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestUnassignedPullRequestBaseRepoLicense - License
type WebhookPullRequestUnassignedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestBaseRepoOwner - User
type WebhookPullRequestUnassignedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnassignedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnassignedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestUnassignedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestUnassignedPullRequestBaseUser - User
type WebhookPullRequestUnassignedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnassignedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnassignedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestUnassignedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestUnassignedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestHeadRepo - A git repository
type WebhookPullRequestUnassignedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestUnassignedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestUnassignedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestUnassignedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestUnassignedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestUnassignedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestUnassignedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestUnassignedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestUnassignedPullRequestHeadRepoLicense - License
type WebhookPullRequestUnassignedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestHeadRepoOwner - User
type WebhookPullRequestUnassignedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnassignedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnassignedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestUnassignedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestUnassignedPullRequestHeadUser - User
type WebhookPullRequestUnassignedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnassignedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestLabelsItem - Label
type WebhookPullRequestUnassignedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnassignedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestUnassignedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestUnassignedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestUnassignedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestUnassignedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestUnassignedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestUnassignedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestUnassignedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestUnassignedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestLinksComments - Link
type WebhookPullRequestUnassignedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestLinksCommits - Link
type WebhookPullRequestUnassignedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestLinksHTML - Link
type WebhookPullRequestUnassignedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestLinksIssue - Link
type WebhookPullRequestUnassignedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestLinksReviewComment - Link
type WebhookPullRequestUnassignedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestLinksReviewComments - Link
type WebhookPullRequestUnassignedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestLinksSelf - Link
type WebhookPullRequestUnassignedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestLinksStatuses - Link
type WebhookPullRequestUnassignedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestMergedBy - User
type WebhookPullRequestUnassignedPullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnassignedPullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestUnassignedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestUnassignedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestUnassignedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestMilestoneCreator - User
type WebhookPullRequestUnassignedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnassignedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnassignedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestUnassignedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions on specified
// repositories.
type WebhookPullRequestUnassignedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestUnassignedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnassignedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2838 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnassignedPullRequestUser - User
type WebhookPullRequestUnassignedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnassignedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlabeled - pull_request unlabeled event
type WebhookPullRequestUnlabeled struct {
	// REQUIRED
	Action *WebhookPullRequestUnlabeledAction `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestUnlabeledPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// Label
	Label *WebhookPullRequestUnlabeledLabel `json:"label,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPullRequestUnlabeledLabel - Label
type WebhookPullRequestUnlabeledLabel struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequest - Pull Request
type WebhookPullRequestUnlabeledPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestUnlabeledPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestUnlabeledPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestUnlabeledPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestUnlabeledPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestUnlabeledPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestUnlabeledPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestUnlabeledPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestUnlabeledPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestUnlabeledPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestUnlabeledPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestUnlabeledPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestUnlabeledPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestUnlabeledPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestUnlabeledPullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestUnlabeledPullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestAssignee - User
type WebhookPullRequestUnlabeledPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlabeledPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestAssigneesItem - User
type WebhookPullRequestUnlabeledPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlabeledPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestUnlabeledPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestUnlabeledPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnlabeledPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestUnlabeledPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestUnlabeledPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestBaseRepo - A git repository
type WebhookPullRequestUnlabeledPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestUnlabeledPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestUnlabeledPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestUnlabeledPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestUnlabeledPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestUnlabeledPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestUnlabeledPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestUnlabeledPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestUnlabeledPullRequestBaseRepoLicense - License
type WebhookPullRequestUnlabeledPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestBaseRepoOwner - User
type WebhookPullRequestUnlabeledPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlabeledPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnlabeledPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestUnlabeledPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestUnlabeledPullRequestBaseUser - User
type WebhookPullRequestUnlabeledPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlabeledPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnlabeledPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestUnlabeledPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestUnlabeledPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestHeadRepo - A git repository
type WebhookPullRequestUnlabeledPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestUnlabeledPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestUnlabeledPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestUnlabeledPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestUnlabeledPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestUnlabeledPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
	MergeCommitMessage *WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit message title.
	MergeCommitTitle *WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestUnlabeledPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestUnlabeledPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestUnlabeledPullRequestHeadRepoLicense - License
type WebhookPullRequestUnlabeledPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestHeadRepoOwner - User
type WebhookPullRequestUnlabeledPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlabeledPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnlabeledPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestUnlabeledPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestUnlabeledPullRequestHeadUser - User
type WebhookPullRequestUnlabeledPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlabeledPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestLabelsItem - Label
type WebhookPullRequestUnlabeledPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnlabeledPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestUnlabeledPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestUnlabeledPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestUnlabeledPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestUnlabeledPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestUnlabeledPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestUnlabeledPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestUnlabeledPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestUnlabeledPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestLinksComments - Link
type WebhookPullRequestUnlabeledPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestLinksCommits - Link
type WebhookPullRequestUnlabeledPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestLinksHTML - Link
type WebhookPullRequestUnlabeledPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestLinksIssue - Link
type WebhookPullRequestUnlabeledPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestLinksReviewComment - Link
type WebhookPullRequestUnlabeledPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestLinksReviewComments - Link
type WebhookPullRequestUnlabeledPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestLinksSelf - Link
type WebhookPullRequestUnlabeledPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestLinksStatuses - Link
type WebhookPullRequestUnlabeledPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestMergedBy - User
type WebhookPullRequestUnlabeledPullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlabeledPullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestUnlabeledPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestUnlabeledPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestUnlabeledPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestMilestoneCreator - User
type WebhookPullRequestUnlabeledPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlabeledPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnlabeledPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestUnlabeledPullRequestRequestedTeamsItem - Groups of organization members that gives permissions on specified
// repositories.
type WebhookPullRequestUnlabeledPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2869 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlabeledPullRequestUser - User
type WebhookPullRequestUnlabeledPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlabeledPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlocked - pull_request unlocked event
type WebhookPullRequestUnlocked struct {
	// REQUIRED
	Action *WebhookPullRequestUnlockedAction `json:"action,omitempty"`

	// REQUIRED; The pull request number.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED; Pull Request
	PullRequest *WebhookPullRequestUnlockedPullRequest `json:"pull_request,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookPullRequestUnlockedPullRequest - Pull Request
type WebhookPullRequestUnlockedPullRequest struct {
	// REQUIRED
	ActiveLockReason *WebhookPullRequestUnlockedPullRequestActiveLockReason `json:"active_lock_reason,omitempty"`

	// REQUIRED; User
	Assignee *WebhookPullRequestUnlockedPullRequestAssignee `json:"assignee,omitempty"`

	// REQUIRED
	Assignees []*WebhookPullRequestUnlockedPullRequestAssigneesItem `json:"assignees,omitempty"`

	// REQUIRED; How the author is associated with the repository.
	AuthorAssociation *WebhookPullRequestUnlockedPullRequestAuthorAssociation `json:"author_association,omitempty"`

	// REQUIRED; The status of auto merging a pull request.
	AutoMerge *WebhookPullRequestUnlockedPullRequestAutoMerge `json:"auto_merge,omitempty"`

	// REQUIRED
	Base *WebhookPullRequestUnlockedPullRequestBase `json:"base,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DiffURL *string `json:"diff_url,omitempty"`

	// REQUIRED; Indicates whether or not the pull request is a draft.
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	Head *WebhookPullRequestUnlockedPullRequestHead `json:"head,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueURL *string `json:"issue_url,omitempty"`

	// REQUIRED
	Labels []*WebhookPullRequestUnlockedPullRequestLabelsItem `json:"labels,omitempty"`

	// REQUIRED
	Links *WebhookPullRequestUnlockedPullRequestLinks `json:"_links,omitempty"`

	// REQUIRED
	Locked *bool `json:"locked,omitempty"`

	// REQUIRED
	MergeCommitSHA *string `json:"merge_commit_sha,omitempty"`

	// REQUIRED
	MergedAt *time.Time `json:"merged_at,omitempty"`

	// REQUIRED; A collection of related issues and pull requests.
	Milestone *WebhookPullRequestUnlockedPullRequestMilestone `json:"milestone,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Number uniquely identifying the pull request within its repository.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	PatchURL *string `json:"patch_url,omitempty"`

	// REQUIRED
	RequestedReviewers []*WebhookPullRequestUnlockedPullRequestRequestedReviewersItem `json:"requested_reviewers,omitempty"`

	// REQUIRED
	RequestedTeams []*WebhookPullRequestUnlockedPullRequestRequestedTeamsItem `json:"requested_teams,omitempty"`

	// REQUIRED
	ReviewCommentURL *string `json:"review_comment_url,omitempty"`

	// REQUIRED
	ReviewCommentsURL *string `json:"review_comments_url,omitempty"`

	// REQUIRED; State of this Pull Request. Either open or closed.
	State *WebhookPullRequestUnlockedPullRequestState `json:"state,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED; The title of the pull request.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestUnlockedPullRequestUser `json:"user,omitempty"`
	Additions *int32 `json:"additions,omitempty"`
	ChangedFiles *int32 `json:"changed_files,omitempty"`
	Comments *int32 `json:"comments,omitempty"`
	Commits *int32 `json:"commits,omitempty"`
	Deletions *int32 `json:"deletions,omitempty"`

	// Indicates whether maintainers can modify the pull request.
	MaintainerCanModify *bool `json:"maintainer_can_modify,omitempty"`
	Mergeable *bool `json:"mergeable,omitempty"`
	MergeableState *string `json:"mergeable_state,omitempty"`
	Merged *bool `json:"merged,omitempty"`

	// User
	MergedBy *WebhookPullRequestUnlockedPullRequestMergedBy `json:"merged_by,omitempty"`
	Rebaseable *bool `json:"rebaseable,omitempty"`
	ReviewComments *int32 `json:"review_comments,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestAssignee - User
type WebhookPullRequestUnlockedPullRequestAssignee struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlockedPullRequestAssigneeType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestAssigneesItem - User
type WebhookPullRequestUnlockedPullRequestAssigneesItem struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlockedPullRequestAssigneesItemType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestAutoMerge - The status of auto merging a pull request.
type WebhookPullRequestUnlockedPullRequestAutoMerge struct {
	// REQUIRED; Commit message for the merge commit.
	CommitMessage *string `json:"commit_message,omitempty"`

	// REQUIRED; Title for the merge commit message.
	CommitTitle *string `json:"commit_title,omitempty"`

	// REQUIRED; User
	EnabledBy *WebhookPullRequestUnlockedPullRequestAutoMergeEnabledBy `json:"enabled_by,omitempty"`

	// REQUIRED; The merge method to use.
	MergeMethod *WebhookPullRequestUnlockedPullRequestAutoMergeMethod `json:"merge_method,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestAutoMergeEnabledBy - User
type WebhookPullRequestUnlockedPullRequestAutoMergeEnabledBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlockedPullRequestAutoMergeEnabledByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnlockedPullRequestBase struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestUnlockedPullRequestBaseRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestUnlockedPullRequestBaseUser `json:"user,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestBaseRepo - A git repository
type WebhookPullRequestUnlockedPullRequestBaseRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestUnlockedPullRequestBaseRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestUnlockedPullRequestBaseRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestUnlockedPullRequestBaseRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestUnlockedPullRequestBaseRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestUnlockedPullRequestBaseRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestUnlockedPullRequestBaseRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestUnlockedPullRequestBaseRepoCreatedAt struct {
}

// WebhookPullRequestUnlockedPullRequestBaseRepoLicense - License
type WebhookPullRequestUnlockedPullRequestBaseRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestBaseRepoOwner - User
type WebhookPullRequestUnlockedPullRequestBaseRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlockedPullRequestBaseRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnlockedPullRequestBaseRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestUnlockedPullRequestBaseRepoPushedAt struct {
}

// WebhookPullRequestUnlockedPullRequestBaseUser - User
type WebhookPullRequestUnlockedPullRequestBaseUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlockedPullRequestBaseUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnlockedPullRequestHead struct {
	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repo *WebhookPullRequestUnlockedPullRequestHeadRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; User
	User *WebhookPullRequestUnlockedPullRequestHeadUser `json:"user,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestHeadRepo - A git repository
type WebhookPullRequestUnlockedPullRequestHeadRepo struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPullRequestUnlockedPullRequestHeadRepoCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPullRequestUnlockedPullRequestHeadRepoLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPullRequestUnlockedPullRequestHeadRepoOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPullRequestUnlockedPullRequestHeadRepoPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPullRequestUnlockedPullRequestHeadRepoVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`

	// The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
	MergeCommitMessage *WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessage `json:"merge_commit_message,omitempty"`

	// The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
	MergeCommitTitle *WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitTitle `json:"merge_commit_title,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPullRequestUnlockedPullRequestHeadRepoPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`

	// The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
	SquashMergeCommitMessage *WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessage `json:"squash_merge_commit_message,omitempty"`

	// The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
	SquashMergeCommitTitle *WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitTitle `json:"squash_merge_commit_title,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use
// squash_merge_commit_title instead.
	UseSquashPrTitleAsDefault *bool `json:"use_squash_pr_title_as_default,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPullRequestUnlockedPullRequestHeadRepoCreatedAt struct {
}

// WebhookPullRequestUnlockedPullRequestHeadRepoLicense - License
type WebhookPullRequestUnlockedPullRequestHeadRepoLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestHeadRepoOwner - User
type WebhookPullRequestUnlockedPullRequestHeadRepoOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlockedPullRequestHeadRepoOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnlockedPullRequestHeadRepoPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPullRequestUnlockedPullRequestHeadRepoPushedAt struct {
}

// WebhookPullRequestUnlockedPullRequestHeadUser - User
type WebhookPullRequestUnlockedPullRequestHeadUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlockedPullRequestHeadUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestLabelsItem - Label
type WebhookPullRequestUnlockedPullRequestLabelsItem struct {
	// REQUIRED; 6-character hex code, without the leading #, identifying the color
	Color *string `json:"color,omitempty"`

	// REQUIRED
	Default *bool `json:"default,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The name of the label.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; URL for the label
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnlockedPullRequestLinks struct {
	// REQUIRED; Link
	Comments *WebhookPullRequestUnlockedPullRequestLinksComments `json:"comments,omitempty"`

	// REQUIRED; Link
	Commits *WebhookPullRequestUnlockedPullRequestLinksCommits `json:"commits,omitempty"`

	// REQUIRED; Link
	HTML *WebhookPullRequestUnlockedPullRequestLinksHTML `json:"html,omitempty"`

	// REQUIRED; Link
	Issue *WebhookPullRequestUnlockedPullRequestLinksIssue `json:"issue,omitempty"`

	// REQUIRED; Link
	ReviewComment *WebhookPullRequestUnlockedPullRequestLinksReviewComment `json:"review_comment,omitempty"`

	// REQUIRED; Link
	ReviewComments *WebhookPullRequestUnlockedPullRequestLinksReviewComments `json:"review_comments,omitempty"`

	// REQUIRED; Link
	Self *WebhookPullRequestUnlockedPullRequestLinksSelf `json:"self,omitempty"`

	// REQUIRED; Link
	Statuses *WebhookPullRequestUnlockedPullRequestLinksStatuses `json:"statuses,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestLinksComments - Link
type WebhookPullRequestUnlockedPullRequestLinksComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestLinksCommits - Link
type WebhookPullRequestUnlockedPullRequestLinksCommits struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestLinksHTML - Link
type WebhookPullRequestUnlockedPullRequestLinksHTML struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestLinksIssue - Link
type WebhookPullRequestUnlockedPullRequestLinksIssue struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestLinksReviewComment - Link
type WebhookPullRequestUnlockedPullRequestLinksReviewComment struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestLinksReviewComments - Link
type WebhookPullRequestUnlockedPullRequestLinksReviewComments struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestLinksSelf - Link
type WebhookPullRequestUnlockedPullRequestLinksSelf struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestLinksStatuses - Link
type WebhookPullRequestUnlockedPullRequestLinksStatuses struct {
	// REQUIRED
	Href *string `json:"href,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestMergedBy - User
type WebhookPullRequestUnlockedPullRequestMergedBy struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlockedPullRequestMergedByType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestMilestone - A collection of related issues and pull requests.
type WebhookPullRequestUnlockedPullRequestMilestone struct {
	// REQUIRED
	ClosedAt *time.Time `json:"closed_at,omitempty"`

	// REQUIRED
	ClosedIssues *int32 `json:"closed_issues,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; User
	Creator *WebhookPullRequestUnlockedPullRequestMilestoneCreator `json:"creator,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DueOn *time.Time `json:"due_on,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The number of the milestone.
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED; The state of the milestone.
	State *WebhookPullRequestUnlockedPullRequestMilestoneState `json:"state,omitempty"`

	// REQUIRED; The title of the milestone.
	Title *string `json:"title,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestMilestoneCreator - User
type WebhookPullRequestUnlockedPullRequestMilestoneCreator struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlockedPullRequestMilestoneCreatorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnlockedPullRequestRequestedReviewersItem struct {
}

// WebhookPullRequestUnlockedPullRequestRequestedTeamsItem - Groups of organization members that gives permissions on specified
// repositories.
type WebhookPullRequestUnlockedPullRequestRequestedTeamsItem struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookPullRequestUnlockedPullRequestRequestedTeamsItemParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookPullRequestUnlockedPullRequestRequestedTeamsItemParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *Enum2900 `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookPullRequestUnlockedPullRequestUser - User
type WebhookPullRequestUnlockedPullRequestUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPullRequestUnlockedPullRequestUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookPush - push event
type WebhookPush struct {
	// REQUIRED; The SHA of the most recent commit on ref after the push.
	After *string `json:"after,omitempty"`

	// REQUIRED
	BaseRef *string `json:"base_ref,omitempty"`

	// REQUIRED; The SHA of the most recent commit on ref before the push.
	Before *string `json:"before,omitempty"`

	// REQUIRED; An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in
// the compare between the before commit and the after commit.) The array includes a maximum
// of 20 commits. If necessary, you can use the Commits API [https://docs.github.com/rest/reference/repos#commits] to fetch
// additional commits. This limit is applied to timeline events only and isn't
// applied to webhook deliveries.
	Commits []*WebhookPushCommitsItem `json:"commits,omitempty"`

	// REQUIRED; URL that shows the changes in this ref update, from the before commit to the after commit. For a newly created
// ref that is directly based on the default branch, this is the comparison between the head
// of the default branch and the after commit. Otherwise, this shows all commits until the after commit.
	Compare *string `json:"compare,omitempty"`

	// REQUIRED; Whether this push created the ref.
	Created *bool `json:"created,omitempty"`

	// REQUIRED; Whether this push deleted the ref.
	Deleted *bool `json:"deleted,omitempty"`

	// REQUIRED; Whether this push was a force push of the ref.
	Forced *bool `json:"forced,omitempty"`

	// REQUIRED; Commit
	HeadCommit *WebhookPushHeadCommit `json:"head_commit,omitempty"`

	// REQUIRED; Metaproperties for Git author/committer information.
	Pusher *WebhookPushPusher `json:"pusher,omitempty"`

	// REQUIRED; The full git ref that was pushed. Example: refs/heads/main or refs/tags/v3.14.1.
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A git repository
	Repository *WebhookPushRepository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookPushCommitsItem - Commit
type WebhookPushCommitsItem struct {
	// REQUIRED; Metaproperties for Git author/committer information.
	Author *WebhookPushCommitsItemAuthor `json:"author,omitempty"`

	// REQUIRED; Metaproperties for Git author/committer information.
	Committer *WebhookPushCommitsItemCommitter `json:"committer,omitempty"`

	// REQUIRED; Whether this commit is distinct from any that have been pushed before.
	Distinct *bool `json:"distinct,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED; The commit message.
	Message *string `json:"message,omitempty"`

	// REQUIRED; The ISO 8601 timestamp of the commit.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// REQUIRED
	TreeID *string `json:"tree_id,omitempty"`

	// REQUIRED; URL that points to the commit API resource.
	URL *string `json:"url,omitempty"`

	// An array of files added in the commit.
	Added []*string `json:"added,omitempty"`

	// An array of files modified by the commit.
	Modified []*string `json:"modified,omitempty"`

	// An array of files removed in the commit.
	Removed []*string `json:"removed,omitempty"`
}

// WebhookPushCommitsItemAuthor - Metaproperties for Git author/committer information.
type WebhookPushCommitsItemAuthor struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookPushCommitsItemCommitter - Metaproperties for Git author/committer information.
type WebhookPushCommitsItemCommitter struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookPushHeadCommit - Commit
type WebhookPushHeadCommit struct {
	// REQUIRED; Metaproperties for Git author/committer information.
	Author *WebhookPushHeadCommitAuthor `json:"author,omitempty"`

	// REQUIRED; Metaproperties for Git author/committer information.
	Committer *WebhookPushHeadCommitCommitter `json:"committer,omitempty"`

	// REQUIRED; Whether this commit is distinct from any that have been pushed before.
	Distinct *bool `json:"distinct,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED; The commit message.
	Message *string `json:"message,omitempty"`

	// REQUIRED; The ISO 8601 timestamp of the commit.
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// REQUIRED
	TreeID *string `json:"tree_id,omitempty"`

	// REQUIRED; URL that points to the commit API resource.
	URL *string `json:"url,omitempty"`

	// An array of files added in the commit.
	Added []*string `json:"added,omitempty"`

	// An array of files modified by the commit.
	Modified []*string `json:"modified,omitempty"`

	// An array of files removed in the commit.
	Removed []*string `json:"removed,omitempty"`
}

// WebhookPushHeadCommitAuthor - Metaproperties for Git author/committer information.
type WebhookPushHeadCommitAuthor struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookPushHeadCommitCommitter - Metaproperties for Git author/committer information.
type WebhookPushHeadCommitCommitter struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookPushPusher - Metaproperties for Git author/committer information.
type WebhookPushPusher struct {
	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Email *string `json:"email,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookPushRepository - A git repository
type WebhookPushRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookPushRepositoryCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether discussions are enabled.
	HasDiscussions *bool `json:"has_discussions,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookPushRepositoryLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookPushRepositoryOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookPushRepositoryPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookPushRepositoryVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookPushRepositoryPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`

	// Whether to require contributors to sign off on web-based commits
	WebCommitSignoffRequired *bool `json:"web_commit_signoff_required,omitempty"`
}

type WebhookPushRepositoryCreatedAt struct {
}

// WebhookPushRepositoryLicense - License
type WebhookPushRepositoryLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookPushRepositoryOwner - User
type WebhookPushRepositoryOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookPushRepositoryOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookPushRepositoryPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookPushRepositoryPushedAt struct {
}

type WebhookRegistryPackagePublished struct {
	// REQUIRED
	Action *WebhookRegistryPackagePublishedAction `json:"action,omitempty"`

	// REQUIRED
	RegistryPackage *WebhookRegistryPackagePublishedRegistryPackage `json:"registry_package,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookRegistryPackagePublishedRegistryPackage struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	Ecosystem *string `json:"ecosystem,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Namespace *string `json:"namespace,omitempty"`

	// REQUIRED
	Owner *WebhookRegistryPackagePublishedRegistryPackageOwner `json:"owner,omitempty"`

	// REQUIRED
	PackageType *string `json:"package_type,omitempty"`

	// REQUIRED
	PackageVersion *WebhookRegistryPackagePublishedRegistryPackageVersion `json:"package_version,omitempty"`

	// REQUIRED
	Registry *WebhookRegistryPackagePublishedRegistryPackageRegistry `json:"registry,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type WebhookRegistryPackagePublishedRegistryPackageOwner struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookRegistryPackagePublishedRegistryPackageRegistry struct {
	AboutURL *string `json:"about_url,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
	Vendor *string `json:"vendor,omitempty"`
}

type WebhookRegistryPackagePublishedRegistryPackageVersion struct {
	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	InstallationCommand *string `json:"installation_command,omitempty"`

	// REQUIRED
	Metadata []map[string]any `json:"metadata,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PackageFiles []*WebhookRegistryPackagePublishedRegistryPackageVersionPackageFilesItem `json:"package_files,omitempty"`

	// REQUIRED
	PackageURL *string `json:"package_url,omitempty"`

	// REQUIRED
	Summary *string `json:"summary,omitempty"`

	// REQUIRED
	Version *string `json:"version,omitempty"`
	Author *WebhookRegistryPackagePublishedRegistryPackageVersionAuthor `json:"author,omitempty"`
	Body *WebhookRegistryPackagePublishedRegistryPackageVersionBody `json:"body,omitempty"`
	BodyHTML *string `json:"body_html,omitempty"`
	ContainerMetadata *WebhookRegistryPackagePublishedRegistryPackageVersionContainerMetadata `json:"container_metadata,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DockerMetadata []any `json:"docker_metadata,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Manifest *string `json:"manifest,omitempty"`
	NpmMetadata *WebhookRegistryPackagePublishedRegistryPackageVersionNpmMetadata `json:"npm_metadata,omitempty"`
	NugetMetadata []*WebhookRegistryPackagePublishedRegistryPackageVersionNugetMetadataItem `json:"nuget_metadata,omitempty"`
	Prerelease *bool `json:"prerelease,omitempty"`
	Release *WebhookRegistryPackagePublishedRegistryPackageVersionRelease `json:"release,omitempty"`
	RubygemsMetadata []any `json:"rubygems_metadata,omitempty"`
	TagName *string `json:"tag_name,omitempty"`
	TargetCommitish *string `json:"target_commitish,omitempty"`
	TargetOid *string `json:"target_oid,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type WebhookRegistryPackagePublishedRegistryPackageVersionAuthor struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookRegistryPackagePublishedRegistryPackageVersionBody struct {
}

type WebhookRegistryPackagePublishedRegistryPackageVersionContainerMetadata struct {
	// Anything
	Labels any `json:"labels,omitempty"`

	// Anything
	Manifest any `json:"manifest,omitempty"`
	Tag *WebhookRegistryPackagePublishedRegistryPackageVersionContainerMetadataTag `json:"tag,omitempty"`
}

type WebhookRegistryPackagePublishedRegistryPackageVersionContainerMetadataTag struct {
	Digest *string `json:"digest,omitempty"`
	Name *string `json:"name,omitempty"`
}

type WebhookRegistryPackagePublishedRegistryPackageVersionNpmMetadata struct {
	Author *WebhookRegistryPackagePublishedRegistryPackageVersionNpmMetadataAuthor `json:"author,omitempty"`

	// Anything
	Bin any `json:"bin,omitempty"`
	Bugs *WebhookRegistryPackagePublishedRegistryPackageVersionNpmMetadataBugs `json:"bugs,omitempty"`
	CPU []*string `json:"cpu,omitempty"`
	CommitOid *string `json:"commit_oid,omitempty"`
	Contributors []*string `json:"contributors,omitempty"`
	DeletedByID *int32 `json:"deleted_by_id,omitempty"`

	// Anything
	Dependencies any `json:"dependencies,omitempty"`
	Description *string `json:"description,omitempty"`

	// Anything
	DevDependencies any `json:"dev_dependencies,omitempty"`
	Directories *WebhookRegistryPackagePublishedRegistryPackageVersionNpmMetadataDirectories `json:"directories,omitempty"`
	Dist *WebhookRegistryPackagePublishedRegistryPackageVersionNpmMetadataDist `json:"dist,omitempty"`

	// Anything
	Engines any `json:"engines,omitempty"`
	Files []*string `json:"files,omitempty"`
	GitHead *string `json:"git_head,omitempty"`
	HasShrinkwrap *bool `json:"has_shrinkwrap,omitempty"`
	Homepage *string `json:"homepage,omitempty"`
	ID *string `json:"id,omitempty"`
	InstallationCommand *string `json:"installation_command,omitempty"`
	Keywords []*string `json:"keywords,omitempty"`
	License *string `json:"license,omitempty"`
	Main *string `json:"main,omitempty"`
	Maintainers []*string `json:"maintainers,omitempty"`

	// Anything
	Man any `json:"man,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeVersion *string `json:"node_version,omitempty"`
	NpmUser *string `json:"npm_user,omitempty"`
	NpmVersion *string `json:"npm_version,omitempty"`
	OS []*string `json:"os,omitempty"`

	// Anything
	OptionalDependencies any `json:"optional_dependencies,omitempty"`

	// Anything
	PeerDependencies any `json:"peer_dependencies,omitempty"`
	PublishedViaActions *bool `json:"published_via_actions,omitempty"`
	Readme *string `json:"readme,omitempty"`
	ReleaseID *int32 `json:"release_id,omitempty"`
	Repository *WebhookRegistryPackagePublishedRegistryPackageVersionNpmMetadataRepository `json:"repository,omitempty"`

	// Anything
	Scripts any `json:"scripts,omitempty"`
	Version *string `json:"version,omitempty"`
}

type WebhookRegistryPackagePublishedRegistryPackageVersionNpmMetadataAuthor struct {
}

type WebhookRegistryPackagePublishedRegistryPackageVersionNpmMetadataBugs struct {
}

type WebhookRegistryPackagePublishedRegistryPackageVersionNpmMetadataDirectories struct {
}

type WebhookRegistryPackagePublishedRegistryPackageVersionNpmMetadataDist struct {
}

type WebhookRegistryPackagePublishedRegistryPackageVersionNpmMetadataRepository struct {
}

type WebhookRegistryPackagePublishedRegistryPackageVersionNugetMetadataItem struct {
	ID *WebhookRegistryPackagePublishedRegistryPackageVersionNugetMetadataItemID `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Value *WebhookRegistryPackagePublishedRegistryPackageVersionNugetMetadataItemValue `json:"value,omitempty"`
}

type WebhookRegistryPackagePublishedRegistryPackageVersionNugetMetadataItemID struct {
}

type WebhookRegistryPackagePublishedRegistryPackageVersionNugetMetadataItemValue struct {
}

type WebhookRegistryPackagePublishedRegistryPackageVersionPackageFilesItem struct {
	// REQUIRED
	ContentType *string `json:"content_type,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	DownloadURL *string `json:"download_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MD5 *string `json:"md5,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	SHA1 *string `json:"sha1,omitempty"`

	// REQUIRED
	SHA256 *string `json:"sha256,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type WebhookRegistryPackagePublishedRegistryPackageVersionRelease struct {
	Author *WebhookRegistryPackagePublishedRegistryPackageVersionReleaseAuthor `json:"author,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Name *string `json:"name,omitempty"`
	Prerelease *bool `json:"prerelease,omitempty"`
	PublishedAt *string `json:"published_at,omitempty"`
	TagName *string `json:"tag_name,omitempty"`
	TargetCommitish *string `json:"target_commitish,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookRegistryPackagePublishedRegistryPackageVersionReleaseAuthor struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookRegistryPackageUpdated struct {
	// REQUIRED
	Action *string `json:"action,omitempty"`

	// REQUIRED
	RegistryPackage *WebhookRegistryPackageUpdatedRegistryPackage `json:"registry_package,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookRegistryPackageUpdatedRegistryPackage struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED; Anything
	Description any `json:"description,omitempty"`

	// REQUIRED
	Ecosystem *string `json:"ecosystem,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Namespace *string `json:"namespace,omitempty"`

	// REQUIRED
	Owner *WebhookRegistryPackageUpdatedRegistryPackageOwner `json:"owner,omitempty"`

	// REQUIRED
	PackageType *string `json:"package_type,omitempty"`

	// REQUIRED
	PackageVersion *WebhookRegistryPackageUpdatedRegistryPackageVersion `json:"package_version,omitempty"`

	// REQUIRED; Anything
	Registry any `json:"registry,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type WebhookRegistryPackageUpdatedRegistryPackageOwner struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookRegistryPackageUpdatedRegistryPackageVersion struct {
	// REQUIRED
	Author *WebhookRegistryPackageUpdatedRegistryPackageVersionAuthor `json:"author,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	BodyHTML *string `json:"body_html,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	InstallationCommand *string `json:"installation_command,omitempty"`

	// REQUIRED
	Metadata []any `json:"metadata,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	PackageFiles []*WebhookRegistryPackageUpdatedRegistryPackageVersionPackageFilesItem `json:"package_files,omitempty"`

	// REQUIRED
	PackageURL *string `json:"package_url,omitempty"`

	// REQUIRED
	Summary *string `json:"summary,omitempty"`

	// REQUIRED
	TargetCommitish *string `json:"target_commitish,omitempty"`

	// REQUIRED
	TargetOid *string `json:"target_oid,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED
	Version *string `json:"version,omitempty"`
	DockerMetadata []any `json:"docker_metadata,omitempty"`
	Draft *bool `json:"draft,omitempty"`
	Manifest *string `json:"manifest,omitempty"`
	Prerelease *bool `json:"prerelease,omitempty"`
	Release *WebhookRegistryPackageUpdatedRegistryPackageVersionRelease `json:"release,omitempty"`
	RubygemsMetadata []any `json:"rubygems_metadata,omitempty"`
	TagName *string `json:"tag_name,omitempty"`
}

type WebhookRegistryPackageUpdatedRegistryPackageVersionAuthor struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookRegistryPackageUpdatedRegistryPackageVersionPackageFilesItem struct {
	ContentType *string `json:"content_type,omitempty"`
	CreatedAt *string `json:"created_at,omitempty"`
	DownloadURL *string `json:"download_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	MD5 *string `json:"md5,omitempty"`
	Name *string `json:"name,omitempty"`
	SHA1 *string `json:"sha1,omitempty"`
	SHA256 *string `json:"sha256,omitempty"`
	Size *int32 `json:"size,omitempty"`
	State *string `json:"state,omitempty"`
	UpdatedAt *string `json:"updated_at,omitempty"`
}

type WebhookRegistryPackageUpdatedRegistryPackageVersionRelease struct {
	// REQUIRED
	Author *WebhookRegistryPackageUpdatedRegistryPackageVersionReleaseAuthor `json:"author,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Prerelease *bool `json:"prerelease,omitempty"`

	// REQUIRED
	PublishedAt *string `json:"published_at,omitempty"`

	// REQUIRED
	TagName *string `json:"tag_name,omitempty"`

	// REQUIRED
	TargetCommitish *string `json:"target_commitish,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookRegistryPackageUpdatedRegistryPackageVersionReleaseAuthor struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	FollowersURL *string `json:"followers_url,omitempty"`

	// REQUIRED
	FollowingURL *string `json:"following_url,omitempty"`

	// REQUIRED
	GistsURL *string `json:"gists_url,omitempty"`

	// REQUIRED
	GravatarID *string `json:"gravatar_id,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	OrganizationsURL *string `json:"organizations_url,omitempty"`

	// REQUIRED
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	SiteAdmin *bool `json:"site_admin,omitempty"`

	// REQUIRED
	StarredURL *string `json:"starred_url,omitempty"`

	// REQUIRED
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`

	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookReleaseCreated - release created event
type WebhookReleaseCreated struct {
	// REQUIRED
	Action *WebhookReleaseCreatedAction `json:"action,omitempty"`

	// REQUIRED; The release [https://docs.github.com/rest/reference/repos/#get-a-release] object.
	Release *WebhookReleaseCreatedRelease `json:"release,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookReleaseCreatedRelease - The release [https://docs.github.com/rest/reference/repos/#get-a-release] object.
type WebhookReleaseCreatedRelease struct {
	// REQUIRED
	Assets []*WebhookReleaseCreatedReleaseAssetsItem `json:"assets,omitempty"`

	// REQUIRED
	AssetsURL *string `json:"assets_url,omitempty"`

	// REQUIRED; User
	Author *WebhookReleaseCreatedReleaseAuthor `json:"author,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; Whether the release is a draft or published
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether the release is identified as a prerelease or a full release.
	Prerelease *bool `json:"prerelease,omitempty"`

	// REQUIRED
	PublishedAt *time.Time `json:"published_at,omitempty"`

	// REQUIRED; The name of the tag.
	TagName *string `json:"tag_name,omitempty"`

	// REQUIRED
	TarballURL *string `json:"tarball_url,omitempty"`

	// REQUIRED; Specifies the commitish value that determines where the Git tag is created from.
	TargetCommitish *string `json:"target_commitish,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UploadURL *string `json:"upload_url,omitempty"`

	// REQUIRED
	ZipballURL *string `json:"zipball_url,omitempty"`
	DiscussionURL *string `json:"discussion_url,omitempty"`

	// Reactions
	Reactions *WebhookReleaseCreatedReleaseReactions `json:"reactions,omitempty"`
}

// WebhookReleaseCreatedReleaseAssetsItem - Data related to a release.
type WebhookReleaseCreatedReleaseAssetsItem struct {
	// REQUIRED
	BrowserDownloadURL *string `json:"browser_download_url,omitempty"`

	// REQUIRED
	ContentType *string `json:"content_type,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DownloadCount *int32 `json:"download_count,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED; The file name of the asset.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED; State of the release asset.
	State *WebhookReleaseCreatedReleaseAssetsItemState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// User
	Uploader *WebhookReleaseCreatedReleaseAssetsItemUploader `json:"uploader,omitempty"`
}

// WebhookReleaseCreatedReleaseAssetsItemUploader - User
type WebhookReleaseCreatedReleaseAssetsItemUploader struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2909 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleaseCreatedReleaseAuthor - User
type WebhookReleaseCreatedReleaseAuthor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookReleaseCreatedReleaseAuthorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleaseCreatedReleaseReactions - Reactions
type WebhookReleaseCreatedReleaseReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookReleaseDeleted - release deleted event
type WebhookReleaseDeleted struct {
	// REQUIRED
	Action *WebhookReleaseDeletedAction `json:"action,omitempty"`

	// REQUIRED; The release [https://docs.github.com/rest/reference/repos/#get-a-release] object.
	Release *WebhookReleaseDeletedRelease `json:"release,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookReleaseDeletedRelease - The release [https://docs.github.com/rest/reference/repos/#get-a-release] object.
type WebhookReleaseDeletedRelease struct {
	// REQUIRED
	Assets []*WebhookReleaseDeletedReleaseAssetsItem `json:"assets,omitempty"`

	// REQUIRED
	AssetsURL *string `json:"assets_url,omitempty"`

	// REQUIRED; User
	Author *WebhookReleaseDeletedReleaseAuthor `json:"author,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; Whether the release is a draft or published
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether the release is identified as a prerelease or a full release.
	Prerelease *bool `json:"prerelease,omitempty"`

	// REQUIRED
	PublishedAt *time.Time `json:"published_at,omitempty"`

	// REQUIRED; The name of the tag.
	TagName *string `json:"tag_name,omitempty"`

	// REQUIRED
	TarballURL *string `json:"tarball_url,omitempty"`

	// REQUIRED; Specifies the commitish value that determines where the Git tag is created from.
	TargetCommitish *string `json:"target_commitish,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UploadURL *string `json:"upload_url,omitempty"`

	// REQUIRED
	ZipballURL *string `json:"zipball_url,omitempty"`
	DiscussionURL *string `json:"discussion_url,omitempty"`

	// Reactions
	Reactions *WebhookReleaseDeletedReleaseReactions `json:"reactions,omitempty"`
}

// WebhookReleaseDeletedReleaseAssetsItem - Data related to a release.
type WebhookReleaseDeletedReleaseAssetsItem struct {
	// REQUIRED
	BrowserDownloadURL *string `json:"browser_download_url,omitempty"`

	// REQUIRED
	ContentType *string `json:"content_type,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DownloadCount *int32 `json:"download_count,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED; The file name of the asset.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED; State of the release asset.
	State *WebhookReleaseDeletedReleaseAssetsItemState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// User
	Uploader *WebhookReleaseDeletedReleaseAssetsItemUploader `json:"uploader,omitempty"`
}

// WebhookReleaseDeletedReleaseAssetsItemUploader - User
type WebhookReleaseDeletedReleaseAssetsItemUploader struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2913 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleaseDeletedReleaseAuthor - User
type WebhookReleaseDeletedReleaseAuthor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookReleaseDeletedReleaseAuthorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleaseDeletedReleaseReactions - Reactions
type WebhookReleaseDeletedReleaseReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookReleaseEdited - release edited event
type WebhookReleaseEdited struct {
	// REQUIRED
	Action *WebhookReleaseEditedAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookReleaseEditedChanges `json:"changes,omitempty"`

	// REQUIRED; The release [https://docs.github.com/rest/reference/repos/#get-a-release] object.
	Release *WebhookReleaseEditedRelease `json:"release,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

type WebhookReleaseEditedChanges struct {
	Body *WebhookReleaseEditedChangesBody `json:"body,omitempty"`
	Name *WebhookReleaseEditedChangesName `json:"name,omitempty"`
}

type WebhookReleaseEditedChangesBody struct {
	// REQUIRED; The previous version of the body if the action was edited.
	From *string `json:"from,omitempty"`
}

type WebhookReleaseEditedChangesName struct {
	// REQUIRED; The previous version of the name if the action was edited.
	From *string `json:"from,omitempty"`
}

// WebhookReleaseEditedRelease - The release [https://docs.github.com/rest/reference/repos/#get-a-release] object.
type WebhookReleaseEditedRelease struct {
	// REQUIRED
	Assets []*WebhookReleaseEditedReleaseAssetsItem `json:"assets,omitempty"`

	// REQUIRED
	AssetsURL *string `json:"assets_url,omitempty"`

	// REQUIRED; User
	Author *WebhookReleaseEditedReleaseAuthor `json:"author,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; Whether the release is a draft or published
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether the release is identified as a prerelease or a full release.
	Prerelease *bool `json:"prerelease,omitempty"`

	// REQUIRED
	PublishedAt *time.Time `json:"published_at,omitempty"`

	// REQUIRED; The name of the tag.
	TagName *string `json:"tag_name,omitempty"`

	// REQUIRED
	TarballURL *string `json:"tarball_url,omitempty"`

	// REQUIRED; Specifies the commitish value that determines where the Git tag is created from.
	TargetCommitish *string `json:"target_commitish,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UploadURL *string `json:"upload_url,omitempty"`

	// REQUIRED
	ZipballURL *string `json:"zipball_url,omitempty"`
	DiscussionURL *string `json:"discussion_url,omitempty"`

	// Reactions
	Reactions *WebhookReleaseEditedReleaseReactions `json:"reactions,omitempty"`
}

// WebhookReleaseEditedReleaseAssetsItem - Data related to a release.
type WebhookReleaseEditedReleaseAssetsItem struct {
	// REQUIRED
	BrowserDownloadURL *string `json:"browser_download_url,omitempty"`

	// REQUIRED
	ContentType *string `json:"content_type,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DownloadCount *int32 `json:"download_count,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED; The file name of the asset.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED; State of the release asset.
	State *WebhookReleaseEditedReleaseAssetsItemState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// User
	Uploader *WebhookReleaseEditedReleaseAssetsItemUploader `json:"uploader,omitempty"`
}

// WebhookReleaseEditedReleaseAssetsItemUploader - User
type WebhookReleaseEditedReleaseAssetsItemUploader struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2917 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleaseEditedReleaseAuthor - User
type WebhookReleaseEditedReleaseAuthor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookReleaseEditedReleaseAuthorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleaseEditedReleaseReactions - Reactions
type WebhookReleaseEditedReleaseReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookReleasePrereleased - release prereleased event
type WebhookReleasePrereleased struct {
	// REQUIRED
	Action *WebhookReleasePrereleasedAction `json:"action,omitempty"`

	// REQUIRED
	Release *WebhookReleasePrereleasedRelease `json:"release,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

type WebhookReleasePrereleasedRelease struct {
}

// WebhookReleasePrereleasedRelease0AssetsItem - Data related to a release.
type WebhookReleasePrereleasedRelease0AssetsItem struct {
	// REQUIRED
	BrowserDownloadURL *string `json:"browser_download_url,omitempty"`

	// REQUIRED
	ContentType *string `json:"content_type,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DownloadCount *int32 `json:"download_count,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED; The file name of the asset.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED; State of the release asset.
	State *WebhookReleasePrereleasedReleaseOneOf0AssetsItemState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// User
	Uploader *WebhookReleasePrereleasedReleaseOneOf0AssetsItemUploader `json:"uploader,omitempty"`
}

// WebhookReleasePrereleasedRelease0Author - User
type WebhookReleasePrereleasedRelease0Author struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookReleasePrereleasedRelease0AuthorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleasePrereleasedRelease0Reactions - Reactions
type WebhookReleasePrereleasedRelease0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookReleasePrereleasedRelease1Author struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleasePrereleasedReleaseOneOf0AssetsItemUploader - User
type WebhookReleasePrereleasedReleaseOneOf0AssetsItemUploader struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2921 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleasePublished - release published event
type WebhookReleasePublished struct {
	// REQUIRED
	Action *WebhookReleasePublishedAction `json:"action,omitempty"`

	// REQUIRED
	Release *WebhookReleasePublishedRelease `json:"release,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

type WebhookReleasePublishedRelease struct {
}

// WebhookReleasePublishedRelease0AssetsItem - Data related to a release.
type WebhookReleasePublishedRelease0AssetsItem struct {
	// REQUIRED
	BrowserDownloadURL *string `json:"browser_download_url,omitempty"`

	// REQUIRED
	ContentType *string `json:"content_type,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DownloadCount *int32 `json:"download_count,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED; The file name of the asset.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED; State of the release asset.
	State *WebhookReleasePublishedReleaseOneOf0AssetsItemState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// User
	Uploader *WebhookReleasePublishedReleaseOneOf0AssetsItemUploader `json:"uploader,omitempty"`
}

// WebhookReleasePublishedRelease0Author - User
type WebhookReleasePublishedRelease0Author struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookReleasePublishedRelease0AuthorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleasePublishedRelease0Reactions - Reactions
type WebhookReleasePublishedRelease0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookReleasePublishedRelease1Author struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleasePublishedReleaseOneOf0AssetsItemUploader - User
type WebhookReleasePublishedReleaseOneOf0AssetsItemUploader struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2926 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleaseReleased - release released event
type WebhookReleaseReleased struct {
	// REQUIRED
	Action *WebhookReleaseReleasedAction `json:"action,omitempty"`

	// REQUIRED; The release [https://docs.github.com/rest/reference/repos/#get-a-release] object.
	Release *WebhookReleaseReleasedRelease `json:"release,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookReleaseReleasedRelease - The release [https://docs.github.com/rest/reference/repos/#get-a-release] object.
type WebhookReleaseReleasedRelease struct {
	// REQUIRED
	Assets []*WebhookReleaseReleasedReleaseAssetsItem `json:"assets,omitempty"`

	// REQUIRED
	AssetsURL *string `json:"assets_url,omitempty"`

	// REQUIRED; User
	Author *WebhookReleaseReleasedReleaseAuthor `json:"author,omitempty"`

	// REQUIRED
	Body *string `json:"body,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; Whether the release is a draft or published
	Draft *bool `json:"draft,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Whether the release is identified as a prerelease or a full release.
	Prerelease *bool `json:"prerelease,omitempty"`

	// REQUIRED
	PublishedAt *time.Time `json:"published_at,omitempty"`

	// REQUIRED; The name of the tag.
	TagName *string `json:"tag_name,omitempty"`

	// REQUIRED
	TarballURL *string `json:"tarball_url,omitempty"`

	// REQUIRED; Specifies the commitish value that determines where the Git tag is created from.
	TargetCommitish *string `json:"target_commitish,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UploadURL *string `json:"upload_url,omitempty"`

	// REQUIRED
	ZipballURL *string `json:"zipball_url,omitempty"`
	DiscussionURL *string `json:"discussion_url,omitempty"`

	// Reactions
	Reactions *WebhookReleaseReleasedReleaseReactions `json:"reactions,omitempty"`
}

// WebhookReleaseReleasedReleaseAssetsItem - Data related to a release.
type WebhookReleaseReleasedReleaseAssetsItem struct {
	// REQUIRED
	BrowserDownloadURL *string `json:"browser_download_url,omitempty"`

	// REQUIRED
	ContentType *string `json:"content_type,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DownloadCount *int32 `json:"download_count,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED; The file name of the asset.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED; State of the release asset.
	State *WebhookReleaseReleasedReleaseAssetsItemState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// User
	Uploader *WebhookReleaseReleasedReleaseAssetsItemUploader `json:"uploader,omitempty"`
}

// WebhookReleaseReleasedReleaseAssetsItemUploader - User
type WebhookReleaseReleasedReleaseAssetsItemUploader struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2930 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleaseReleasedReleaseAuthor - User
type WebhookReleaseReleasedReleaseAuthor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookReleaseReleasedReleaseAuthorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleaseReleasedReleaseReactions - Reactions
type WebhookReleaseReleasedReleaseReactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookReleaseUnpublished - release unpublished event
type WebhookReleaseUnpublished struct {
	// REQUIRED
	Action *WebhookReleaseUnpublishedAction `json:"action,omitempty"`

	// REQUIRED
	Release *WebhookReleaseUnpublishedRelease `json:"release,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

type WebhookReleaseUnpublishedRelease struct {
}

// WebhookReleaseUnpublishedRelease0AssetsItem - Data related to a release.
type WebhookReleaseUnpublishedRelease0AssetsItem struct {
	// REQUIRED
	BrowserDownloadURL *string `json:"browser_download_url,omitempty"`

	// REQUIRED
	ContentType *string `json:"content_type,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DownloadCount *int32 `json:"download_count,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Label *string `json:"label,omitempty"`

	// REQUIRED; The file name of the asset.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED; State of the release asset.
	State *WebhookReleaseUnpublishedReleaseOneOf0AssetsItemState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// User
	Uploader *WebhookReleaseUnpublishedReleaseOneOf0AssetsItemUploader `json:"uploader,omitempty"`
}

// WebhookReleaseUnpublishedRelease0Author - User
type WebhookReleaseUnpublishedRelease0Author struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookReleaseUnpublishedRelease0AuthorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleaseUnpublishedRelease0Reactions - Reactions
type WebhookReleaseUnpublishedRelease0Reactions struct {
	// REQUIRED
	ThumbsUp *int32 `json:"+1,omitempty"`

	// REQUIRED
	ThumbsDown *int32 `json:"-1,omitempty"`

	// REQUIRED
	Confused *int32 `json:"confused,omitempty"`

	// REQUIRED
	Eyes *int32 `json:"eyes,omitempty"`

	// REQUIRED
	Heart *int32 `json:"heart,omitempty"`

	// REQUIRED
	Hooray *int32 `json:"hooray,omitempty"`

	// REQUIRED
	Laugh *int32 `json:"laugh,omitempty"`

	// REQUIRED
	Rocket *int32 `json:"rocket,omitempty"`

	// REQUIRED
	TotalCount *int32 `json:"total_count,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookReleaseUnpublishedRelease1Author struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookReleaseUnpublishedReleaseOneOf0AssetsItemUploader - User
type WebhookReleaseUnpublishedReleaseOneOf0AssetsItemUploader struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *Enum2934 `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookRepositoryArchived - repository archived event
type WebhookRepositoryArchived struct {
	// REQUIRED
	Action *WebhookRepositoryArchivedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookRepositoryCreated - repository created event
type WebhookRepositoryCreated struct {
	// REQUIRED
	Action *WebhookRepositoryCreatedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookRepositoryDeleted - repository deleted event
type WebhookRepositoryDeleted struct {
	// REQUIRED
	Action *WebhookRepositoryDeletedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookRepositoryDispatchSample - repository_dispatch event
type WebhookRepositoryDispatchSample struct {
	// REQUIRED
	Action *string `json:"action,omitempty"`

	// REQUIRED
	Branch *string `json:"branch,omitempty"`

	// REQUIRED; Dictionary of
	ClientPayload map[string]any `json:"client_payload,omitempty"`

	// REQUIRED; The GitHub App installation. This property is included when the event is configured for and sent to a GitHub
// App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookRepositoryEdited - repository edited event
type WebhookRepositoryEdited struct {
	// REQUIRED
	Action *WebhookRepositoryEditedAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookRepositoryEditedChanges `json:"changes,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookRepositoryEditedChanges struct {
	DefaultBranch *WebhookRepositoryEditedChangesDefaultBranch `json:"default_branch,omitempty"`
	Description *WebhookRepositoryEditedChangesDescription `json:"description,omitempty"`
	Homepage *WebhookRepositoryEditedChangesHomepage `json:"homepage,omitempty"`
	Topics *WebhookRepositoryEditedChangesTopics `json:"topics,omitempty"`
}

type WebhookRepositoryEditedChangesDefaultBranch struct {
	// REQUIRED
	From *string `json:"from,omitempty"`
}

type WebhookRepositoryEditedChangesDescription struct {
	// REQUIRED
	From *string `json:"from,omitempty"`
}

type WebhookRepositoryEditedChangesHomepage struct {
	// REQUIRED
	From *string `json:"from,omitempty"`
}

type WebhookRepositoryEditedChangesTopics struct {
	From []*string `json:"from,omitempty"`
}

// WebhookRepositoryImport - repository_import event
type WebhookRepositoryImport struct {
	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED
	Status *WebhookRepositoryImportStatus `json:"status,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookRepositoryPrivatized - repository privatized event
type WebhookRepositoryPrivatized struct {
	// REQUIRED
	Action *WebhookRepositoryPrivatizedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookRepositoryPublicized - repository publicized event
type WebhookRepositoryPublicized struct {
	// REQUIRED
	Action *WebhookRepositoryPublicizedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookRepositoryRenamed - repository renamed event
type WebhookRepositoryRenamed struct {
	// REQUIRED
	Action *WebhookRepositoryRenamedAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookRepositoryRenamedChanges `json:"changes,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookRepositoryRenamedChanges struct {
	// REQUIRED
	Repository *WebhookRepositoryRenamedChangesRepository `json:"repository,omitempty"`
}

type WebhookRepositoryRenamedChangesRepository struct {
	// REQUIRED
	Name *WebhookRepositoryRenamedChangesRepositoryName `json:"name,omitempty"`
}

type WebhookRepositoryRenamedChangesRepositoryName struct {
	// REQUIRED
	From *string `json:"from,omitempty"`
}

// WebhookRepositoryTransferred - repository transferred event
type WebhookRepositoryTransferred struct {
	// REQUIRED
	Action *WebhookRepositoryTransferredAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookRepositoryTransferredChanges `json:"changes,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookRepositoryTransferredChanges struct {
	// REQUIRED
	Owner *WebhookRepositoryTransferredChangesOwner `json:"owner,omitempty"`
}

type WebhookRepositoryTransferredChangesOwner struct {
	// REQUIRED
	From *WebhookRepositoryTransferredChangesOwnerFrom `json:"from,omitempty"`
}

type WebhookRepositoryTransferredChangesOwnerFrom struct {
	// Organization
	Organization *WebhookRepositoryTransferredChangesOwnerFromOrganization `json:"organization,omitempty"`

	// User
	User *WebhookRepositoryTransferredChangesOwnerFromUser `json:"user,omitempty"`
}

// WebhookRepositoryTransferredChangesOwnerFromOrganization - Organization
type WebhookRepositoryTransferredChangesOwnerFromOrganization struct {
	// REQUIRED
	AvatarURL *string `json:"avatar_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PublicMembersURL *string `json:"public_members_url,omitempty"`

	// REQUIRED
	ReposURL *string `json:"repos_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
}

// WebhookRepositoryTransferredChangesOwnerFromUser - User
type WebhookRepositoryTransferredChangesOwnerFromUser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookRepositoryTransferredChangesOwnerFromUserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookRepositoryUnarchived - repository unarchived event
type WebhookRepositoryUnarchived struct {
	// REQUIRED
	Action *WebhookRepositoryUnarchivedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookRepositoryVulnerabilityAlertCreate - repositoryvulnerabilityalert create event
type WebhookRepositoryVulnerabilityAlertCreate struct {
	// REQUIRED
	Action *WebhookRepositoryVulnerabilityAlertCreateAction `json:"action,omitempty"`

	// REQUIRED
	Alert *WebhookRepositoryVulnerabilityAlertCreateAlert `json:"alert,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookRepositoryVulnerabilityAlertCreateAlert struct {
}

// WebhookRepositoryVulnerabilityAlertCreateAlert0Dismisser - User
type WebhookRepositoryVulnerabilityAlertCreateAlert0Dismisser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookRepositoryVulnerabilityAlertCreateAlert0DismisserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookRepositoryVulnerabilityAlertDismiss - repositoryvulnerabilityalert dismiss event
type WebhookRepositoryVulnerabilityAlertDismiss struct {
	// REQUIRED
	Action *WebhookRepositoryVulnerabilityAlertDismissAction `json:"action,omitempty"`

	// REQUIRED
	Alert *WebhookRepositoryVulnerabilityAlertDismissAlert `json:"alert,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookRepositoryVulnerabilityAlertDismissAlert struct {
}

// WebhookRepositoryVulnerabilityAlertDismissAlert0Dismisser - User
type WebhookRepositoryVulnerabilityAlertDismissAlert0Dismisser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookRepositoryVulnerabilityAlertDismissAlert0DismisserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookRepositoryVulnerabilityAlertDismissAlert1Dismisser - User
type WebhookRepositoryVulnerabilityAlertDismissAlert1Dismisser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookRepositoryVulnerabilityAlertDismissAlert1DismisserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookRepositoryVulnerabilityAlertReopen - repositoryvulnerabilityalert reopen event
type WebhookRepositoryVulnerabilityAlertReopen struct {
	// REQUIRED
	Action *WebhookRepositoryVulnerabilityAlertReopenAction `json:"action,omitempty"`

	// REQUIRED
	Alert *WebhookRepositoryVulnerabilityAlertReopenAlert `json:"alert,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookRepositoryVulnerabilityAlertReopenAlert struct {
}

// WebhookRepositoryVulnerabilityAlertReopenAlert0Dismisser - User
type WebhookRepositoryVulnerabilityAlertReopenAlert0Dismisser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookRepositoryVulnerabilityAlertReopenAlert0DismisserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookRepositoryVulnerabilityAlertResolve - repositoryvulnerabilityalert resolve event
type WebhookRepositoryVulnerabilityAlertResolve struct {
	// REQUIRED
	Action *WebhookRepositoryVulnerabilityAlertResolveAction `json:"action,omitempty"`

	// REQUIRED
	Alert *WebhookRepositoryVulnerabilityAlertResolveAlert `json:"alert,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookRepositoryVulnerabilityAlertResolveAlert struct {
}

// WebhookRepositoryVulnerabilityAlertResolveAlert0Dismisser - User
type WebhookRepositoryVulnerabilityAlertResolveAlert0Dismisser struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookRepositoryVulnerabilityAlertResolveAlert0DismisserType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSecretScanningAlertCreated - secretscanningalert created event
type WebhookSecretScanningAlertCreated struct {
	// REQUIRED
	Action *WebhookSecretScanningAlertCreatedAction `json:"action,omitempty"`

	// REQUIRED
	Alert *SecretScanningAlert `json:"alert,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookSecretScanningAlertLocationCreated - Secret Scanning Alert Location Created Event
type WebhookSecretScanningAlertLocationCreated struct {
	// REQUIRED
	Alert *SecretScanningAlert `json:"alert,omitempty"`

	// REQUIRED
	Location *SecretScanningLocation `json:"location,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
	Action *WebhookSecretScanningAlertLocationCreatedAction `json:"action,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookSecretScanningAlertLocationCreatedFormEncoded - Secret Scanning Alert Location Created Event
type WebhookSecretScanningAlertLocationCreatedFormEncoded struct {
	// REQUIRED; A URL-encoded string of the secretscanningalert_location.created JSON payload. The decoded payload is a JSON
// object.
	Payload *string `json:"payload,omitempty"`
}

// WebhookSecretScanningAlertReopened - secretscanningalert reopened event
type WebhookSecretScanningAlertReopened struct {
	// REQUIRED
	Action *WebhookSecretScanningAlertReopenedAction `json:"action,omitempty"`

	// REQUIRED
	Alert *SecretScanningAlert `json:"alert,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookSecretScanningAlertResolved - secretscanningalert resolved event
type WebhookSecretScanningAlertResolved struct {
	// REQUIRED
	Action *WebhookSecretScanningAlertResolvedAction `json:"action,omitempty"`

	// REQUIRED
	Alert *WebhookSecretScanningAlertResolvedAlert `json:"alert,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

type WebhookSecretScanningAlertResolvedAlert struct {
	// The REST API URL of the code locations for this alert.
	LocationsURL *string `json:"locations_url,omitempty"`

	// Whether push protection was bypassed for the detected secret.
	PushProtectionBypassed *bool `json:"push_protection_bypassed,omitempty"`

	// The time that push protection was bypassed in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	PushProtectionBypassedAt *time.Time `json:"push_protection_bypassed_at,omitempty"`

	// A GitHub user.
	PushProtectionBypassedBy *NullableSimpleUser `json:"push_protection_bypassed_by,omitempty"`

	// Required when the state is resolved. The reason for resolving the alert.
	Resolution *WebhookSecretScanningAlertResolvedAlertResolution `json:"resolution,omitempty"`

	// An optional comment to resolve an alert.
	ResolutionComment *string `json:"resolution_comment,omitempty"`

	// The time that the alert was resolved in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	ResolvedAt *time.Time `json:"resolved_at,omitempty"`

	// A GitHub user.
	ResolvedBy *NullableSimpleUser `json:"resolved_by,omitempty"`

	// The secret that was detected.
	Secret *string `json:"secret,omitempty"`

	// The type of secret that secret scanning detected.
	SecretType *string `json:"secret_type,omitempty"`

	// User-friendly name for the detected secret, matching the secret_type. For a list of built-in patterns, see "Secret scanning
// patterns
// [https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security]."
	SecretTypeDisplayName *string `json:"secret_type_display_name,omitempty"`

	// Sets the state of the secret scanning alert. You must provide resolution when you set the state to resolved.
	State *SecretScanningAlertState `json:"state,omitempty"`

	// READ-ONLY; The time that the alert was created in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	CreatedAt *time.Time `json:"created_at,omitempty" azure:"ro"`

	// READ-ONLY; The GitHub URL of the alert resource.
	HTMLURL *string `json:"html_url,omitempty" azure:"ro"`

	// READ-ONLY; The security alert number.
	Number *int32 `json:"number,omitempty" azure:"ro"`

	// READ-ONLY; The REST API URL of the alert resource.
	URL *string `json:"url,omitempty" azure:"ro"`

	// READ-ONLY; The time that the alert was last updated in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ.
	UpdatedAt *time.Time `json:"updated_at,omitempty" azure:"ro"`
}

// WebhookSecretScanningAlertRevoked - secretscanningalert revoked event
type WebhookSecretScanningAlertRevoked struct {
	// REQUIRED
	Action *WebhookSecretScanningAlertRevokedAction `json:"action,omitempty"`

	// REQUIRED
	Alert *SecretScanningAlert `json:"alert,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookSecurityAdvisoryPublished - security_advisory published event
type WebhookSecurityAdvisoryPublished struct {
	// REQUIRED
	Action *WebhookSecurityAdvisoryPublishedAction `json:"action,omitempty"`

	// REQUIRED; The details of the security advisory, including summary, description, and severity.
	SecurityAdvisory *WebhookSecurityAdvisoryPublishedSecurityAdvisory `json:"security_advisory,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookSecurityAdvisoryPublishedSecurityAdvisory - The details of the security advisory, including summary, description,
// and severity.
type WebhookSecurityAdvisoryPublishedSecurityAdvisory struct {
	// REQUIRED
	Cvss *WebhookSecurityAdvisoryPublishedSecurityAdvisoryCvss `json:"cvss,omitempty"`

	// REQUIRED
	Cwes []*WebhookSecurityAdvisoryPublishedSecurityAdvisoryCwesItem `json:"cwes,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	GhsaID *string `json:"ghsa_id,omitempty"`

	// REQUIRED
	Identifiers []*WebhookSecurityAdvisoryPublishedSecurityAdvisoryIdentifiersItem `json:"identifiers,omitempty"`

	// REQUIRED
	PublishedAt *string `json:"published_at,omitempty"`

	// REQUIRED
	References []*WebhookSecurityAdvisoryPublishedSecurityAdvisoryReferencesItem `json:"references,omitempty"`

	// REQUIRED
	Severity *string `json:"severity,omitempty"`

	// REQUIRED
	Summary *string `json:"summary,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED
	Vulnerabilities []*WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesItem `json:"vulnerabilities,omitempty"`

	// REQUIRED
	WithdrawnAt *string `json:"withdrawn_at,omitempty"`
}

type WebhookSecurityAdvisoryPublishedSecurityAdvisoryCvss struct {
	// REQUIRED
	Score *float32 `json:"score,omitempty"`

	// REQUIRED
	VectorString *string `json:"vector_string,omitempty"`
}

type WebhookSecurityAdvisoryPublishedSecurityAdvisoryCwesItem struct {
	// REQUIRED
	CweID *string `json:"cwe_id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`
}

type WebhookSecurityAdvisoryPublishedSecurityAdvisoryIdentifiersItem struct {
	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	Value *string `json:"value,omitempty"`
}

type WebhookSecurityAdvisoryPublishedSecurityAdvisoryReferencesItem struct {
	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesItem struct {
	// REQUIRED
	FirstPatchedVersion *WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion `json:"first_patched_version,omitempty"`

	// REQUIRED
	Package *WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesItemPackage `json:"package,omitempty"`

	// REQUIRED
	Severity *string `json:"severity,omitempty"`

	// REQUIRED
	VulnerableVersionRange *string `json:"vulnerable_version_range,omitempty"`
}

type WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion struct {
	// REQUIRED
	Identifier *string `json:"identifier,omitempty"`
}

type WebhookSecurityAdvisoryPublishedSecurityAdvisoryVulnerabilitiesItemPackage struct {
	// REQUIRED
	Ecosystem *string `json:"ecosystem,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`
}

// WebhookSecurityAdvisoryUpdated - security_advisory updated event
type WebhookSecurityAdvisoryUpdated struct {
	// REQUIRED
	Action *WebhookSecurityAdvisoryUpdatedAction `json:"action,omitempty"`

	// REQUIRED; The details of the security advisory, including summary, description, and severity.
	SecurityAdvisory *WebhookSecurityAdvisoryUpdatedSecurityAdvisory `json:"security_advisory,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookSecurityAdvisoryUpdatedSecurityAdvisory - The details of the security advisory, including summary, description,
// and severity.
type WebhookSecurityAdvisoryUpdatedSecurityAdvisory struct {
	// REQUIRED
	Cvss *WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCvss `json:"cvss,omitempty"`

	// REQUIRED
	Cwes []*WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCwesItem `json:"cwes,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	GhsaID *string `json:"ghsa_id,omitempty"`

	// REQUIRED
	Identifiers []*WebhookSecurityAdvisoryUpdatedSecurityAdvisoryIdentifiersItem `json:"identifiers,omitempty"`

	// REQUIRED
	PublishedAt *string `json:"published_at,omitempty"`

	// REQUIRED
	References []*WebhookSecurityAdvisoryUpdatedSecurityAdvisoryReferencesItem `json:"references,omitempty"`

	// REQUIRED
	Severity *string `json:"severity,omitempty"`

	// REQUIRED
	Summary *string `json:"summary,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED
	Vulnerabilities []*WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesItem `json:"vulnerabilities,omitempty"`

	// REQUIRED
	WithdrawnAt *string `json:"withdrawn_at,omitempty"`
}

type WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCvss struct {
	// REQUIRED
	Score *float32 `json:"score,omitempty"`

	// REQUIRED
	VectorString *string `json:"vector_string,omitempty"`
}

type WebhookSecurityAdvisoryUpdatedSecurityAdvisoryCwesItem struct {
	// REQUIRED
	CweID *string `json:"cwe_id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`
}

type WebhookSecurityAdvisoryUpdatedSecurityAdvisoryIdentifiersItem struct {
	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	Value *string `json:"value,omitempty"`
}

type WebhookSecurityAdvisoryUpdatedSecurityAdvisoryReferencesItem struct {
	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesItem struct {
	// REQUIRED
	FirstPatchedVersion *WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion `json:"first_patched_version,omitempty"`

	// REQUIRED
	Package *WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesItemPackage `json:"package,omitempty"`

	// REQUIRED
	Severity *string `json:"severity,omitempty"`

	// REQUIRED
	VulnerableVersionRange *string `json:"vulnerable_version_range,omitempty"`
}

type WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion struct {
	// REQUIRED
	Identifier *string `json:"identifier,omitempty"`
}

type WebhookSecurityAdvisoryUpdatedSecurityAdvisoryVulnerabilitiesItemPackage struct {
	// REQUIRED
	Ecosystem *string `json:"ecosystem,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`
}

// WebhookSecurityAdvisoryWithdrawn - security_advisory withdrawn event
type WebhookSecurityAdvisoryWithdrawn struct {
	// REQUIRED
	Action *WebhookSecurityAdvisoryWithdrawnAction `json:"action,omitempty"`

	// REQUIRED; The details of the security advisory, including summary, description, and severity.
	SecurityAdvisory *WebhookSecurityAdvisoryWithdrawnSecurityAdvisory `json:"security_advisory,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookSecurityAdvisoryWithdrawnSecurityAdvisory - The details of the security advisory, including summary, description,
// and severity.
type WebhookSecurityAdvisoryWithdrawnSecurityAdvisory struct {
	// REQUIRED
	Cvss *WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCvss `json:"cvss,omitempty"`

	// REQUIRED
	Cwes []*WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCwesItem `json:"cwes,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	GhsaID *string `json:"ghsa_id,omitempty"`

	// REQUIRED
	Identifiers []*WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryIdentifiersItem `json:"identifiers,omitempty"`

	// REQUIRED
	PublishedAt *string `json:"published_at,omitempty"`

	// REQUIRED
	References []*WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryReferencesItem `json:"references,omitempty"`

	// REQUIRED
	Severity *string `json:"severity,omitempty"`

	// REQUIRED
	Summary *string `json:"summary,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`

	// REQUIRED
	Vulnerabilities []*WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesItem `json:"vulnerabilities,omitempty"`

	// REQUIRED
	WithdrawnAt *string `json:"withdrawn_at,omitempty"`
}

type WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCvss struct {
	// REQUIRED
	Score *float32 `json:"score,omitempty"`

	// REQUIRED
	VectorString *string `json:"vector_string,omitempty"`
}

type WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryCwesItem struct {
	// REQUIRED
	CweID *string `json:"cwe_id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`
}

type WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryIdentifiersItem struct {
	// REQUIRED
	Type *string `json:"type,omitempty"`

	// REQUIRED
	Value *string `json:"value,omitempty"`
}

type WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryReferencesItem struct {
	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesItem struct {
	// REQUIRED
	FirstPatchedVersion *WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion `json:"first_patched_version,omitempty"`

	// REQUIRED
	Package *WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesItemPackage `json:"package,omitempty"`

	// REQUIRED
	Severity *string `json:"severity,omitempty"`

	// REQUIRED
	VulnerableVersionRange *string `json:"vulnerable_version_range,omitempty"`
}

type WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesItemFirstPatchedVersion struct {
	// REQUIRED
	Identifier *string `json:"identifier,omitempty"`
}

type WebhookSecurityAdvisoryWithdrawnSecurityAdvisoryVulnerabilitiesItemPackage struct {
	// REQUIRED
	Ecosystem *string `json:"ecosystem,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`
}

// WebhookSecurityAndAnalysis - securityandanalysis event
type WebhookSecurityAndAnalysis struct {
	// REQUIRED
	Changes *WebhookSecurityAndAnalysisChanges `json:"changes,omitempty"`

	// REQUIRED; Full Repository
	Repository *FullRepository `json:"repository,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

type WebhookSecurityAndAnalysisChanges struct {
	From *WebhookSecurityAndAnalysisChangesFrom `json:"from,omitempty"`
}

type WebhookSecurityAndAnalysisChangesFrom struct {
	SecurityAndAnalysis *SecurityAndAnalysis `json:"security_and_analysis,omitempty"`
}

// WebhookSponsorshipCancelled - sponsorship cancelled event
type WebhookSponsorshipCancelled struct {
	// REQUIRED
	Action *WebhookSponsorshipCancelledAction `json:"action,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED
	Sponsorship *WebhookSponsorshipCancelledSponsorship `json:"sponsorship,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookSponsorshipCancelledSponsorship struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PrivacyLevel *string `json:"privacy_level,omitempty"`

	// REQUIRED; User
	Sponsor *WebhookSponsorshipCancelledSponsorshipSponsor `json:"sponsor,omitempty"`

	// REQUIRED; User
	Sponsorable *WebhookSponsorshipCancelledSponsorshipSponsorable `json:"sponsorable,omitempty"`

	// REQUIRED; The tier_changed and pending_tier_change will include the original tier before the change or pending change.
// For more information, see the pending tier change payload.
	Tier *WebhookSponsorshipCancelledSponsorshipTier `json:"tier,omitempty"`
	Maintainer *WebhookSponsorshipCancelledSponsorshipMaintainer `json:"maintainer,omitempty"`
}

type WebhookSponsorshipCancelledSponsorshipMaintainer struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipCancelledSponsorshipSponsor - User
type WebhookSponsorshipCancelledSponsorshipSponsor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookSponsorshipCancelledSponsorshipSponsorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipCancelledSponsorshipSponsorable - User
type WebhookSponsorshipCancelledSponsorshipSponsorable struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookSponsorshipCancelledSponsorshipSponsorableType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipCancelledSponsorshipTier - The tier_changed and pending_tier_change will include the original tier before
// the change or pending change. For more information, see the pending tier change payload.
type WebhookSponsorshipCancelledSponsorshipTier struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	IsOneTime *bool `json:"is_one_time,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	MonthlyPriceInDollars *int32 `json:"monthly_price_in_dollars,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`
	IsCustomAmmount *bool `json:"is_custom_ammount,omitempty"`
	IsCustomAmount *bool `json:"is_custom_amount,omitempty"`
}

// WebhookSponsorshipCreated - sponsorship created event
type WebhookSponsorshipCreated struct {
	// REQUIRED
	Action *WebhookSponsorshipCreatedAction `json:"action,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED
	Sponsorship *WebhookSponsorshipCreatedSponsorship `json:"sponsorship,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookSponsorshipCreatedSponsorship struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PrivacyLevel *string `json:"privacy_level,omitempty"`

	// REQUIRED; User
	Sponsor *WebhookSponsorshipCreatedSponsorshipSponsor `json:"sponsor,omitempty"`

	// REQUIRED; User
	Sponsorable *WebhookSponsorshipCreatedSponsorshipSponsorable `json:"sponsorable,omitempty"`

	// REQUIRED; The tier_changed and pending_tier_change will include the original tier before the change or pending change.
// For more information, see the pending tier change payload.
	Tier *WebhookSponsorshipCreatedSponsorshipTier `json:"tier,omitempty"`
	Maintainer *WebhookSponsorshipCreatedSponsorshipMaintainer `json:"maintainer,omitempty"`
}

type WebhookSponsorshipCreatedSponsorshipMaintainer struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipCreatedSponsorshipSponsor - User
type WebhookSponsorshipCreatedSponsorshipSponsor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookSponsorshipCreatedSponsorshipSponsorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipCreatedSponsorshipSponsorable - User
type WebhookSponsorshipCreatedSponsorshipSponsorable struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookSponsorshipCreatedSponsorshipSponsorableType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipCreatedSponsorshipTier - The tier_changed and pending_tier_change will include the original tier before
// the change or pending change. For more information, see the pending tier change payload.
type WebhookSponsorshipCreatedSponsorshipTier struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	IsOneTime *bool `json:"is_one_time,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	MonthlyPriceInDollars *int32 `json:"monthly_price_in_dollars,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`
	IsCustomAmmount *bool `json:"is_custom_ammount,omitempty"`
	IsCustomAmount *bool `json:"is_custom_amount,omitempty"`
}

// WebhookSponsorshipEdited - sponsorship edited event
type WebhookSponsorshipEdited struct {
	// REQUIRED
	Action *WebhookSponsorshipEditedAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookSponsorshipEditedChanges `json:"changes,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED
	Sponsorship *WebhookSponsorshipEditedSponsorship `json:"sponsorship,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookSponsorshipEditedChanges struct {
	PrivacyLevel *WebhookSponsorshipEditedChangesPrivacyLevel `json:"privacy_level,omitempty"`
}

type WebhookSponsorshipEditedChangesPrivacyLevel struct {
	// REQUIRED; The edited event types include the details about the change when someone edits a sponsorship to change the privacy.
	From *string `json:"from,omitempty"`
}

type WebhookSponsorshipEditedSponsorship struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PrivacyLevel *string `json:"privacy_level,omitempty"`

	// REQUIRED; User
	Sponsor *WebhookSponsorshipEditedSponsorshipSponsor `json:"sponsor,omitempty"`

	// REQUIRED; User
	Sponsorable *WebhookSponsorshipEditedSponsorshipSponsorable `json:"sponsorable,omitempty"`

	// REQUIRED; The tier_changed and pending_tier_change will include the original tier before the change or pending change.
// For more information, see the pending tier change payload.
	Tier *WebhookSponsorshipEditedSponsorshipTier `json:"tier,omitempty"`
	Maintainer *WebhookSponsorshipEditedSponsorshipMaintainer `json:"maintainer,omitempty"`
}

type WebhookSponsorshipEditedSponsorshipMaintainer struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipEditedSponsorshipSponsor - User
type WebhookSponsorshipEditedSponsorshipSponsor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookSponsorshipEditedSponsorshipSponsorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipEditedSponsorshipSponsorable - User
type WebhookSponsorshipEditedSponsorshipSponsorable struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookSponsorshipEditedSponsorshipSponsorableType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipEditedSponsorshipTier - The tier_changed and pending_tier_change will include the original tier before
// the change or pending change. For more information, see the pending tier change payload.
type WebhookSponsorshipEditedSponsorshipTier struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	IsOneTime *bool `json:"is_one_time,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	MonthlyPriceInDollars *int32 `json:"monthly_price_in_dollars,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`
	IsCustomAmmount *bool `json:"is_custom_ammount,omitempty"`
	IsCustomAmount *bool `json:"is_custom_amount,omitempty"`
}

// WebhookSponsorshipPendingCancellation - sponsorship pending_cancellation event
type WebhookSponsorshipPendingCancellation struct {
	// REQUIRED
	Action *WebhookSponsorshipPendingCancellationAction `json:"action,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED
	Sponsorship *WebhookSponsorshipPendingCancellationSponsorship `json:"sponsorship,omitempty"`

	// The pending_cancellation and pending_tier_change event types will include the date the cancellation or tier change will
// take effect.
	EffectiveDate *string `json:"effective_date,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookSponsorshipPendingCancellationSponsorship struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PrivacyLevel *string `json:"privacy_level,omitempty"`

	// REQUIRED; User
	Sponsor *WebhookSponsorshipPendingCancellationSponsorshipSponsor `json:"sponsor,omitempty"`

	// REQUIRED; User
	Sponsorable *WebhookSponsorshipPendingCancellationSponsorshipSponsorable `json:"sponsorable,omitempty"`

	// REQUIRED; The tier_changed and pending_tier_change will include the original tier before the change or pending change.
// For more information, see the pending tier change payload.
	Tier *WebhookSponsorshipPendingCancellationSponsorshipTier `json:"tier,omitempty"`
	Maintainer *WebhookSponsorshipPendingCancellationSponsorshipMaintainer `json:"maintainer,omitempty"`
}

type WebhookSponsorshipPendingCancellationSponsorshipMaintainer struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipPendingCancellationSponsorshipSponsor - User
type WebhookSponsorshipPendingCancellationSponsorshipSponsor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookSponsorshipPendingCancellationSponsorshipSponsorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipPendingCancellationSponsorshipSponsorable - User
type WebhookSponsorshipPendingCancellationSponsorshipSponsorable struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookSponsorshipPendingCancellationSponsorshipSponsorableType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipPendingCancellationSponsorshipTier - The tier_changed and pending_tier_change will include the original
// tier before the change or pending change. For more information, see the pending tier change payload.
type WebhookSponsorshipPendingCancellationSponsorshipTier struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	IsOneTime *bool `json:"is_one_time,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	MonthlyPriceInDollars *int32 `json:"monthly_price_in_dollars,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`
	IsCustomAmmount *bool `json:"is_custom_ammount,omitempty"`
	IsCustomAmount *bool `json:"is_custom_amount,omitempty"`
}

// WebhookSponsorshipPendingTierChange - sponsorship pendingtierchange event
type WebhookSponsorshipPendingTierChange struct {
	// REQUIRED
	Action *WebhookSponsorshipPendingTierChangeAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookSponsorshipPendingTierChangeChanges `json:"changes,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED
	Sponsorship *WebhookSponsorshipPendingTierChangeSponsorship `json:"sponsorship,omitempty"`

	// The pending_cancellation and pending_tier_change event types will include the date the cancellation or tier change will
// take effect.
	EffectiveDate *string `json:"effective_date,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookSponsorshipPendingTierChangeChanges struct {
	// REQUIRED
	Tier *WebhookSponsorshipPendingTierChangeChangesTier `json:"tier,omitempty"`
}

type WebhookSponsorshipPendingTierChangeChangesTier struct {
	// REQUIRED; The tier_changed and pending_tier_change will include the original tier before the change or pending change.
// For more information, see the pending tier change payload.
	From *WebhookSponsorshipPendingTierChangeChangesTierFrom `json:"from,omitempty"`
}

// WebhookSponsorshipPendingTierChangeChangesTierFrom - The tier_changed and pending_tier_change will include the original
// tier before the change or pending change. For more information, see the pending tier change payload.
type WebhookSponsorshipPendingTierChangeChangesTierFrom struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	IsOneTime *bool `json:"is_one_time,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	MonthlyPriceInDollars *int32 `json:"monthly_price_in_dollars,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`
	IsCustomAmmount *bool `json:"is_custom_ammount,omitempty"`
	IsCustomAmount *bool `json:"is_custom_amount,omitempty"`
}

type WebhookSponsorshipPendingTierChangeSponsorship struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PrivacyLevel *string `json:"privacy_level,omitempty"`

	// REQUIRED; User
	Sponsor *WebhookSponsorshipPendingTierChangeSponsorshipSponsor `json:"sponsor,omitempty"`

	// REQUIRED; User
	Sponsorable *WebhookSponsorshipPendingTierChangeSponsorshipSponsorable `json:"sponsorable,omitempty"`

	// REQUIRED; The tier_changed and pending_tier_change will include the original tier before the change or pending change.
// For more information, see the pending tier change payload.
	Tier *WebhookSponsorshipPendingTierChangeSponsorshipTier `json:"tier,omitempty"`
	Maintainer *WebhookSponsorshipPendingTierChangeSponsorshipMaintainer `json:"maintainer,omitempty"`
}

type WebhookSponsorshipPendingTierChangeSponsorshipMaintainer struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipPendingTierChangeSponsorshipSponsor - User
type WebhookSponsorshipPendingTierChangeSponsorshipSponsor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookSponsorshipPendingTierChangeSponsorshipSponsorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipPendingTierChangeSponsorshipSponsorable - User
type WebhookSponsorshipPendingTierChangeSponsorshipSponsorable struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookSponsorshipPendingTierChangeSponsorshipSponsorableType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipPendingTierChangeSponsorshipTier - The tier_changed and pending_tier_change will include the original
// tier before the change or pending change. For more information, see the pending tier change payload.
type WebhookSponsorshipPendingTierChangeSponsorshipTier struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	IsOneTime *bool `json:"is_one_time,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	MonthlyPriceInDollars *int32 `json:"monthly_price_in_dollars,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`
	IsCustomAmmount *bool `json:"is_custom_ammount,omitempty"`
	IsCustomAmount *bool `json:"is_custom_amount,omitempty"`
}

// WebhookSponsorshipTierChanged - sponsorship tier_changed event
type WebhookSponsorshipTierChanged struct {
	// REQUIRED
	Action *WebhookSponsorshipTierChangedAction `json:"action,omitempty"`

	// REQUIRED
	Changes *WebhookSponsorshipTierChangedChanges `json:"changes,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED
	Sponsorship *WebhookSponsorshipTierChangedSponsorship `json:"sponsorship,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`
}

type WebhookSponsorshipTierChangedChanges struct {
	// REQUIRED
	Tier *WebhookSponsorshipTierChangedChangesTier `json:"tier,omitempty"`
}

type WebhookSponsorshipTierChangedChangesTier struct {
	// REQUIRED; The tier_changed and pending_tier_change will include the original tier before the change or pending change.
// For more information, see the pending tier change payload.
	From *WebhookSponsorshipTierChangedChangesTierFrom `json:"from,omitempty"`
}

// WebhookSponsorshipTierChangedChangesTierFrom - The tier_changed and pending_tier_change will include the original tier
// before the change or pending change. For more information, see the pending tier change payload.
type WebhookSponsorshipTierChangedChangesTierFrom struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	IsOneTime *bool `json:"is_one_time,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	MonthlyPriceInDollars *int32 `json:"monthly_price_in_dollars,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`
	IsCustomAmmount *bool `json:"is_custom_ammount,omitempty"`
	IsCustomAmount *bool `json:"is_custom_amount,omitempty"`
}

type WebhookSponsorshipTierChangedSponsorship struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	PrivacyLevel *string `json:"privacy_level,omitempty"`

	// REQUIRED; User
	Sponsor *WebhookSponsorshipTierChangedSponsorshipSponsor `json:"sponsor,omitempty"`

	// REQUIRED; User
	Sponsorable *WebhookSponsorshipTierChangedSponsorshipSponsorable `json:"sponsorable,omitempty"`

	// REQUIRED; The tier_changed and pending_tier_change will include the original tier before the change or pending change.
// For more information, see the pending tier change payload.
	Tier *WebhookSponsorshipTierChangedSponsorshipTier `json:"tier,omitempty"`
	Maintainer *WebhookSponsorshipTierChangedSponsorshipMaintainer `json:"maintainer,omitempty"`
}

type WebhookSponsorshipTierChangedSponsorshipMaintainer struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipTierChangedSponsorshipSponsor - User
type WebhookSponsorshipTierChangedSponsorshipSponsor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookSponsorshipTierChangedSponsorshipSponsorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipTierChangedSponsorshipSponsorable - User
type WebhookSponsorshipTierChangedSponsorshipSponsorable struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookSponsorshipTierChangedSponsorshipSponsorableType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookSponsorshipTierChangedSponsorshipTier - The tier_changed and pending_tier_change will include the original tier
// before the change or pending change. For more information, see the pending tier change payload.
type WebhookSponsorshipTierChangedSponsorshipTier struct {
	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	IsOneTime *bool `json:"is_one_time,omitempty"`

	// REQUIRED
	MonthlyPriceInCents *int32 `json:"monthly_price_in_cents,omitempty"`

	// REQUIRED
	MonthlyPriceInDollars *int32 `json:"monthly_price_in_dollars,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`
	IsCustomAmmount *bool `json:"is_custom_ammount,omitempty"`
	IsCustomAmount *bool `json:"is_custom_amount,omitempty"`
}

// WebhookStarCreated - star created event
type WebhookStarCreated struct {
	// REQUIRED
	Action *WebhookStarCreatedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED; The time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for
// the deleted action.
	StarredAt *string `json:"starred_at,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookStarDeleted - star deleted event
type WebhookStarDeleted struct {
	// REQUIRED
	Action *WebhookStarDeletedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED; The time the star was created. This is a timestamp in ISO 8601 format: YYYY-MM-DDTHH:MM:SSZ. Will be null for
// the deleted action.
	StarredAt *string `json:"starred_at,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookStatus - status event
type WebhookStatus struct {
	// REQUIRED; An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or
// may not be the head of the branch. The array includes a maximum of 10 branches.
	Branches []*WebhookStatusBranchesItem `json:"branches,omitempty"`

	// REQUIRED
	Commit *WebhookStatusCommit `json:"commit,omitempty"`

	// REQUIRED
	Context *string `json:"context,omitempty"`

	// REQUIRED
	CreatedAt *string `json:"created_at,omitempty"`

	// REQUIRED; The optional human-readable description added to the status.
	Description *string `json:"description,omitempty"`

	// REQUIRED; The unique identifier of the status.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; The Commit SHA.
	SHA *string `json:"sha,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED; The new state. Can be pending, success, failure, or error.
	State *WebhookStatusState `json:"state,omitempty"`

	// REQUIRED; The optional link added to the status.
	TargetURL *string `json:"target_url,omitempty"`

	// REQUIRED
	UpdatedAt *string `json:"updated_at,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookStatusBranchesItem struct {
	// REQUIRED
	Commit *WebhookStatusBranchesItemCommit `json:"commit,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Protected *bool `json:"protected,omitempty"`
}

type WebhookStatusBranchesItemCommit struct {
	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookStatusCommit struct {
	// REQUIRED; User
	Author *WebhookStatusCommitAuthor `json:"author,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	Commit *WebhookStatusCommitCommit `json:"commit,omitempty"`

	// REQUIRED; User
	Committer *WebhookStatusCommitCommitter `json:"committer,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Parents []*WebhookStatusCommitParentsItem `json:"parents,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookStatusCommitAuthor - User
type WebhookStatusCommitAuthor struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookStatusCommitAuthorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookStatusCommitCommit struct {
	// REQUIRED
	Author *WebhookStatusCommitCommitAuthor `json:"author,omitempty"`

	// REQUIRED
	CommentCount *int32 `json:"comment_count,omitempty"`

	// REQUIRED
	Committer *WebhookStatusCommitCommitCommitter `json:"committer,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	Tree *WebhookStatusCommitTree `json:"tree,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	Verification *WebhookStatusCommitVerification `json:"verification,omitempty"`
}

type WebhookStatusCommitCommitAuthor struct {
}

type WebhookStatusCommitCommitCommitter struct {
}

// WebhookStatusCommitCommitter - User
type WebhookStatusCommitCommitter struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookStatusCommitCommitterType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookStatusCommitParentsItem struct {
	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookStatusCommitTree struct {
	// REQUIRED
	SHA *string `json:"sha,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookStatusCommitVerification struct {
	// REQUIRED
	Payload *string `json:"payload,omitempty"`

	// REQUIRED
	Reason *WebhookStatusCommitVerificationReason `json:"reason,omitempty"`

	// REQUIRED
	Signature *string `json:"signature,omitempty"`

	// REQUIRED
	Verified *bool `json:"verified,omitempty"`
}

// WebhookTeamAdd - team_add event
type WebhookTeamAdd struct {
	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED; Groups of organization members that gives permissions on specified repositories.
	Team *WebhookTeamAddTeam `json:"team,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookTeamAddTeam - Groups of organization members that gives permissions on specified repositories.
type WebhookTeamAddTeam struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookTeamAddTeamParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookTeamAddTeamPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookTeamAddTeamParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *WebhookTeamAddTeamParentPrivacy `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookTeamAddedToRepository - team addedtorepository event
type WebhookTeamAddedToRepository struct {
	// REQUIRED
	Action *WebhookTeamAddedToRepositoryAction `json:"action,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; Groups of organization members that gives permissions on specified repositories.
	Team *WebhookTeamAddedToRepositoryTeam `json:"team,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A git repository
	Repository *WebhookTeamAddedToRepositoryRepository `json:"repository,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

type WebhookTeamAddedToRepositoryCreatedAt struct {
}

// WebhookTeamAddedToRepositoryLicense - License
type WebhookTeamAddedToRepositoryLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookTeamAddedToRepositoryOwner - User
type WebhookTeamAddedToRepositoryOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookTeamAddedToRepositoryOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookTeamAddedToRepositoryPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookTeamAddedToRepositoryPushedAt struct {
}

// WebhookTeamAddedToRepositoryRepository - A git repository
type WebhookTeamAddedToRepositoryRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookTeamAddedToRepositoryCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookTeamAddedToRepositoryLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookTeamAddedToRepositoryOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookTeamAddedToRepositoryPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookTeamAddedToRepositoryVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookTeamAddedToRepositoryPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`
}

// WebhookTeamAddedToRepositoryTeam - Groups of organization members that gives permissions on specified repositories.
type WebhookTeamAddedToRepositoryTeam struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookTeamAddedToRepositoryTeamParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookTeamAddedToRepositoryTeamPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookTeamAddedToRepositoryTeamParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *WebhookTeamAddedToRepositoryTeamParentPrivacy `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookTeamCreated - team created event
type WebhookTeamCreated struct {
	// REQUIRED
	Action *WebhookTeamCreatedAction `json:"action,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED; Groups of organization members that gives permissions on specified repositories.
	Team *WebhookTeamCreatedTeam `json:"team,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A git repository
	Repository *WebhookTeamCreatedRepository `json:"repository,omitempty"`
}

// WebhookTeamCreatedRepository - A git repository
type WebhookTeamCreatedRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookTeamCreatedRepositoryCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookTeamCreatedRepositoryLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookTeamCreatedRepositoryOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookTeamCreatedRepositoryPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookTeamCreatedRepositoryVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookTeamCreatedRepositoryPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`
}

type WebhookTeamCreatedRepositoryCreatedAt struct {
}

// WebhookTeamCreatedRepositoryLicense - License
type WebhookTeamCreatedRepositoryLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookTeamCreatedRepositoryOwner - User
type WebhookTeamCreatedRepositoryOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookTeamCreatedRepositoryOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookTeamCreatedRepositoryPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookTeamCreatedRepositoryPushedAt struct {
}

// WebhookTeamCreatedTeam - Groups of organization members that gives permissions on specified repositories.
type WebhookTeamCreatedTeam struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookTeamCreatedTeamParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookTeamCreatedTeamPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookTeamCreatedTeamParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *WebhookTeamCreatedTeamParentPrivacy `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookTeamDeleted - team deleted event
type WebhookTeamDeleted struct {
	// REQUIRED
	Action *WebhookTeamDeletedAction `json:"action,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; Groups of organization members that gives permissions on specified repositories.
	Team *WebhookTeamDeletedTeam `json:"team,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A git repository
	Repository *WebhookTeamDeletedRepository `json:"repository,omitempty"`

	// A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`
}

// WebhookTeamDeletedRepository - A git repository
type WebhookTeamDeletedRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookTeamDeletedRepositoryCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookTeamDeletedRepositoryLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookTeamDeletedRepositoryOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookTeamDeletedRepositoryPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookTeamDeletedRepositoryVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookTeamDeletedRepositoryPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`
}

type WebhookTeamDeletedRepositoryCreatedAt struct {
}

// WebhookTeamDeletedRepositoryLicense - License
type WebhookTeamDeletedRepositoryLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookTeamDeletedRepositoryOwner - User
type WebhookTeamDeletedRepositoryOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookTeamDeletedRepositoryOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookTeamDeletedRepositoryPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookTeamDeletedRepositoryPushedAt struct {
}

// WebhookTeamDeletedTeam - Groups of organization members that gives permissions on specified repositories.
type WebhookTeamDeletedTeam struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookTeamDeletedTeamParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookTeamDeletedTeamPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookTeamDeletedTeamParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *WebhookTeamDeletedTeamParentPrivacy `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookTeamEdited - team edited event
type WebhookTeamEdited struct {
	// REQUIRED
	Action *WebhookTeamEditedAction `json:"action,omitempty"`

	// REQUIRED; The changes to the team if the action was edited.
	Changes *WebhookTeamEditedChanges `json:"changes,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED; Groups of organization members that gives permissions on specified repositories.
	Team *WebhookTeamEditedTeam `json:"team,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A git repository
	Repository *WebhookTeamEditedRepository `json:"repository,omitempty"`
}

// WebhookTeamEditedChanges - The changes to the team if the action was edited.
type WebhookTeamEditedChanges struct {
	Description *WebhookTeamEditedChangesDescription `json:"description,omitempty"`
	Name *WebhookTeamEditedChangesName `json:"name,omitempty"`
	Privacy *WebhookTeamEditedChangesPrivacy `json:"privacy,omitempty"`
	Repository *WebhookTeamEditedChangesRepository `json:"repository,omitempty"`
}

type WebhookTeamEditedChangesDescription struct {
	// REQUIRED; The previous version of the description if the action was edited.
	From *string `json:"from,omitempty"`
}

type WebhookTeamEditedChangesName struct {
	// REQUIRED; The previous version of the name if the action was edited.
	From *string `json:"from,omitempty"`
}

type WebhookTeamEditedChangesPrivacy struct {
	// REQUIRED; The previous version of the team's privacy if the action was edited.
	From *string `json:"from,omitempty"`
}

type WebhookTeamEditedChangesRepository struct {
	// REQUIRED
	Permissions *WebhookTeamEditedChangesRepositoryPermissions `json:"permissions,omitempty"`
}

type WebhookTeamEditedChangesRepositoryPermissions struct {
	// REQUIRED
	From *WebhookTeamEditedChangesRepositoryPermissionsFrom `json:"from,omitempty"`
}

type WebhookTeamEditedChangesRepositoryPermissionsFrom struct {
	// The previous version of the team member's admin permission on a repository, if the action was edited.
	Admin *bool `json:"admin,omitempty"`

	// The previous version of the team member's pull permission on a repository, if the action was edited.
	Pull *bool `json:"pull,omitempty"`

	// The previous version of the team member's push permission on a repository, if the action was edited.
	Push *bool `json:"push,omitempty"`
}

// WebhookTeamEditedRepository - A git repository
type WebhookTeamEditedRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookTeamEditedRepositoryCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookTeamEditedRepositoryLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookTeamEditedRepositoryOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookTeamEditedRepositoryPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookTeamEditedRepositoryVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookTeamEditedRepositoryPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`
}

type WebhookTeamEditedRepositoryCreatedAt struct {
}

// WebhookTeamEditedRepositoryLicense - License
type WebhookTeamEditedRepositoryLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookTeamEditedRepositoryOwner - User
type WebhookTeamEditedRepositoryOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookTeamEditedRepositoryOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookTeamEditedRepositoryPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookTeamEditedRepositoryPushedAt struct {
}

// WebhookTeamEditedTeam - Groups of organization members that gives permissions on specified repositories.
type WebhookTeamEditedTeam struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookTeamEditedTeamParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookTeamEditedTeamPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookTeamEditedTeamParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *WebhookTeamEditedTeamParentPrivacy `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookTeamRemovedFromRepository - team removedfromrepository event
type WebhookTeamRemovedFromRepository struct {
	// REQUIRED
	Action *WebhookTeamRemovedFromRepositoryAction `json:"action,omitempty"`

	// REQUIRED; A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED; Groups of organization members that gives permissions on specified repositories.
	Team *WebhookTeamRemovedFromRepositoryTeam `json:"team,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A git repository
	Repository *WebhookTeamRemovedFromRepositoryRepository `json:"repository,omitempty"`
}

type WebhookTeamRemovedFromRepositoryCreatedAt struct {
}

// WebhookTeamRemovedFromRepositoryLicense - License
type WebhookTeamRemovedFromRepositoryLicense struct {
	// REQUIRED
	Key *string `json:"key,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	SpdxID *string `json:"spdx_id,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookTeamRemovedFromRepositoryOwner - User
type WebhookTeamRemovedFromRepositoryOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookTeamRemovedFromRepositoryOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookTeamRemovedFromRepositoryPermissions struct {
	// REQUIRED
	Admin *bool `json:"admin,omitempty"`

	// REQUIRED
	Pull *bool `json:"pull,omitempty"`

	// REQUIRED
	Push *bool `json:"push,omitempty"`
	Maintain *bool `json:"maintain,omitempty"`
	Triage *bool `json:"triage,omitempty"`
}

type WebhookTeamRemovedFromRepositoryPushedAt struct {
}

// WebhookTeamRemovedFromRepositoryRepository - A git repository
type WebhookTeamRemovedFromRepositoryRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED; Whether the repository is archived.
	Archived *bool `json:"archived,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CloneURL *string `json:"clone_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	CreatedAt *WebhookTeamRemovedFromRepositoryCreatedAt `json:"created_at,omitempty"`

	// REQUIRED; The default branch of the repository.
	DefaultBranch *string `json:"default_branch,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	Forks *int32 `json:"forks,omitempty"`

	// REQUIRED
	ForksCount *int32 `json:"forks_count,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	GitURL *string `json:"git_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Whether downloads are enabled.
	HasDownloads *bool `json:"has_downloads,omitempty"`

	// REQUIRED; Whether issues are enabled.
	HasIssues *bool `json:"has_issues,omitempty"`

	// REQUIRED
	HasPages *bool `json:"has_pages,omitempty"`

	// REQUIRED; Whether projects are enabled.
	HasProjects *bool `json:"has_projects,omitempty"`

	// REQUIRED; Whether the wiki is enabled.
	HasWiki *bool `json:"has_wiki,omitempty"`

	// REQUIRED
	Homepage *string `json:"homepage,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	Language *string `json:"language,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED; License
	License *WebhookTeamRemovedFromRepositoryLicense `json:"license,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED
	MirrorURL *string `json:"mirror_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED
	OpenIssues *int32 `json:"open_issues,omitempty"`

	// REQUIRED
	OpenIssuesCount *int32 `json:"open_issues_count,omitempty"`

	// REQUIRED; User
	Owner *WebhookTeamRemovedFromRepositoryOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	PushedAt *WebhookTeamRemovedFromRepositoryPushedAt `json:"pushed_at,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	SSHURL *string `json:"ssh_url,omitempty"`

	// REQUIRED
	Size *int32 `json:"size,omitempty"`

	// REQUIRED
	StargazersCount *int32 `json:"stargazers_count,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	SvnURL *string `json:"svn_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	Topics []*string `json:"topics,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	Visibility *WebhookTeamRemovedFromRepositoryVisibility `json:"visibility,omitempty"`

	// REQUIRED
	Watchers *int32 `json:"watchers,omitempty"`

	// REQUIRED
	WatchersCount *int32 `json:"watchers_count,omitempty"`

	// Whether to allow auto-merge for pull requests.
	AllowAutoMerge *bool `json:"allow_auto_merge,omitempty"`

	// Whether to allow private forks
	AllowForking *bool `json:"allow_forking,omitempty"`

	// Whether to allow merge commits for pull requests.
	AllowMergeCommit *bool `json:"allow_merge_commit,omitempty"`

	// Whether to allow rebase merges for pull requests.
	AllowRebaseMerge *bool `json:"allow_rebase_merge,omitempty"`

	// Whether to allow squash merges for pull requests.
	AllowSquashMerge *bool `json:"allow_squash_merge,omitempty"`
	AllowUpdateBranch *bool `json:"allow_update_branch,omitempty"`

	// Whether to delete head branches when pull requests are merged
	DeleteBranchOnMerge *bool `json:"delete_branch_on_merge,omitempty"`

	// Returns whether or not this repository is disabled.
	Disabled *bool `json:"disabled,omitempty"`
	IsTemplate *bool `json:"is_template,omitempty"`
	MasterBranch *string `json:"master_branch,omitempty"`
	Organization *string `json:"organization,omitempty"`
	Permissions *WebhookTeamRemovedFromRepositoryPermissions `json:"permissions,omitempty"`
	Public *bool `json:"public,omitempty"`
	RoleName *string `json:"role_name,omitempty"`
	Stargazers *int32 `json:"stargazers,omitempty"`
}

// WebhookTeamRemovedFromRepositoryTeam - Groups of organization members that gives permissions on specified repositories.
type WebhookTeamRemovedFromRepositoryTeam struct {
	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`

	// Description of the team
	Description *string `json:"description,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	MembersURL *string `json:"members_url,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	Parent *WebhookTeamRemovedFromRepositoryTeamParent `json:"parent,omitempty"`

	// Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`
	Privacy *WebhookTeamRemovedFromRepositoryTeamPrivacy `json:"privacy,omitempty"`
	RepositoriesURL *string `json:"repositories_url,omitempty"`
	Slug *string `json:"slug,omitempty"`

	// URL for the team
	URL *string `json:"url,omitempty"`
}

type WebhookTeamRemovedFromRepositoryTeamParent struct {
	// REQUIRED; Description of the team
	Description *string `json:"description,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; Unique identifier of the team
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	MembersURL *string `json:"members_url,omitempty"`

	// REQUIRED; Name of the team
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; Permission that the team will have for its repositories
	Permission *string `json:"permission,omitempty"`

	// REQUIRED
	Privacy *WebhookTeamRemovedFromRepositoryTeamParentPrivacy `json:"privacy,omitempty"`

	// REQUIRED
	RepositoriesURL *string `json:"repositories_url,omitempty"`

	// REQUIRED
	Slug *string `json:"slug,omitempty"`

	// REQUIRED; URL for the team
	URL *string `json:"url,omitempty"`
}

// WebhookWatchStarted - watch started event
type WebhookWatchStarted struct {
	// REQUIRED
	Action *WebhookWatchStartedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookWorkflowDispatch - workflow_dispatch event
type WebhookWorkflowDispatch struct {
	// REQUIRED
	Inputs *WebhookWorkflowDispatchInputs `json:"inputs,omitempty"`

	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED
	Workflow *string `json:"workflow,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookWorkflowDispatchInputs struct {
	Name *string `json:"name,omitempty"`
	Number *string `json:"number,omitempty"`
}

// WebhookWorkflowJobCompleted - workflow_job completed event
type WebhookWorkflowJobCompleted struct {
	// REQUIRED
	Action *WebhookWorkflowJobCompletedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED
	WorkflowJob *WebhookWorkflowJobCompletedWorkflowJob `json:"workflow_job,omitempty"`

	// A request for a specific ref(branch,sha,tag) to be deployed
	Deployment *Deployment `json:"deployment,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookWorkflowJobCompletedWorkflowJob struct {
}

// WebhookWorkflowJobCompletedWorkflowJob0StepsItem - Workflow Step
type WebhookWorkflowJobCompletedWorkflowJob0StepsItem struct {
	// REQUIRED
	CompletedAt *string `json:"completed_at,omitempty"`

	// REQUIRED
	Conclusion *WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusion `json:"conclusion,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	StartedAt *string `json:"started_at,omitempty"`

	// REQUIRED
	Status *WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatus `json:"status,omitempty"`
}

// WebhookWorkflowJobInProgress - workflowjob inprogress event
type WebhookWorkflowJobInProgress struct {
	// REQUIRED
	Action *WebhookWorkflowJobInProgressAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED
	WorkflowJob *WebhookWorkflowJobInProgressWorkflowJob `json:"workflow_job,omitempty"`

	// A request for a specific ref(branch,sha,tag) to be deployed
	Deployment *Deployment `json:"deployment,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookWorkflowJobInProgressWorkflowJob struct {
}

// WebhookWorkflowJobInProgressWorkflowJob0StepsItem - Workflow Step
type WebhookWorkflowJobInProgressWorkflowJob0StepsItem struct {
	// REQUIRED
	CompletedAt *string `json:"completed_at,omitempty"`

	// REQUIRED
	Conclusion *WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusion `json:"conclusion,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	StartedAt *string `json:"started_at,omitempty"`

	// REQUIRED
	Status *WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatus `json:"status,omitempty"`
}

// WebhookWorkflowJobInProgressWorkflowJob1StepsItem - Workflow Step
type WebhookWorkflowJobInProgressWorkflowJob1StepsItem struct {
	// REQUIRED
	CompletedAt *string `json:"completed_at,omitempty"`

	// REQUIRED
	Conclusion *string `json:"conclusion,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	StartedAt *string `json:"started_at,omitempty"`

	// REQUIRED
	Status *WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatus `json:"status,omitempty"`
}

// WebhookWorkflowJobQueued - workflow_job queued event
type WebhookWorkflowJobQueued struct {
	// REQUIRED
	Action *WebhookWorkflowJobQueuedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED
	WorkflowJob *WebhookWorkflowJobQueuedWorkflowJob `json:"workflow_job,omitempty"`

	// A request for a specific ref(branch,sha,tag) to be deployed
	Deployment *Deployment `json:"deployment,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookWorkflowJobQueuedWorkflowJob struct {
	// REQUIRED
	CheckRunURL *string `json:"check_run_url,omitempty"`

	// REQUIRED
	CompletedAt *string `json:"completed_at,omitempty"`

	// REQUIRED
	Conclusion *string `json:"conclusion,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The name of the current branch.
	HeadBranch *string `json:"head_branch,omitempty"`

	// REQUIRED
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Labels []*string `json:"labels,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	RunAttempt *int32 `json:"run_attempt,omitempty"`

	// REQUIRED
	RunID *float32 `json:"run_id,omitempty"`

	// REQUIRED
	RunURL *string `json:"run_url,omitempty"`

	// REQUIRED
	RunnerGroupID *int32 `json:"runner_group_id,omitempty"`

	// REQUIRED
	RunnerGroupName *string `json:"runner_group_name,omitempty"`

	// REQUIRED
	RunnerID *int32 `json:"runner_id,omitempty"`

	// REQUIRED
	RunnerName *string `json:"runner_name,omitempty"`

	// REQUIRED
	StartedAt *time.Time `json:"started_at,omitempty"`

	// REQUIRED
	Status *WebhookWorkflowJobQueuedWorkflowJobStatus `json:"status,omitempty"`

	// REQUIRED
	Steps []*WebhookWorkflowJobQueuedWorkflowJobStepsItem `json:"steps,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED; The name of the workflow.
	WorkflowName *string `json:"workflow_name,omitempty"`
}

// WebhookWorkflowJobQueuedWorkflowJobStepsItem - Workflow Step
type WebhookWorkflowJobQueuedWorkflowJobStepsItem struct {
	// REQUIRED
	CompletedAt *string `json:"completed_at,omitempty"`

	// REQUIRED
	Conclusion *WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusion `json:"conclusion,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	StartedAt *string `json:"started_at,omitempty"`

	// REQUIRED
	Status *WebhookWorkflowJobQueuedWorkflowJobStepsItemStatus `json:"status,omitempty"`
}

// WebhookWorkflowJobWaiting - workflow_job waiting event
type WebhookWorkflowJobWaiting struct {
	// REQUIRED
	Action *WebhookWorkflowJobWaitingAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED
	WorkflowJob *WebhookWorkflowJobWaitingWorkflowJob `json:"workflow_job,omitempty"`

	// A request for a specific ref(branch,sha,tag) to be deployed
	Deployment *Deployment `json:"deployment,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

type WebhookWorkflowJobWaitingWorkflowJob struct {
	// REQUIRED
	CheckRunURL *string `json:"check_run_url,omitempty"`

	// REQUIRED
	CompletedAt *string `json:"completed_at,omitempty"`

	// REQUIRED
	Conclusion *string `json:"conclusion,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The name of the current branch.
	HeadBranch *string `json:"head_branch,omitempty"`

	// REQUIRED
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Labels []*string `json:"labels,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	RunAttempt *int32 `json:"run_attempt,omitempty"`

	// REQUIRED
	RunID *float32 `json:"run_id,omitempty"`

	// REQUIRED
	RunURL *string `json:"run_url,omitempty"`

	// REQUIRED
	RunnerGroupID *int32 `json:"runner_group_id,omitempty"`

	// REQUIRED
	RunnerGroupName *string `json:"runner_group_name,omitempty"`

	// REQUIRED
	RunnerID *int32 `json:"runner_id,omitempty"`

	// REQUIRED
	RunnerName *string `json:"runner_name,omitempty"`

	// REQUIRED
	StartedAt *time.Time `json:"started_at,omitempty"`

	// REQUIRED
	Status *WebhookWorkflowJobWaitingWorkflowJobStatus `json:"status,omitempty"`

	// REQUIRED
	Steps []*WebhookWorkflowJobWaitingWorkflowJobStepsItem `json:"steps,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED; The name of the workflow.
	WorkflowName *string `json:"workflow_name,omitempty"`
}

// WebhookWorkflowJobWaitingWorkflowJobStepsItem - Workflow Step
type WebhookWorkflowJobWaitingWorkflowJobStepsItem struct {
	// REQUIRED
	CompletedAt *string `json:"completed_at,omitempty"`

	// REQUIRED
	Conclusion *WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusion `json:"conclusion,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	Number *int32 `json:"number,omitempty"`

	// REQUIRED
	StartedAt *string `json:"started_at,omitempty"`

	// REQUIRED
	Status *WebhookWorkflowJobWaitingWorkflowJobStepsItemStatus `json:"status,omitempty"`
}

// WebhookWorkflowRunCompleted - workflow_run completed event
type WebhookWorkflowRunCompleted struct {
	// REQUIRED
	Action *WebhookWorkflowRunCompletedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED; Workflow
	Workflow *WebhookWorkflowRunCompletedWorkflow `json:"workflow,omitempty"`

	// REQUIRED
	WorkflowRun *WebhookWorkflowRunCompletedWorkflowRun `json:"workflow_run,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookWorkflowRunCompletedWorkflow - Workflow
type WebhookWorkflowRunCompletedWorkflow struct {
	// REQUIRED
	BadgeURL *string `json:"badge_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

type WebhookWorkflowRunCompletedWorkflowRun struct {
}

// WebhookWorkflowRunCompletedWorkflowRun0Actor - User
type WebhookWorkflowRunCompletedWorkflowRun0Actor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookWorkflowRunCompletedWorkflowRun0ActorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookWorkflowRunCompletedWorkflowRun0HeadCommit - SimpleCommit
type WebhookWorkflowRunCompletedWorkflowRun0HeadCommit struct {
	// REQUIRED; Metaproperties for Git author/committer information.
	Author *WebhookWorkflowRunCompletedWorkflowRun0HeadCommitAuthor `json:"author,omitempty"`

	// REQUIRED; Metaproperties for Git author/committer information.
	Committer *WebhookWorkflowRunCompletedWorkflowRun0HeadCommitCommitter `json:"committer,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	Timestamp *string `json:"timestamp,omitempty"`

	// REQUIRED
	TreeID *string `json:"tree_id,omitempty"`
}

// WebhookWorkflowRunCompletedWorkflowRun0HeadCommitAuthor - Metaproperties for Git author/committer information.
type WebhookWorkflowRunCompletedWorkflowRun0HeadCommitAuthor struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookWorkflowRunCompletedWorkflowRun0HeadCommitCommitter - Metaproperties for Git author/committer information.
type WebhookWorkflowRunCompletedWorkflowRun0HeadCommitCommitter struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookWorkflowRunCompletedWorkflowRun0HeadRepository - Repository Lite
type WebhookWorkflowRunCompletedWorkflowRun0HeadRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED; User
	Owner *WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwner - User
type WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunCompletedWorkflowRun0PullRequestsItem struct {
	// REQUIRED
	Base *WebhookWorkflowRunCompletedWorkflowRunOneOf0PullRequestsItemBase `json:"base,omitempty"`

	// REQUIRED
	Head *WebhookWorkflowRunCompletedWorkflowRunOneOf0PullRequestsItemHead `json:"head,omitempty"`

	// REQUIRED
	ID *float32 `json:"id,omitempty"`

	// REQUIRED
	Number *float32 `json:"number,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunCompletedWorkflowRun0ReferencedWorkflowsItem struct {
	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
	Ref *string `json:"ref,omitempty"`
}

// WebhookWorkflowRunCompletedWorkflowRun0Repository - Repository Lite
type WebhookWorkflowRunCompletedWorkflowRun0Repository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED; User
	Owner *WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwner - User
type WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookWorkflowRunCompletedWorkflowRun0TriggeringActor - User
type WebhookWorkflowRunCompletedWorkflowRun0TriggeringActor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookWorkflowRunCompletedWorkflowRun0TriggeringActorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunCompletedWorkflowRun1Actor struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunCompletedWorkflowRun1HeadCommit struct {
	Author *WebhookWorkflowRunCompletedWorkflowRun1HeadCommitAuthor `json:"author,omitempty"`
	Committer *WebhookWorkflowRunCompletedWorkflowRun1HeadCommitCommitter `json:"committer,omitempty"`
	ID *string `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	TreeID *string `json:"tree_id,omitempty"`
}

type WebhookWorkflowRunCompletedWorkflowRun1HeadCommitAuthor struct {
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
}

type WebhookWorkflowRunCompletedWorkflowRun1HeadCommitCommitter struct {
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
}

type WebhookWorkflowRunCompletedWorkflowRun1HeadRepository struct {
	ArchiveURL *string `json:"archive_url,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	Owner *WebhookWorkflowRunCompletedWorkflowRun1HeadRepositoryOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunCompletedWorkflowRun1HeadRepositoryOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunCompletedWorkflowRun1ReferencedWorkflowsItem struct {
	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
	Ref *string `json:"ref,omitempty"`
}

type WebhookWorkflowRunCompletedWorkflowRun1Repository struct {
	ArchiveURL *string `json:"archive_url,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	Owner *WebhookWorkflowRunCompletedWorkflowRun1RepositoryOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunCompletedWorkflowRun1RepositoryOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunCompletedWorkflowRun1TriggeringActor struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunCompletedWorkflowRunOneOf0PullRequestsItemBase struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *Components13Bbe0JSchemasWebhookWorkflowRunCompletedPropertiesWorkflowRunOneof0PropertiesPullRequestsItemsPropertiesBasePropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

type WebhookWorkflowRunCompletedWorkflowRunOneOf0PullRequestsItemHead struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *Components1V3Uvr7SchemasWebhookWorkflowRunCompletedPropertiesWorkflowRunOneof0PropertiesPullRequestsItemsPropertiesHeadPropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

// WebhookWorkflowRunInProgress - workflowrun inprogress event
type WebhookWorkflowRunInProgress struct {
	// REQUIRED
	Action *WebhookWorkflowRunInProgressAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED; Workflow
	Workflow *WebhookWorkflowRunInProgressWorkflow `json:"workflow,omitempty"`

	// REQUIRED
	WorkflowRun *WebhookWorkflowRunInProgressWorkflowRun `json:"workflow_run,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookWorkflowRunInProgressWorkflow - Workflow
type WebhookWorkflowRunInProgressWorkflow struct {
	// REQUIRED
	BadgeURL *string `json:"badge_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

type WebhookWorkflowRunInProgressWorkflowRun struct {
}

// WebhookWorkflowRunInProgressWorkflowRun0Actor - User
type WebhookWorkflowRunInProgressWorkflowRun0Actor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookWorkflowRunInProgressWorkflowRun0ActorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookWorkflowRunInProgressWorkflowRun0HeadCommit - SimpleCommit
type WebhookWorkflowRunInProgressWorkflowRun0HeadCommit struct {
	// REQUIRED; Metaproperties for Git author/committer information.
	Author *WebhookWorkflowRunInProgressWorkflowRun0HeadCommitAuthor `json:"author,omitempty"`

	// REQUIRED; Metaproperties for Git author/committer information.
	Committer *WebhookWorkflowRunInProgressWorkflowRun0HeadCommitCommitter `json:"committer,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	Timestamp *string `json:"timestamp,omitempty"`

	// REQUIRED
	TreeID *string `json:"tree_id,omitempty"`
}

// WebhookWorkflowRunInProgressWorkflowRun0HeadCommitAuthor - Metaproperties for Git author/committer information.
type WebhookWorkflowRunInProgressWorkflowRun0HeadCommitAuthor struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookWorkflowRunInProgressWorkflowRun0HeadCommitCommitter - Metaproperties for Git author/committer information.
type WebhookWorkflowRunInProgressWorkflowRun0HeadCommitCommitter struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookWorkflowRunInProgressWorkflowRun0HeadRepository - Repository Lite
type WebhookWorkflowRunInProgressWorkflowRun0HeadRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED; User
	Owner *WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwner - User
type WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunInProgressWorkflowRun0PullRequestsItem struct {
	// REQUIRED
	Base *WebhookWorkflowRunInProgressWorkflowRunOneOf0PullRequestsItemBase `json:"base,omitempty"`

	// REQUIRED
	Head *WebhookWorkflowRunInProgressWorkflowRunOneOf0PullRequestsItemHead `json:"head,omitempty"`

	// REQUIRED
	ID *float32 `json:"id,omitempty"`

	// REQUIRED
	Number *float32 `json:"number,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunInProgressWorkflowRun0ReferencedWorkflowsItem struct {
	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
	Ref *string `json:"ref,omitempty"`
}

// WebhookWorkflowRunInProgressWorkflowRun0Repository - Repository Lite
type WebhookWorkflowRunInProgressWorkflowRun0Repository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED; User
	Owner *WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwner - User
type WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookWorkflowRunInProgressWorkflowRun0TriggeringActor - User
type WebhookWorkflowRunInProgressWorkflowRun0TriggeringActor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookWorkflowRunInProgressWorkflowRun0TriggeringActorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunInProgressWorkflowRun1Actor struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunInProgressWorkflowRun1HeadCommit struct {
	Author *WebhookWorkflowRunInProgressWorkflowRun1HeadCommitAuthor `json:"author,omitempty"`
	Committer *WebhookWorkflowRunInProgressWorkflowRun1HeadCommitCommitter `json:"committer,omitempty"`
	ID *string `json:"id,omitempty"`
	Message *string `json:"message,omitempty"`
	Timestamp *string `json:"timestamp,omitempty"`
	TreeID *string `json:"tree_id,omitempty"`
}

type WebhookWorkflowRunInProgressWorkflowRun1HeadCommitAuthor struct {
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
}

type WebhookWorkflowRunInProgressWorkflowRun1HeadCommitCommitter struct {
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
}

type WebhookWorkflowRunInProgressWorkflowRun1HeadRepository struct {
	ArchiveURL *string `json:"archive_url,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	Owner *WebhookWorkflowRunInProgressWorkflowRun1HeadRepositoryOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunInProgressWorkflowRun1HeadRepositoryOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunInProgressWorkflowRun1ReferencedWorkflowsItem struct {
	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
	Ref *string `json:"ref,omitempty"`
}

type WebhookWorkflowRunInProgressWorkflowRun1Repository struct {
	ArchiveURL *string `json:"archive_url,omitempty"`
	AssigneesURL *string `json:"assignees_url,omitempty"`
	BlobsURL *string `json:"blobs_url,omitempty"`
	BranchesURL *string `json:"branches_url,omitempty"`
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`
	CommentsURL *string `json:"comments_url,omitempty"`
	CommitsURL *string `json:"commits_url,omitempty"`
	CompareURL *string `json:"compare_url,omitempty"`
	ContentsURL *string `json:"contents_url,omitempty"`
	ContributorsURL *string `json:"contributors_url,omitempty"`
	DeploymentsURL *string `json:"deployments_url,omitempty"`
	Description *string `json:"description,omitempty"`
	DownloadsURL *string `json:"downloads_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	Fork *bool `json:"fork,omitempty"`
	ForksURL *string `json:"forks_url,omitempty"`
	FullName *string `json:"full_name,omitempty"`
	GitCommitsURL *string `json:"git_commits_url,omitempty"`
	GitRefsURL *string `json:"git_refs_url,omitempty"`
	GitTagsURL *string `json:"git_tags_url,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	HooksURL *string `json:"hooks_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`
	IssueEventsURL *string `json:"issue_events_url,omitempty"`
	IssuesURL *string `json:"issues_url,omitempty"`
	KeysURL *string `json:"keys_url,omitempty"`
	LabelsURL *string `json:"labels_url,omitempty"`
	LanguagesURL *string `json:"languages_url,omitempty"`
	MergesURL *string `json:"merges_url,omitempty"`
	MilestonesURL *string `json:"milestones_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	NotificationsURL *string `json:"notifications_url,omitempty"`
	Owner *WebhookWorkflowRunInProgressWorkflowRun1RepositoryOwner `json:"owner,omitempty"`
	Private *bool `json:"private,omitempty"`
	PullsURL *string `json:"pulls_url,omitempty"`
	ReleasesURL *string `json:"releases_url,omitempty"`
	StargazersURL *string `json:"stargazers_url,omitempty"`
	StatusesURL *string `json:"statuses_url,omitempty"`
	SubscribersURL *string `json:"subscribers_url,omitempty"`
	SubscriptionURL *string `json:"subscription_url,omitempty"`
	TagsURL *string `json:"tags_url,omitempty"`
	TeamsURL *string `json:"teams_url,omitempty"`
	TreesURL *string `json:"trees_url,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunInProgressWorkflowRun1RepositoryOwner struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunInProgressWorkflowRun1TriggeringActor struct {
	AvatarURL *string `json:"avatar_url,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	ID *int32 `json:"id,omitempty"`
	Login *string `json:"login,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *string `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunInProgressWorkflowRunOneOf0PullRequestsItemBase struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *ComponentsYrrx7USchemasWebhookWorkflowRunInProgressPropertiesWorkflowRunOneof0PropertiesPullRequestsItemsPropertiesBasePropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

type WebhookWorkflowRunInProgressWorkflowRunOneOf0PullRequestsItemHead struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *ComponentsSsn1JmSchemasWebhookWorkflowRunInProgressPropertiesWorkflowRunOneof0PropertiesPullRequestsItemsPropertiesHeadPropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

// WebhookWorkflowRunRequested - workflow_run requested event
type WebhookWorkflowRunRequested struct {
	// REQUIRED
	Action *WebhookWorkflowRunRequestedAction `json:"action,omitempty"`

	// REQUIRED; A repository on GitHub.
	Repository *Repository `json:"repository,omitempty"`

	// REQUIRED; A GitHub user.
	Sender *SimpleUser `json:"sender,omitempty"`

	// REQUIRED; Workflow
	Workflow *WebhookWorkflowRunRequestedWorkflow `json:"workflow,omitempty"`

	// REQUIRED; Workflow Run
	WorkflowRun *WebhookWorkflowRunRequestedWorkflowRun `json:"workflow_run,omitempty"`

	// An enterprise on GitHub.
	Enterprise *Enterprise `json:"enterprise,omitempty"`

	// The GitHub App installation. This property is included when the event is configured for and sent to a GitHub App.
	Installation *SimpleInstallation `json:"installation,omitempty"`

	// A GitHub organization.
	Organization *OrganizationSimple `json:"organization,omitempty"`
}

// WebhookWorkflowRunRequestedWorkflow - Workflow
type WebhookWorkflowRunRequestedWorkflow struct {
	// REQUIRED
	BadgeURL *string `json:"badge_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	State *string `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
}

// WebhookWorkflowRunRequestedWorkflowRun - Workflow Run
type WebhookWorkflowRunRequestedWorkflowRun struct {
	// REQUIRED; User
	Actor *WebhookWorkflowRunRequestedWorkflowRunActor `json:"actor,omitempty"`

	// REQUIRED
	ArtifactsURL *string `json:"artifacts_url,omitempty"`

	// REQUIRED
	CancelURL *string `json:"cancel_url,omitempty"`

	// REQUIRED
	CheckSuiteID *int32 `json:"check_suite_id,omitempty"`

	// REQUIRED
	CheckSuiteNodeID *string `json:"check_suite_node_id,omitempty"`

	// REQUIRED
	CheckSuiteURL *string `json:"check_suite_url,omitempty"`

	// REQUIRED
	Conclusion *WebhookWorkflowRunRequestedWorkflowRunConclusion `json:"conclusion,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	DisplayTitle *string `json:"display_title,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HeadBranch *string `json:"head_branch,omitempty"`

	// REQUIRED; SimpleCommit
	HeadCommit *WebhookWorkflowRunRequestedWorkflowRunHeadCommit `json:"head_commit,omitempty"`

	// REQUIRED; Repository Lite
	HeadRepository *WebhookWorkflowRunRequestedWorkflowRunHeadRepository `json:"head_repository,omitempty"`

	// REQUIRED
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	JobsURL *string `json:"jobs_url,omitempty"`

	// REQUIRED
	LogsURL *string `json:"logs_url,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	PreviousAttemptURL *string `json:"previous_attempt_url,omitempty"`

	// REQUIRED
	PullRequests []*WebhookWorkflowRunRequestedWorkflowRunPullRequestsItem `json:"pull_requests,omitempty"`

	// REQUIRED; Repository Lite
	Repository *WebhookWorkflowRunRequestedWorkflowRunRepository `json:"repository,omitempty"`

	// REQUIRED
	RerunURL *string `json:"rerun_url,omitempty"`

	// REQUIRED
	RunAttempt *int32 `json:"run_attempt,omitempty"`

	// REQUIRED
	RunNumber *int32 `json:"run_number,omitempty"`

	// REQUIRED
	RunStartedAt *time.Time `json:"run_started_at,omitempty"`

	// REQUIRED
	Status *WebhookWorkflowRunRequestedWorkflowRunStatus `json:"status,omitempty"`

	// REQUIRED; User
	TriggeringActor *WebhookWorkflowRunRequestedWorkflowRunTriggeringActor `json:"triggering_actor,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	WorkflowID *int32 `json:"workflow_id,omitempty"`

	// REQUIRED
	WorkflowURL *string `json:"workflow_url,omitempty"`
	ReferencedWorkflows []*WebhookWorkflowRunRequestedWorkflowRunReferencedWorkflowsItem `json:"referenced_workflows,omitempty"`
}

// WebhookWorkflowRunRequestedWorkflowRunActor - User
type WebhookWorkflowRunRequestedWorkflowRunActor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookWorkflowRunRequestedWorkflowRunActorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookWorkflowRunRequestedWorkflowRunHeadCommit - SimpleCommit
type WebhookWorkflowRunRequestedWorkflowRunHeadCommit struct {
	// REQUIRED; Metaproperties for Git author/committer information.
	Author *WebhookWorkflowRunRequestedWorkflowRunHeadCommitAuthor `json:"author,omitempty"`

	// REQUIRED; Metaproperties for Git author/committer information.
	Committer *WebhookWorkflowRunRequestedWorkflowRunHeadCommitCommitter `json:"committer,omitempty"`

	// REQUIRED
	ID *string `json:"id,omitempty"`

	// REQUIRED
	Message *string `json:"message,omitempty"`

	// REQUIRED
	Timestamp *string `json:"timestamp,omitempty"`

	// REQUIRED
	TreeID *string `json:"tree_id,omitempty"`
}

// WebhookWorkflowRunRequestedWorkflowRunHeadCommitAuthor - Metaproperties for Git author/committer information.
type WebhookWorkflowRunRequestedWorkflowRunHeadCommitAuthor struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookWorkflowRunRequestedWorkflowRunHeadCommitCommitter - Metaproperties for Git author/committer information.
type WebhookWorkflowRunRequestedWorkflowRunHeadCommitCommitter struct {
	// REQUIRED
	Email *string `json:"email,omitempty"`

	// REQUIRED; The git author's name.
	Name *string `json:"name,omitempty"`
	Date *time.Time `json:"date,omitempty"`
	Username *string `json:"username,omitempty"`
}

// WebhookWorkflowRunRequestedWorkflowRunHeadRepository - Repository Lite
type WebhookWorkflowRunRequestedWorkflowRunHeadRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED; User
	Owner *WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwner - User
type WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunRequestedWorkflowRunPullRequestsItem struct {
	// REQUIRED
	Base *WebhookWorkflowRunRequestedWorkflowRunPullRequestsItemBase `json:"base,omitempty"`

	// REQUIRED
	Head *WebhookWorkflowRunRequestedWorkflowRunPullRequestsItemHead `json:"head,omitempty"`

	// REQUIRED
	ID *float32 `json:"id,omitempty"`

	// REQUIRED
	Number *float32 `json:"number,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

type WebhookWorkflowRunRequestedWorkflowRunPullRequestsItemBase struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *Components1YzsvksSchemasWebhookWorkflowRunRequestedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesBasePropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

type WebhookWorkflowRunRequestedWorkflowRunPullRequestsItemHead struct {
	// REQUIRED
	Ref *string `json:"ref,omitempty"`

	// REQUIRED; Repo Ref
	Repo *Components19TlmclSchemasWebhookWorkflowRunRequestedPropertiesWorkflowRunPropertiesPullRequestsItemsPropertiesHeadPropertiesRepo `json:"repo,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
}

type WebhookWorkflowRunRequestedWorkflowRunReferencedWorkflowsItem struct {
	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	SHA *string `json:"sha,omitempty"`
	Ref *string `json:"ref,omitempty"`
}

// WebhookWorkflowRunRequestedWorkflowRunRepository - Repository Lite
type WebhookWorkflowRunRequestedWorkflowRunRepository struct {
	// REQUIRED
	ArchiveURL *string `json:"archive_url,omitempty"`

	// REQUIRED
	AssigneesURL *string `json:"assignees_url,omitempty"`

	// REQUIRED
	BlobsURL *string `json:"blobs_url,omitempty"`

	// REQUIRED
	BranchesURL *string `json:"branches_url,omitempty"`

	// REQUIRED
	CollaboratorsURL *string `json:"collaborators_url,omitempty"`

	// REQUIRED
	CommentsURL *string `json:"comments_url,omitempty"`

	// REQUIRED
	CommitsURL *string `json:"commits_url,omitempty"`

	// REQUIRED
	CompareURL *string `json:"compare_url,omitempty"`

	// REQUIRED
	ContentsURL *string `json:"contents_url,omitempty"`

	// REQUIRED
	ContributorsURL *string `json:"contributors_url,omitempty"`

	// REQUIRED
	DeploymentsURL *string `json:"deployments_url,omitempty"`

	// REQUIRED
	Description *string `json:"description,omitempty"`

	// REQUIRED
	DownloadsURL *string `json:"downloads_url,omitempty"`

	// REQUIRED
	EventsURL *string `json:"events_url,omitempty"`

	// REQUIRED
	Fork *bool `json:"fork,omitempty"`

	// REQUIRED
	ForksURL *string `json:"forks_url,omitempty"`

	// REQUIRED
	FullName *string `json:"full_name,omitempty"`

	// REQUIRED
	GitCommitsURL *string `json:"git_commits_url,omitempty"`

	// REQUIRED
	GitRefsURL *string `json:"git_refs_url,omitempty"`

	// REQUIRED
	GitTagsURL *string `json:"git_tags_url,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HooksURL *string `json:"hooks_url,omitempty"`

	// REQUIRED; Unique identifier of the repository
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	IssueCommentURL *string `json:"issue_comment_url,omitempty"`

	// REQUIRED
	IssueEventsURL *string `json:"issue_events_url,omitempty"`

	// REQUIRED
	IssuesURL *string `json:"issues_url,omitempty"`

	// REQUIRED
	KeysURL *string `json:"keys_url,omitempty"`

	// REQUIRED
	LabelsURL *string `json:"labels_url,omitempty"`

	// REQUIRED
	LanguagesURL *string `json:"languages_url,omitempty"`

	// REQUIRED
	MergesURL *string `json:"merges_url,omitempty"`

	// REQUIRED
	MilestonesURL *string `json:"milestones_url,omitempty"`

	// REQUIRED; The name of the repository.
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	NotificationsURL *string `json:"notifications_url,omitempty"`

	// REQUIRED; User
	Owner *WebhookWorkflowRunRequestedWorkflowRunRepositoryOwner `json:"owner,omitempty"`

	// REQUIRED; Whether the repository is private or public.
	Private *bool `json:"private,omitempty"`

	// REQUIRED
	PullsURL *string `json:"pulls_url,omitempty"`

	// REQUIRED
	ReleasesURL *string `json:"releases_url,omitempty"`

	// REQUIRED
	StargazersURL *string `json:"stargazers_url,omitempty"`

	// REQUIRED
	StatusesURL *string `json:"statuses_url,omitempty"`

	// REQUIRED
	SubscribersURL *string `json:"subscribers_url,omitempty"`

	// REQUIRED
	SubscriptionURL *string `json:"subscription_url,omitempty"`

	// REQUIRED
	TagsURL *string `json:"tags_url,omitempty"`

	// REQUIRED
	TeamsURL *string `json:"teams_url,omitempty"`

	// REQUIRED
	TreesURL *string `json:"trees_url,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`
}

// WebhookWorkflowRunRequestedWorkflowRunRepositoryOwner - User
type WebhookWorkflowRunRequestedWorkflowRunRepositoryOwner struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// WebhookWorkflowRunRequestedWorkflowRunTriggeringActor - User
type WebhookWorkflowRunRequestedWorkflowRunTriggeringActor struct {
	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Login *string `json:"login,omitempty"`
	AvatarURL *string `json:"avatar_url,omitempty"`
	Deleted *bool `json:"deleted,omitempty"`
	Email *string `json:"email,omitempty"`
	EventsURL *string `json:"events_url,omitempty"`
	FollowersURL *string `json:"followers_url,omitempty"`
	FollowingURL *string `json:"following_url,omitempty"`
	GistsURL *string `json:"gists_url,omitempty"`
	GravatarID *string `json:"gravatar_id,omitempty"`
	HTMLURL *string `json:"html_url,omitempty"`
	Name *string `json:"name,omitempty"`
	NodeID *string `json:"node_id,omitempty"`
	OrganizationsURL *string `json:"organizations_url,omitempty"`
	ReceivedEventsURL *string `json:"received_events_url,omitempty"`
	ReposURL *string `json:"repos_url,omitempty"`
	SiteAdmin *bool `json:"site_admin,omitempty"`
	StarredURL *string `json:"starred_url,omitempty"`
	SubscriptionsURL *string `json:"subscriptions_url,omitempty"`
	Type *WebhookWorkflowRunRequestedWorkflowRunTriggeringActorType `json:"type,omitempty"`
	URL *string `json:"url,omitempty"`
}

// Workflow - A GitHub Actions workflow
type Workflow struct {
	// REQUIRED
	BadgeURL *string `json:"badge_url,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	State *WorkflowState `json:"state,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`
	DeletedAt *time.Time `json:"deleted_at,omitempty"`
}

// WorkflowJob - The workflow job. Many workflow_job keys, such as head_sha, conclusion, and started_at are the same as those
// in a check_run object.
type WorkflowJob struct {
	// REQUIRED
	CheckRunURL *string `json:"check_run_url,omitempty"`

	// REQUIRED
	CompletedAt *string `json:"completed_at,omitempty"`

	// REQUIRED
	Conclusion *WebhookWorkflowJobCompletedWorkflowJob0Conclusion `json:"conclusion,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The name of the current branch.
	HeadBranch *string `json:"head_branch,omitempty"`

	// REQUIRED
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Custom labels for the job. Specified by the "runs-on" attribute [https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on]
// in the workflow YAML.
	Labels []*string `json:"labels,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	RunAttempt *int32 `json:"run_attempt,omitempty"`

	// REQUIRED
	RunID *float32 `json:"run_id,omitempty"`

	// REQUIRED
	RunURL *string `json:"run_url,omitempty"`

	// REQUIRED; The ID of the runner group that is running this job. This will be null as long as workflow_job[status] is queued.
	RunnerGroupID *int32 `json:"runner_group_id,omitempty"`

	// REQUIRED; The name of the runner group that is running this job. This will be null as long as workflow_job[status] is queued.
	RunnerGroupName *string `json:"runner_group_name,omitempty"`

	// REQUIRED; The ID of the runner that is running this job. This will be null as long as workflow_job[status] is queued.
	RunnerID *int32 `json:"runner_id,omitempty"`

	// REQUIRED; The name of the runner that is running this job. This will be null as long as workflow_job[status] is queued.
	RunnerName *string `json:"runner_name,omitempty"`

	// REQUIRED
	StartedAt *string `json:"started_at,omitempty"`

	// REQUIRED; The current status of the job. Can be queued, in_progress, waiting, or completed.
	Status *WebhookWorkflowJobCompletedWorkflowJob0Status `json:"status,omitempty"`

	// REQUIRED
	Steps []*WebhookWorkflowJobCompletedWorkflowJob0StepsItem `json:"steps,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED; The name of the workflow.
	WorkflowName *string `json:"workflow_name,omitempty"`
}

// WorkflowJob0 - The workflow job. Many workflow_job keys, such as head_sha, conclusion, and started_at are the same as those
// in a check_run object.
type WorkflowJob0 struct {
	// REQUIRED
	CheckRunURL *string `json:"check_run_url,omitempty"`

	// REQUIRED
	CompletedAt *string `json:"completed_at,omitempty"`

	// REQUIRED
	Conclusion *WebhookWorkflowJobInProgressWorkflowJob0Conclusion `json:"conclusion,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED; The name of the current branch.
	HeadBranch *string `json:"head_branch,omitempty"`

	// REQUIRED
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; Custom labels for the job. Specified by the "runs-on" attribute [https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on]
// in the workflow YAML.
	Labels []*string `json:"labels,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	RunAttempt *int32 `json:"run_attempt,omitempty"`

	// REQUIRED
	RunID *float32 `json:"run_id,omitempty"`

	// REQUIRED
	RunURL *string `json:"run_url,omitempty"`

	// REQUIRED; The ID of the runner group that is running this job. This will be null as long as workflow_job[status] is queued.
	RunnerGroupID *int32 `json:"runner_group_id,omitempty"`

	// REQUIRED; The name of the runner group that is running this job. This will be null as long as workflow_job[status] is queued.
	RunnerGroupName *string `json:"runner_group_name,omitempty"`

	// REQUIRED; The ID of the runner that is running this job. This will be null as long as workflow_job[status] is queued.
	RunnerID *int32 `json:"runner_id,omitempty"`

	// REQUIRED; The name of the runner that is running this job. This will be null as long as workflow_job[status] is queued.
	RunnerName *string `json:"runner_name,omitempty"`

	// REQUIRED
	StartedAt *string `json:"started_at,omitempty"`

	// REQUIRED; The current status of the job. Can be queued, in_progress, or completed.
	Status *WebhookWorkflowJobInProgressWorkflowJob0Status `json:"status,omitempty"`

	// REQUIRED
	Steps []*WebhookWorkflowJobInProgressWorkflowJob0StepsItem `json:"steps,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED; The name of the workflow.
	WorkflowName *string `json:"workflow_name,omitempty"`
}

// WorkflowRun - An invocation of a workflow
type WorkflowRun struct {
	// REQUIRED; The URL to the artifacts for the workflow run.
	ArtifactsURL *string `json:"artifacts_url,omitempty"`

	// REQUIRED; The URL to cancel the workflow run.
	CancelURL *string `json:"cancel_url,omitempty"`

	// REQUIRED; The URL to the associated check suite.
	CheckSuiteURL *string `json:"check_suite_url,omitempty"`

	// REQUIRED
	Conclusion *string `json:"conclusion,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED; The event-specific title associated with the run or the run-name if set, or the value of run-name if it is set
// in the workflow.
	DisplayTitle *string `json:"display_title,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HeadBranch *string `json:"head_branch,omitempty"`

	// REQUIRED; A commit.
	HeadCommit *NullableSimpleCommit `json:"head_commit,omitempty"`

	// REQUIRED; Minimal Repository
	HeadRepository *MinimalRepository `json:"head_repository,omitempty"`

	// REQUIRED; The SHA of the head commit that points to the version of the workflow being run.
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED; The ID of the workflow run.
	ID *int32 `json:"id,omitempty"`

	// REQUIRED; The URL to the jobs for the workflow run.
	JobsURL *string `json:"jobs_url,omitempty"`

	// REQUIRED; The URL to download the logs for the workflow run.
	LogsURL *string `json:"logs_url,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED; The full path of the workflow
	Path *string `json:"path,omitempty"`

	// REQUIRED
	PullRequests []*PullRequestMinimal `json:"pull_requests,omitempty"`

	// REQUIRED; Minimal Repository
	Repository *MinimalRepository `json:"repository,omitempty"`

	// REQUIRED; The URL to rerun the workflow run.
	RerunURL *string `json:"rerun_url,omitempty"`

	// REQUIRED; The auto incrementing run number for the workflow run.
	RunNumber *int32 `json:"run_number,omitempty"`

	// REQUIRED
	Status *string `json:"status,omitempty"`

	// REQUIRED; The URL to the workflow run.
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED; The ID of the parent workflow.
	WorkflowID *int32 `json:"workflow_id,omitempty"`

	// REQUIRED; The URL to the workflow.
	WorkflowURL *string `json:"workflow_url,omitempty"`

	// A GitHub user.
	Actor *SimpleUser `json:"actor,omitempty"`

	// The ID of the associated check suite.
	CheckSuiteID *int32 `json:"check_suite_id,omitempty"`

	// The node ID of the associated check suite.
	CheckSuiteNodeID *string `json:"check_suite_node_id,omitempty"`
	HeadRepositoryID *int32 `json:"head_repository_id,omitempty"`

	// The name of the workflow run.
	Name *string `json:"name,omitempty"`

	// The URL to the previous attempted run of this workflow, if one exists.
	PreviousAttemptURL *string `json:"previous_attempt_url,omitempty"`
	ReferencedWorkflows []*ReferencedWorkflow `json:"referenced_workflows,omitempty"`

	// Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
	RunAttempt *int32 `json:"run_attempt,omitempty"`

	// The start time of the latest run. Resets on re-run.
	RunStartedAt *time.Time `json:"run_started_at,omitempty"`

	// A GitHub user.
	TriggeringActor *SimpleUser `json:"triggering_actor,omitempty"`
}

// WorkflowRun0 - Workflow Run
type WorkflowRun0 struct {
	// REQUIRED; User
	Actor *WebhookWorkflowRunInProgressWorkflowRun0Actor `json:"actor,omitempty"`

	// REQUIRED
	ArtifactsURL *string `json:"artifacts_url,omitempty"`

	// REQUIRED
	CancelURL *string `json:"cancel_url,omitempty"`

	// REQUIRED
	CheckSuiteID *int32 `json:"check_suite_id,omitempty"`

	// REQUIRED
	CheckSuiteNodeID *string `json:"check_suite_node_id,omitempty"`

	// REQUIRED
	CheckSuiteURL *string `json:"check_suite_url,omitempty"`

	// REQUIRED
	Conclusion *WebhookWorkflowRunInProgressWorkflowRun0Conclusion `json:"conclusion,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HeadBranch *string `json:"head_branch,omitempty"`

	// REQUIRED; SimpleCommit
	HeadCommit *WebhookWorkflowRunInProgressWorkflowRun0HeadCommit `json:"head_commit,omitempty"`

	// REQUIRED; Repository Lite
	HeadRepository *WebhookWorkflowRunInProgressWorkflowRun0HeadRepository `json:"head_repository,omitempty"`

	// REQUIRED
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	JobsURL *string `json:"jobs_url,omitempty"`

	// REQUIRED
	LogsURL *string `json:"logs_url,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	PreviousAttemptURL *string `json:"previous_attempt_url,omitempty"`

	// REQUIRED
	PullRequests []*WebhookWorkflowRunInProgressWorkflowRun0PullRequestsItem `json:"pull_requests,omitempty"`

	// REQUIRED; Repository Lite
	Repository *WebhookWorkflowRunInProgressWorkflowRun0Repository `json:"repository,omitempty"`

	// REQUIRED
	RerunURL *string `json:"rerun_url,omitempty"`

	// REQUIRED
	RunAttempt *int32 `json:"run_attempt,omitempty"`

	// REQUIRED
	RunNumber *int32 `json:"run_number,omitempty"`

	// REQUIRED
	RunStartedAt *time.Time `json:"run_started_at,omitempty"`

	// REQUIRED
	Status *WebhookWorkflowRunInProgressWorkflowRun0Status `json:"status,omitempty"`

	// REQUIRED; User
	TriggeringActor *WebhookWorkflowRunInProgressWorkflowRun0TriggeringActor `json:"triggering_actor,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	WorkflowID *int32 `json:"workflow_id,omitempty"`

	// REQUIRED
	WorkflowURL *string `json:"workflow_url,omitempty"`
	ReferencedWorkflows []*WebhookWorkflowRunInProgressWorkflowRun0ReferencedWorkflowsItem `json:"referenced_workflows,omitempty"`
}

// WorkflowRunAutoGenerated - Workflow Run
type WorkflowRunAutoGenerated struct {
	// REQUIRED; User
	Actor *WebhookWorkflowRunCompletedWorkflowRun0Actor `json:"actor,omitempty"`

	// REQUIRED
	ArtifactsURL *string `json:"artifacts_url,omitempty"`

	// REQUIRED
	CancelURL *string `json:"cancel_url,omitempty"`

	// REQUIRED
	CheckSuiteID *int32 `json:"check_suite_id,omitempty"`

	// REQUIRED
	CheckSuiteNodeID *string `json:"check_suite_node_id,omitempty"`

	// REQUIRED
	CheckSuiteURL *string `json:"check_suite_url,omitempty"`

	// REQUIRED
	Conclusion *WebhookWorkflowRunCompletedWorkflowRun0Conclusion `json:"conclusion,omitempty"`

	// REQUIRED
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// REQUIRED
	Event *string `json:"event,omitempty"`

	// REQUIRED
	HTMLURL *string `json:"html_url,omitempty"`

	// REQUIRED
	HeadBranch *string `json:"head_branch,omitempty"`

	// REQUIRED; SimpleCommit
	HeadCommit *WebhookWorkflowRunCompletedWorkflowRun0HeadCommit `json:"head_commit,omitempty"`

	// REQUIRED; Repository Lite
	HeadRepository *WebhookWorkflowRunCompletedWorkflowRun0HeadRepository `json:"head_repository,omitempty"`

	// REQUIRED
	HeadSHA *string `json:"head_sha,omitempty"`

	// REQUIRED
	ID *int32 `json:"id,omitempty"`

	// REQUIRED
	JobsURL *string `json:"jobs_url,omitempty"`

	// REQUIRED
	LogsURL *string `json:"logs_url,omitempty"`

	// REQUIRED
	Name *string `json:"name,omitempty"`

	// REQUIRED
	NodeID *string `json:"node_id,omitempty"`

	// REQUIRED
	Path *string `json:"path,omitempty"`

	// REQUIRED
	PreviousAttemptURL *string `json:"previous_attempt_url,omitempty"`

	// REQUIRED
	PullRequests []*WebhookWorkflowRunCompletedWorkflowRun0PullRequestsItem `json:"pull_requests,omitempty"`

	// REQUIRED; Repository Lite
	Repository *WebhookWorkflowRunCompletedWorkflowRun0Repository `json:"repository,omitempty"`

	// REQUIRED
	RerunURL *string `json:"rerun_url,omitempty"`

	// REQUIRED
	RunAttempt *int32 `json:"run_attempt,omitempty"`

	// REQUIRED
	RunNumber *int32 `json:"run_number,omitempty"`

	// REQUIRED
	RunStartedAt *time.Time `json:"run_started_at,omitempty"`

	// REQUIRED
	Status *WebhookWorkflowRunCompletedWorkflowRun0Status `json:"status,omitempty"`

	// REQUIRED; User
	TriggeringActor *WebhookWorkflowRunCompletedWorkflowRun0TriggeringActor `json:"triggering_actor,omitempty"`

	// REQUIRED
	URL *string `json:"url,omitempty"`

	// REQUIRED
	UpdatedAt *time.Time `json:"updated_at,omitempty"`

	// REQUIRED
	WorkflowID *int32 `json:"workflow_id,omitempty"`

	// REQUIRED
	WorkflowURL *string `json:"workflow_url,omitempty"`
	ReferencedWorkflows []*WebhookWorkflowRunCompletedWorkflowRun0ReferencedWorkflowsItem `json:"referenced_workflows,omitempty"`
}

// WorkflowRunUsage - Workflow Run Usage
type WorkflowRunUsage struct {
	// REQUIRED
	Billable *WorkflowRunUsageBillable `json:"billable,omitempty"`
	RunDurationMs *int32 `json:"run_duration_ms,omitempty"`
}

type WorkflowRunUsageBillable struct {
	MACOS *WorkflowRunUsageBillableMACOS `json:"MACOS,omitempty"`
	UBUNTU *WorkflowRunUsageBillableUBUNTU `json:"UBUNTU,omitempty"`
	WINDOWS *WorkflowRunUsageBillableWINDOWS `json:"WINDOWS,omitempty"`
}

type WorkflowRunUsageBillableMACOS struct {
	// REQUIRED
	Jobs *int32 `json:"jobs,omitempty"`

	// REQUIRED
	TotalMs *int32 `json:"total_ms,omitempty"`
	JobRuns []*WorkflowRunUsageBillableMACOSJobRunsItem `json:"job_runs,omitempty"`
}

type WorkflowRunUsageBillableMACOSJobRunsItem struct {
	// REQUIRED
	DurationMs *int32 `json:"duration_ms,omitempty"`

	// REQUIRED
	JobID *int32 `json:"job_id,omitempty"`
}

type WorkflowRunUsageBillableUBUNTU struct {
	// REQUIRED
	Jobs *int32 `json:"jobs,omitempty"`

	// REQUIRED
	TotalMs *int32 `json:"total_ms,omitempty"`
	JobRuns []*WorkflowRunUsageBillableUBUNTUJobRunsItem `json:"job_runs,omitempty"`
}

type WorkflowRunUsageBillableUBUNTUJobRunsItem struct {
	// REQUIRED
	DurationMs *int32 `json:"duration_ms,omitempty"`

	// REQUIRED
	JobID *int32 `json:"job_id,omitempty"`
}

type WorkflowRunUsageBillableWINDOWS struct {
	// REQUIRED
	Jobs *int32 `json:"jobs,omitempty"`

	// REQUIRED
	TotalMs *int32 `json:"total_ms,omitempty"`
	JobRuns []*WorkflowRunUsageBillableWINDOWSJobRunsItem `json:"job_runs,omitempty"`
}

type WorkflowRunUsageBillableWINDOWSJobRunsItem struct {
	// REQUIRED
	DurationMs *int32 `json:"duration_ms,omitempty"`

	// REQUIRED
	JobID *int32 `json:"job_id,omitempty"`
}

// WorkflowUsage - Workflow Usage
type WorkflowUsage struct {
	// REQUIRED
	Billable *WorkflowUsageBillable `json:"billable,omitempty"`
}

type WorkflowUsageBillable struct {
	MACOS *WorkflowUsageBillableMACOS `json:"MACOS,omitempty"`
	UBUNTU *WorkflowUsageBillableUBUNTU `json:"UBUNTU,omitempty"`
	WINDOWS *WorkflowUsageBillableWINDOWS `json:"WINDOWS,omitempty"`
}

type WorkflowUsageBillableMACOS struct {
	TotalMs *int32 `json:"total_ms,omitempty"`
}

type WorkflowUsageBillableUBUNTU struct {
	TotalMs *int32 `json:"total_ms,omitempty"`
}

type WorkflowUsageBillableWINDOWS struct {
	TotalMs *int32 `json:"total_ms,omitempty"`
}

