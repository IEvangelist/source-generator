//go:build go1.18
// +build go1.18

// Code generated by Microsoft (R) AutoRest Code Generator (autorest: 3.9.4, generator: @autorest/go@4.0.0-preview.45)
// Changes may cause incorrect behavior and will be lost if the code is regenerated.
// DO NOT EDIT.

package gh

// ActionsDefaultWorkflowPermissions - The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
type ActionsDefaultWorkflowPermissions string

const (
	ActionsDefaultWorkflowPermissionsRead ActionsDefaultWorkflowPermissions = "read"
	ActionsDefaultWorkflowPermissionsWrite ActionsDefaultWorkflowPermissions = "write"
)

// PossibleActionsDefaultWorkflowPermissionsValues returns the possible values for the ActionsDefaultWorkflowPermissions const type.
func PossibleActionsDefaultWorkflowPermissionsValues() []ActionsDefaultWorkflowPermissions {
	return []ActionsDefaultWorkflowPermissions{
		ActionsDefaultWorkflowPermissionsRead,
		ActionsDefaultWorkflowPermissionsWrite,
	}
}

// ActionsWorkflowAccessToRepositoryAccessLevel - Defines the level of access that workflows outside of the repository have
// to actions and reusable workflows within the repository.
// none means the access is only possible from workflows in this repository. user level access allows sharing across user
// owned private repos only. organization level access allows sharing across the
// organization.
type ActionsWorkflowAccessToRepositoryAccessLevel string

const (
	ActionsWorkflowAccessToRepositoryAccessLevelNone ActionsWorkflowAccessToRepositoryAccessLevel = "none"
	ActionsWorkflowAccessToRepositoryAccessLevelOrganization ActionsWorkflowAccessToRepositoryAccessLevel = "organization"
	ActionsWorkflowAccessToRepositoryAccessLevelUser ActionsWorkflowAccessToRepositoryAccessLevel = "user"
)

// PossibleActionsWorkflowAccessToRepositoryAccessLevelValues returns the possible values for the ActionsWorkflowAccessToRepositoryAccessLevel const type.
func PossibleActionsWorkflowAccessToRepositoryAccessLevelValues() []ActionsWorkflowAccessToRepositoryAccessLevel {
	return []ActionsWorkflowAccessToRepositoryAccessLevel{
		ActionsWorkflowAccessToRepositoryAccessLevelNone,
		ActionsWorkflowAccessToRepositoryAccessLevelOrganization,
		ActionsWorkflowAccessToRepositoryAccessLevelUser,
	}
}

// AllowedActions - The permissions policy that controls the actions and reusable workflows that are allowed to run.
type AllowedActions string

const (
	AllowedActionsAll AllowedActions = "all"
	AllowedActionsLocalOnly AllowedActions = "local_only"
	AllowedActionsSelected AllowedActions = "selected"
)

// PossibleAllowedActionsValues returns the possible values for the AllowedActions const type.
func PossibleAllowedActionsValues() []AllowedActions {
	return []AllowedActions{
		AllowedActionsAll,
		AllowedActionsLocalOnly,
		AllowedActionsSelected,
	}
}

// AppPermissionsActions - The level of permission to grant the access token for GitHub Actions workflows, workflow runs,
// and artifacts.
type AppPermissionsActions string

const (
	AppPermissionsActionsRead AppPermissionsActions = "read"
	AppPermissionsActionsWrite AppPermissionsActions = "write"
)

// PossibleAppPermissionsActionsValues returns the possible values for the AppPermissionsActions const type.
func PossibleAppPermissionsActionsValues() []AppPermissionsActions {
	return []AppPermissionsActions{
		AppPermissionsActionsRead,
		AppPermissionsActionsWrite,
	}
}

// AppPermissionsAdministration - The level of permission to grant the access token for repository creation, deletion, settings,
// teams, and collaborators creation.
type AppPermissionsAdministration string

const (
	AppPermissionsAdministrationRead AppPermissionsAdministration = "read"
	AppPermissionsAdministrationWrite AppPermissionsAdministration = "write"
)

// PossibleAppPermissionsAdministrationValues returns the possible values for the AppPermissionsAdministration const type.
func PossibleAppPermissionsAdministrationValues() []AppPermissionsAdministration {
	return []AppPermissionsAdministration{
		AppPermissionsAdministrationRead,
		AppPermissionsAdministrationWrite,
	}
}

// AppPermissionsChecks - The level of permission to grant the access token for checks on code.
type AppPermissionsChecks string

const (
	AppPermissionsChecksRead AppPermissionsChecks = "read"
	AppPermissionsChecksWrite AppPermissionsChecks = "write"
)

// PossibleAppPermissionsChecksValues returns the possible values for the AppPermissionsChecks const type.
func PossibleAppPermissionsChecksValues() []AppPermissionsChecks {
	return []AppPermissionsChecks{
		AppPermissionsChecksRead,
		AppPermissionsChecksWrite,
	}
}

// AppPermissionsContents - The level of permission to grant the access token for repository contents, commits, branches,
// downloads, releases, and merges.
type AppPermissionsContents string

const (
	AppPermissionsContentsRead AppPermissionsContents = "read"
	AppPermissionsContentsWrite AppPermissionsContents = "write"
)

// PossibleAppPermissionsContentsValues returns the possible values for the AppPermissionsContents const type.
func PossibleAppPermissionsContentsValues() []AppPermissionsContents {
	return []AppPermissionsContents{
		AppPermissionsContentsRead,
		AppPermissionsContentsWrite,
	}
}

// AppPermissionsDeployments - The level of permission to grant the access token for deployments and deployment statuses.
type AppPermissionsDeployments string

const (
	AppPermissionsDeploymentsRead AppPermissionsDeployments = "read"
	AppPermissionsDeploymentsWrite AppPermissionsDeployments = "write"
)

// PossibleAppPermissionsDeploymentsValues returns the possible values for the AppPermissionsDeployments const type.
func PossibleAppPermissionsDeploymentsValues() []AppPermissionsDeployments {
	return []AppPermissionsDeployments{
		AppPermissionsDeploymentsRead,
		AppPermissionsDeploymentsWrite,
	}
}

// AppPermissionsEnvironments - The level of permission to grant the access token for managing repository environments.
type AppPermissionsEnvironments string

const (
	AppPermissionsEnvironmentsRead AppPermissionsEnvironments = "read"
	AppPermissionsEnvironmentsWrite AppPermissionsEnvironments = "write"
)

// PossibleAppPermissionsEnvironmentsValues returns the possible values for the AppPermissionsEnvironments const type.
func PossibleAppPermissionsEnvironmentsValues() []AppPermissionsEnvironments {
	return []AppPermissionsEnvironments{
		AppPermissionsEnvironmentsRead,
		AppPermissionsEnvironmentsWrite,
	}
}

// AppPermissionsIssues - The level of permission to grant the access token for issues and related comments, assignees, labels,
// and milestones.
type AppPermissionsIssues string

const (
	AppPermissionsIssuesRead AppPermissionsIssues = "read"
	AppPermissionsIssuesWrite AppPermissionsIssues = "write"
)

// PossibleAppPermissionsIssuesValues returns the possible values for the AppPermissionsIssues const type.
func PossibleAppPermissionsIssuesValues() []AppPermissionsIssues {
	return []AppPermissionsIssues{
		AppPermissionsIssuesRead,
		AppPermissionsIssuesWrite,
	}
}

// AppPermissionsMembers - The level of permission to grant the access token for organization teams and members.
type AppPermissionsMembers string

const (
	AppPermissionsMembersRead AppPermissionsMembers = "read"
	AppPermissionsMembersWrite AppPermissionsMembers = "write"
)

// PossibleAppPermissionsMembersValues returns the possible values for the AppPermissionsMembers const type.
func PossibleAppPermissionsMembersValues() []AppPermissionsMembers {
	return []AppPermissionsMembers{
		AppPermissionsMembersRead,
		AppPermissionsMembersWrite,
	}
}

// AppPermissionsMetadata - The level of permission to grant the access token to search repositories, list collaborators,
// and access repository metadata.
type AppPermissionsMetadata string

const (
	AppPermissionsMetadataRead AppPermissionsMetadata = "read"
	AppPermissionsMetadataWrite AppPermissionsMetadata = "write"
)

// PossibleAppPermissionsMetadataValues returns the possible values for the AppPermissionsMetadata const type.
func PossibleAppPermissionsMetadataValues() []AppPermissionsMetadata {
	return []AppPermissionsMetadata{
		AppPermissionsMetadataRead,
		AppPermissionsMetadataWrite,
	}
}

// AppPermissionsOrganizationAdministration - The level of permission to grant the access token to manage access to an organization.
type AppPermissionsOrganizationAdministration string

const (
	AppPermissionsOrganizationAdministrationRead AppPermissionsOrganizationAdministration = "read"
	AppPermissionsOrganizationAdministrationWrite AppPermissionsOrganizationAdministration = "write"
)

// PossibleAppPermissionsOrganizationAdministrationValues returns the possible values for the AppPermissionsOrganizationAdministration const type.
func PossibleAppPermissionsOrganizationAdministrationValues() []AppPermissionsOrganizationAdministration {
	return []AppPermissionsOrganizationAdministration{
		AppPermissionsOrganizationAdministrationRead,
		AppPermissionsOrganizationAdministrationWrite,
	}
}

// AppPermissionsOrganizationAnnouncementBanners - The level of permission to grant the access token to view and manage announcement
// banners for an organization.
type AppPermissionsOrganizationAnnouncementBanners string

const (
	AppPermissionsOrganizationAnnouncementBannersRead AppPermissionsOrganizationAnnouncementBanners = "read"
	AppPermissionsOrganizationAnnouncementBannersWrite AppPermissionsOrganizationAnnouncementBanners = "write"
)

// PossibleAppPermissionsOrganizationAnnouncementBannersValues returns the possible values for the AppPermissionsOrganizationAnnouncementBanners const type.
func PossibleAppPermissionsOrganizationAnnouncementBannersValues() []AppPermissionsOrganizationAnnouncementBanners {
	return []AppPermissionsOrganizationAnnouncementBanners{
		AppPermissionsOrganizationAnnouncementBannersRead,
		AppPermissionsOrganizationAnnouncementBannersWrite,
	}
}

// AppPermissionsOrganizationCustomRoles - The level of permission to grant the access token for custom repository roles management.
// This property is in beta and is subject to change.
type AppPermissionsOrganizationCustomRoles string

const (
	AppPermissionsOrganizationCustomRolesRead AppPermissionsOrganizationCustomRoles = "read"
	AppPermissionsOrganizationCustomRolesWrite AppPermissionsOrganizationCustomRoles = "write"
)

// PossibleAppPermissionsOrganizationCustomRolesValues returns the possible values for the AppPermissionsOrganizationCustomRoles const type.
func PossibleAppPermissionsOrganizationCustomRolesValues() []AppPermissionsOrganizationCustomRoles {
	return []AppPermissionsOrganizationCustomRoles{
		AppPermissionsOrganizationCustomRolesRead,
		AppPermissionsOrganizationCustomRolesWrite,
	}
}

// AppPermissionsOrganizationHooks - The level of permission to grant the access token to manage the post-receive hooks for
// an organization.
type AppPermissionsOrganizationHooks string

const (
	AppPermissionsOrganizationHooksRead AppPermissionsOrganizationHooks = "read"
	AppPermissionsOrganizationHooksWrite AppPermissionsOrganizationHooks = "write"
)

// PossibleAppPermissionsOrganizationHooksValues returns the possible values for the AppPermissionsOrganizationHooks const type.
func PossibleAppPermissionsOrganizationHooksValues() []AppPermissionsOrganizationHooks {
	return []AppPermissionsOrganizationHooks{
		AppPermissionsOrganizationHooksRead,
		AppPermissionsOrganizationHooksWrite,
	}
}

// AppPermissionsOrganizationPackages - The level of permission to grant the access token for organization packages published
// to GitHub Packages.
type AppPermissionsOrganizationPackages string

const (
	AppPermissionsOrganizationPackagesRead AppPermissionsOrganizationPackages = "read"
	AppPermissionsOrganizationPackagesWrite AppPermissionsOrganizationPackages = "write"
)

// PossibleAppPermissionsOrganizationPackagesValues returns the possible values for the AppPermissionsOrganizationPackages const type.
func PossibleAppPermissionsOrganizationPackagesValues() []AppPermissionsOrganizationPackages {
	return []AppPermissionsOrganizationPackages{
		AppPermissionsOrganizationPackagesRead,
		AppPermissionsOrganizationPackagesWrite,
	}
}

// AppPermissionsOrganizationPlan - The level of permission to grant the access token for viewing an organization's plan.
type AppPermissionsOrganizationPlan string

const (
	AppPermissionsOrganizationPlanRead AppPermissionsOrganizationPlan = "read"
)

// PossibleAppPermissionsOrganizationPlanValues returns the possible values for the AppPermissionsOrganizationPlan const type.
func PossibleAppPermissionsOrganizationPlanValues() []AppPermissionsOrganizationPlan {
	return []AppPermissionsOrganizationPlan{
		AppPermissionsOrganizationPlanRead,
	}
}

// AppPermissionsOrganizationProjects - The level of permission to grant the access token to manage organization projects
// and projects beta (where available).
type AppPermissionsOrganizationProjects string

const (
	AppPermissionsOrganizationProjectsAdmin AppPermissionsOrganizationProjects = "admin"
	AppPermissionsOrganizationProjectsRead AppPermissionsOrganizationProjects = "read"
	AppPermissionsOrganizationProjectsWrite AppPermissionsOrganizationProjects = "write"
)

// PossibleAppPermissionsOrganizationProjectsValues returns the possible values for the AppPermissionsOrganizationProjects const type.
func PossibleAppPermissionsOrganizationProjectsValues() []AppPermissionsOrganizationProjects {
	return []AppPermissionsOrganizationProjects{
		AppPermissionsOrganizationProjectsAdmin,
		AppPermissionsOrganizationProjectsRead,
		AppPermissionsOrganizationProjectsWrite,
	}
}

// AppPermissionsOrganizationSecrets - The level of permission to grant the access token to manage organization secrets.
type AppPermissionsOrganizationSecrets string

const (
	AppPermissionsOrganizationSecretsRead AppPermissionsOrganizationSecrets = "read"
	AppPermissionsOrganizationSecretsWrite AppPermissionsOrganizationSecrets = "write"
)

// PossibleAppPermissionsOrganizationSecretsValues returns the possible values for the AppPermissionsOrganizationSecrets const type.
func PossibleAppPermissionsOrganizationSecretsValues() []AppPermissionsOrganizationSecrets {
	return []AppPermissionsOrganizationSecrets{
		AppPermissionsOrganizationSecretsRead,
		AppPermissionsOrganizationSecretsWrite,
	}
}

// AppPermissionsOrganizationSelfHostedRunners - The level of permission to grant the access token to view and manage GitHub
// Actions self-hosted runners available to an organization.
type AppPermissionsOrganizationSelfHostedRunners string

const (
	AppPermissionsOrganizationSelfHostedRunnersRead AppPermissionsOrganizationSelfHostedRunners = "read"
	AppPermissionsOrganizationSelfHostedRunnersWrite AppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the AppPermissionsOrganizationSelfHostedRunners const type.
func PossibleAppPermissionsOrganizationSelfHostedRunnersValues() []AppPermissionsOrganizationSelfHostedRunners {
	return []AppPermissionsOrganizationSelfHostedRunners{
		AppPermissionsOrganizationSelfHostedRunnersRead,
		AppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

// AppPermissionsOrganizationUserBlocking - The level of permission to grant the access token to view and manage users blocked
// by the organization.
type AppPermissionsOrganizationUserBlocking string

const (
	AppPermissionsOrganizationUserBlockingRead AppPermissionsOrganizationUserBlocking = "read"
	AppPermissionsOrganizationUserBlockingWrite AppPermissionsOrganizationUserBlocking = "write"
)

// PossibleAppPermissionsOrganizationUserBlockingValues returns the possible values for the AppPermissionsOrganizationUserBlocking const type.
func PossibleAppPermissionsOrganizationUserBlockingValues() []AppPermissionsOrganizationUserBlocking {
	return []AppPermissionsOrganizationUserBlocking{
		AppPermissionsOrganizationUserBlockingRead,
		AppPermissionsOrganizationUserBlockingWrite,
	}
}

// AppPermissionsPackages - The level of permission to grant the access token for packages published to GitHub Packages.
type AppPermissionsPackages string

const (
	AppPermissionsPackagesRead AppPermissionsPackages = "read"
	AppPermissionsPackagesWrite AppPermissionsPackages = "write"
)

// PossibleAppPermissionsPackagesValues returns the possible values for the AppPermissionsPackages const type.
func PossibleAppPermissionsPackagesValues() []AppPermissionsPackages {
	return []AppPermissionsPackages{
		AppPermissionsPackagesRead,
		AppPermissionsPackagesWrite,
	}
}

// AppPermissionsPages - The level of permission to grant the access token to retrieve Pages statuses, configuration, and
// builds, as well as create new builds.
type AppPermissionsPages string

const (
	AppPermissionsPagesRead AppPermissionsPages = "read"
	AppPermissionsPagesWrite AppPermissionsPages = "write"
)

// PossibleAppPermissionsPagesValues returns the possible values for the AppPermissionsPages const type.
func PossibleAppPermissionsPagesValues() []AppPermissionsPages {
	return []AppPermissionsPages{
		AppPermissionsPagesRead,
		AppPermissionsPagesWrite,
	}
}

// AppPermissionsPullRequests - The level of permission to grant the access token for pull requests and related comments,
// assignees, labels, milestones, and merges.
type AppPermissionsPullRequests string

const (
	AppPermissionsPullRequestsRead AppPermissionsPullRequests = "read"
	AppPermissionsPullRequestsWrite AppPermissionsPullRequests = "write"
)

// PossibleAppPermissionsPullRequestsValues returns the possible values for the AppPermissionsPullRequests const type.
func PossibleAppPermissionsPullRequestsValues() []AppPermissionsPullRequests {
	return []AppPermissionsPullRequests{
		AppPermissionsPullRequestsRead,
		AppPermissionsPullRequestsWrite,
	}
}

// AppPermissionsRepositoryAnnouncementBanners - The level of permission to grant the access token to view and manage announcement
// banners for a repository.
type AppPermissionsRepositoryAnnouncementBanners string

const (
	AppPermissionsRepositoryAnnouncementBannersRead AppPermissionsRepositoryAnnouncementBanners = "read"
	AppPermissionsRepositoryAnnouncementBannersWrite AppPermissionsRepositoryAnnouncementBanners = "write"
)

// PossibleAppPermissionsRepositoryAnnouncementBannersValues returns the possible values for the AppPermissionsRepositoryAnnouncementBanners const type.
func PossibleAppPermissionsRepositoryAnnouncementBannersValues() []AppPermissionsRepositoryAnnouncementBanners {
	return []AppPermissionsRepositoryAnnouncementBanners{
		AppPermissionsRepositoryAnnouncementBannersRead,
		AppPermissionsRepositoryAnnouncementBannersWrite,
	}
}

// AppPermissionsRepositoryHooks - The level of permission to grant the access token to manage the post-receive hooks for
// a repository.
type AppPermissionsRepositoryHooks string

const (
	AppPermissionsRepositoryHooksRead AppPermissionsRepositoryHooks = "read"
	AppPermissionsRepositoryHooksWrite AppPermissionsRepositoryHooks = "write"
)

// PossibleAppPermissionsRepositoryHooksValues returns the possible values for the AppPermissionsRepositoryHooks const type.
func PossibleAppPermissionsRepositoryHooksValues() []AppPermissionsRepositoryHooks {
	return []AppPermissionsRepositoryHooks{
		AppPermissionsRepositoryHooksRead,
		AppPermissionsRepositoryHooksWrite,
	}
}

// AppPermissionsRepositoryProjects - The level of permission to grant the access token to manage repository projects, columns,
// and cards.
type AppPermissionsRepositoryProjects string

const (
	AppPermissionsRepositoryProjectsAdmin AppPermissionsRepositoryProjects = "admin"
	AppPermissionsRepositoryProjectsRead AppPermissionsRepositoryProjects = "read"
	AppPermissionsRepositoryProjectsWrite AppPermissionsRepositoryProjects = "write"
)

// PossibleAppPermissionsRepositoryProjectsValues returns the possible values for the AppPermissionsRepositoryProjects const type.
func PossibleAppPermissionsRepositoryProjectsValues() []AppPermissionsRepositoryProjects {
	return []AppPermissionsRepositoryProjects{
		AppPermissionsRepositoryProjectsAdmin,
		AppPermissionsRepositoryProjectsRead,
		AppPermissionsRepositoryProjectsWrite,
	}
}

// AppPermissionsSecretScanningAlerts - The level of permission to grant the access token to view and manage secret scanning
// alerts.
type AppPermissionsSecretScanningAlerts string

const (
	AppPermissionsSecretScanningAlertsRead AppPermissionsSecretScanningAlerts = "read"
	AppPermissionsSecretScanningAlertsWrite AppPermissionsSecretScanningAlerts = "write"
)

// PossibleAppPermissionsSecretScanningAlertsValues returns the possible values for the AppPermissionsSecretScanningAlerts const type.
func PossibleAppPermissionsSecretScanningAlertsValues() []AppPermissionsSecretScanningAlerts {
	return []AppPermissionsSecretScanningAlerts{
		AppPermissionsSecretScanningAlertsRead,
		AppPermissionsSecretScanningAlertsWrite,
	}
}

// AppPermissionsSecrets - The level of permission to grant the access token to manage repository secrets.
type AppPermissionsSecrets string

const (
	AppPermissionsSecretsRead AppPermissionsSecrets = "read"
	AppPermissionsSecretsWrite AppPermissionsSecrets = "write"
)

// PossibleAppPermissionsSecretsValues returns the possible values for the AppPermissionsSecrets const type.
func PossibleAppPermissionsSecretsValues() []AppPermissionsSecrets {
	return []AppPermissionsSecrets{
		AppPermissionsSecretsRead,
		AppPermissionsSecretsWrite,
	}
}

// AppPermissionsSecurityEvents - The level of permission to grant the access token to view and manage security events like
// code scanning alerts.
type AppPermissionsSecurityEvents string

const (
	AppPermissionsSecurityEventsRead AppPermissionsSecurityEvents = "read"
	AppPermissionsSecurityEventsWrite AppPermissionsSecurityEvents = "write"
)

// PossibleAppPermissionsSecurityEventsValues returns the possible values for the AppPermissionsSecurityEvents const type.
func PossibleAppPermissionsSecurityEventsValues() []AppPermissionsSecurityEvents {
	return []AppPermissionsSecurityEvents{
		AppPermissionsSecurityEventsRead,
		AppPermissionsSecurityEventsWrite,
	}
}

// AppPermissionsSingleFile - The level of permission to grant the access token to manage just a single file.
type AppPermissionsSingleFile string

const (
	AppPermissionsSingleFileRead AppPermissionsSingleFile = "read"
	AppPermissionsSingleFileWrite AppPermissionsSingleFile = "write"
)

// PossibleAppPermissionsSingleFileValues returns the possible values for the AppPermissionsSingleFile const type.
func PossibleAppPermissionsSingleFileValues() []AppPermissionsSingleFile {
	return []AppPermissionsSingleFile{
		AppPermissionsSingleFileRead,
		AppPermissionsSingleFileWrite,
	}
}

// AppPermissionsStatuses - The level of permission to grant the access token for commit statuses.
type AppPermissionsStatuses string

const (
	AppPermissionsStatusesRead AppPermissionsStatuses = "read"
	AppPermissionsStatusesWrite AppPermissionsStatuses = "write"
)

// PossibleAppPermissionsStatusesValues returns the possible values for the AppPermissionsStatuses const type.
func PossibleAppPermissionsStatusesValues() []AppPermissionsStatuses {
	return []AppPermissionsStatuses{
		AppPermissionsStatusesRead,
		AppPermissionsStatusesWrite,
	}
}

// AppPermissionsTeamDiscussions - The level of permission to grant the access token to manage team discussions and related
// comments.
type AppPermissionsTeamDiscussions string

const (
	AppPermissionsTeamDiscussionsRead AppPermissionsTeamDiscussions = "read"
	AppPermissionsTeamDiscussionsWrite AppPermissionsTeamDiscussions = "write"
)

// PossibleAppPermissionsTeamDiscussionsValues returns the possible values for the AppPermissionsTeamDiscussions const type.
func PossibleAppPermissionsTeamDiscussionsValues() []AppPermissionsTeamDiscussions {
	return []AppPermissionsTeamDiscussions{
		AppPermissionsTeamDiscussionsRead,
		AppPermissionsTeamDiscussionsWrite,
	}
}

// AppPermissionsVulnerabilityAlerts - The level of permission to grant the access token to manage Dependabot alerts.
type AppPermissionsVulnerabilityAlerts string

const (
	AppPermissionsVulnerabilityAlertsRead AppPermissionsVulnerabilityAlerts = "read"
	AppPermissionsVulnerabilityAlertsWrite AppPermissionsVulnerabilityAlerts = "write"
)

// PossibleAppPermissionsVulnerabilityAlertsValues returns the possible values for the AppPermissionsVulnerabilityAlerts const type.
func PossibleAppPermissionsVulnerabilityAlertsValues() []AppPermissionsVulnerabilityAlerts {
	return []AppPermissionsVulnerabilityAlerts{
		AppPermissionsVulnerabilityAlertsRead,
		AppPermissionsVulnerabilityAlertsWrite,
	}
}

// AppPermissionsWorkflows - The level of permission to grant the access token to update GitHub Actions workflow files.
type AppPermissionsWorkflows string

const (
	AppPermissionsWorkflowsWrite AppPermissionsWorkflows = "write"
)

// PossibleAppPermissionsWorkflowsValues returns the possible values for the AppPermissionsWorkflows const type.
func PossibleAppPermissionsWorkflowsValues() []AppPermissionsWorkflows {
	return []AppPermissionsWorkflows{
		AppPermissionsWorkflowsWrite,
	}
}

// AuthenticationTokenRepositorySelection - Describe whether all repositories have been selected or there's a selection involved
type AuthenticationTokenRepositorySelection string

const (
	AuthenticationTokenRepositorySelectionAll AuthenticationTokenRepositorySelection = "all"
	AuthenticationTokenRepositorySelectionSelected AuthenticationTokenRepositorySelection = "selected"
)

// PossibleAuthenticationTokenRepositorySelectionValues returns the possible values for the AuthenticationTokenRepositorySelection const type.
func PossibleAuthenticationTokenRepositorySelectionValues() []AuthenticationTokenRepositorySelection {
	return []AuthenticationTokenRepositorySelection{
		AuthenticationTokenRepositorySelectionAll,
		AuthenticationTokenRepositorySelectionSelected,
	}
}

// AuthorAssociation - How the author is associated with the repository.
type AuthorAssociation string

const (
	AuthorAssociationCOLLABORATOR AuthorAssociation = "COLLABORATOR"
	AuthorAssociationCONTRIBUTOR AuthorAssociation = "CONTRIBUTOR"
	AuthorAssociationFIRSTTIMECONTRIBUTOR AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	AuthorAssociationFIRSTTIMER AuthorAssociation = "FIRST_TIMER"
	AuthorAssociationMANNEQUIN AuthorAssociation = "MANNEQUIN"
	AuthorAssociationMEMBER AuthorAssociation = "MEMBER"
	AuthorAssociationNONE AuthorAssociation = "NONE"
	AuthorAssociationOWNER AuthorAssociation = "OWNER"
)

// PossibleAuthorAssociationValues returns the possible values for the AuthorAssociation const type.
func PossibleAuthorAssociationValues() []AuthorAssociation {
	return []AuthorAssociation{
		AuthorAssociationCOLLABORATOR,
		AuthorAssociationCONTRIBUTOR,
		AuthorAssociationFIRSTTIMECONTRIBUTOR,
		AuthorAssociationFIRSTTIMER,
		AuthorAssociationMANNEQUIN,
		AuthorAssociationMEMBER,
		AuthorAssociationNONE,
		AuthorAssociationOWNER,
	}
}

// AutoMergeMethod - The merge method to use.
type AutoMergeMethod string

const (
	AutoMergeMethodMerge AutoMergeMethod = "merge"
	AutoMergeMethodRebase AutoMergeMethod = "rebase"
	AutoMergeMethodSquash AutoMergeMethod = "squash"
)

// PossibleAutoMergeMethodValues returns the possible values for the AutoMergeMethod const type.
func PossibleAutoMergeMethodValues() []AutoMergeMethod {
	return []AutoMergeMethod{
		AutoMergeMethodMerge,
		AutoMergeMethodRebase,
		AutoMergeMethodSquash,
	}
}

type CheckRunConclusion string

const (
	CheckRunConclusionActionRequired CheckRunConclusion = "action_required"
	CheckRunConclusionCancelled CheckRunConclusion = "cancelled"
	CheckRunConclusionFailure CheckRunConclusion = "failure"
	CheckRunConclusionNeutral CheckRunConclusion = "neutral"
	CheckRunConclusionSkipped CheckRunConclusion = "skipped"
	CheckRunConclusionSuccess CheckRunConclusion = "success"
	CheckRunConclusionTimedOut CheckRunConclusion = "timed_out"
)

// PossibleCheckRunConclusionValues returns the possible values for the CheckRunConclusion const type.
func PossibleCheckRunConclusionValues() []CheckRunConclusion {
	return []CheckRunConclusion{
		CheckRunConclusionActionRequired,
		CheckRunConclusionCancelled,
		CheckRunConclusionFailure,
		CheckRunConclusionNeutral,
		CheckRunConclusionSkipped,
		CheckRunConclusionSuccess,
		CheckRunConclusionTimedOut,
	}
}

// CheckRunStatus - The phase of the lifecycle that the check is currently in.
type CheckRunStatus string

const (
	CheckRunStatusCompleted CheckRunStatus = "completed"
	CheckRunStatusInProgress CheckRunStatus = "in_progress"
	CheckRunStatusQueued CheckRunStatus = "queued"
)

// PossibleCheckRunStatusValues returns the possible values for the CheckRunStatus const type.
func PossibleCheckRunStatusValues() []CheckRunStatus {
	return []CheckRunStatus{
		CheckRunStatusCompleted,
		CheckRunStatusInProgress,
		CheckRunStatusQueued,
	}
}

type CheckRunWithSimpleCheckSuiteConclusion string

const (
	CheckRunWithSimpleCheckSuiteConclusionActionRequired CheckRunWithSimpleCheckSuiteConclusion = "action_required"
	CheckRunWithSimpleCheckSuiteConclusionCancelled CheckRunWithSimpleCheckSuiteConclusion = "cancelled"
	CheckRunWithSimpleCheckSuiteConclusionFailure CheckRunWithSimpleCheckSuiteConclusion = "failure"
	CheckRunWithSimpleCheckSuiteConclusionNeutral CheckRunWithSimpleCheckSuiteConclusion = "neutral"
	CheckRunWithSimpleCheckSuiteConclusionPending CheckRunWithSimpleCheckSuiteConclusion = "pending"
	CheckRunWithSimpleCheckSuiteConclusionSkipped CheckRunWithSimpleCheckSuiteConclusion = "skipped"
	CheckRunWithSimpleCheckSuiteConclusionStale CheckRunWithSimpleCheckSuiteConclusion = "stale"
	CheckRunWithSimpleCheckSuiteConclusionStartupFailure CheckRunWithSimpleCheckSuiteConclusion = "startup_failure"
	CheckRunWithSimpleCheckSuiteConclusionSuccess CheckRunWithSimpleCheckSuiteConclusion = "success"
	CheckRunWithSimpleCheckSuiteConclusionTimedOut CheckRunWithSimpleCheckSuiteConclusion = "timed_out"
	CheckRunWithSimpleCheckSuiteConclusionWaiting CheckRunWithSimpleCheckSuiteConclusion = "waiting"
)

// PossibleCheckRunWithSimpleCheckSuiteConclusionValues returns the possible values for the CheckRunWithSimpleCheckSuiteConclusion const type.
func PossibleCheckRunWithSimpleCheckSuiteConclusionValues() []CheckRunWithSimpleCheckSuiteConclusion {
	return []CheckRunWithSimpleCheckSuiteConclusion{
		CheckRunWithSimpleCheckSuiteConclusionActionRequired,
		CheckRunWithSimpleCheckSuiteConclusionCancelled,
		CheckRunWithSimpleCheckSuiteConclusionFailure,
		CheckRunWithSimpleCheckSuiteConclusionNeutral,
		CheckRunWithSimpleCheckSuiteConclusionPending,
		CheckRunWithSimpleCheckSuiteConclusionSkipped,
		CheckRunWithSimpleCheckSuiteConclusionStale,
		CheckRunWithSimpleCheckSuiteConclusionStartupFailure,
		CheckRunWithSimpleCheckSuiteConclusionSuccess,
		CheckRunWithSimpleCheckSuiteConclusionTimedOut,
		CheckRunWithSimpleCheckSuiteConclusionWaiting,
	}
}

// CheckRunWithSimpleCheckSuiteStatus - The phase of the lifecycle that the check is currently in.
type CheckRunWithSimpleCheckSuiteStatus string

const (
	CheckRunWithSimpleCheckSuiteStatusCompleted CheckRunWithSimpleCheckSuiteStatus = "completed"
	CheckRunWithSimpleCheckSuiteStatusInProgress CheckRunWithSimpleCheckSuiteStatus = "in_progress"
	CheckRunWithSimpleCheckSuiteStatusPending CheckRunWithSimpleCheckSuiteStatus = "pending"
	CheckRunWithSimpleCheckSuiteStatusQueued CheckRunWithSimpleCheckSuiteStatus = "queued"
)

// PossibleCheckRunWithSimpleCheckSuiteStatusValues returns the possible values for the CheckRunWithSimpleCheckSuiteStatus const type.
func PossibleCheckRunWithSimpleCheckSuiteStatusValues() []CheckRunWithSimpleCheckSuiteStatus {
	return []CheckRunWithSimpleCheckSuiteStatus{
		CheckRunWithSimpleCheckSuiteStatusCompleted,
		CheckRunWithSimpleCheckSuiteStatusInProgress,
		CheckRunWithSimpleCheckSuiteStatusPending,
		CheckRunWithSimpleCheckSuiteStatusQueued,
	}
}

type CheckSuiteConclusion string

const (
	CheckSuiteConclusionActionRequired CheckSuiteConclusion = "action_required"
	CheckSuiteConclusionCancelled CheckSuiteConclusion = "cancelled"
	CheckSuiteConclusionFailure CheckSuiteConclusion = "failure"
	CheckSuiteConclusionNeutral CheckSuiteConclusion = "neutral"
	CheckSuiteConclusionNull CheckSuiteConclusion = "null"
	CheckSuiteConclusionSkipped CheckSuiteConclusion = "skipped"
	CheckSuiteConclusionStale CheckSuiteConclusion = "stale"
	CheckSuiteConclusionStartupFailure CheckSuiteConclusion = "startup_failure"
	CheckSuiteConclusionSuccess CheckSuiteConclusion = "success"
	CheckSuiteConclusionTimedOut CheckSuiteConclusion = "timed_out"
)

// PossibleCheckSuiteConclusionValues returns the possible values for the CheckSuiteConclusion const type.
func PossibleCheckSuiteConclusionValues() []CheckSuiteConclusion {
	return []CheckSuiteConclusion{
		CheckSuiteConclusionActionRequired,
		CheckSuiteConclusionCancelled,
		CheckSuiteConclusionFailure,
		CheckSuiteConclusionNeutral,
		CheckSuiteConclusionNull,
		CheckSuiteConclusionSkipped,
		CheckSuiteConclusionStale,
		CheckSuiteConclusionStartupFailure,
		CheckSuiteConclusionSuccess,
		CheckSuiteConclusionTimedOut,
	}
}

type CheckSuiteStatus string

const (
	CheckSuiteStatusCompleted CheckSuiteStatus = "completed"
	CheckSuiteStatusInProgress CheckSuiteStatus = "in_progress"
	CheckSuiteStatusQueued CheckSuiteStatus = "queued"
)

// PossibleCheckSuiteStatusValues returns the possible values for the CheckSuiteStatus const type.
func PossibleCheckSuiteStatusValues() []CheckSuiteStatus {
	return []CheckSuiteStatus{
		CheckSuiteStatusCompleted,
		CheckSuiteStatusInProgress,
		CheckSuiteStatusQueued,
	}
}

// CodeScanningAlertClassification - A classification of the file. For example to identify it as generated.
type CodeScanningAlertClassification string

const (
	CodeScanningAlertClassificationGenerated CodeScanningAlertClassification = "generated"
	CodeScanningAlertClassificationLibrary CodeScanningAlertClassification = "library"
	CodeScanningAlertClassificationSource CodeScanningAlertClassification = "source"
	CodeScanningAlertClassificationTest CodeScanningAlertClassification = "test"
)

// PossibleCodeScanningAlertClassificationValues returns the possible values for the CodeScanningAlertClassification const type.
func PossibleCodeScanningAlertClassificationValues() []CodeScanningAlertClassification {
	return []CodeScanningAlertClassification{
		CodeScanningAlertClassificationGenerated,
		CodeScanningAlertClassificationLibrary,
		CodeScanningAlertClassificationSource,
		CodeScanningAlertClassificationTest,
	}
}

// CodeScanningAlertDismissedReason - Required when the state is dismissed. The reason for dismissing or closing the alert.
type CodeScanningAlertDismissedReason string

const (
	CodeScanningAlertDismissedReasonFalsePositive CodeScanningAlertDismissedReason = "false positive"
	CodeScanningAlertDismissedReasonNull CodeScanningAlertDismissedReason = "null"
	CodeScanningAlertDismissedReasonUsedInTests CodeScanningAlertDismissedReason = "used in tests"
	CodeScanningAlertDismissedReasonWonTFix CodeScanningAlertDismissedReason = "won't fix"
)

// PossibleCodeScanningAlertDismissedReasonValues returns the possible values for the CodeScanningAlertDismissedReason const type.
func PossibleCodeScanningAlertDismissedReasonValues() []CodeScanningAlertDismissedReason {
	return []CodeScanningAlertDismissedReason{
		CodeScanningAlertDismissedReasonFalsePositive,
		CodeScanningAlertDismissedReasonNull,
		CodeScanningAlertDismissedReasonUsedInTests,
		CodeScanningAlertDismissedReasonWonTFix,
	}
}

// CodeScanningAlertRuleSecuritySeverityLevel - The security severity of the alert.
type CodeScanningAlertRuleSecuritySeverityLevel string

const (
	CodeScanningAlertRuleSecuritySeverityLevelCritical CodeScanningAlertRuleSecuritySeverityLevel = "critical"
	CodeScanningAlertRuleSecuritySeverityLevelHigh CodeScanningAlertRuleSecuritySeverityLevel = "high"
	CodeScanningAlertRuleSecuritySeverityLevelLow CodeScanningAlertRuleSecuritySeverityLevel = "low"
	CodeScanningAlertRuleSecuritySeverityLevelMedium CodeScanningAlertRuleSecuritySeverityLevel = "medium"
)

// PossibleCodeScanningAlertRuleSecuritySeverityLevelValues returns the possible values for the CodeScanningAlertRuleSecuritySeverityLevel const type.
func PossibleCodeScanningAlertRuleSecuritySeverityLevelValues() []CodeScanningAlertRuleSecuritySeverityLevel {
	return []CodeScanningAlertRuleSecuritySeverityLevel{
		CodeScanningAlertRuleSecuritySeverityLevelCritical,
		CodeScanningAlertRuleSecuritySeverityLevelHigh,
		CodeScanningAlertRuleSecuritySeverityLevelLow,
		CodeScanningAlertRuleSecuritySeverityLevelMedium,
	}
}

// CodeScanningAlertRuleSeverity - The severity of the alert.
type CodeScanningAlertRuleSeverity string

const (
	CodeScanningAlertRuleSeverityError CodeScanningAlertRuleSeverity = "error"
	CodeScanningAlertRuleSeverityNone CodeScanningAlertRuleSeverity = "none"
	CodeScanningAlertRuleSeverityNote CodeScanningAlertRuleSeverity = "note"
	CodeScanningAlertRuleSeverityWarning CodeScanningAlertRuleSeverity = "warning"
)

// PossibleCodeScanningAlertRuleSeverityValues returns the possible values for the CodeScanningAlertRuleSeverity const type.
func PossibleCodeScanningAlertRuleSeverityValues() []CodeScanningAlertRuleSeverity {
	return []CodeScanningAlertRuleSeverity{
		CodeScanningAlertRuleSeverityError,
		CodeScanningAlertRuleSeverityNone,
		CodeScanningAlertRuleSeverityNote,
		CodeScanningAlertRuleSeverityWarning,
	}
}

// CodeScanningAlertRuleSummarySeverity - The severity of the alert.
type CodeScanningAlertRuleSummarySeverity string

const (
	CodeScanningAlertRuleSummarySeverityError CodeScanningAlertRuleSummarySeverity = "error"
	CodeScanningAlertRuleSummarySeverityNone CodeScanningAlertRuleSummarySeverity = "none"
	CodeScanningAlertRuleSummarySeverityNote CodeScanningAlertRuleSummarySeverity = "note"
	CodeScanningAlertRuleSummarySeverityWarning CodeScanningAlertRuleSummarySeverity = "warning"
)

// PossibleCodeScanningAlertRuleSummarySeverityValues returns the possible values for the CodeScanningAlertRuleSummarySeverity const type.
func PossibleCodeScanningAlertRuleSummarySeverityValues() []CodeScanningAlertRuleSummarySeverity {
	return []CodeScanningAlertRuleSummarySeverity{
		CodeScanningAlertRuleSummarySeverityError,
		CodeScanningAlertRuleSummarySeverityNone,
		CodeScanningAlertRuleSummarySeverityNote,
		CodeScanningAlertRuleSummarySeverityWarning,
	}
}

// CodeScanningAlertSetState - Sets the state of the code scanning alert. You must provide dismissed_reason when you set the
// state to dismissed.
type CodeScanningAlertSetState string

const (
	CodeScanningAlertSetStateDismissed CodeScanningAlertSetState = "dismissed"
	CodeScanningAlertSetStateOpen CodeScanningAlertSetState = "open"
)

// PossibleCodeScanningAlertSetStateValues returns the possible values for the CodeScanningAlertSetState const type.
func PossibleCodeScanningAlertSetStateValues() []CodeScanningAlertSetState {
	return []CodeScanningAlertSetState{
		CodeScanningAlertSetStateDismissed,
		CodeScanningAlertSetStateOpen,
	}
}

// CodeScanningAlertSeverity - Severity of a code scanning alert.
type CodeScanningAlertSeverity string

const (
	CodeScanningAlertSeverityCritical CodeScanningAlertSeverity = "critical"
	CodeScanningAlertSeverityError CodeScanningAlertSeverity = "error"
	CodeScanningAlertSeverityHigh CodeScanningAlertSeverity = "high"
	CodeScanningAlertSeverityLow CodeScanningAlertSeverity = "low"
	CodeScanningAlertSeverityMedium CodeScanningAlertSeverity = "medium"
	CodeScanningAlertSeverityNote CodeScanningAlertSeverity = "note"
	CodeScanningAlertSeverityWarning CodeScanningAlertSeverity = "warning"
)

// PossibleCodeScanningAlertSeverityValues returns the possible values for the CodeScanningAlertSeverity const type.
func PossibleCodeScanningAlertSeverityValues() []CodeScanningAlertSeverity {
	return []CodeScanningAlertSeverity{
		CodeScanningAlertSeverityCritical,
		CodeScanningAlertSeverityError,
		CodeScanningAlertSeverityHigh,
		CodeScanningAlertSeverityLow,
		CodeScanningAlertSeverityMedium,
		CodeScanningAlertSeverityNote,
		CodeScanningAlertSeverityWarning,
	}
}

// CodeScanningAlertState - State of a code scanning alert.
type CodeScanningAlertState string

const (
	CodeScanningAlertStateClosed CodeScanningAlertState = "closed"
	CodeScanningAlertStateDismissed CodeScanningAlertState = "dismissed"
	CodeScanningAlertStateFixed CodeScanningAlertState = "fixed"
	CodeScanningAlertStateOpen CodeScanningAlertState = "open"
)

// PossibleCodeScanningAlertStateValues returns the possible values for the CodeScanningAlertState const type.
func PossibleCodeScanningAlertStateValues() []CodeScanningAlertState {
	return []CodeScanningAlertState{
		CodeScanningAlertStateClosed,
		CodeScanningAlertStateDismissed,
		CodeScanningAlertStateFixed,
		CodeScanningAlertStateOpen,
	}
}

// CodeScanningSarifsStatusProcessingStatus - pending files have not yet been processed, while complete means results from
// the SARIF have been stored. failed files have either not been processed at all, or could only be partially processed.
type CodeScanningSarifsStatusProcessingStatus string

const (
	CodeScanningSarifsStatusProcessingStatusComplete CodeScanningSarifsStatusProcessingStatus = "complete"
	CodeScanningSarifsStatusProcessingStatusFailed CodeScanningSarifsStatusProcessingStatus = "failed"
	CodeScanningSarifsStatusProcessingStatusPending CodeScanningSarifsStatusProcessingStatus = "pending"
)

// PossibleCodeScanningSarifsStatusProcessingStatusValues returns the possible values for the CodeScanningSarifsStatusProcessingStatus const type.
func PossibleCodeScanningSarifsStatusProcessingStatusValues() []CodeScanningSarifsStatusProcessingStatus {
	return []CodeScanningSarifsStatusProcessingStatus{
		CodeScanningSarifsStatusProcessingStatusComplete,
		CodeScanningSarifsStatusProcessingStatusFailed,
		CodeScanningSarifsStatusProcessingStatusPending,
	}
}

// CodespaceLocation - The Azure region where this codespace is located.
type CodespaceLocation string

const (
	CodespaceLocationEastUs CodespaceLocation = "EastUs"
	CodespaceLocationSouthEastAsia CodespaceLocation = "SouthEastAsia"
	CodespaceLocationWestEurope CodespaceLocation = "WestEurope"
	CodespaceLocationWestUs2 CodespaceLocation = "WestUs2"
)

// PossibleCodespaceLocationValues returns the possible values for the CodespaceLocation const type.
func PossibleCodespaceLocationValues() []CodespaceLocation {
	return []CodespaceLocation{
		CodespaceLocationEastUs,
		CodespaceLocationSouthEastAsia,
		CodespaceLocationWestEurope,
		CodespaceLocationWestUs2,
	}
}

// CodespaceMachinePrebuildAvailability - Whether a prebuild is currently available when creating a codespace for this machine
// and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if
// prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available.
// Latest values "ready" and "in_progress" indicate the prebuild
// availability status.
type CodespaceMachinePrebuildAvailability string

const (
	CodespaceMachinePrebuildAvailabilityInProgress CodespaceMachinePrebuildAvailability = "in_progress"
	CodespaceMachinePrebuildAvailabilityNone CodespaceMachinePrebuildAvailability = "none"
	CodespaceMachinePrebuildAvailabilityReady CodespaceMachinePrebuildAvailability = "ready"
)

// PossibleCodespaceMachinePrebuildAvailabilityValues returns the possible values for the CodespaceMachinePrebuildAvailability const type.
func PossibleCodespaceMachinePrebuildAvailabilityValues() []CodespaceMachinePrebuildAvailability {
	return []CodespaceMachinePrebuildAvailability{
		CodespaceMachinePrebuildAvailabilityInProgress,
		CodespaceMachinePrebuildAvailabilityNone,
		CodespaceMachinePrebuildAvailabilityReady,
	}
}

// CodespaceState - State of this codespace.
type CodespaceState string

const (
	CodespaceStateArchived CodespaceState = "Archived"
	CodespaceStateAvailable CodespaceState = "Available"
	CodespaceStateAwaiting CodespaceState = "Awaiting"
	CodespaceStateCreated CodespaceState = "Created"
	CodespaceStateDeleted CodespaceState = "Deleted"
	CodespaceStateExporting CodespaceState = "Exporting"
	CodespaceStateFailed CodespaceState = "Failed"
	CodespaceStateMoved CodespaceState = "Moved"
	CodespaceStateProvisioning CodespaceState = "Provisioning"
	CodespaceStateQueued CodespaceState = "Queued"
	CodespaceStateRebuilding CodespaceState = "Rebuilding"
	CodespaceStateShutdown CodespaceState = "Shutdown"
	CodespaceStateShuttingDown CodespaceState = "ShuttingDown"
	CodespaceStateStarting CodespaceState = "Starting"
	CodespaceStateUnavailable CodespaceState = "Unavailable"
	CodespaceStateUnknown CodespaceState = "Unknown"
	CodespaceStateUpdating CodespaceState = "Updating"
)

// PossibleCodespaceStateValues returns the possible values for the CodespaceState const type.
func PossibleCodespaceStateValues() []CodespaceState {
	return []CodespaceState{
		CodespaceStateArchived,
		CodespaceStateAvailable,
		CodespaceStateAwaiting,
		CodespaceStateCreated,
		CodespaceStateDeleted,
		CodespaceStateExporting,
		CodespaceStateFailed,
		CodespaceStateMoved,
		CodespaceStateProvisioning,
		CodespaceStateQueued,
		CodespaceStateRebuilding,
		CodespaceStateShutdown,
		CodespaceStateShuttingDown,
		CodespaceStateStarting,
		CodespaceStateUnavailable,
		CodespaceStateUnknown,
		CodespaceStateUpdating,
	}
}

// CodespaceWithFullRepositoryLocation - The Azure region where this codespace is located.
type CodespaceWithFullRepositoryLocation string

const (
	CodespaceWithFullRepositoryLocationEastUs CodespaceWithFullRepositoryLocation = "EastUs"
	CodespaceWithFullRepositoryLocationSouthEastAsia CodespaceWithFullRepositoryLocation = "SouthEastAsia"
	CodespaceWithFullRepositoryLocationWestEurope CodespaceWithFullRepositoryLocation = "WestEurope"
	CodespaceWithFullRepositoryLocationWestUs2 CodespaceWithFullRepositoryLocation = "WestUs2"
)

// PossibleCodespaceWithFullRepositoryLocationValues returns the possible values for the CodespaceWithFullRepositoryLocation const type.
func PossibleCodespaceWithFullRepositoryLocationValues() []CodespaceWithFullRepositoryLocation {
	return []CodespaceWithFullRepositoryLocation{
		CodespaceWithFullRepositoryLocationEastUs,
		CodespaceWithFullRepositoryLocationSouthEastAsia,
		CodespaceWithFullRepositoryLocationWestEurope,
		CodespaceWithFullRepositoryLocationWestUs2,
	}
}

// CodespaceWithFullRepositoryState - State of this codespace.
type CodespaceWithFullRepositoryState string

const (
	CodespaceWithFullRepositoryStateArchived CodespaceWithFullRepositoryState = "Archived"
	CodespaceWithFullRepositoryStateAvailable CodespaceWithFullRepositoryState = "Available"
	CodespaceWithFullRepositoryStateAwaiting CodespaceWithFullRepositoryState = "Awaiting"
	CodespaceWithFullRepositoryStateCreated CodespaceWithFullRepositoryState = "Created"
	CodespaceWithFullRepositoryStateDeleted CodespaceWithFullRepositoryState = "Deleted"
	CodespaceWithFullRepositoryStateExporting CodespaceWithFullRepositoryState = "Exporting"
	CodespaceWithFullRepositoryStateFailed CodespaceWithFullRepositoryState = "Failed"
	CodespaceWithFullRepositoryStateMoved CodespaceWithFullRepositoryState = "Moved"
	CodespaceWithFullRepositoryStateProvisioning CodespaceWithFullRepositoryState = "Provisioning"
	CodespaceWithFullRepositoryStateQueued CodespaceWithFullRepositoryState = "Queued"
	CodespaceWithFullRepositoryStateRebuilding CodespaceWithFullRepositoryState = "Rebuilding"
	CodespaceWithFullRepositoryStateShutdown CodespaceWithFullRepositoryState = "Shutdown"
	CodespaceWithFullRepositoryStateShuttingDown CodespaceWithFullRepositoryState = "ShuttingDown"
	CodespaceWithFullRepositoryStateStarting CodespaceWithFullRepositoryState = "Starting"
	CodespaceWithFullRepositoryStateUnavailable CodespaceWithFullRepositoryState = "Unavailable"
	CodespaceWithFullRepositoryStateUnknown CodespaceWithFullRepositoryState = "Unknown"
	CodespaceWithFullRepositoryStateUpdating CodespaceWithFullRepositoryState = "Updating"
)

// PossibleCodespaceWithFullRepositoryStateValues returns the possible values for the CodespaceWithFullRepositoryState const type.
func PossibleCodespaceWithFullRepositoryStateValues() []CodespaceWithFullRepositoryState {
	return []CodespaceWithFullRepositoryState{
		CodespaceWithFullRepositoryStateArchived,
		CodespaceWithFullRepositoryStateAvailable,
		CodespaceWithFullRepositoryStateAwaiting,
		CodespaceWithFullRepositoryStateCreated,
		CodespaceWithFullRepositoryStateDeleted,
		CodespaceWithFullRepositoryStateExporting,
		CodespaceWithFullRepositoryStateFailed,
		CodespaceWithFullRepositoryStateMoved,
		CodespaceWithFullRepositoryStateProvisioning,
		CodespaceWithFullRepositoryStateQueued,
		CodespaceWithFullRepositoryStateRebuilding,
		CodespaceWithFullRepositoryStateShutdown,
		CodespaceWithFullRepositoryStateShuttingDown,
		CodespaceWithFullRepositoryStateStarting,
		CodespaceWithFullRepositoryStateUnavailable,
		CodespaceWithFullRepositoryStateUnknown,
		CodespaceWithFullRepositoryStateUpdating,
	}
}

// CodespacesOrgSecretVisibility - The type of repositories in the organization that the secret is visible to
type CodespacesOrgSecretVisibility string

const (
	CodespacesOrgSecretVisibilityAll CodespacesOrgSecretVisibility = "all"
	CodespacesOrgSecretVisibilityPrivate CodespacesOrgSecretVisibility = "private"
	CodespacesOrgSecretVisibilitySelected CodespacesOrgSecretVisibility = "selected"
)

// PossibleCodespacesOrgSecretVisibilityValues returns the possible values for the CodespacesOrgSecretVisibility const type.
func PossibleCodespacesOrgSecretVisibilityValues() []CodespacesOrgSecretVisibility {
	return []CodespacesOrgSecretVisibility{
		CodespacesOrgSecretVisibilityAll,
		CodespacesOrgSecretVisibilityPrivate,
		CodespacesOrgSecretVisibilitySelected,
	}
}

// CodespacesSecretVisibility - The type of repositories in the organization that the secret is visible to
type CodespacesSecretVisibility string

const (
	CodespacesSecretVisibilityAll CodespacesSecretVisibility = "all"
	CodespacesSecretVisibilityPrivate CodespacesSecretVisibility = "private"
	CodespacesSecretVisibilitySelected CodespacesSecretVisibility = "selected"
)

// PossibleCodespacesSecretVisibilityValues returns the possible values for the CodespacesSecretVisibility const type.
func PossibleCodespacesSecretVisibilityValues() []CodespacesSecretVisibility {
	return []CodespacesSecretVisibility{
		CodespacesSecretVisibilityAll,
		CodespacesSecretVisibilityPrivate,
		CodespacesSecretVisibilitySelected,
	}
}

type CommitComparisonStatus string

const (
	CommitComparisonStatusAhead CommitComparisonStatus = "ahead"
	CommitComparisonStatusBehind CommitComparisonStatus = "behind"
	CommitComparisonStatusDiverged CommitComparisonStatus = "diverged"
	CommitComparisonStatusIdentical CommitComparisonStatus = "identical"
)

// PossibleCommitComparisonStatusValues returns the possible values for the CommitComparisonStatus const type.
func PossibleCommitComparisonStatusValues() []CommitComparisonStatus {
	return []CommitComparisonStatus{
		CommitComparisonStatusAhead,
		CommitComparisonStatusBehind,
		CommitComparisonStatusDiverged,
		CommitComparisonStatusIdentical,
	}
}

type ContentDirectoryItemType string

const (
	ContentDirectoryItemTypeDir ContentDirectoryItemType = "dir"
	ContentDirectoryItemTypeFile ContentDirectoryItemType = "file"
	ContentDirectoryItemTypeSubmodule ContentDirectoryItemType = "submodule"
	ContentDirectoryItemTypeSymlink ContentDirectoryItemType = "symlink"
)

// PossibleContentDirectoryItemTypeValues returns the possible values for the ContentDirectoryItemType const type.
func PossibleContentDirectoryItemTypeValues() []ContentDirectoryItemType {
	return []ContentDirectoryItemType{
		ContentDirectoryItemTypeDir,
		ContentDirectoryItemTypeFile,
		ContentDirectoryItemTypeSubmodule,
		ContentDirectoryItemTypeSymlink,
	}
}

type ContentFileType string

const (
	ContentFileTypeFile ContentFileType = "file"
)

// PossibleContentFileTypeValues returns the possible values for the ContentFileType const type.
func PossibleContentFileTypeValues() []ContentFileType {
	return []ContentFileType{
		ContentFileTypeFile,
	}
}

type ContentSubmoduleType string

const (
	ContentSubmoduleTypeSubmodule ContentSubmoduleType = "submodule"
)

// PossibleContentSubmoduleTypeValues returns the possible values for the ContentSubmoduleType const type.
func PossibleContentSubmoduleTypeValues() []ContentSubmoduleType {
	return []ContentSubmoduleType{
		ContentSubmoduleTypeSubmodule,
	}
}

type ContentSymlinkType string

const (
	ContentSymlinkTypeSymlink ContentSymlinkType = "symlink"
)

// PossibleContentSymlinkTypeValues returns the possible values for the ContentSymlinkType const type.
func PossibleContentSymlinkTypeValues() []ContentSymlinkType {
	return []ContentSymlinkType{
		ContentSymlinkTypeSymlink,
	}
}

// ContentType - Content type for upload
type ContentType string

const (
	// ContentTypeTextPlain - Content Type 'text/plain'
	ContentTypeTextPlain ContentType = "text/plain"
	// ContentTypeTextXMarkdown - Content Type 'text/x-markdown'
	ContentTypeTextXMarkdown ContentType = "text/x-markdown"
)

// PossibleContentTypeValues returns the possible values for the ContentType const type.
func PossibleContentTypeValues() []ContentType {
	return []ContentType{
		ContentTypeTextPlain,
		ContentTypeTextXMarkdown,
	}
}

// DependabotAlertDependencyScope - The execution scope of the vulnerable dependency.
type DependabotAlertDependencyScope string

const (
	DependabotAlertDependencyScopeDevelopment DependabotAlertDependencyScope = "development"
	DependabotAlertDependencyScopeRuntime DependabotAlertDependencyScope = "runtime"
)

// PossibleDependabotAlertDependencyScopeValues returns the possible values for the DependabotAlertDependencyScope const type.
func PossibleDependabotAlertDependencyScopeValues() []DependabotAlertDependencyScope {
	return []DependabotAlertDependencyScope{
		DependabotAlertDependencyScopeDevelopment,
		DependabotAlertDependencyScopeRuntime,
	}
}

// DependabotAlertDismissedReason - The reason that the alert was dismissed.
type DependabotAlertDismissedReason string

const (
	DependabotAlertDismissedReasonFixStarted DependabotAlertDismissedReason = "fix_started"
	DependabotAlertDismissedReasonInaccurate DependabotAlertDismissedReason = "inaccurate"
	DependabotAlertDismissedReasonNoBandwidth DependabotAlertDismissedReason = "no_bandwidth"
	DependabotAlertDismissedReasonNotUsed DependabotAlertDismissedReason = "not_used"
	DependabotAlertDismissedReasonTolerableRisk DependabotAlertDismissedReason = "tolerable_risk"
)

// PossibleDependabotAlertDismissedReasonValues returns the possible values for the DependabotAlertDismissedReason const type.
func PossibleDependabotAlertDismissedReasonValues() []DependabotAlertDismissedReason {
	return []DependabotAlertDismissedReason{
		DependabotAlertDismissedReasonFixStarted,
		DependabotAlertDismissedReasonInaccurate,
		DependabotAlertDismissedReasonNoBandwidth,
		DependabotAlertDismissedReasonNotUsed,
		DependabotAlertDismissedReasonTolerableRisk,
	}
}

// DependabotAlertSecurityAdvisoryIdentifiersItemType - The type of advisory identifier.
type DependabotAlertSecurityAdvisoryIdentifiersItemType string

const (
	DependabotAlertSecurityAdvisoryIdentifiersItemTypeCVE DependabotAlertSecurityAdvisoryIdentifiersItemType = "CVE"
	DependabotAlertSecurityAdvisoryIdentifiersItemTypeGHSA DependabotAlertSecurityAdvisoryIdentifiersItemType = "GHSA"
)

// PossibleDependabotAlertSecurityAdvisoryIdentifiersItemTypeValues returns the possible values for the DependabotAlertSecurityAdvisoryIdentifiersItemType const type.
func PossibleDependabotAlertSecurityAdvisoryIdentifiersItemTypeValues() []DependabotAlertSecurityAdvisoryIdentifiersItemType {
	return []DependabotAlertSecurityAdvisoryIdentifiersItemType{
		DependabotAlertSecurityAdvisoryIdentifiersItemTypeCVE,
		DependabotAlertSecurityAdvisoryIdentifiersItemTypeGHSA,
	}
}

// DependabotAlertSecurityAdvisorySeverity - The severity of the advisory.
type DependabotAlertSecurityAdvisorySeverity string

const (
	DependabotAlertSecurityAdvisorySeverityCritical DependabotAlertSecurityAdvisorySeverity = "critical"
	DependabotAlertSecurityAdvisorySeverityHigh DependabotAlertSecurityAdvisorySeverity = "high"
	DependabotAlertSecurityAdvisorySeverityLow DependabotAlertSecurityAdvisorySeverity = "low"
	DependabotAlertSecurityAdvisorySeverityMedium DependabotAlertSecurityAdvisorySeverity = "medium"
)

// PossibleDependabotAlertSecurityAdvisorySeverityValues returns the possible values for the DependabotAlertSecurityAdvisorySeverity const type.
func PossibleDependabotAlertSecurityAdvisorySeverityValues() []DependabotAlertSecurityAdvisorySeverity {
	return []DependabotAlertSecurityAdvisorySeverity{
		DependabotAlertSecurityAdvisorySeverityCritical,
		DependabotAlertSecurityAdvisorySeverityHigh,
		DependabotAlertSecurityAdvisorySeverityLow,
		DependabotAlertSecurityAdvisorySeverityMedium,
	}
}

// DependabotAlertSecurityVulnerabilitySeverity - The severity of the vulnerability.
type DependabotAlertSecurityVulnerabilitySeverity string

const (
	DependabotAlertSecurityVulnerabilitySeverityCritical DependabotAlertSecurityVulnerabilitySeverity = "critical"
	DependabotAlertSecurityVulnerabilitySeverityHigh DependabotAlertSecurityVulnerabilitySeverity = "high"
	DependabotAlertSecurityVulnerabilitySeverityLow DependabotAlertSecurityVulnerabilitySeverity = "low"
	DependabotAlertSecurityVulnerabilitySeverityMedium DependabotAlertSecurityVulnerabilitySeverity = "medium"
)

// PossibleDependabotAlertSecurityVulnerabilitySeverityValues returns the possible values for the DependabotAlertSecurityVulnerabilitySeverity const type.
func PossibleDependabotAlertSecurityVulnerabilitySeverityValues() []DependabotAlertSecurityVulnerabilitySeverity {
	return []DependabotAlertSecurityVulnerabilitySeverity{
		DependabotAlertSecurityVulnerabilitySeverityCritical,
		DependabotAlertSecurityVulnerabilitySeverityHigh,
		DependabotAlertSecurityVulnerabilitySeverityLow,
		DependabotAlertSecurityVulnerabilitySeverityMedium,
	}
}

// DependabotAlertState - The state of the Dependabot alert.
type DependabotAlertState string

const (
	DependabotAlertStateDismissed DependabotAlertState = "dismissed"
	DependabotAlertStateFixed DependabotAlertState = "fixed"
	DependabotAlertStateOpen DependabotAlertState = "open"
)

// PossibleDependabotAlertStateValues returns the possible values for the DependabotAlertState const type.
func PossibleDependabotAlertStateValues() []DependabotAlertState {
	return []DependabotAlertState{
		DependabotAlertStateDismissed,
		DependabotAlertStateFixed,
		DependabotAlertStateOpen,
	}
}

// DependabotAlertWithRepositoryDependencyScope - The execution scope of the vulnerable dependency.
type DependabotAlertWithRepositoryDependencyScope string

const (
	DependabotAlertWithRepositoryDependencyScopeDevelopment DependabotAlertWithRepositoryDependencyScope = "development"
	DependabotAlertWithRepositoryDependencyScopeRuntime DependabotAlertWithRepositoryDependencyScope = "runtime"
)

// PossibleDependabotAlertWithRepositoryDependencyScopeValues returns the possible values for the DependabotAlertWithRepositoryDependencyScope const type.
func PossibleDependabotAlertWithRepositoryDependencyScopeValues() []DependabotAlertWithRepositoryDependencyScope {
	return []DependabotAlertWithRepositoryDependencyScope{
		DependabotAlertWithRepositoryDependencyScopeDevelopment,
		DependabotAlertWithRepositoryDependencyScopeRuntime,
	}
}

// DependabotAlertWithRepositoryDismissedReason - The reason that the alert was dismissed.
type DependabotAlertWithRepositoryDismissedReason string

const (
	DependabotAlertWithRepositoryDismissedReasonFixStarted DependabotAlertWithRepositoryDismissedReason = "fix_started"
	DependabotAlertWithRepositoryDismissedReasonInaccurate DependabotAlertWithRepositoryDismissedReason = "inaccurate"
	DependabotAlertWithRepositoryDismissedReasonNoBandwidth DependabotAlertWithRepositoryDismissedReason = "no_bandwidth"
	DependabotAlertWithRepositoryDismissedReasonNotUsed DependabotAlertWithRepositoryDismissedReason = "not_used"
	DependabotAlertWithRepositoryDismissedReasonTolerableRisk DependabotAlertWithRepositoryDismissedReason = "tolerable_risk"
)

// PossibleDependabotAlertWithRepositoryDismissedReasonValues returns the possible values for the DependabotAlertWithRepositoryDismissedReason const type.
func PossibleDependabotAlertWithRepositoryDismissedReasonValues() []DependabotAlertWithRepositoryDismissedReason {
	return []DependabotAlertWithRepositoryDismissedReason{
		DependabotAlertWithRepositoryDismissedReasonFixStarted,
		DependabotAlertWithRepositoryDismissedReasonInaccurate,
		DependabotAlertWithRepositoryDismissedReasonNoBandwidth,
		DependabotAlertWithRepositoryDismissedReasonNotUsed,
		DependabotAlertWithRepositoryDismissedReasonTolerableRisk,
	}
}

// DependabotAlertWithRepositoryState - The state of the Dependabot alert.
type DependabotAlertWithRepositoryState string

const (
	DependabotAlertWithRepositoryStateDismissed DependabotAlertWithRepositoryState = "dismissed"
	DependabotAlertWithRepositoryStateFixed DependabotAlertWithRepositoryState = "fixed"
	DependabotAlertWithRepositoryStateOpen DependabotAlertWithRepositoryState = "open"
)

// PossibleDependabotAlertWithRepositoryStateValues returns the possible values for the DependabotAlertWithRepositoryState const type.
func PossibleDependabotAlertWithRepositoryStateValues() []DependabotAlertWithRepositoryState {
	return []DependabotAlertWithRepositoryState{
		DependabotAlertWithRepositoryStateDismissed,
		DependabotAlertWithRepositoryStateFixed,
		DependabotAlertWithRepositoryStateOpen,
	}
}

type DependencyGraphDiffItemChangeType string

const (
	DependencyGraphDiffItemChangeTypeAdded DependencyGraphDiffItemChangeType = "added"
	DependencyGraphDiffItemChangeTypeRemoved DependencyGraphDiffItemChangeType = "removed"
)

// PossibleDependencyGraphDiffItemChangeTypeValues returns the possible values for the DependencyGraphDiffItemChangeType const type.
func PossibleDependencyGraphDiffItemChangeTypeValues() []DependencyGraphDiffItemChangeType {
	return []DependencyGraphDiffItemChangeType{
		DependencyGraphDiffItemChangeTypeAdded,
		DependencyGraphDiffItemChangeTypeRemoved,
	}
}

// DependencyGraphDiffItemScope - Where the dependency is utilized. development means that the dependency is only utilized
// in the development environment. runtime means that the dependency is utilized at runtime and in the development
// environment.
type DependencyGraphDiffItemScope string

const (
	DependencyGraphDiffItemScopeDevelopment DependencyGraphDiffItemScope = "development"
	DependencyGraphDiffItemScopeRuntime DependencyGraphDiffItemScope = "runtime"
	DependencyGraphDiffItemScopeUnknown DependencyGraphDiffItemScope = "unknown"
)

// PossibleDependencyGraphDiffItemScopeValues returns the possible values for the DependencyGraphDiffItemScope const type.
func PossibleDependencyGraphDiffItemScopeValues() []DependencyGraphDiffItemScope {
	return []DependencyGraphDiffItemScope{
		DependencyGraphDiffItemScopeDevelopment,
		DependencyGraphDiffItemScopeRuntime,
		DependencyGraphDiffItemScopeUnknown,
	}
}

// DependencyRelationship - A notation of whether a dependency is requested directly by this manifest or is a dependency of
// another dependency.
type DependencyRelationship string

const (
	DependencyRelationshipDirect DependencyRelationship = "direct"
	DependencyRelationshipIndirect DependencyRelationship = "indirect"
)

// PossibleDependencyRelationshipValues returns the possible values for the DependencyRelationship const type.
func PossibleDependencyRelationshipValues() []DependencyRelationship {
	return []DependencyRelationship{
		DependencyRelationshipDirect,
		DependencyRelationshipIndirect,
	}
}

// DependencyScope - A notation of whether the dependency is required for the primary build artifact (runtime) or is only
// used for development. Future versions of this specification may allow for more granular scopes.
type DependencyScope string

const (
	DependencyScopeDevelopment DependencyScope = "development"
	DependencyScopeRuntime DependencyScope = "runtime"
)

// PossibleDependencyScopeValues returns the possible values for the DependencyScope const type.
func PossibleDependencyScopeValues() []DependencyScope {
	return []DependencyScope{
		DependencyScopeDevelopment,
		DependencyScopeRuntime,
	}
}

// DeploymentReviewerType - The type of reviewer.
type DeploymentReviewerType string

const (
	DeploymentReviewerTypeTeam DeploymentReviewerType = "Team"
	DeploymentReviewerTypeUser DeploymentReviewerType = "User"
)

// PossibleDeploymentReviewerTypeValues returns the possible values for the DeploymentReviewerType const type.
func PossibleDeploymentReviewerTypeValues() []DeploymentReviewerType {
	return []DeploymentReviewerType{
		DeploymentReviewerTypeTeam,
		DeploymentReviewerTypeUser,
	}
}

// DeploymentStatusState - The state of the status.
type DeploymentStatusState string

const (
	DeploymentStatusStateError DeploymentStatusState = "error"
	DeploymentStatusStateFailure DeploymentStatusState = "failure"
	DeploymentStatusStateInProgress DeploymentStatusState = "in_progress"
	DeploymentStatusStateInactive DeploymentStatusState = "inactive"
	DeploymentStatusStatePending DeploymentStatusState = "pending"
	DeploymentStatusStateQueued DeploymentStatusState = "queued"
	DeploymentStatusStateSuccess DeploymentStatusState = "success"
)

// PossibleDeploymentStatusStateValues returns the possible values for the DeploymentStatusState const type.
func PossibleDeploymentStatusStateValues() []DeploymentStatusState {
	return []DeploymentStatusState{
		DeploymentStatusStateError,
		DeploymentStatusStateFailure,
		DeploymentStatusStateInProgress,
		DeploymentStatusStateInactive,
		DeploymentStatusStatePending,
		DeploymentStatusStateQueued,
		DeploymentStatusStateSuccess,
	}
}

type DiffEntryStatus string

const (
	DiffEntryStatusAdded DiffEntryStatus = "added"
	DiffEntryStatusChanged DiffEntryStatus = "changed"
	DiffEntryStatusCopied DiffEntryStatus = "copied"
	DiffEntryStatusModified DiffEntryStatus = "modified"
	DiffEntryStatusRemoved DiffEntryStatus = "removed"
	DiffEntryStatusRenamed DiffEntryStatus = "renamed"
	DiffEntryStatusUnchanged DiffEntryStatus = "unchanged"
)

// PossibleDiffEntryStatusValues returns the possible values for the DiffEntryStatus const type.
func PossibleDiffEntryStatusValues() []DiffEntryStatus {
	return []DiffEntryStatus{
		DiffEntryStatusAdded,
		DiffEntryStatusChanged,
		DiffEntryStatusCopied,
		DiffEntryStatusModified,
		DiffEntryStatusRemoved,
		DiffEntryStatusRenamed,
		DiffEntryStatusUnchanged,
	}
}

// EnabledRepositories - The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
type EnabledRepositories string

const (
	EnabledRepositoriesAll EnabledRepositories = "all"
	EnabledRepositoriesNone EnabledRepositories = "none"
	EnabledRepositoriesSelected EnabledRepositories = "selected"
)

// PossibleEnabledRepositoriesValues returns the possible values for the EnabledRepositories const type.
func PossibleEnabledRepositoriesValues() []EnabledRepositories {
	return []EnabledRepositories{
		EnabledRepositoriesAll,
		EnabledRepositoriesNone,
		EnabledRepositoriesSelected,
	}
}

type Enum102 string

const (
	Enum102Admin Enum102 = "admin"
	Enum102All Enum102 = "all"
	Enum102BillingManager Enum102 = "billing_manager"
	Enum102DirectMember Enum102 = "direct_member"
	Enum102HiringManager Enum102 = "hiring_manager"
)

// PossibleEnum102Values returns the possible values for the Enum102 const type.
func PossibleEnum102Values() []Enum102 {
	return []Enum102{
		Enum102Admin,
		Enum102All,
		Enum102BillingManager,
		Enum102DirectMember,
		Enum102HiringManager,
	}
}

type Enum103 string

const (
	Enum103All Enum103 = "all"
	Enum103Member Enum103 = "member"
	Enum103Scim Enum103 = "scim"
)

// PossibleEnum103Values returns the possible values for the Enum103 const type.
func PossibleEnum103Values() []Enum103 {
	return []Enum103{
		Enum103All,
		Enum103Member,
		Enum103Scim,
	}
}

type Enum105 string

const (
	Enum105All Enum105 = "all"
	Enum105Assigned Enum105 = "assigned"
	Enum105Created Enum105 = "created"
	Enum105Mentioned Enum105 = "mentioned"
	Enum105Repos Enum105 = "repos"
	Enum105Subscribed Enum105 = "subscribed"
)

// PossibleEnum105Values returns the possible values for the Enum105 const type.
func PossibleEnum105Values() []Enum105 {
	return []Enum105{
		Enum105All,
		Enum105Assigned,
		Enum105Created,
		Enum105Mentioned,
		Enum105Repos,
		Enum105Subscribed,
	}
}

type Enum106 string

const (
	Enum106All Enum106 = "all"
	Enum106Closed Enum106 = "closed"
	Enum106Open Enum106 = "open"
)

// PossibleEnum106Values returns the possible values for the Enum106 const type.
func PossibleEnum106Values() []Enum106 {
	return []Enum106{
		Enum106All,
		Enum106Closed,
		Enum106Open,
	}
}

type Enum107 string

const (
	Enum107Comments Enum107 = "comments"
	Enum107Created Enum107 = "created"
	Enum107Updated Enum107 = "updated"
)

// PossibleEnum107Values returns the possible values for the Enum107 const type.
func PossibleEnum107Values() []Enum107 {
	return []Enum107{
		Enum107Comments,
		Enum107Created,
		Enum107Updated,
	}
}

type Enum108 string

const (
	Enum108All Enum108 = "all"
	Enum108TwoFaDisabled Enum108 = "2fa_disabled"
)

// PossibleEnum108Values returns the possible values for the Enum108 const type.
func PossibleEnum108Values() []Enum108 {
	return []Enum108{
		Enum108All,
		Enum108TwoFaDisabled,
	}
}

type Enum109 string

const (
	Enum109Admin Enum109 = "admin"
	Enum109All Enum109 = "all"
	Enum109Member Enum109 = "member"
)

// PossibleEnum109Values returns the possible values for the Enum109 const type.
func PossibleEnum109Values() []Enum109 {
	return []Enum109{
		Enum109Admin,
		Enum109All,
		Enum109Member,
	}
}

type Enum116 string

const (
	Enum116All Enum116 = "all"
	Enum116TwoFaDisabled Enum116 = "2fa_disabled"
)

// PossibleEnum116Values returns the possible values for the Enum116 const type.
func PossibleEnum116Values() []Enum116 {
	return []Enum116{
		Enum116All,
		Enum116TwoFaDisabled,
	}
}

type Enum117 string

const (
	Enum117Container Enum117 = "container"
	Enum117Docker Enum117 = "docker"
	Enum117Maven Enum117 = "maven"
	Enum117Npm Enum117 = "npm"
	Enum117Nuget Enum117 = "nuget"
	Enum117Rubygems Enum117 = "rubygems"
)

// PossibleEnum117Values returns the possible values for the Enum117 const type.
func PossibleEnum117Values() []Enum117 {
	return []Enum117{
		Enum117Container,
		Enum117Docker,
		Enum117Maven,
		Enum117Npm,
		Enum117Nuget,
		Enum117Rubygems,
	}
}

type Enum118 string

const (
	Enum118Internal Enum118 = "internal"
	Enum118Private Enum118 = "private"
	Enum118Public Enum118 = "public"
)

// PossibleEnum118Values returns the possible values for the Enum118 const type.
func PossibleEnum118Values() []Enum118 {
	return []Enum118{
		Enum118Internal,
		Enum118Private,
		Enum118Public,
	}
}

type Enum121 string

const (
	Enum121Container Enum121 = "container"
	Enum121Docker Enum121 = "docker"
	Enum121Maven Enum121 = "maven"
	Enum121Npm Enum121 = "npm"
	Enum121Nuget Enum121 = "nuget"
	Enum121Rubygems Enum121 = "rubygems"
)

// PossibleEnum121Values returns the possible values for the Enum121 const type.
func PossibleEnum121Values() []Enum121 {
	return []Enum121{
		Enum121Container,
		Enum121Docker,
		Enum121Maven,
		Enum121Npm,
		Enum121Nuget,
		Enum121Rubygems,
	}
}

type Enum122 string

const (
	Enum122Active Enum122 = "active"
	Enum122Deleted Enum122 = "deleted"
)

// PossibleEnum122Values returns the possible values for the Enum122 const type.
func PossibleEnum122Values() []Enum122 {
	return []Enum122{
		Enum122Active,
		Enum122Deleted,
	}
}

type Enum124 string

const (
	Enum124All Enum124 = "all"
	Enum124Closed Enum124 = "closed"
	Enum124Open Enum124 = "open"
)

// PossibleEnum124Values returns the possible values for the Enum124 const type.
func PossibleEnum124Values() []Enum124 {
	return []Enum124{
		Enum124All,
		Enum124Closed,
		Enum124Open,
	}
}

type Enum126 string

const (
	Enum126All Enum126 = "all"
	Enum126Forks Enum126 = "forks"
	Enum126Member Enum126 = "member"
	Enum126Private Enum126 = "private"
	Enum126Public Enum126 = "public"
	Enum126Sources Enum126 = "sources"
)

// PossibleEnum126Values returns the possible values for the Enum126 const type.
func PossibleEnum126Values() []Enum126 {
	return []Enum126{
		Enum126All,
		Enum126Forks,
		Enum126Member,
		Enum126Private,
		Enum126Public,
		Enum126Sources,
	}
}

type Enum127 string

const (
	Enum127Created Enum127 = "created"
	Enum127FullName Enum127 = "full_name"
	Enum127Pushed Enum127 = "pushed"
	Enum127Updated Enum127 = "updated"
)

// PossibleEnum127Values returns the possible values for the Enum127 const type.
func PossibleEnum127Values() []Enum127 {
	return []Enum127{
		Enum127Created,
		Enum127FullName,
		Enum127Pushed,
		Enum127Updated,
	}
}

type Enum128 string

const (
	Enum128Asc Enum128 = "asc"
	Enum128Desc Enum128 = "desc"
)

// PossibleEnum128Values returns the possible values for the Enum128 const type.
func PossibleEnum128Values() []Enum128 {
	return []Enum128{
		Enum128Asc,
		Enum128Desc,
	}
}

// Enum129 - The visibility of the repository.
type Enum129 string

const (
	Enum129Private Enum129 = "private"
	Enum129Public Enum129 = "public"
)

// PossibleEnum129Values returns the possible values for the Enum129 const type.
func PossibleEnum129Values() []Enum129 {
	return []Enum129{
		Enum129Private,
		Enum129Public,
	}
}

type Enum139 string

const (
	Enum1391ThumbsUp Enum139 = "+1"
	Enum1391ThumbsDown Enum139 = "-1"
	Enum139Confused Enum139 = "confused"
	Enum139Eyes Enum139 = "eyes"
	Enum139Heart Enum139 = "heart"
	Enum139Hooray Enum139 = "hooray"
	Enum139Laugh Enum139 = "laugh"
	Enum139Rocket Enum139 = "rocket"
)

// PossibleEnum139Values returns the possible values for the Enum139 const type.
func PossibleEnum139Values() []Enum139 {
	return []Enum139{
		Enum1391ThumbsUp,
		Enum1391ThumbsDown,
		Enum139Confused,
		Enum139Eyes,
		Enum139Heart,
		Enum139Hooray,
		Enum139Laugh,
		Enum139Rocket,
	}
}

type Enum142 string

const (
	Enum1421ThumbsUp Enum142 = "+1"
	Enum1421ThumbsDown Enum142 = "-1"
	Enum142Confused Enum142 = "confused"
	Enum142Eyes Enum142 = "eyes"
	Enum142Heart Enum142 = "heart"
	Enum142Hooray Enum142 = "hooray"
	Enum142Laugh Enum142 = "laugh"
	Enum142Rocket Enum142 = "rocket"
)

// PossibleEnum142Values returns the possible values for the Enum142 const type.
func PossibleEnum142Values() []Enum142 {
	return []Enum142{
		Enum1421ThumbsUp,
		Enum1421ThumbsDown,
		Enum142Confused,
		Enum142Eyes,
		Enum142Heart,
		Enum142Hooray,
		Enum142Laugh,
		Enum142Rocket,
	}
}

// Enum143 - The reaction type [https://docs.github.com/rest/reference/reactions#reaction-types] to add to the team discussion.
type Enum143 string

const (
	Enum1431ThumbsUp Enum143 = "+1"
	Enum1431ThumbsDown Enum143 = "-1"
	Enum143Confused Enum143 = "confused"
	Enum143Eyes Enum143 = "eyes"
	Enum143Heart Enum143 = "heart"
	Enum143Hooray Enum143 = "hooray"
	Enum143Laugh Enum143 = "laugh"
	Enum143Rocket Enum143 = "rocket"
)

// PossibleEnum143Values returns the possible values for the Enum143 const type.
func PossibleEnum143Values() []Enum143 {
	return []Enum143{
		Enum1431ThumbsUp,
		Enum1431ThumbsDown,
		Enum143Confused,
		Enum143Eyes,
		Enum143Heart,
		Enum143Hooray,
		Enum143Laugh,
		Enum143Rocket,
	}
}

type Enum144 string

const (
	Enum144All Enum144 = "all"
	Enum144Maintainer Enum144 = "maintainer"
	Enum144Member Enum144 = "member"
)

// PossibleEnum144Values returns the possible values for the Enum144 const type.
func PossibleEnum144Values() []Enum144 {
	return []Enum144{
		Enum144All,
		Enum144Maintainer,
		Enum144Member,
	}
}

// Enum147 - The role that this user should have in the team.
type Enum147 string

const (
	Enum147Maintainer Enum147 = "maintainer"
	Enum147Member Enum147 = "member"
)

// PossibleEnum147Values returns the possible values for the Enum147 const type.
func PossibleEnum147Values() []Enum147 {
	return []Enum147{
		Enum147Maintainer,
		Enum147Member,
	}
}

type Enum157 string

const (
	Enum157AdvancedSecurity Enum157 = "advanced_security"
	Enum157DependabotAlerts Enum157 = "dependabot_alerts"
	Enum157DependabotSecurityUpdates Enum157 = "dependabot_security_updates"
	Enum157DependencyGraph Enum157 = "dependency_graph"
	Enum157SecretScanning Enum157 = "secret_scanning"
	Enum157SecretScanningPushProtection Enum157 = "secret_scanning_push_protection"
)

// PossibleEnum157Values returns the possible values for the Enum157 const type.
func PossibleEnum157Values() []Enum157 {
	return []Enum157{
		Enum157AdvancedSecurity,
		Enum157DependabotAlerts,
		Enum157DependabotSecurityUpdates,
		Enum157DependencyGraph,
		Enum157SecretScanning,
		Enum157SecretScanningPushProtection,
	}
}

type Enum158 string

const (
	Enum158DisableAll Enum158 = "disable_all"
	Enum158EnableAll Enum158 = "enable_all"
)

// PossibleEnum158Values returns the possible values for the Enum158 const type.
func PossibleEnum158Values() []Enum158 {
	return []Enum158{
		Enum158DisableAll,
		Enum158EnableAll,
	}
}

type Enum159 string

const (
	Enum159All Enum159 = "all"
	Enum159Archived Enum159 = "archived"
	Enum159NotArchived Enum159 = "not_archived"
)

// PossibleEnum159Values returns the possible values for the Enum159 const type.
func PossibleEnum159Values() []Enum159 {
	return []Enum159{
		Enum159All,
		Enum159Archived,
		Enum159NotArchived,
	}
}

type Enum161 string

const (
	Enum161All Enum161 = "all"
	Enum161Direct Enum161 = "direct"
	Enum161Outside Enum161 = "outside"
)

// PossibleEnum161Values returns the possible values for the Enum161 const type.
func PossibleEnum161Values() []Enum161 {
	return []Enum161{
		Enum161All,
		Enum161Direct,
		Enum161Outside,
	}
}

// Enum162 - The permission to grant the collaborator.
type Enum162 string

const (
	Enum162Admin Enum162 = "admin"
	Enum162Read Enum162 = "read"
	Enum162Write Enum162 = "write"
)

// PossibleEnum162Values returns the possible values for the Enum162 const type.
func PossibleEnum162Values() []Enum162 {
	return []Enum162{
		Enum162Admin,
		Enum162Read,
		Enum162Write,
	}
}

// Enum168 - The visibility of the repository.
type Enum168 string

const (
	Enum168Private Enum168 = "private"
	Enum168Public Enum168 = "public"
)

// PossibleEnum168Values returns the possible values for the Enum168 const type.
func PossibleEnum168Values() []Enum168 {
	return []Enum168{
		Enum168Private,
		Enum168Public,
	}
}

type Enum177 string

const (
	Enum177ActionRequired Enum177 = "action_required"
	Enum177Cancelled Enum177 = "cancelled"
	Enum177Completed Enum177 = "completed"
	Enum177Failure Enum177 = "failure"
	Enum177InProgress Enum177 = "in_progress"
	Enum177Neutral Enum177 = "neutral"
	Enum177Pending Enum177 = "pending"
	Enum177Queued Enum177 = "queued"
	Enum177Requested Enum177 = "requested"
	Enum177Skipped Enum177 = "skipped"
	Enum177Stale Enum177 = "stale"
	Enum177Success Enum177 = "success"
	Enum177TimedOut Enum177 = "timed_out"
	Enum177Waiting Enum177 = "waiting"
)

// PossibleEnum177Values returns the possible values for the Enum177 const type.
func PossibleEnum177Values() []Enum177 {
	return []Enum177{
		Enum177ActionRequired,
		Enum177Cancelled,
		Enum177Completed,
		Enum177Failure,
		Enum177InProgress,
		Enum177Neutral,
		Enum177Pending,
		Enum177Queued,
		Enum177Requested,
		Enum177Skipped,
		Enum177Stale,
		Enum177Success,
		Enum177TimedOut,
		Enum177Waiting,
	}
}

type Enum179 string

const (
	Enum179All Enum179 = "all"
	Enum179Latest Enum179 = "latest"
)

// PossibleEnum179Values returns the possible values for the Enum179 const type.
func PossibleEnum179Values() []Enum179 {
	return []Enum179{
		Enum179All,
		Enum179Latest,
	}
}

type Enum1928 string

const (
	Enum1928Bot Enum1928 = "Bot"
	Enum1928Mannequin Enum1928 = "Mannequin"
	Enum1928Organization Enum1928 = "Organization"
	Enum1928User Enum1928 = "User"
)

// PossibleEnum1928Values returns the possible values for the Enum1928 const type.
func PossibleEnum1928Values() []Enum1928 {
	return []Enum1928{
		Enum1928Bot,
		Enum1928Mannequin,
		Enum1928Organization,
		Enum1928User,
	}
}

type Enum1929 string

const (
	Enum1929Closed Enum1929 = "closed"
	Enum1929Open Enum1929 = "open"
	Enum1929Secret Enum1929 = "secret"
)

// PossibleEnum1929Values returns the possible values for the Enum1929 const type.
func PossibleEnum1929Values() []Enum1929 {
	return []Enum1929{
		Enum1929Closed,
		Enum1929Open,
		Enum1929Secret,
	}
}

type Enum1930 string

const (
	Enum1930Closed Enum1930 = "closed"
	Enum1930Open Enum1930 = "open"
	Enum1930Secret Enum1930 = "secret"
)

// PossibleEnum1930Values returns the possible values for the Enum1930 const type.
func PossibleEnum1930Values() []Enum1930 {
	return []Enum1930{
		Enum1930Closed,
		Enum1930Open,
		Enum1930Secret,
	}
}

type Enum1931 string

const (
	Enum1931Closed Enum1931 = "closed"
	Enum1931Open Enum1931 = "open"
	Enum1931Secret Enum1931 = "secret"
)

// PossibleEnum1931Values returns the possible values for the Enum1931 const type.
func PossibleEnum1931Values() []Enum1931 {
	return []Enum1931{
		Enum1931Closed,
		Enum1931Open,
		Enum1931Secret,
	}
}

type Enum1959 string

const (
	Enum1959Bot Enum1959 = "Bot"
	Enum1959Mannequin Enum1959 = "Mannequin"
	Enum1959Organization Enum1959 = "Organization"
	Enum1959User Enum1959 = "User"
)

// PossibleEnum1959Values returns the possible values for the Enum1959 const type.
func PossibleEnum1959Values() []Enum1959 {
	return []Enum1959{
		Enum1959Bot,
		Enum1959Mannequin,
		Enum1959Organization,
		Enum1959User,
	}
}

type Enum1960 string

const (
	Enum1960Closed Enum1960 = "closed"
	Enum1960Open Enum1960 = "open"
	Enum1960Secret Enum1960 = "secret"
)

// PossibleEnum1960Values returns the possible values for the Enum1960 const type.
func PossibleEnum1960Values() []Enum1960 {
	return []Enum1960{
		Enum1960Closed,
		Enum1960Open,
		Enum1960Secret,
	}
}

type Enum1961 string

const (
	Enum1961Closed Enum1961 = "closed"
	Enum1961Open Enum1961 = "open"
	Enum1961Secret Enum1961 = "secret"
)

// PossibleEnum1961Values returns the possible values for the Enum1961 const type.
func PossibleEnum1961Values() []Enum1961 {
	return []Enum1961{
		Enum1961Closed,
		Enum1961Open,
		Enum1961Secret,
	}
}

type Enum1962 string

const (
	Enum1962Closed Enum1962 = "closed"
	Enum1962Open Enum1962 = "open"
	Enum1962Secret Enum1962 = "secret"
)

// PossibleEnum1962Values returns the possible values for the Enum1962 const type.
func PossibleEnum1962Values() []Enum1962 {
	return []Enum1962{
		Enum1962Closed,
		Enum1962Open,
		Enum1962Secret,
	}
}

type Enum198 string

const (
	Enum198All Enum198 = "all"
	Enum198Latest Enum198 = "latest"
)

// PossibleEnum198Values returns the possible values for the Enum198 const type.
func PossibleEnum198Values() []Enum198 {
	return []Enum198{
		Enum198All,
		Enum198Latest,
	}
}

type Enum199 string

const (
	Enum199Created Enum199 = "created"
	Enum199Updated Enum199 = "updated"
)

// PossibleEnum199Values returns the possible values for the Enum199 const type.
func PossibleEnum199Values() []Enum199 {
	return []Enum199{
		Enum199Created,
		Enum199Updated,
	}
}

type Enum1990 string

const (
	Enum1990Bot Enum1990 = "Bot"
	Enum1990Mannequin Enum1990 = "Mannequin"
	Enum1990Organization Enum1990 = "Organization"
	Enum1990User Enum1990 = "User"
)

// PossibleEnum1990Values returns the possible values for the Enum1990 const type.
func PossibleEnum1990Values() []Enum1990 {
	return []Enum1990{
		Enum1990Bot,
		Enum1990Mannequin,
		Enum1990Organization,
		Enum1990User,
	}
}

type Enum1991 string

const (
	Enum1991Closed Enum1991 = "closed"
	Enum1991Open Enum1991 = "open"
	Enum1991Secret Enum1991 = "secret"
)

// PossibleEnum1991Values returns the possible values for the Enum1991 const type.
func PossibleEnum1991Values() []Enum1991 {
	return []Enum1991{
		Enum1991Closed,
		Enum1991Open,
		Enum1991Secret,
	}
}

type Enum1992 string

const (
	Enum1992Closed Enum1992 = "closed"
	Enum1992Open Enum1992 = "open"
	Enum1992Secret Enum1992 = "secret"
)

// PossibleEnum1992Values returns the possible values for the Enum1992 const type.
func PossibleEnum1992Values() []Enum1992 {
	return []Enum1992{
		Enum1992Closed,
		Enum1992Open,
		Enum1992Secret,
	}
}

type Enum1993 string

const (
	Enum1993Closed Enum1993 = "closed"
	Enum1993Open Enum1993 = "open"
	Enum1993Secret Enum1993 = "secret"
)

// PossibleEnum1993Values returns the possible values for the Enum1993 const type.
func PossibleEnum1993Values() []Enum1993 {
	return []Enum1993{
		Enum1993Closed,
		Enum1993Open,
		Enum1993Secret,
	}
}

type Enum202 string

const (
	Enum202Created Enum202 = "created"
)

// PossibleEnum202Values returns the possible values for the Enum202 const type.
func PossibleEnum202Values() []Enum202 {
	return []Enum202{
		Enum202Created,
	}
}

type Enum2021 string

const (
	Enum2021Bot Enum2021 = "Bot"
	Enum2021Mannequin Enum2021 = "Mannequin"
	Enum2021Organization Enum2021 = "Organization"
	Enum2021User Enum2021 = "User"
)

// PossibleEnum2021Values returns the possible values for the Enum2021 const type.
func PossibleEnum2021Values() []Enum2021 {
	return []Enum2021{
		Enum2021Bot,
		Enum2021Mannequin,
		Enum2021Organization,
		Enum2021User,
	}
}

type Enum2022 string

const (
	Enum2022Closed Enum2022 = "closed"
	Enum2022Open Enum2022 = "open"
	Enum2022Secret Enum2022 = "secret"
)

// PossibleEnum2022Values returns the possible values for the Enum2022 const type.
func PossibleEnum2022Values() []Enum2022 {
	return []Enum2022{
		Enum2022Closed,
		Enum2022Open,
		Enum2022Secret,
	}
}

type Enum2023 string

const (
	Enum2023Closed Enum2023 = "closed"
	Enum2023Open Enum2023 = "open"
	Enum2023Secret Enum2023 = "secret"
)

// PossibleEnum2023Values returns the possible values for the Enum2023 const type.
func PossibleEnum2023Values() []Enum2023 {
	return []Enum2023{
		Enum2023Closed,
		Enum2023Open,
		Enum2023Secret,
	}
}

type Enum2024 string

const (
	Enum2024Closed Enum2024 = "closed"
	Enum2024Open Enum2024 = "open"
	Enum2024Secret Enum2024 = "secret"
)

// PossibleEnum2024Values returns the possible values for the Enum2024 const type.
func PossibleEnum2024Values() []Enum2024 {
	return []Enum2024{
		Enum2024Closed,
		Enum2024Open,
		Enum2024Secret,
	}
}

type Enum205 string

const (
	Enum205All Enum205 = "all"
	Enum205Direct Enum205 = "direct"
	Enum205Outside Enum205 = "outside"
)

// PossibleEnum205Values returns the possible values for the Enum205 const type.
func PossibleEnum205Values() []Enum205 {
	return []Enum205{
		Enum205All,
		Enum205Direct,
		Enum205Outside,
	}
}

type Enum206 string

const (
	Enum206Admin Enum206 = "admin"
	Enum206Maintain Enum206 = "maintain"
	Enum206Pull Enum206 = "pull"
	Enum206Push Enum206 = "push"
	Enum206Triage Enum206 = "triage"
)

// PossibleEnum206Values returns the possible values for the Enum206 const type.
func PossibleEnum206Values() []Enum206 {
	return []Enum206{
		Enum206Admin,
		Enum206Maintain,
		Enum206Pull,
		Enum206Push,
		Enum206Triage,
	}
}

type Enum2061 string

const (
	Enum2061Bot Enum2061 = "Bot"
	Enum2061Organization Enum2061 = "Organization"
	Enum2061User Enum2061 = "User"
)

// PossibleEnum2061Values returns the possible values for the Enum2061 const type.
func PossibleEnum2061Values() []Enum2061 {
	return []Enum2061{
		Enum2061Bot,
		Enum2061Organization,
		Enum2061User,
	}
}

type Enum2062 string

const (
	Enum2062Closed Enum2062 = "closed"
	Enum2062Open Enum2062 = "open"
	Enum2062Secret Enum2062 = "secret"
)

// PossibleEnum2062Values returns the possible values for the Enum2062 const type.
func PossibleEnum2062Values() []Enum2062 {
	return []Enum2062{
		Enum2062Closed,
		Enum2062Open,
		Enum2062Secret,
	}
}

type Enum2063 string

const (
	Enum2063Closed Enum2063 = "closed"
	Enum2063Open Enum2063 = "open"
	Enum2063Secret Enum2063 = "secret"
)

// PossibleEnum2063Values returns the possible values for the Enum2063 const type.
func PossibleEnum2063Values() []Enum2063 {
	return []Enum2063{
		Enum2063Closed,
		Enum2063Open,
		Enum2063Secret,
	}
}

type Enum2064 string

const (
	Enum2064Closed Enum2064 = "closed"
	Enum2064Open Enum2064 = "open"
	Enum2064Secret Enum2064 = "secret"
)

// PossibleEnum2064Values returns the possible values for the Enum2064 const type.
func PossibleEnum2064Values() []Enum2064 {
	return []Enum2064{
		Enum2064Closed,
		Enum2064Open,
		Enum2064Secret,
	}
}

type Enum2076 bool

const (
	Enum2076False Enum2076 = false
)

// PossibleEnum2076Values returns the possible values for the Enum2076 const type.
func PossibleEnum2076Values() []Enum2076 {
	return []Enum2076{
		Enum2076False,
	}
}

type Enum208 string

const (
	Enum2081ThumbsUp Enum208 = "+1"
	Enum2081ThumbsDown Enum208 = "-1"
	Enum208Confused Enum208 = "confused"
	Enum208Eyes Enum208 = "eyes"
	Enum208Heart Enum208 = "heart"
	Enum208Hooray Enum208 = "hooray"
	Enum208Laugh Enum208 = "laugh"
	Enum208Rocket Enum208 = "rocket"
)

// PossibleEnum208Values returns the possible values for the Enum208 const type.
func PossibleEnum208Values() []Enum208 {
	return []Enum208{
		Enum2081ThumbsUp,
		Enum2081ThumbsDown,
		Enum208Confused,
		Enum208Eyes,
		Enum208Heart,
		Enum208Hooray,
		Enum208Laugh,
		Enum208Rocket,
	}
}

type Enum2101 string

const (
	Enum2101Bot Enum2101 = "Bot"
	Enum2101Organization Enum2101 = "Organization"
	Enum2101User Enum2101 = "User"
)

// PossibleEnum2101Values returns the possible values for the Enum2101 const type.
func PossibleEnum2101Values() []Enum2101 {
	return []Enum2101{
		Enum2101Bot,
		Enum2101Organization,
		Enum2101User,
	}
}

type Enum2102 string

const (
	Enum2102Closed Enum2102 = "closed"
	Enum2102Open Enum2102 = "open"
	Enum2102Secret Enum2102 = "secret"
)

// PossibleEnum2102Values returns the possible values for the Enum2102 const type.
func PossibleEnum2102Values() []Enum2102 {
	return []Enum2102{
		Enum2102Closed,
		Enum2102Open,
		Enum2102Secret,
	}
}

type Enum2103 string

const (
	Enum2103Closed Enum2103 = "closed"
	Enum2103Open Enum2103 = "open"
	Enum2103Secret Enum2103 = "secret"
)

// PossibleEnum2103Values returns the possible values for the Enum2103 const type.
func PossibleEnum2103Values() []Enum2103 {
	return []Enum2103{
		Enum2103Closed,
		Enum2103Open,
		Enum2103Secret,
	}
}

type Enum2104 string

const (
	Enum2104Closed Enum2104 = "closed"
	Enum2104Open Enum2104 = "open"
	Enum2104Secret Enum2104 = "secret"
)

// PossibleEnum2104Values returns the possible values for the Enum2104 const type.
func PossibleEnum2104Values() []Enum2104 {
	return []Enum2104{
		Enum2104Closed,
		Enum2104Open,
		Enum2104Secret,
	}
}

type Enum211 string

const (
	Enum211All Enum211 = "all"
	Enum211Latest Enum211 = "latest"
)

// PossibleEnum211Values returns the possible values for the Enum211 const type.
func PossibleEnum211Values() []Enum211 {
	return []Enum211{
		Enum211All,
		Enum211Latest,
	}
}

type Enum2132 string

const (
	Enum2132Bot Enum2132 = "Bot"
	Enum2132Organization Enum2132 = "Organization"
	Enum2132User Enum2132 = "User"
)

// PossibleEnum2132Values returns the possible values for the Enum2132 const type.
func PossibleEnum2132Values() []Enum2132 {
	return []Enum2132{
		Enum2132Bot,
		Enum2132Organization,
		Enum2132User,
	}
}

type Enum2133 string

const (
	Enum2133Closed Enum2133 = "closed"
	Enum2133Open Enum2133 = "open"
	Enum2133Secret Enum2133 = "secret"
)

// PossibleEnum2133Values returns the possible values for the Enum2133 const type.
func PossibleEnum2133Values() []Enum2133 {
	return []Enum2133{
		Enum2133Closed,
		Enum2133Open,
		Enum2133Secret,
	}
}

type Enum2134 string

const (
	Enum2134Closed Enum2134 = "closed"
	Enum2134Open Enum2134 = "open"
	Enum2134Secret Enum2134 = "secret"
)

// PossibleEnum2134Values returns the possible values for the Enum2134 const type.
func PossibleEnum2134Values() []Enum2134 {
	return []Enum2134{
		Enum2134Closed,
		Enum2134Open,
		Enum2134Secret,
	}
}

type Enum2135 string

const (
	Enum2135Closed Enum2135 = "closed"
	Enum2135Open Enum2135 = "open"
	Enum2135Secret Enum2135 = "secret"
)

// PossibleEnum2135Values returns the possible values for the Enum2135 const type.
func PossibleEnum2135Values() []Enum2135 {
	return []Enum2135{
		Enum2135Closed,
		Enum2135Open,
		Enum2135Secret,
	}
}

type Enum2163 string

const (
	Enum2163Bot Enum2163 = "Bot"
	Enum2163Mannequin Enum2163 = "Mannequin"
	Enum2163Organization Enum2163 = "Organization"
	Enum2163User Enum2163 = "User"
)

// PossibleEnum2163Values returns the possible values for the Enum2163 const type.
func PossibleEnum2163Values() []Enum2163 {
	return []Enum2163{
		Enum2163Bot,
		Enum2163Mannequin,
		Enum2163Organization,
		Enum2163User,
	}
}

type Enum2164 string

const (
	Enum2164Closed Enum2164 = "closed"
	Enum2164Open Enum2164 = "open"
	Enum2164Secret Enum2164 = "secret"
)

// PossibleEnum2164Values returns the possible values for the Enum2164 const type.
func PossibleEnum2164Values() []Enum2164 {
	return []Enum2164{
		Enum2164Closed,
		Enum2164Open,
		Enum2164Secret,
	}
}

type Enum2165 string

const (
	Enum2165Closed Enum2165 = "closed"
	Enum2165Open Enum2165 = "open"
	Enum2165Secret Enum2165 = "secret"
)

// PossibleEnum2165Values returns the possible values for the Enum2165 const type.
func PossibleEnum2165Values() []Enum2165 {
	return []Enum2165{
		Enum2165Closed,
		Enum2165Open,
		Enum2165Secret,
	}
}

type Enum2166 string

const (
	Enum2166Closed Enum2166 = "closed"
	Enum2166Open Enum2166 = "open"
	Enum2166Secret Enum2166 = "secret"
)

// PossibleEnum2166Values returns the possible values for the Enum2166 const type.
func PossibleEnum2166Values() []Enum2166 {
	return []Enum2166{
		Enum2166Closed,
		Enum2166Open,
		Enum2166Secret,
	}
}

type Enum2194 string

const (
	Enum2194Bot Enum2194 = "Bot"
	Enum2194Organization Enum2194 = "Organization"
	Enum2194User Enum2194 = "User"
)

// PossibleEnum2194Values returns the possible values for the Enum2194 const type.
func PossibleEnum2194Values() []Enum2194 {
	return []Enum2194{
		Enum2194Bot,
		Enum2194Organization,
		Enum2194User,
	}
}

type Enum2195 string

const (
	Enum2195Closed Enum2195 = "closed"
	Enum2195Open Enum2195 = "open"
	Enum2195Secret Enum2195 = "secret"
)

// PossibleEnum2195Values returns the possible values for the Enum2195 const type.
func PossibleEnum2195Values() []Enum2195 {
	return []Enum2195{
		Enum2195Closed,
		Enum2195Open,
		Enum2195Secret,
	}
}

type Enum2196 string

const (
	Enum2196Closed Enum2196 = "closed"
	Enum2196Open Enum2196 = "open"
	Enum2196Secret Enum2196 = "secret"
)

// PossibleEnum2196Values returns the possible values for the Enum2196 const type.
func PossibleEnum2196Values() []Enum2196 {
	return []Enum2196{
		Enum2196Closed,
		Enum2196Open,
		Enum2196Secret,
	}
}

type Enum2197 string

const (
	Enum2197Closed Enum2197 = "closed"
	Enum2197Open Enum2197 = "open"
	Enum2197Secret Enum2197 = "secret"
)

// PossibleEnum2197Values returns the possible values for the Enum2197 const type.
func PossibleEnum2197Values() []Enum2197 {
	return []Enum2197{
		Enum2197Closed,
		Enum2197Open,
		Enum2197Secret,
	}
}

// Enum220 - The state of the Dependabot alert. A dismissed_reason must be provided when setting the state to dismissed.
type Enum220 string

const (
	Enum220Dismissed Enum220 = "dismissed"
	Enum220Open Enum220 = "open"
)

// PossibleEnum220Values returns the possible values for the Enum220 const type.
func PossibleEnum220Values() []Enum220 {
	return []Enum220{
		Enum220Dismissed,
		Enum220Open,
	}
}

type Enum2225 string

const (
	Enum2225Bot Enum2225 = "Bot"
	Enum2225Mannequin Enum2225 = "Mannequin"
	Enum2225Organization Enum2225 = "Organization"
	Enum2225User Enum2225 = "User"
)

// PossibleEnum2225Values returns the possible values for the Enum2225 const type.
func PossibleEnum2225Values() []Enum2225 {
	return []Enum2225{
		Enum2225Bot,
		Enum2225Mannequin,
		Enum2225Organization,
		Enum2225User,
	}
}

type Enum2226 string

const (
	Enum2226Closed Enum2226 = "closed"
	Enum2226Open Enum2226 = "open"
	Enum2226Secret Enum2226 = "secret"
)

// PossibleEnum2226Values returns the possible values for the Enum2226 const type.
func PossibleEnum2226Values() []Enum2226 {
	return []Enum2226{
		Enum2226Closed,
		Enum2226Open,
		Enum2226Secret,
	}
}

type Enum2227 string

const (
	Enum2227Closed Enum2227 = "closed"
	Enum2227Open Enum2227 = "open"
	Enum2227Secret Enum2227 = "secret"
)

// PossibleEnum2227Values returns the possible values for the Enum2227 const type.
func PossibleEnum2227Values() []Enum2227 {
	return []Enum2227{
		Enum2227Closed,
		Enum2227Open,
		Enum2227Secret,
	}
}

type Enum2228 string

const (
	Enum2228Closed Enum2228 = "closed"
	Enum2228Open Enum2228 = "open"
	Enum2228Secret Enum2228 = "secret"
)

// PossibleEnum2228Values returns the possible values for the Enum2228 const type.
func PossibleEnum2228Values() []Enum2228 {
	return []Enum2228{
		Enum2228Closed,
		Enum2228Open,
		Enum2228Secret,
	}
}

type Enum2256 string

const (
	Enum2256Bot Enum2256 = "Bot"
	Enum2256Mannequin Enum2256 = "Mannequin"
	Enum2256Organization Enum2256 = "Organization"
	Enum2256User Enum2256 = "User"
)

// PossibleEnum2256Values returns the possible values for the Enum2256 const type.
func PossibleEnum2256Values() []Enum2256 {
	return []Enum2256{
		Enum2256Bot,
		Enum2256Mannequin,
		Enum2256Organization,
		Enum2256User,
	}
}

type Enum2257 string

const (
	Enum2257Closed Enum2257 = "closed"
	Enum2257Open Enum2257 = "open"
	Enum2257Secret Enum2257 = "secret"
)

// PossibleEnum2257Values returns the possible values for the Enum2257 const type.
func PossibleEnum2257Values() []Enum2257 {
	return []Enum2257{
		Enum2257Closed,
		Enum2257Open,
		Enum2257Secret,
	}
}

type Enum2258 string

const (
	Enum2258Closed Enum2258 = "closed"
	Enum2258Open Enum2258 = "open"
	Enum2258Secret Enum2258 = "secret"
)

// PossibleEnum2258Values returns the possible values for the Enum2258 const type.
func PossibleEnum2258Values() []Enum2258 {
	return []Enum2258{
		Enum2258Closed,
		Enum2258Open,
		Enum2258Secret,
	}
}

type Enum2259 string

const (
	Enum2259Closed Enum2259 = "closed"
	Enum2259Open Enum2259 = "open"
	Enum2259Secret Enum2259 = "secret"
)

// PossibleEnum2259Values returns the possible values for the Enum2259 const type.
func PossibleEnum2259Values() []Enum2259 {
	return []Enum2259{
		Enum2259Closed,
		Enum2259Open,
		Enum2259Secret,
	}
}

// Enum227 - The state of the status. When you set a transient deployment to inactive, the deployment will be shown as destroyed
// in GitHub.
type Enum227 string

const (
	Enum227Error Enum227 = "error"
	Enum227Failure Enum227 = "failure"
	Enum227InProgress Enum227 = "in_progress"
	Enum227Inactive Enum227 = "inactive"
	Enum227Pending Enum227 = "pending"
	Enum227Queued Enum227 = "queued"
	Enum227Success Enum227 = "success"
)

// PossibleEnum227Values returns the possible values for the Enum227 const type.
func PossibleEnum227Values() []Enum227 {
	return []Enum227{
		Enum227Error,
		Enum227Failure,
		Enum227InProgress,
		Enum227Inactive,
		Enum227Pending,
		Enum227Queued,
		Enum227Success,
	}
}

// Enum228 - Name for the target deployment environment, which can be changed when setting a deploy status. For example, production,
// staging, or qa.
type Enum228 string

const (
	Enum228Production Enum228 = "production"
	Enum228Qa Enum228 = "qa"
	Enum228Staging Enum228 = "staging"
)

// PossibleEnum228Values returns the possible values for the Enum228 const type.
func PossibleEnum228Values() []Enum228 {
	return []Enum228{
		Enum228Production,
		Enum228Qa,
		Enum228Staging,
	}
}

type Enum2287 string

const (
	Enum2287Bot Enum2287 = "Bot"
	Enum2287Organization Enum2287 = "Organization"
	Enum2287User Enum2287 = "User"
)

// PossibleEnum2287Values returns the possible values for the Enum2287 const type.
func PossibleEnum2287Values() []Enum2287 {
	return []Enum2287{
		Enum2287Bot,
		Enum2287Organization,
		Enum2287User,
	}
}

type Enum2288 string

const (
	Enum2288Closed Enum2288 = "closed"
	Enum2288Open Enum2288 = "open"
	Enum2288Secret Enum2288 = "secret"
)

// PossibleEnum2288Values returns the possible values for the Enum2288 const type.
func PossibleEnum2288Values() []Enum2288 {
	return []Enum2288{
		Enum2288Closed,
		Enum2288Open,
		Enum2288Secret,
	}
}

type Enum2289 string

const (
	Enum2289Closed Enum2289 = "closed"
	Enum2289Open Enum2289 = "open"
	Enum2289Secret Enum2289 = "secret"
)

// PossibleEnum2289Values returns the possible values for the Enum2289 const type.
func PossibleEnum2289Values() []Enum2289 {
	return []Enum2289{
		Enum2289Closed,
		Enum2289Open,
		Enum2289Secret,
	}
}

type Enum229 string

const (
	Enum229Newest Enum229 = "newest"
	Enum229Oldest Enum229 = "oldest"
	Enum229Stargazers Enum229 = "stargazers"
	Enum229Watchers Enum229 = "watchers"
)

// PossibleEnum229Values returns the possible values for the Enum229 const type.
func PossibleEnum229Values() []Enum229 {
	return []Enum229{
		Enum229Newest,
		Enum229Oldest,
		Enum229Stargazers,
		Enum229Watchers,
	}
}

type Enum2290 string

const (
	Enum2290Closed Enum2290 = "closed"
	Enum2290Open Enum2290 = "open"
	Enum2290Secret Enum2290 = "secret"
)

// PossibleEnum2290Values returns the possible values for the Enum2290 const type.
func PossibleEnum2290Values() []Enum2290 {
	return []Enum2290{
		Enum2290Closed,
		Enum2290Open,
		Enum2290Secret,
	}
}

type Enum2318 string

const (
	Enum2318Bot Enum2318 = "Bot"
	Enum2318Organization Enum2318 = "Organization"
	Enum2318User Enum2318 = "User"
)

// PossibleEnum2318Values returns the possible values for the Enum2318 const type.
func PossibleEnum2318Values() []Enum2318 {
	return []Enum2318{
		Enum2318Bot,
		Enum2318Organization,
		Enum2318User,
	}
}

type Enum2319 string

const (
	Enum2319Closed Enum2319 = "closed"
	Enum2319Open Enum2319 = "open"
	Enum2319Secret Enum2319 = "secret"
)

// PossibleEnum2319Values returns the possible values for the Enum2319 const type.
func PossibleEnum2319Values() []Enum2319 {
	return []Enum2319{
		Enum2319Closed,
		Enum2319Open,
		Enum2319Secret,
	}
}

type Enum2320 string

const (
	Enum2320Closed Enum2320 = "closed"
	Enum2320Open Enum2320 = "open"
	Enum2320Secret Enum2320 = "secret"
)

// PossibleEnum2320Values returns the possible values for the Enum2320 const type.
func PossibleEnum2320Values() []Enum2320 {
	return []Enum2320{
		Enum2320Closed,
		Enum2320Open,
		Enum2320Secret,
	}
}

type Enum2321 string

const (
	Enum2321Closed Enum2321 = "closed"
	Enum2321Open Enum2321 = "open"
	Enum2321Secret Enum2321 = "secret"
)

// PossibleEnum2321Values returns the possible values for the Enum2321 const type.
func PossibleEnum2321Values() []Enum2321 {
	return []Enum2321{
		Enum2321Closed,
		Enum2321Open,
		Enum2321Secret,
	}
}

type Enum2350 string

const (
	Enum2350Bot Enum2350 = "Bot"
	Enum2350Organization Enum2350 = "Organization"
	Enum2350User Enum2350 = "User"
)

// PossibleEnum2350Values returns the possible values for the Enum2350 const type.
func PossibleEnum2350Values() []Enum2350 {
	return []Enum2350{
		Enum2350Bot,
		Enum2350Organization,
		Enum2350User,
	}
}

type Enum2351 string

const (
	Enum2351Closed Enum2351 = "closed"
	Enum2351Open Enum2351 = "open"
	Enum2351Secret Enum2351 = "secret"
)

// PossibleEnum2351Values returns the possible values for the Enum2351 const type.
func PossibleEnum2351Values() []Enum2351 {
	return []Enum2351{
		Enum2351Closed,
		Enum2351Open,
		Enum2351Secret,
	}
}

type Enum2352 string

const (
	Enum2352Closed Enum2352 = "closed"
	Enum2352Open Enum2352 = "open"
	Enum2352Secret Enum2352 = "secret"
)

// PossibleEnum2352Values returns the possible values for the Enum2352 const type.
func PossibleEnum2352Values() []Enum2352 {
	return []Enum2352{
		Enum2352Closed,
		Enum2352Open,
		Enum2352Secret,
	}
}

type Enum2353 string

const (
	Enum2353Closed Enum2353 = "closed"
	Enum2353Open Enum2353 = "open"
	Enum2353Secret Enum2353 = "secret"
)

// PossibleEnum2353Values returns the possible values for the Enum2353 const type.
func PossibleEnum2353Values() []Enum2353 {
	return []Enum2353{
		Enum2353Closed,
		Enum2353Open,
		Enum2353Secret,
	}
}

type Enum238 string

const (
	Enum238All Enum238 = "all"
	Enum238Closed Enum238 = "closed"
	Enum238Open Enum238 = "open"
)

// PossibleEnum238Values returns the possible values for the Enum238 const type.
func PossibleEnum238Values() []Enum238 {
	return []Enum238{
		Enum238All,
		Enum238Closed,
		Enum238Open,
	}
}

type Enum239 string

const (
	Enum239Comments Enum239 = "comments"
	Enum239Created Enum239 = "created"
	Enum239Updated Enum239 = "updated"
)

// PossibleEnum239Values returns the possible values for the Enum239 const type.
func PossibleEnum239Values() []Enum239 {
	return []Enum239{
		Enum239Comments,
		Enum239Created,
		Enum239Updated,
	}
}

type Enum2390 string

const (
	Enum2390Bot Enum2390 = "Bot"
	Enum2390Mannequin Enum2390 = "Mannequin"
	Enum2390Organization Enum2390 = "Organization"
	Enum2390User Enum2390 = "User"
)

// PossibleEnum2390Values returns the possible values for the Enum2390 const type.
func PossibleEnum2390Values() []Enum2390 {
	return []Enum2390{
		Enum2390Bot,
		Enum2390Mannequin,
		Enum2390Organization,
		Enum2390User,
	}
}

type Enum2391 string

const (
	Enum2391Closed Enum2391 = "closed"
	Enum2391Open Enum2391 = "open"
	Enum2391Secret Enum2391 = "secret"
)

// PossibleEnum2391Values returns the possible values for the Enum2391 const type.
func PossibleEnum2391Values() []Enum2391 {
	return []Enum2391{
		Enum2391Closed,
		Enum2391Open,
		Enum2391Secret,
	}
}

type Enum2392 string

const (
	Enum2392Closed Enum2392 = "closed"
	Enum2392Open Enum2392 = "open"
	Enum2392Secret Enum2392 = "secret"
)

// PossibleEnum2392Values returns the possible values for the Enum2392 const type.
func PossibleEnum2392Values() []Enum2392 {
	return []Enum2392{
		Enum2392Closed,
		Enum2392Open,
		Enum2392Secret,
	}
}

type Enum2393 string

const (
	Enum2393Closed Enum2393 = "closed"
	Enum2393Open Enum2393 = "open"
	Enum2393Secret Enum2393 = "secret"
)

// PossibleEnum2393Values returns the possible values for the Enum2393 const type.
func PossibleEnum2393Values() []Enum2393 {
	return []Enum2393{
		Enum2393Closed,
		Enum2393Open,
		Enum2393Secret,
	}
}

type Enum240 string

const (
	Enum240Asc Enum240 = "asc"
	Enum240Desc Enum240 = "desc"
)

// PossibleEnum240Values returns the possible values for the Enum240 const type.
func PossibleEnum240Values() []Enum240 {
	return []Enum240{
		Enum240Asc,
		Enum240Desc,
	}
}

type Enum2433 string

const (
	Enum2433Bot Enum2433 = "Bot"
	Enum2433Mannequin Enum2433 = "Mannequin"
	Enum2433Organization Enum2433 = "Organization"
	Enum2433User Enum2433 = "User"
)

// PossibleEnum2433Values returns the possible values for the Enum2433 const type.
func PossibleEnum2433Values() []Enum2433 {
	return []Enum2433{
		Enum2433Bot,
		Enum2433Mannequin,
		Enum2433Organization,
		Enum2433User,
	}
}

type Enum2434 string

const (
	Enum2434Closed Enum2434 = "closed"
	Enum2434Open Enum2434 = "open"
	Enum2434Secret Enum2434 = "secret"
)

// PossibleEnum2434Values returns the possible values for the Enum2434 const type.
func PossibleEnum2434Values() []Enum2434 {
	return []Enum2434{
		Enum2434Closed,
		Enum2434Open,
		Enum2434Secret,
	}
}

type Enum2435 string

const (
	Enum2435Closed Enum2435 = "closed"
	Enum2435Open Enum2435 = "open"
	Enum2435Secret Enum2435 = "secret"
)

// PossibleEnum2435Values returns the possible values for the Enum2435 const type.
func PossibleEnum2435Values() []Enum2435 {
	return []Enum2435{
		Enum2435Closed,
		Enum2435Open,
		Enum2435Secret,
	}
}

type Enum2436 string

const (
	Enum2436Closed Enum2436 = "closed"
	Enum2436Open Enum2436 = "open"
	Enum2436Secret Enum2436 = "secret"
)

// PossibleEnum2436Values returns the possible values for the Enum2436 const type.
func PossibleEnum2436Values() []Enum2436 {
	return []Enum2436{
		Enum2436Closed,
		Enum2436Open,
		Enum2436Secret,
	}
}

// Enum244 - The open or closed state of the issue.
type Enum244 string

const (
	Enum244Closed Enum244 = "closed"
	Enum244Open Enum244 = "open"
)

// PossibleEnum244Values returns the possible values for the Enum244 const type.
func PossibleEnum244Values() []Enum244 {
	return []Enum244{
		Enum244Closed,
		Enum244Open,
	}
}

type Enum2467 string

const (
	Enum2467Bot Enum2467 = "Bot"
	Enum2467Organization Enum2467 = "Organization"
	Enum2467User Enum2467 = "User"
)

// PossibleEnum2467Values returns the possible values for the Enum2467 const type.
func PossibleEnum2467Values() []Enum2467 {
	return []Enum2467{
		Enum2467Bot,
		Enum2467Organization,
		Enum2467User,
	}
}

type Enum2468 string

const (
	Enum2468Closed Enum2468 = "closed"
	Enum2468Open Enum2468 = "open"
	Enum2468Secret Enum2468 = "secret"
)

// PossibleEnum2468Values returns the possible values for the Enum2468 const type.
func PossibleEnum2468Values() []Enum2468 {
	return []Enum2468{
		Enum2468Closed,
		Enum2468Open,
		Enum2468Secret,
	}
}

type Enum2469 string

const (
	Enum2469Closed Enum2469 = "closed"
	Enum2469Open Enum2469 = "open"
	Enum2469Secret Enum2469 = "secret"
)

// PossibleEnum2469Values returns the possible values for the Enum2469 const type.
func PossibleEnum2469Values() []Enum2469 {
	return []Enum2469{
		Enum2469Closed,
		Enum2469Open,
		Enum2469Secret,
	}
}

type Enum2470 string

const (
	Enum2470Closed Enum2470 = "closed"
	Enum2470Open Enum2470 = "open"
	Enum2470Secret Enum2470 = "secret"
)

// PossibleEnum2470Values returns the possible values for the Enum2470 const type.
func PossibleEnum2470Values() []Enum2470 {
	return []Enum2470{
		Enum2470Closed,
		Enum2470Open,
		Enum2470Secret,
	}
}

type Enum2501 string

const (
	Enum2501Bot Enum2501 = "Bot"
	Enum2501Organization Enum2501 = "Organization"
	Enum2501User Enum2501 = "User"
)

// PossibleEnum2501Values returns the possible values for the Enum2501 const type.
func PossibleEnum2501Values() []Enum2501 {
	return []Enum2501{
		Enum2501Bot,
		Enum2501Organization,
		Enum2501User,
	}
}

type Enum2502 string

const (
	Enum2502Closed Enum2502 = "closed"
	Enum2502Open Enum2502 = "open"
	Enum2502Secret Enum2502 = "secret"
)

// PossibleEnum2502Values returns the possible values for the Enum2502 const type.
func PossibleEnum2502Values() []Enum2502 {
	return []Enum2502{
		Enum2502Closed,
		Enum2502Open,
		Enum2502Secret,
	}
}

type Enum2503 string

const (
	Enum2503Closed Enum2503 = "closed"
	Enum2503Open Enum2503 = "open"
	Enum2503Secret Enum2503 = "secret"
)

// PossibleEnum2503Values returns the possible values for the Enum2503 const type.
func PossibleEnum2503Values() []Enum2503 {
	return []Enum2503{
		Enum2503Closed,
		Enum2503Open,
		Enum2503Secret,
	}
}

type Enum2504 string

const (
	Enum2504Closed Enum2504 = "closed"
	Enum2504Open Enum2504 = "open"
	Enum2504Secret Enum2504 = "secret"
)

// PossibleEnum2504Values returns the possible values for the Enum2504 const type.
func PossibleEnum2504Values() []Enum2504 {
	return []Enum2504{
		Enum2504Closed,
		Enum2504Open,
		Enum2504Secret,
	}
}

type Enum252 string

const (
	Enum252All Enum252 = "all"
	Enum252Closed Enum252 = "closed"
	Enum252Open Enum252 = "open"
)

// PossibleEnum252Values returns the possible values for the Enum252 const type.
func PossibleEnum252Values() []Enum252 {
	return []Enum252{
		Enum252All,
		Enum252Closed,
		Enum252Open,
	}
}

type Enum253 string

const (
	Enum253Completeness Enum253 = "completeness"
	Enum253DueOn Enum253 = "due_on"
)

// PossibleEnum253Values returns the possible values for the Enum253 const type.
func PossibleEnum253Values() []Enum253 {
	return []Enum253{
		Enum253Completeness,
		Enum253DueOn,
	}
}

type Enum2531 string

const (
	Enum2531Bot Enum2531 = "Bot"
	Enum2531Mannequin Enum2531 = "Mannequin"
	Enum2531Organization Enum2531 = "Organization"
	Enum2531User Enum2531 = "User"
)

// PossibleEnum2531Values returns the possible values for the Enum2531 const type.
func PossibleEnum2531Values() []Enum2531 {
	return []Enum2531{
		Enum2531Bot,
		Enum2531Mannequin,
		Enum2531Organization,
		Enum2531User,
	}
}

type Enum2532 string

const (
	Enum2532Closed Enum2532 = "closed"
	Enum2532Open Enum2532 = "open"
	Enum2532Secret Enum2532 = "secret"
)

// PossibleEnum2532Values returns the possible values for the Enum2532 const type.
func PossibleEnum2532Values() []Enum2532 {
	return []Enum2532{
		Enum2532Closed,
		Enum2532Open,
		Enum2532Secret,
	}
}

type Enum2533 string

const (
	Enum2533Closed Enum2533 = "closed"
	Enum2533Open Enum2533 = "open"
	Enum2533Secret Enum2533 = "secret"
)

// PossibleEnum2533Values returns the possible values for the Enum2533 const type.
func PossibleEnum2533Values() []Enum2533 {
	return []Enum2533{
		Enum2533Closed,
		Enum2533Open,
		Enum2533Secret,
	}
}

type Enum2534 string

const (
	Enum2534Closed Enum2534 = "closed"
	Enum2534Open Enum2534 = "open"
	Enum2534Secret Enum2534 = "secret"
)

// PossibleEnum2534Values returns the possible values for the Enum2534 const type.
func PossibleEnum2534Values() []Enum2534 {
	return []Enum2534{
		Enum2534Closed,
		Enum2534Open,
		Enum2534Secret,
	}
}

type Enum254 string

const (
	Enum254Asc Enum254 = "asc"
	Enum254Desc Enum254 = "desc"
)

// PossibleEnum254Values returns the possible values for the Enum254 const type.
func PossibleEnum254Values() []Enum254 {
	return []Enum254{
		Enum254Asc,
		Enum254Desc,
	}
}

type Enum2556 string

const (
	Enum2556Bot Enum2556 = "Bot"
	Enum2556Mannequin Enum2556 = "Mannequin"
	Enum2556Organization Enum2556 = "Organization"
	Enum2556User Enum2556 = "User"
)

// PossibleEnum2556Values returns the possible values for the Enum2556 const type.
func PossibleEnum2556Values() []Enum2556 {
	return []Enum2556{
		Enum2556Bot,
		Enum2556Mannequin,
		Enum2556Organization,
		Enum2556User,
	}
}

type Enum2557 string

const (
	Enum2557Closed Enum2557 = "closed"
	Enum2557Open Enum2557 = "open"
	Enum2557Secret Enum2557 = "secret"
)

// PossibleEnum2557Values returns the possible values for the Enum2557 const type.
func PossibleEnum2557Values() []Enum2557 {
	return []Enum2557{
		Enum2557Closed,
		Enum2557Open,
		Enum2557Secret,
	}
}

type Enum2558 string

const (
	Enum2558Closed Enum2558 = "closed"
	Enum2558Open Enum2558 = "open"
	Enum2558Secret Enum2558 = "secret"
)

// PossibleEnum2558Values returns the possible values for the Enum2558 const type.
func PossibleEnum2558Values() []Enum2558 {
	return []Enum2558{
		Enum2558Closed,
		Enum2558Open,
		Enum2558Secret,
	}
}

type Enum2559 string

const (
	Enum2559Closed Enum2559 = "closed"
	Enum2559Open Enum2559 = "open"
	Enum2559Secret Enum2559 = "secret"
)

// PossibleEnum2559Values returns the possible values for the Enum2559 const type.
func PossibleEnum2559Values() []Enum2559 {
	return []Enum2559{
		Enum2559Closed,
		Enum2559Open,
		Enum2559Secret,
	}
}

// Enum256 - The state of the milestone. Either open or closed.
type Enum256 string

const (
	Enum256Closed Enum256 = "closed"
	Enum256Open Enum256 = "open"
)

// PossibleEnum256Values returns the possible values for the Enum256 const type.
func PossibleEnum256Values() []Enum256 {
	return []Enum256{
		Enum256Closed,
		Enum256Open,
	}
}

// Enum257 - The state of the milestone. Either open or closed.
type Enum257 string

const (
	Enum257Closed Enum257 = "closed"
	Enum257Open Enum257 = "open"
)

// PossibleEnum257Values returns the possible values for the Enum257 const type.
func PossibleEnum257Values() []Enum257 {
	return []Enum257{
		Enum257Closed,
		Enum257Open,
	}
}

type Enum2589 string

const (
	Enum2589Bot Enum2589 = "Bot"
	Enum2589Organization Enum2589 = "Organization"
	Enum2589User Enum2589 = "User"
)

// PossibleEnum2589Values returns the possible values for the Enum2589 const type.
func PossibleEnum2589Values() []Enum2589 {
	return []Enum2589{
		Enum2589Bot,
		Enum2589Organization,
		Enum2589User,
	}
}

type Enum2590 string

const (
	Enum2590Closed Enum2590 = "closed"
	Enum2590Open Enum2590 = "open"
	Enum2590Secret Enum2590 = "secret"
)

// PossibleEnum2590Values returns the possible values for the Enum2590 const type.
func PossibleEnum2590Values() []Enum2590 {
	return []Enum2590{
		Enum2590Closed,
		Enum2590Open,
		Enum2590Secret,
	}
}

type Enum2591 string

const (
	Enum2591Closed Enum2591 = "closed"
	Enum2591Open Enum2591 = "open"
	Enum2591Secret Enum2591 = "secret"
)

// PossibleEnum2591Values returns the possible values for the Enum2591 const type.
func PossibleEnum2591Values() []Enum2591 {
	return []Enum2591{
		Enum2591Closed,
		Enum2591Open,
		Enum2591Secret,
	}
}

type Enum2592 string

const (
	Enum2592Closed Enum2592 = "closed"
	Enum2592Open Enum2592 = "open"
	Enum2592Secret Enum2592 = "secret"
)

// PossibleEnum2592Values returns the possible values for the Enum2592 const type.
func PossibleEnum2592Values() []Enum2592 {
	return []Enum2592{
		Enum2592Closed,
		Enum2592Open,
		Enum2592Secret,
	}
}

type Enum2621 string

const (
	Enum2621Bot Enum2621 = "Bot"
	Enum2621Organization Enum2621 = "Organization"
	Enum2621User Enum2621 = "User"
)

// PossibleEnum2621Values returns the possible values for the Enum2621 const type.
func PossibleEnum2621Values() []Enum2621 {
	return []Enum2621{
		Enum2621Bot,
		Enum2621Organization,
		Enum2621User,
	}
}

type Enum2622 string

const (
	Enum2622Closed Enum2622 = "closed"
	Enum2622Open Enum2622 = "open"
	Enum2622Secret Enum2622 = "secret"
)

// PossibleEnum2622Values returns the possible values for the Enum2622 const type.
func PossibleEnum2622Values() []Enum2622 {
	return []Enum2622{
		Enum2622Closed,
		Enum2622Open,
		Enum2622Secret,
	}
}

type Enum2623 string

const (
	Enum2623Closed Enum2623 = "closed"
	Enum2623Open Enum2623 = "open"
	Enum2623Secret Enum2623 = "secret"
)

// PossibleEnum2623Values returns the possible values for the Enum2623 const type.
func PossibleEnum2623Values() []Enum2623 {
	return []Enum2623{
		Enum2623Closed,
		Enum2623Open,
		Enum2623Secret,
	}
}

type Enum2624 string

const (
	Enum2624Closed Enum2624 = "closed"
	Enum2624Open Enum2624 = "open"
	Enum2624Secret Enum2624 = "secret"
)

// PossibleEnum2624Values returns the possible values for the Enum2624 const type.
func PossibleEnum2624Values() []Enum2624 {
	return []Enum2624{
		Enum2624Closed,
		Enum2624Open,
		Enum2624Secret,
	}
}

// Enum265 - Update the source for the repository. Must include the branch name, and may optionally specify the subdirectory
// /docs. Possible values are "gh-pages", "master", and "master /docs".
type Enum265 string

const (
	Enum265GhPages Enum265 = "gh-pages"
	Enum265Master Enum265 = "master"
	Enum265MasterDocs Enum265 = "master /docs"
)

// PossibleEnum265Values returns the possible values for the Enum265 const type.
func PossibleEnum265Values() []Enum265 {
	return []Enum265{
		Enum265GhPages,
		Enum265Master,
		Enum265MasterDocs,
	}
}

type Enum2654 string

const (
	Enum2654Bot Enum2654 = "Bot"
	Enum2654Organization Enum2654 = "Organization"
	Enum2654User Enum2654 = "User"
)

// PossibleEnum2654Values returns the possible values for the Enum2654 const type.
func PossibleEnum2654Values() []Enum2654 {
	return []Enum2654{
		Enum2654Bot,
		Enum2654Organization,
		Enum2654User,
	}
}

type Enum2655 string

const (
	Enum2655Closed Enum2655 = "closed"
	Enum2655Open Enum2655 = "open"
	Enum2655Secret Enum2655 = "secret"
)

// PossibleEnum2655Values returns the possible values for the Enum2655 const type.
func PossibleEnum2655Values() []Enum2655 {
	return []Enum2655{
		Enum2655Closed,
		Enum2655Open,
		Enum2655Secret,
	}
}

type Enum2656 string

const (
	Enum2656Closed Enum2656 = "closed"
	Enum2656Open Enum2656 = "open"
	Enum2656Secret Enum2656 = "secret"
)

// PossibleEnum2656Values returns the possible values for the Enum2656 const type.
func PossibleEnum2656Values() []Enum2656 {
	return []Enum2656{
		Enum2656Closed,
		Enum2656Open,
		Enum2656Secret,
	}
}

type Enum2657 string

const (
	Enum2657Closed Enum2657 = "closed"
	Enum2657Open Enum2657 = "open"
	Enum2657Secret Enum2657 = "secret"
)

// PossibleEnum2657Values returns the possible values for the Enum2657 const type.
func PossibleEnum2657Values() []Enum2657 {
	return []Enum2657{
		Enum2657Closed,
		Enum2657Open,
		Enum2657Secret,
	}
}

type Enum267 string

const (
	Enum267All Enum267 = "all"
	Enum267Closed Enum267 = "closed"
	Enum267Open Enum267 = "open"
)

// PossibleEnum267Values returns the possible values for the Enum267 const type.
func PossibleEnum267Values() []Enum267 {
	return []Enum267{
		Enum267All,
		Enum267Closed,
		Enum267Open,
	}
}

type Enum268 string

const (
	Enum268All Enum268 = "all"
	Enum268Closed Enum268 = "closed"
	Enum268Open Enum268 = "open"
)

// PossibleEnum268Values returns the possible values for the Enum268 const type.
func PossibleEnum268Values() []Enum268 {
	return []Enum268{
		Enum268All,
		Enum268Closed,
		Enum268Open,
	}
}

type Enum2686 string

const (
	Enum2686Bot Enum2686 = "Bot"
	Enum2686Organization Enum2686 = "Organization"
	Enum2686User Enum2686 = "User"
)

// PossibleEnum2686Values returns the possible values for the Enum2686 const type.
func PossibleEnum2686Values() []Enum2686 {
	return []Enum2686{
		Enum2686Bot,
		Enum2686Organization,
		Enum2686User,
	}
}

type Enum2687 string

const (
	Enum2687Closed Enum2687 = "closed"
	Enum2687Open Enum2687 = "open"
	Enum2687Secret Enum2687 = "secret"
)

// PossibleEnum2687Values returns the possible values for the Enum2687 const type.
func PossibleEnum2687Values() []Enum2687 {
	return []Enum2687{
		Enum2687Closed,
		Enum2687Open,
		Enum2687Secret,
	}
}

type Enum2688 string

const (
	Enum2688Closed Enum2688 = "closed"
	Enum2688Open Enum2688 = "open"
	Enum2688Secret Enum2688 = "secret"
)

// PossibleEnum2688Values returns the possible values for the Enum2688 const type.
func PossibleEnum2688Values() []Enum2688 {
	return []Enum2688{
		Enum2688Closed,
		Enum2688Open,
		Enum2688Secret,
	}
}

type Enum2689 string

const (
	Enum2689Closed Enum2689 = "closed"
	Enum2689Open Enum2689 = "open"
	Enum2689Secret Enum2689 = "secret"
)

// PossibleEnum2689Values returns the possible values for the Enum2689 const type.
func PossibleEnum2689Values() []Enum2689 {
	return []Enum2689{
		Enum2689Closed,
		Enum2689Open,
		Enum2689Secret,
	}
}

type Enum269 string

const (
	Enum269Created Enum269 = "created"
	Enum269LongRunning Enum269 = "long-running"
	Enum269Popularity Enum269 = "popularity"
	Enum269Updated Enum269 = "updated"
)

// PossibleEnum269Values returns the possible values for the Enum269 const type.
func PossibleEnum269Values() []Enum269 {
	return []Enum269{
		Enum269Created,
		Enum269LongRunning,
		Enum269Popularity,
		Enum269Updated,
	}
}

type Enum270 string

const (
	Enum270Asc Enum270 = "asc"
	Enum270Desc Enum270 = "desc"
)

// PossibleEnum270Values returns the possible values for the Enum270 const type.
func PossibleEnum270Values() []Enum270 {
	return []Enum270{
		Enum270Asc,
		Enum270Desc,
	}
}

type Enum2718 string

const (
	Enum2718Bot Enum2718 = "Bot"
	Enum2718Mannequin Enum2718 = "Mannequin"
	Enum2718Organization Enum2718 = "Organization"
	Enum2718User Enum2718 = "User"
)

// PossibleEnum2718Values returns the possible values for the Enum2718 const type.
func PossibleEnum2718Values() []Enum2718 {
	return []Enum2718{
		Enum2718Bot,
		Enum2718Mannequin,
		Enum2718Organization,
		Enum2718User,
	}
}

type Enum2719 string

const (
	Enum2719Closed Enum2719 = "closed"
	Enum2719Open Enum2719 = "open"
	Enum2719Secret Enum2719 = "secret"
)

// PossibleEnum2719Values returns the possible values for the Enum2719 const type.
func PossibleEnum2719Values() []Enum2719 {
	return []Enum2719{
		Enum2719Closed,
		Enum2719Open,
		Enum2719Secret,
	}
}

type Enum272 string

const (
	Enum272Created Enum272 = "created"
	Enum272CreatedAt Enum272 = "created_at"
	Enum272Updated Enum272 = "updated"
)

// PossibleEnum272Values returns the possible values for the Enum272 const type.
func PossibleEnum272Values() []Enum272 {
	return []Enum272{
		Enum272Created,
		Enum272CreatedAt,
		Enum272Updated,
	}
}

type Enum2720 string

const (
	Enum2720Closed Enum2720 = "closed"
	Enum2720Open Enum2720 = "open"
	Enum2720Secret Enum2720 = "secret"
)

// PossibleEnum2720Values returns the possible values for the Enum2720 const type.
func PossibleEnum2720Values() []Enum2720 {
	return []Enum2720{
		Enum2720Closed,
		Enum2720Open,
		Enum2720Secret,
	}
}

type Enum2721 string

const (
	Enum2721Closed Enum2721 = "closed"
	Enum2721Open Enum2721 = "open"
	Enum2721Secret Enum2721 = "secret"
)

// PossibleEnum2721Values returns the possible values for the Enum2721 const type.
func PossibleEnum2721Values() []Enum2721 {
	return []Enum2721{
		Enum2721Closed,
		Enum2721Open,
		Enum2721Secret,
	}
}

type Enum273 string

const (
	Enum273Asc Enum273 = "asc"
	Enum273Desc Enum273 = "desc"
)

// PossibleEnum273Values returns the possible values for the Enum273 const type.
func PossibleEnum273Values() []Enum273 {
	return []Enum273{
		Enum273Asc,
		Enum273Desc,
	}
}

type Enum2742 string

const (
	Enum2742Bot Enum2742 = "Bot"
	Enum2742Mannequin Enum2742 = "Mannequin"
	Enum2742Organization Enum2742 = "Organization"
	Enum2742User Enum2742 = "User"
)

// PossibleEnum2742Values returns the possible values for the Enum2742 const type.
func PossibleEnum2742Values() []Enum2742 {
	return []Enum2742{
		Enum2742Bot,
		Enum2742Mannequin,
		Enum2742Organization,
		Enum2742User,
	}
}

type Enum2743 string

const (
	Enum2743Closed Enum2743 = "closed"
	Enum2743Open Enum2743 = "open"
	Enum2743Secret Enum2743 = "secret"
)

// PossibleEnum2743Values returns the possible values for the Enum2743 const type.
func PossibleEnum2743Values() []Enum2743 {
	return []Enum2743{
		Enum2743Closed,
		Enum2743Open,
		Enum2743Secret,
	}
}

type Enum2744 string

const (
	Enum2744Closed Enum2744 = "closed"
	Enum2744Open Enum2744 = "open"
	Enum2744Secret Enum2744 = "secret"
)

// PossibleEnum2744Values returns the possible values for the Enum2744 const type.
func PossibleEnum2744Values() []Enum2744 {
	return []Enum2744{
		Enum2744Closed,
		Enum2744Open,
		Enum2744Secret,
	}
}

type Enum2745 string

const (
	Enum2745Closed Enum2745 = "closed"
	Enum2745Open Enum2745 = "open"
	Enum2745Secret Enum2745 = "secret"
)

// PossibleEnum2745Values returns the possible values for the Enum2745 const type.
func PossibleEnum2745Values() []Enum2745 {
	return []Enum2745{
		Enum2745Closed,
		Enum2745Open,
		Enum2745Secret,
	}
}

type Enum2752 string

const (
	Enum2752Bot Enum2752 = "Bot"
	Enum2752Mannequin Enum2752 = "Mannequin"
	Enum2752Organization Enum2752 = "Organization"
	Enum2752User Enum2752 = "User"
)

// PossibleEnum2752Values returns the possible values for the Enum2752 const type.
func PossibleEnum2752Values() []Enum2752 {
	return []Enum2752{
		Enum2752Bot,
		Enum2752Mannequin,
		Enum2752Organization,
		Enum2752User,
	}
}

// Enum276 - State of this Pull Request. Either open or closed.
type Enum276 string

const (
	Enum276Closed Enum276 = "closed"
	Enum276Open Enum276 = "open"
)

// PossibleEnum276Values returns the possible values for the Enum276 const type.
func PossibleEnum276Values() []Enum276 {
	return []Enum276{
		Enum276Closed,
		Enum276Open,
	}
}

type Enum2768 string

const (
	Enum2768Bot Enum2768 = "Bot"
	Enum2768Organization Enum2768 = "Organization"
	Enum2768User Enum2768 = "User"
)

// PossibleEnum2768Values returns the possible values for the Enum2768 const type.
func PossibleEnum2768Values() []Enum2768 {
	return []Enum2768{
		Enum2768Bot,
		Enum2768Organization,
		Enum2768User,
	}
}

type Enum2769 string

const (
	Enum2769Closed Enum2769 = "closed"
	Enum2769Open Enum2769 = "open"
	Enum2769Secret Enum2769 = "secret"
)

// PossibleEnum2769Values returns the possible values for the Enum2769 const type.
func PossibleEnum2769Values() []Enum2769 {
	return []Enum2769{
		Enum2769Closed,
		Enum2769Open,
		Enum2769Secret,
	}
}

type Enum277 string

const (
	Enum277Asc Enum277 = "asc"
	Enum277Desc Enum277 = "desc"
)

// PossibleEnum277Values returns the possible values for the Enum277 const type.
func PossibleEnum277Values() []Enum277 {
	return []Enum277{
		Enum277Asc,
		Enum277Desc,
	}
}

type Enum2770 string

const (
	Enum2770Closed Enum2770 = "closed"
	Enum2770Open Enum2770 = "open"
	Enum2770Secret Enum2770 = "secret"
)

// PossibleEnum2770Values returns the possible values for the Enum2770 const type.
func PossibleEnum2770Values() []Enum2770 {
	return []Enum2770{
		Enum2770Closed,
		Enum2770Open,
		Enum2770Secret,
	}
}

type Enum2771 string

const (
	Enum2771Closed Enum2771 = "closed"
	Enum2771Open Enum2771 = "open"
	Enum2771Secret Enum2771 = "secret"
)

// PossibleEnum2771Values returns the possible values for the Enum2771 const type.
func PossibleEnum2771Values() []Enum2771 {
	return []Enum2771{
		Enum2771Closed,
		Enum2771Open,
		Enum2771Secret,
	}
}

type Enum2778 string

const (
	Enum2778Bot Enum2778 = "Bot"
	Enum2778Organization Enum2778 = "Organization"
	Enum2778User Enum2778 = "User"
)

// PossibleEnum2778Values returns the possible values for the Enum2778 const type.
func PossibleEnum2778Values() []Enum2778 {
	return []Enum2778{
		Enum2778Bot,
		Enum2778Organization,
		Enum2778User,
	}
}

type Enum2803 string

const (
	Enum2803Bot Enum2803 = "Bot"
	Enum2803Mannequin Enum2803 = "Mannequin"
	Enum2803Organization Enum2803 = "Organization"
	Enum2803User Enum2803 = "User"
)

// PossibleEnum2803Values returns the possible values for the Enum2803 const type.
func PossibleEnum2803Values() []Enum2803 {
	return []Enum2803{
		Enum2803Bot,
		Enum2803Mannequin,
		Enum2803Organization,
		Enum2803User,
	}
}

type Enum2804 string

const (
	Enum2804Closed Enum2804 = "closed"
	Enum2804Open Enum2804 = "open"
	Enum2804Secret Enum2804 = "secret"
)

// PossibleEnum2804Values returns the possible values for the Enum2804 const type.
func PossibleEnum2804Values() []Enum2804 {
	return []Enum2804{
		Enum2804Closed,
		Enum2804Open,
		Enum2804Secret,
	}
}

type Enum2805 string

const (
	Enum2805Closed Enum2805 = "closed"
	Enum2805Open Enum2805 = "open"
	Enum2805Secret Enum2805 = "secret"
)

// PossibleEnum2805Values returns the possible values for the Enum2805 const type.
func PossibleEnum2805Values() []Enum2805 {
	return []Enum2805{
		Enum2805Closed,
		Enum2805Open,
		Enum2805Secret,
	}
}

type Enum2806 string

const (
	Enum2806Closed Enum2806 = "closed"
	Enum2806Open Enum2806 = "open"
	Enum2806Secret Enum2806 = "secret"
)

// PossibleEnum2806Values returns the possible values for the Enum2806 const type.
func PossibleEnum2806Values() []Enum2806 {
	return []Enum2806{
		Enum2806Closed,
		Enum2806Open,
		Enum2806Secret,
	}
}

type Enum2835 string

const (
	Enum2835Bot Enum2835 = "Bot"
	Enum2835Mannequin Enum2835 = "Mannequin"
	Enum2835Organization Enum2835 = "Organization"
	Enum2835User Enum2835 = "User"
)

// PossibleEnum2835Values returns the possible values for the Enum2835 const type.
func PossibleEnum2835Values() []Enum2835 {
	return []Enum2835{
		Enum2835Bot,
		Enum2835Mannequin,
		Enum2835Organization,
		Enum2835User,
	}
}

type Enum2836 string

const (
	Enum2836Closed Enum2836 = "closed"
	Enum2836Open Enum2836 = "open"
	Enum2836Secret Enum2836 = "secret"
)

// PossibleEnum2836Values returns the possible values for the Enum2836 const type.
func PossibleEnum2836Values() []Enum2836 {
	return []Enum2836{
		Enum2836Closed,
		Enum2836Open,
		Enum2836Secret,
	}
}

type Enum2837 string

const (
	Enum2837Closed Enum2837 = "closed"
	Enum2837Open Enum2837 = "open"
	Enum2837Secret Enum2837 = "secret"
)

// PossibleEnum2837Values returns the possible values for the Enum2837 const type.
func PossibleEnum2837Values() []Enum2837 {
	return []Enum2837{
		Enum2837Closed,
		Enum2837Open,
		Enum2837Secret,
	}
}

type Enum2838 string

const (
	Enum2838Closed Enum2838 = "closed"
	Enum2838Open Enum2838 = "open"
	Enum2838Secret Enum2838 = "secret"
)

// PossibleEnum2838Values returns the possible values for the Enum2838 const type.
func PossibleEnum2838Values() []Enum2838 {
	return []Enum2838{
		Enum2838Closed,
		Enum2838Open,
		Enum2838Secret,
	}
}

// Enum285 - The review action you want to perform. The review actions include: APPROVE, REQUEST_CHANGES, or COMMENT. When
// you leave this blank, the API returns HTTP 422 (Unrecognizable entity) and sets the review
// action state to PENDING, which means you will need to re-submit the pull request review using a review action.
type Enum285 string

const (
	Enum285APPROVE Enum285 = "APPROVE"
	Enum285COMMENT Enum285 = "COMMENT"
	Enum285REQUESTCHANGES Enum285 = "REQUEST_CHANGES"
)

// PossibleEnum285Values returns the possible values for the Enum285 const type.
func PossibleEnum285Values() []Enum285 {
	return []Enum285{
		Enum285APPROVE,
		Enum285COMMENT,
		Enum285REQUESTCHANGES,
	}
}

type Enum2866 string

const (
	Enum2866Bot Enum2866 = "Bot"
	Enum2866Mannequin Enum2866 = "Mannequin"
	Enum2866Organization Enum2866 = "Organization"
	Enum2866User Enum2866 = "User"
)

// PossibleEnum2866Values returns the possible values for the Enum2866 const type.
func PossibleEnum2866Values() []Enum2866 {
	return []Enum2866{
		Enum2866Bot,
		Enum2866Mannequin,
		Enum2866Organization,
		Enum2866User,
	}
}

type Enum2867 string

const (
	Enum2867Closed Enum2867 = "closed"
	Enum2867Open Enum2867 = "open"
	Enum2867Secret Enum2867 = "secret"
)

// PossibleEnum2867Values returns the possible values for the Enum2867 const type.
func PossibleEnum2867Values() []Enum2867 {
	return []Enum2867{
		Enum2867Closed,
		Enum2867Open,
		Enum2867Secret,
	}
}

type Enum2868 string

const (
	Enum2868Closed Enum2868 = "closed"
	Enum2868Open Enum2868 = "open"
	Enum2868Secret Enum2868 = "secret"
)

// PossibleEnum2868Values returns the possible values for the Enum2868 const type.
func PossibleEnum2868Values() []Enum2868 {
	return []Enum2868{
		Enum2868Closed,
		Enum2868Open,
		Enum2868Secret,
	}
}

type Enum2869 string

const (
	Enum2869Closed Enum2869 = "closed"
	Enum2869Open Enum2869 = "open"
	Enum2869Secret Enum2869 = "secret"
)

// PossibleEnum2869Values returns the possible values for the Enum2869 const type.
func PossibleEnum2869Values() []Enum2869 {
	return []Enum2869{
		Enum2869Closed,
		Enum2869Open,
		Enum2869Secret,
	}
}

type Enum289 string

const (
	Enum2891 Enum289 = "+1"
	Enum289Eyes Enum289 = "eyes"
	Enum289Heart Enum289 = "heart"
	Enum289Hooray Enum289 = "hooray"
	Enum289Laugh Enum289 = "laugh"
	Enum289Rocket Enum289 = "rocket"
)

// PossibleEnum289Values returns the possible values for the Enum289 const type.
func PossibleEnum289Values() []Enum289 {
	return []Enum289{
		Enum2891,
		Enum289Eyes,
		Enum289Heart,
		Enum289Hooray,
		Enum289Laugh,
		Enum289Rocket,
	}
}

type Enum2897 string

const (
	Enum2897Bot Enum2897 = "Bot"
	Enum2897Organization Enum2897 = "Organization"
	Enum2897User Enum2897 = "User"
)

// PossibleEnum2897Values returns the possible values for the Enum2897 const type.
func PossibleEnum2897Values() []Enum2897 {
	return []Enum2897{
		Enum2897Bot,
		Enum2897Organization,
		Enum2897User,
	}
}

type Enum2898 string

const (
	Enum2898Closed Enum2898 = "closed"
	Enum2898Open Enum2898 = "open"
	Enum2898Secret Enum2898 = "secret"
)

// PossibleEnum2898Values returns the possible values for the Enum2898 const type.
func PossibleEnum2898Values() []Enum2898 {
	return []Enum2898{
		Enum2898Closed,
		Enum2898Open,
		Enum2898Secret,
	}
}

type Enum2899 string

const (
	Enum2899Closed Enum2899 = "closed"
	Enum2899Open Enum2899 = "open"
	Enum2899Secret Enum2899 = "secret"
)

// PossibleEnum2899Values returns the possible values for the Enum2899 const type.
func PossibleEnum2899Values() []Enum2899 {
	return []Enum2899{
		Enum2899Closed,
		Enum2899Open,
		Enum2899Secret,
	}
}

// Enum290 - The reaction type [https://docs.github.com/rest/reference/reactions#reaction-types] to add to the release.
type Enum290 string

const (
	Enum2901 Enum290 = "+1"
	Enum290Eyes Enum290 = "eyes"
	Enum290Heart Enum290 = "heart"
	Enum290Hooray Enum290 = "hooray"
	Enum290Laugh Enum290 = "laugh"
	Enum290Rocket Enum290 = "rocket"
)

// PossibleEnum290Values returns the possible values for the Enum290 const type.
func PossibleEnum290Values() []Enum290 {
	return []Enum290{
		Enum2901,
		Enum290Eyes,
		Enum290Heart,
		Enum290Hooray,
		Enum290Laugh,
		Enum290Rocket,
	}
}

type Enum2900 string

const (
	Enum2900Closed Enum2900 = "closed"
	Enum2900Open Enum2900 = "open"
	Enum2900Secret Enum2900 = "secret"
)

// PossibleEnum2900Values returns the possible values for the Enum2900 const type.
func PossibleEnum2900Values() []Enum2900 {
	return []Enum2900{
		Enum2900Closed,
		Enum2900Open,
		Enum2900Secret,
	}
}

type Enum2909 string

const (
	Enum2909Bot Enum2909 = "Bot"
	Enum2909Organization Enum2909 = "Organization"
	Enum2909User Enum2909 = "User"
)

// PossibleEnum2909Values returns the possible values for the Enum2909 const type.
func PossibleEnum2909Values() []Enum2909 {
	return []Enum2909{
		Enum2909Bot,
		Enum2909Organization,
		Enum2909User,
	}
}

type Enum2913 string

const (
	Enum2913Bot Enum2913 = "Bot"
	Enum2913Organization Enum2913 = "Organization"
	Enum2913User Enum2913 = "User"
)

// PossibleEnum2913Values returns the possible values for the Enum2913 const type.
func PossibleEnum2913Values() []Enum2913 {
	return []Enum2913{
		Enum2913Bot,
		Enum2913Organization,
		Enum2913User,
	}
}

type Enum2917 string

const (
	Enum2917Bot Enum2917 = "Bot"
	Enum2917Organization Enum2917 = "Organization"
	Enum2917User Enum2917 = "User"
)

// PossibleEnum2917Values returns the possible values for the Enum2917 const type.
func PossibleEnum2917Values() []Enum2917 {
	return []Enum2917{
		Enum2917Bot,
		Enum2917Organization,
		Enum2917User,
	}
}

// Enum292 - The state of the status.
type Enum292 string

const (
	Enum292Error Enum292 = "error"
	Enum292Failure Enum292 = "failure"
	Enum292Pending Enum292 = "pending"
	Enum292Success Enum292 = "success"
)

// PossibleEnum292Values returns the possible values for the Enum292 const type.
func PossibleEnum292Values() []Enum292 {
	return []Enum292{
		Enum292Error,
		Enum292Failure,
		Enum292Pending,
		Enum292Success,
	}
}

type Enum2921 string

const (
	Enum2921Bot Enum2921 = "Bot"
	Enum2921Organization Enum2921 = "Organization"
	Enum2921User Enum2921 = "User"
)

// PossibleEnum2921Values returns the possible values for the Enum2921 const type.
func PossibleEnum2921Values() []Enum2921 {
	return []Enum2921{
		Enum2921Bot,
		Enum2921Organization,
		Enum2921User,
	}
}

// Enum2923 - Whether the release is identified as a prerelease or a full release.
type Enum2923 bool

const (
	Enum2923True Enum2923 = true
)

// PossibleEnum2923Values returns the possible values for the Enum2923 const type.
func PossibleEnum2923Values() []Enum2923 {
	return []Enum2923{
		Enum2923True,
	}
}

type Enum2926 string

const (
	Enum2926Bot Enum2926 = "Bot"
	Enum2926Organization Enum2926 = "Organization"
	Enum2926User Enum2926 = "User"
)

// PossibleEnum2926Values returns the possible values for the Enum2926 const type.
func PossibleEnum2926Values() []Enum2926 {
	return []Enum2926{
		Enum2926Bot,
		Enum2926Organization,
		Enum2926User,
	}
}

type Enum293 string

const (
	Enum293Day Enum293 = "day"
	Enum293Week Enum293 = "week"
)

// PossibleEnum293Values returns the possible values for the Enum293 const type.
func PossibleEnum293Values() []Enum293 {
	return []Enum293{
		Enum293Day,
		Enum293Week,
	}
}

type Enum2930 string

const (
	Enum2930Bot Enum2930 = "Bot"
	Enum2930Organization Enum2930 = "Organization"
	Enum2930User Enum2930 = "User"
)

// PossibleEnum2930Values returns the possible values for the Enum2930 const type.
func PossibleEnum2930Values() []Enum2930 {
	return []Enum2930{
		Enum2930Bot,
		Enum2930Organization,
		Enum2930User,
	}
}

type Enum2934 string

const (
	Enum2934Bot Enum2934 = "Bot"
	Enum2934Organization Enum2934 = "Organization"
	Enum2934User Enum2934 = "User"
)

// PossibleEnum2934Values returns the possible values for the Enum2934 const type.
func PossibleEnum2934Values() []Enum2934 {
	return []Enum2934{
		Enum2934Bot,
		Enum2934Organization,
		Enum2934User,
	}
}

type Enum294 string

const (
	Enum294Indexed Enum294 = "indexed"
)

// PossibleEnum294Values returns the possible values for the Enum294 const type.
func PossibleEnum294Values() []Enum294 {
	return []Enum294{
		Enum294Indexed,
	}
}

type Enum295 string

const (
	Enum295Asc Enum295 = "asc"
	Enum295Desc Enum295 = "desc"
)

// PossibleEnum295Values returns the possible values for the Enum295 const type.
func PossibleEnum295Values() []Enum295 {
	return []Enum295{
		Enum295Asc,
		Enum295Desc,
	}
}

type Enum296 string

const (
	Enum296AuthorDate Enum296 = "author-date"
	Enum296CommitterDate Enum296 = "committer-date"
)

// PossibleEnum296Values returns the possible values for the Enum296 const type.
func PossibleEnum296Values() []Enum296 {
	return []Enum296{
		Enum296AuthorDate,
		Enum296CommitterDate,
	}
}

type Enum297 string

const (
	Enum297Comments Enum297 = "comments"
	Enum297Created Enum297 = "created"
	Enum297Interactions Enum297 = "interactions"
	Enum297Reactions Enum297 = "reactions"
	Enum297ReactionsThumbsUp Enum297 = "reactions-+1"
	Enum297ReactionsThumbsDown Enum297 = "reactions--1"
	Enum297ReactionsHeart Enum297 = "reactions-heart"
	Enum297ReactionsSmile Enum297 = "reactions-smile"
	Enum297ReactionsTada Enum297 = "reactions-tada"
	Enum297ReactionsThinkingFace Enum297 = "reactions-thinking_face"
	Enum297Updated Enum297 = "updated"
)

// PossibleEnum297Values returns the possible values for the Enum297 const type.
func PossibleEnum297Values() []Enum297 {
	return []Enum297{
		Enum297Comments,
		Enum297Created,
		Enum297Interactions,
		Enum297Reactions,
		Enum297ReactionsThumbsUp,
		Enum297ReactionsThumbsDown,
		Enum297ReactionsHeart,
		Enum297ReactionsSmile,
		Enum297ReactionsTada,
		Enum297ReactionsThinkingFace,
		Enum297Updated,
	}
}

type Enum298 string

const (
	Enum298Created Enum298 = "created"
	Enum298Updated Enum298 = "updated"
)

// PossibleEnum298Values returns the possible values for the Enum298 const type.
func PossibleEnum298Values() []Enum298 {
	return []Enum298{
		Enum298Created,
		Enum298Updated,
	}
}

type Enum299 string

const (
	Enum299Forks Enum299 = "forks"
	Enum299HelpWantedIssues Enum299 = "help-wanted-issues"
	Enum299Stars Enum299 = "stars"
	Enum299Updated Enum299 = "updated"
)

// PossibleEnum299Values returns the possible values for the Enum299 const type.
func PossibleEnum299Values() []Enum299 {
	return []Enum299{
		Enum299Forks,
		Enum299HelpWantedIssues,
		Enum299Stars,
		Enum299Updated,
	}
}

type Enum300 string

const (
	Enum300Followers Enum300 = "followers"
	Enum300Joined Enum300 = "joined"
	Enum300Repositories Enum300 = "repositories"
)

// PossibleEnum300Values returns the possible values for the Enum300 const type.
func PossibleEnum300Values() []Enum300 {
	return []Enum300{
		Enum300Followers,
		Enum300Joined,
		Enum300Repositories,
	}
}

// Enum301 - The level of privacy this team should have. Editing teams without specifying this parameter leaves privacy intact.
// The options are:
// For a non-nested team:
// * secret - only visible to organization owners and members of this team.
// * closed - visible to all members of this organization.
// For a parent or child team:
// * closed - visible to all members of this organization.
type Enum301 string

const (
	Enum301Closed Enum301 = "closed"
	Enum301Secret Enum301 = "secret"
)

// PossibleEnum301Values returns the possible values for the Enum301 const type.
func PossibleEnum301Values() []Enum301 {
	return []Enum301{
		Enum301Closed,
		Enum301Secret,
	}
}

// Enum302 - Deprecated. The permission that new repositories will be added to the team with when none is specified.
type Enum302 string

const (
	Enum302Admin Enum302 = "admin"
	Enum302Pull Enum302 = "pull"
	Enum302Push Enum302 = "push"
)

// PossibleEnum302Values returns the possible values for the Enum302 const type.
func PossibleEnum302Values() []Enum302 {
	return []Enum302{
		Enum302Admin,
		Enum302Pull,
		Enum302Push,
	}
}

type Enum3069 string

const (
	Enum3069Open Enum3069 = "open"
	Enum3069Resolved Enum3069 = "resolved"
)

// PossibleEnum3069Values returns the possible values for the Enum3069 const type.
func PossibleEnum3069Values() []Enum3069 {
	return []Enum3069{
		Enum3069Open,
		Enum3069Resolved,
	}
}

type Enum307 string

const (
	Enum307All Enum307 = "all"
	Enum307Maintainer Enum307 = "maintainer"
	Enum307Member Enum307 = "member"
)

// PossibleEnum307Values returns the possible values for the Enum307 const type.
func PossibleEnum307Values() []Enum307 {
	return []Enum307{
		Enum307All,
		Enum307Maintainer,
		Enum307Member,
	}
}

type Enum3070 string

const (
	Enum3070Created Enum3070 = "created"
	Enum3070Updated Enum3070 = "updated"
)

// PossibleEnum3070Values returns the possible values for the Enum3070 const type.
func PossibleEnum3070Values() []Enum3070 {
	return []Enum3070{
		Enum3070Created,
		Enum3070Updated,
	}
}

type Enum3071 string

const (
	Enum3071Created Enum3071 = "created"
	Enum3071Updated Enum3071 = "updated"
)

// PossibleEnum3071Values returns the possible values for the Enum3071 const type.
func PossibleEnum3071Values() []Enum3071 {
	return []Enum3071{
		Enum3071Created,
		Enum3071Updated,
	}
}

type Enum3072 string

const (
	Enum3072CreatedAt Enum3072 = "created_at"
	Enum3072LastAccessedAt Enum3072 = "last_accessed_at"
	Enum3072SizeInBytes Enum3072 = "size_in_bytes"
)

// PossibleEnum3072Values returns the possible values for the Enum3072 const type.
func PossibleEnum3072Values() []Enum3072 {
	return []Enum3072{
		Enum3072CreatedAt,
		Enum3072LastAccessedAt,
		Enum3072SizeInBytes,
	}
}

type Enum3073 string

const (
	Enum3073Completed Enum3073 = "completed"
	Enum3073InProgress Enum3073 = "in_progress"
	Enum3073Queued Enum3073 = "queued"
)

// PossibleEnum3073Values returns the possible values for the Enum3073 const type.
func PossibleEnum3073Values() []Enum3073 {
	return []Enum3073{
		Enum3073Completed,
		Enum3073InProgress,
		Enum3073Queued,
	}
}

// Enum308 - The role that this user should have in the team.
type Enum308 string

const (
	Enum308Maintainer Enum308 = "maintainer"
	Enum308Member Enum308 = "member"
)

// PossibleEnum308Values returns the possible values for the Enum308 const type.
func PossibleEnum308Values() []Enum308 {
	return []Enum308{
		Enum308Maintainer,
		Enum308Member,
	}
}

// Enum309 - The permission to grant to the team for this project. Default: the team's permission attribute will be used to
// determine what permission to grant the team on this project. Note that, if you choose not
// to pass any parameters, you'll need to set Content-Length to zero when calling this endpoint. For more information, see
// "HTTP verbs
// [https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs]."
type Enum309 string

const (
	Enum309Admin Enum309 = "admin"
	Enum309Read Enum309 = "read"
	Enum309Write Enum309 = "write"
)

// PossibleEnum309Values returns the possible values for the Enum309 const type.
func PossibleEnum309Values() []Enum309 {
	return []Enum309{
		Enum309Admin,
		Enum309Read,
		Enum309Write,
	}
}

// Enum310 - The permission to grant the team on this repository. If no permission is specified, the team's permission attribute
// will be used to determine what permission to grant the team on this repository.
type Enum310 string

const (
	Enum310Admin Enum310 = "admin"
	Enum310Pull Enum310 = "pull"
	Enum310Push Enum310 = "push"
)

// PossibleEnum310Values returns the possible values for the Enum310 const type.
func PossibleEnum310Values() []Enum310 {
	return []Enum310{
		Enum310Admin,
		Enum310Pull,
		Enum310Push,
	}
}

// Enum314 - Denotes whether an email is publicly visible.
type Enum314 string

const (
	Enum314Private Enum314 = "private"
	Enum314Public Enum314 = "public"
)

// PossibleEnum314Values returns the possible values for the Enum314 const type.
func PossibleEnum314Values() []Enum314 {
	return []Enum314{
		Enum314Private,
		Enum314Public,
	}
}

type Enum315 string

const (
	Enum315All Enum315 = "all"
	Enum315Assigned Enum315 = "assigned"
	Enum315Created Enum315 = "created"
	Enum315Mentioned Enum315 = "mentioned"
	Enum315Repos Enum315 = "repos"
	Enum315Subscribed Enum315 = "subscribed"
)

// PossibleEnum315Values returns the possible values for the Enum315 const type.
func PossibleEnum315Values() []Enum315 {
	return []Enum315{
		Enum315All,
		Enum315Assigned,
		Enum315Created,
		Enum315Mentioned,
		Enum315Repos,
		Enum315Subscribed,
	}
}

type Enum316 string

const (
	Enum316All Enum316 = "all"
	Enum316Closed Enum316 = "closed"
	Enum316Open Enum316 = "open"
)

// PossibleEnum316Values returns the possible values for the Enum316 const type.
func PossibleEnum316Values() []Enum316 {
	return []Enum316{
		Enum316All,
		Enum316Closed,
		Enum316Open,
	}
}

type Enum317 string

const (
	Enum317Comments Enum317 = "comments"
	Enum317Created Enum317 = "created"
	Enum317Updated Enum317 = "updated"
)

// PossibleEnum317Values returns the possible values for the Enum317 const type.
func PossibleEnum317Values() []Enum317 {
	return []Enum317{
		Enum317Comments,
		Enum317Created,
		Enum317Updated,
	}
}

type Enum318 string

const (
	Enum318Active Enum318 = "active"
	Enum318Pending Enum318 = "pending"
)

// PossibleEnum318Values returns the possible values for the Enum318 const type.
func PossibleEnum318Values() []Enum318 {
	return []Enum318{
		Enum318Active,
		Enum318Pending,
	}
}

// Enum319 - The state that the membership should be in. Only "active" will be accepted.
type Enum319 string

const (
	Enum319Active Enum319 = "active"
)

// PossibleEnum319Values returns the possible values for the Enum319 const type.
func PossibleEnum319Values() []Enum319 {
	return []Enum319{
		Enum319Active,
	}
}

// Enum320 - Allowed values that can be passed to the exclude param.
type Enum320 string

const (
	Enum320Repositories Enum320 = "repositories"
)

// PossibleEnum320Values returns the possible values for the Enum320 const type.
func PossibleEnum320Values() []Enum320 {
	return []Enum320{
		Enum320Repositories,
	}
}

type Enum321 string

const (
	Enum321Container Enum321 = "container"
	Enum321Docker Enum321 = "docker"
	Enum321Maven Enum321 = "maven"
	Enum321Npm Enum321 = "npm"
	Enum321Nuget Enum321 = "nuget"
	Enum321Rubygems Enum321 = "rubygems"
)

// PossibleEnum321Values returns the possible values for the Enum321 const type.
func PossibleEnum321Values() []Enum321 {
	return []Enum321{
		Enum321Container,
		Enum321Docker,
		Enum321Maven,
		Enum321Npm,
		Enum321Nuget,
		Enum321Rubygems,
	}
}

type Enum322 string

const (
	Enum322Active Enum322 = "active"
	Enum322Deleted Enum322 = "deleted"
)

// PossibleEnum322Values returns the possible values for the Enum322 const type.
func PossibleEnum322Values() []Enum322 {
	return []Enum322{
		Enum322Active,
		Enum322Deleted,
	}
}

type Enum323 string

const (
	Enum323All Enum323 = "all"
	Enum323Private Enum323 = "private"
	Enum323Public Enum323 = "public"
)

// PossibleEnum323Values returns the possible values for the Enum323 const type.
func PossibleEnum323Values() []Enum323 {
	return []Enum323{
		Enum323All,
		Enum323Private,
		Enum323Public,
	}
}

type Enum324 string

const (
	Enum324All Enum324 = "all"
	Enum324Member Enum324 = "member"
	Enum324Owner Enum324 = "owner"
	Enum324Private Enum324 = "private"
	Enum324Public Enum324 = "public"
)

// PossibleEnum324Values returns the possible values for the Enum324 const type.
func PossibleEnum324Values() []Enum324 {
	return []Enum324{
		Enum324All,
		Enum324Member,
		Enum324Owner,
		Enum324Private,
		Enum324Public,
	}
}

type Enum325 string

const (
	Enum325Created Enum325 = "created"
	Enum325FullName Enum325 = "full_name"
	Enum325Pushed Enum325 = "pushed"
	Enum325Updated Enum325 = "updated"
)

// PossibleEnum325Values returns the possible values for the Enum325 const type.
func PossibleEnum325Values() []Enum325 {
	return []Enum325{
		Enum325Created,
		Enum325FullName,
		Enum325Pushed,
		Enum325Updated,
	}
}

type Enum326 string

const (
	Enum326Asc Enum326 = "asc"
	Enum326Desc Enum326 = "desc"
)

// PossibleEnum326Values returns the possible values for the Enum326 const type.
func PossibleEnum326Values() []Enum326 {
	return []Enum326{
		Enum326Asc,
		Enum326Desc,
	}
}

// Enum327 - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type Enum327 string

const (
	Enum327COMMITORPRTITLE Enum327 = "COMMIT_OR_PR_TITLE"
	Enum327PRTITLE Enum327 = "PR_TITLE"
)

// PossibleEnum327Values returns the possible values for the Enum327 const type.
func PossibleEnum327Values() []Enum327 {
	return []Enum327{
		Enum327COMMITORPRTITLE,
		Enum327PRTITLE,
	}
}

// Enum328 - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type Enum328 string

const (
	Enum328BLANK Enum328 = "BLANK"
	Enum328COMMITMESSAGES Enum328 = "COMMIT_MESSAGES"
	Enum328PRBODY Enum328 = "PR_BODY"
)

// PossibleEnum328Values returns the possible values for the Enum328 const type.
func PossibleEnum328Values() []Enum328 {
	return []Enum328{
		Enum328BLANK,
		Enum328COMMITMESSAGES,
		Enum328PRBODY,
	}
}

// Enum329 - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type Enum329 string

const (
	Enum329MERGEMESSAGE Enum329 = "MERGE_MESSAGE"
	Enum329PRTITLE Enum329 = "PR_TITLE"
)

// PossibleEnum329Values returns the possible values for the Enum329 const type.
func PossibleEnum329Values() []Enum329 {
	return []Enum329{
		Enum329MERGEMESSAGE,
		Enum329PRTITLE,
	}
}

// Enum330 - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type Enum330 string

const (
	Enum330BLANK Enum330 = "BLANK"
	Enum330PRBODY Enum330 = "PR_BODY"
	Enum330PRTITLE Enum330 = "PR_TITLE"
)

// PossibleEnum330Values returns the possible values for the Enum330 const type.
func PossibleEnum330Values() []Enum330 {
	return []Enum330{
		Enum330BLANK,
		Enum330PRBODY,
		Enum330PRTITLE,
	}
}

type Enum331 string

const (
	Enum331Issue Enum331 = "issue"
	Enum331Organization Enum331 = "organization"
	Enum331PullRequest Enum331 = "pull_request"
	Enum331Repository Enum331 = "repository"
)

// PossibleEnum331Values returns the possible values for the Enum331 const type.
func PossibleEnum331Values() []Enum331 {
	return []Enum331{
		Enum331Issue,
		Enum331Organization,
		Enum331PullRequest,
		Enum331Repository,
	}
}

type Enum332 string

const (
	Enum332Container Enum332 = "container"
	Enum332Docker Enum332 = "docker"
	Enum332Maven Enum332 = "maven"
	Enum332Npm Enum332 = "npm"
	Enum332Nuget Enum332 = "nuget"
	Enum332Rubygems Enum332 = "rubygems"
)

// PossibleEnum332Values returns the possible values for the Enum332 const type.
func PossibleEnum332Values() []Enum332 {
	return []Enum332{
		Enum332Container,
		Enum332Docker,
		Enum332Maven,
		Enum332Npm,
		Enum332Nuget,
		Enum332Rubygems,
	}
}

type Enum333 string

const (
	Enum333All Enum333 = "all"
	Enum333Closed Enum333 = "closed"
	Enum333Open Enum333 = "open"
)

// PossibleEnum333Values returns the possible values for the Enum333 const type.
func PossibleEnum333Values() []Enum333 {
	return []Enum333{
		Enum333All,
		Enum333Closed,
		Enum333Open,
	}
}

type Enum334 string

const (
	Enum334All Enum334 = "all"
	Enum334Member Enum334 = "member"
	Enum334Owner Enum334 = "owner"
)

// PossibleEnum334Values returns the possible values for the Enum334 const type.
func PossibleEnum334Values() []Enum334 {
	return []Enum334{
		Enum334All,
		Enum334Member,
		Enum334Owner,
	}
}

type Enum335 string

const (
	Enum335Created Enum335 = "created"
	Enum335FullName Enum335 = "full_name"
	Enum335Pushed Enum335 = "pushed"
	Enum335Updated Enum335 = "updated"
)

// PossibleEnum335Values returns the possible values for the Enum335 const type.
func PossibleEnum335Values() []Enum335 {
	return []Enum335{
		Enum335Created,
		Enum335FullName,
		Enum335Pushed,
		Enum335Updated,
	}
}

type Enum336 string

const (
	Enum336Asc Enum336 = "asc"
	Enum336Desc Enum336 = "desc"
)

// PossibleEnum336Values returns the possible values for the Enum336 const type.
func PossibleEnum336Values() []Enum336 {
	return []Enum336{
		Enum336Asc,
		Enum336Desc,
	}
}

type Enum44 string

const (
	Enum44Development Enum44 = "development"
	Enum44Runtime Enum44 = "runtime"
)

// PossibleEnum44Values returns the possible values for the Enum44 const type.
func PossibleEnum44Values() []Enum44 {
	return []Enum44{
		Enum44Development,
		Enum44Runtime,
	}
}

type Enum45 string

const (
	Enum45Created Enum45 = "created"
	Enum45Updated Enum45 = "updated"
)

// PossibleEnum45Values returns the possible values for the Enum45 const type.
func PossibleEnum45Values() []Enum45 {
	return []Enum45{
		Enum45Created,
		Enum45Updated,
	}
}

type Enum46 string

const (
	Enum46Asc Enum46 = "asc"
	Enum46Desc Enum46 = "desc"
)

// PossibleEnum46Values returns the possible values for the Enum46 const type.
func PossibleEnum46Values() []Enum46 {
	return []Enum46{
		Enum46Asc,
		Enum46Desc,
	}
}

type Enum58 string

const (
	Enum58False Enum58 = "false"
	Enum58True Enum58 = "true"
)

// PossibleEnum58Values returns the possible values for the Enum58 const type.
func PossibleEnum58Values() []Enum58 {
	return []Enum58{
		Enum58False,
		Enum58True,
	}
}

type Enum59 string

const (
	Enum59All Enum59 = "all"
	Enum59Assigned Enum59 = "assigned"
	Enum59Created Enum59 = "created"
	Enum59Mentioned Enum59 = "mentioned"
	Enum59Repos Enum59 = "repos"
	Enum59Subscribed Enum59 = "subscribed"
)

// PossibleEnum59Values returns the possible values for the Enum59 const type.
func PossibleEnum59Values() []Enum59 {
	return []Enum59{
		Enum59All,
		Enum59Assigned,
		Enum59Created,
		Enum59Mentioned,
		Enum59Repos,
		Enum59Subscribed,
	}
}

type Enum60 string

const (
	Enum60All Enum60 = "all"
	Enum60Closed Enum60 = "closed"
	Enum60Open Enum60 = "open"
)

// PossibleEnum60Values returns the possible values for the Enum60 const type.
func PossibleEnum60Values() []Enum60 {
	return []Enum60{
		Enum60All,
		Enum60Closed,
		Enum60Open,
	}
}

type Enum61 string

const (
	Enum61Comments Enum61 = "comments"
	Enum61Created Enum61 = "created"
	Enum61Updated Enum61 = "updated"
)

// PossibleEnum61Values returns the possible values for the Enum61 const type.
func PossibleEnum61Values() []Enum61 {
	return []Enum61{
		Enum61Comments,
		Enum61Created,
		Enum61Updated,
	}
}

type Enum64 string

const (
	Enum64Asc Enum64 = "asc"
	Enum64Desc Enum64 = "desc"
)

// PossibleEnum64Values returns the possible values for the Enum64 const type.
func PossibleEnum64Values() []Enum64 {
	return []Enum64{
		Enum64Asc,
		Enum64Desc,
	}
}

type Enum65 string

const (
	Enum65Asc Enum65 = "asc"
	Enum65Desc Enum65 = "desc"
)

// PossibleEnum65Values returns the possible values for the Enum65 const type.
func PossibleEnum65Values() []Enum65 {
	return []Enum65{
		Enum65Asc,
		Enum65Desc,
	}
}

type Enum674 bool

const (
	Enum674True Enum674 = true
)

// PossibleEnum674Values returns the possible values for the Enum674 const type.
func PossibleEnum674Values() []Enum674 {
	return []Enum674{
		Enum674True,
	}
}

type Enum706 bool

const (
	Enum706False Enum706 = false
)

// PossibleEnum706Values returns the possible values for the Enum706 const type.
func PossibleEnum706Values() []Enum706 {
	return []Enum706{
		Enum706False,
	}
}

type Enum728 bool

const (
	Enum728True Enum728 = true
)

// PossibleEnum728Values returns the possible values for the Enum728 const type.
func PossibleEnum728Values() []Enum728 {
	return []Enum728{
		Enum728True,
	}
}

type Enum771 bool

const (
	Enum771True Enum771 = true
)

// PossibleEnum771Values returns the possible values for the Enum771 const type.
func PossibleEnum771Values() []Enum771 {
	return []Enum771{
		Enum771True,
	}
}

type Enum86 string

const (
	Enum86Created Enum86 = "created"
	Enum86Updated Enum86 = "updated"
)

// PossibleEnum86Values returns the possible values for the Enum86 const type.
func PossibleEnum86Values() []Enum86 {
	return []Enum86{
		Enum86Created,
		Enum86Updated,
	}
}

// Enum95 - Which users can access codespaces in the organization. disabled means that no users can access codespaces in the
// organization.
type Enum95 string

const (
	Enum95AllMembers Enum95 = "all_members"
	Enum95AllMembersAndOutsideCollaborators Enum95 = "all_members_and_outside_collaborators"
	Enum95Disabled Enum95 = "disabled"
	Enum95SelectedMembers Enum95 = "selected_members"
)

// PossibleEnum95Values returns the possible values for the Enum95 const type.
func PossibleEnum95Values() []Enum95 {
	return []Enum95{
		Enum95AllMembers,
		Enum95AllMembersAndOutsideCollaborators,
		Enum95Disabled,
		Enum95SelectedMembers,
	}
}

// Enum97 - Which type of organization repositories have access to the organization secret. selected means only the repositories
// specified by selected_repository_ids can access the secret.
type Enum97 string

const (
	Enum97All Enum97 = "all"
	Enum97Private Enum97 = "private"
	Enum97Selected Enum97 = "selected"
)

// PossibleEnum97Values returns the possible values for the Enum97 const type.
func PossibleEnum97Values() []Enum97 {
	return []Enum97{
		Enum97All,
		Enum97Private,
		Enum97Selected,
	}
}

// Enum99 - Which type of organization repositories have access to the organization secret. selected means only the repositories
// specified by selected_repository_ids can access the secret.
type Enum99 string

const (
	Enum99All Enum99 = "all"
	Enum99Private Enum99 = "private"
	Enum99Selected Enum99 = "selected"
)

// PossibleEnum99Values returns the possible values for the Enum99 const type.
func PossibleEnum99Values() []Enum99 {
	return []Enum99{
		Enum99All,
		Enum99Private,
		Enum99Selected,
	}
}

// EnvironmentApprovalsState - Whether deployment to the environment(s) was approved or rejected
type EnvironmentApprovalsState string

const (
	EnvironmentApprovalsStateApproved EnvironmentApprovalsState = "approved"
	EnvironmentApprovalsStateRejected EnvironmentApprovalsState = "rejected"
)

// PossibleEnvironmentApprovalsStateValues returns the possible values for the EnvironmentApprovalsState const type.
func PossibleEnvironmentApprovalsStateValues() []EnvironmentApprovalsState {
	return []EnvironmentApprovalsState{
		EnvironmentApprovalsStateApproved,
		EnvironmentApprovalsStateRejected,
	}
}

// FullRepositoryMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type FullRepositoryMergeCommitMessage string

const (
	FullRepositoryMergeCommitMessageBLANK FullRepositoryMergeCommitMessage = "BLANK"
	FullRepositoryMergeCommitMessagePRBODY FullRepositoryMergeCommitMessage = "PR_BODY"
	FullRepositoryMergeCommitMessagePRTITLE FullRepositoryMergeCommitMessage = "PR_TITLE"
)

// PossibleFullRepositoryMergeCommitMessageValues returns the possible values for the FullRepositoryMergeCommitMessage const type.
func PossibleFullRepositoryMergeCommitMessageValues() []FullRepositoryMergeCommitMessage {
	return []FullRepositoryMergeCommitMessage{
		FullRepositoryMergeCommitMessageBLANK,
		FullRepositoryMergeCommitMessagePRBODY,
		FullRepositoryMergeCommitMessagePRTITLE,
	}
}

// FullRepositoryMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type FullRepositoryMergeCommitTitle string

const (
	FullRepositoryMergeCommitTitleMERGEMESSAGE FullRepositoryMergeCommitTitle = "MERGE_MESSAGE"
	FullRepositoryMergeCommitTitlePRTITLE FullRepositoryMergeCommitTitle = "PR_TITLE"
)

// PossibleFullRepositoryMergeCommitTitleValues returns the possible values for the FullRepositoryMergeCommitTitle const type.
func PossibleFullRepositoryMergeCommitTitleValues() []FullRepositoryMergeCommitTitle {
	return []FullRepositoryMergeCommitTitle{
		FullRepositoryMergeCommitTitleMERGEMESSAGE,
		FullRepositoryMergeCommitTitlePRTITLE,
	}
}

// FullRepositorySquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type FullRepositorySquashMergeCommitMessage string

const (
	FullRepositorySquashMergeCommitMessageBLANK FullRepositorySquashMergeCommitMessage = "BLANK"
	FullRepositorySquashMergeCommitMessageCOMMITMESSAGES FullRepositorySquashMergeCommitMessage = "COMMIT_MESSAGES"
	FullRepositorySquashMergeCommitMessagePRBODY FullRepositorySquashMergeCommitMessage = "PR_BODY"
)

// PossibleFullRepositorySquashMergeCommitMessageValues returns the possible values for the FullRepositorySquashMergeCommitMessage const type.
func PossibleFullRepositorySquashMergeCommitMessageValues() []FullRepositorySquashMergeCommitMessage {
	return []FullRepositorySquashMergeCommitMessage{
		FullRepositorySquashMergeCommitMessageBLANK,
		FullRepositorySquashMergeCommitMessageCOMMITMESSAGES,
		FullRepositorySquashMergeCommitMessagePRBODY,
	}
}

// FullRepositorySquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type FullRepositorySquashMergeCommitTitle string

const (
	FullRepositorySquashMergeCommitTitleCOMMITORPRTITLE FullRepositorySquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	FullRepositorySquashMergeCommitTitlePRTITLE FullRepositorySquashMergeCommitTitle = "PR_TITLE"
)

// PossibleFullRepositorySquashMergeCommitTitleValues returns the possible values for the FullRepositorySquashMergeCommitTitle const type.
func PossibleFullRepositorySquashMergeCommitTitleValues() []FullRepositorySquashMergeCommitTitle {
	return []FullRepositorySquashMergeCommitTitle{
		FullRepositorySquashMergeCommitTitleCOMMITORPRTITLE,
		FullRepositorySquashMergeCommitTitlePRTITLE,
	}
}

// Get2ItemsItem - Allowed values that can be passed to the exclude param.
type Get2ItemsItem string

const (
	Get2ItemsItemRepositories Get2ItemsItem = "repositories"
)

// PossibleGet2ItemsItemValues returns the possible values for the Get2ItemsItem const type.
func PossibleGet2ItemsItemValues() []Get2ItemsItem {
	return []Get2ItemsItem{
		Get2ItemsItemRepositories,
	}
}

// Get3ItemsItem - Allowed values that can be passed to the exclude param.
type Get3ItemsItem string

const (
	Get3ItemsItemRepositories Get3ItemsItem = "repositories"
)

// PossibleGet3ItemsItemValues returns the possible values for the Get3ItemsItem const type.
func PossibleGet3ItemsItemValues() []Get3ItemsItem {
	return []Get3ItemsItem{
		Get3ItemsItemRepositories,
	}
}

type ImportStatus string

const (
	ImportStatusAuth ImportStatus = "auth"
	ImportStatusAuthFailed ImportStatus = "auth_failed"
	ImportStatusChoose ImportStatus = "choose"
	ImportStatusComplete ImportStatus = "complete"
	ImportStatusDetecting ImportStatus = "detecting"
	ImportStatusDetectionFoundMultiple ImportStatus = "detection_found_multiple"
	ImportStatusDetectionFoundNothing ImportStatus = "detection_found_nothing"
	ImportStatusDetectionNeedsAuth ImportStatus = "detection_needs_auth"
	ImportStatusError ImportStatus = "error"
	ImportStatusImporting ImportStatus = "importing"
	ImportStatusMapping ImportStatus = "mapping"
	ImportStatusNone ImportStatus = "none"
	ImportStatusPushing ImportStatus = "pushing"
	ImportStatusSetup ImportStatus = "setup"
	ImportStatusUnknown ImportStatus = "unknown"
	ImportStatusWaitingToPush ImportStatus = "waiting_to_push"
)

// PossibleImportStatusValues returns the possible values for the ImportStatus const type.
func PossibleImportStatusValues() []ImportStatus {
	return []ImportStatus{
		ImportStatusAuth,
		ImportStatusAuthFailed,
		ImportStatusChoose,
		ImportStatusComplete,
		ImportStatusDetecting,
		ImportStatusDetectionFoundMultiple,
		ImportStatusDetectionFoundNothing,
		ImportStatusDetectionNeedsAuth,
		ImportStatusError,
		ImportStatusImporting,
		ImportStatusMapping,
		ImportStatusNone,
		ImportStatusPushing,
		ImportStatusSetup,
		ImportStatusUnknown,
		ImportStatusWaitingToPush,
	}
}

// InstallationRepositorySelection - Describe whether all repositories have been selected or there's a selection involved
type InstallationRepositorySelection string

const (
	InstallationRepositorySelectionAll InstallationRepositorySelection = "all"
	InstallationRepositorySelectionSelected InstallationRepositorySelection = "selected"
)

// PossibleInstallationRepositorySelectionValues returns the possible values for the InstallationRepositorySelection const type.
func PossibleInstallationRepositorySelectionValues() []InstallationRepositorySelection {
	return []InstallationRepositorySelection{
		InstallationRepositorySelectionAll,
		InstallationRepositorySelectionSelected,
	}
}

type InstallationTokenRepositorySelection string

const (
	InstallationTokenRepositorySelectionAll InstallationTokenRepositorySelection = "all"
	InstallationTokenRepositorySelectionSelected InstallationTokenRepositorySelection = "selected"
)

// PossibleInstallationTokenRepositorySelectionValues returns the possible values for the InstallationTokenRepositorySelection const type.
func PossibleInstallationTokenRepositorySelectionValues() []InstallationTokenRepositorySelection {
	return []InstallationTokenRepositorySelection{
		InstallationTokenRepositorySelectionAll,
		InstallationTokenRepositorySelectionSelected,
	}
}

// InteractionExpiry - The duration of the interaction restriction. Default: one_day.
type InteractionExpiry string

const (
	InteractionExpiryOneDay InteractionExpiry = "one_day"
	InteractionExpiryOneMonth InteractionExpiry = "one_month"
	InteractionExpiryOneWeek InteractionExpiry = "one_week"
	InteractionExpirySixMonths InteractionExpiry = "six_months"
	InteractionExpiryThreeDays InteractionExpiry = "three_days"
)

// PossibleInteractionExpiryValues returns the possible values for the InteractionExpiry const type.
func PossibleInteractionExpiryValues() []InteractionExpiry {
	return []InteractionExpiry{
		InteractionExpiryOneDay,
		InteractionExpiryOneMonth,
		InteractionExpiryOneWeek,
		InteractionExpirySixMonths,
		InteractionExpiryThreeDays,
	}
}

// InteractionGroup - The type of GitHub user that can comment, open issues, or create pull requests while the interaction
// limit is in effect.
type InteractionGroup string

const (
	InteractionGroupCollaboratorsOnly InteractionGroup = "collaborators_only"
	InteractionGroupContributorsOnly InteractionGroup = "contributors_only"
	InteractionGroupExistingUsers InteractionGroup = "existing_users"
)

// PossibleInteractionGroupValues returns the possible values for the InteractionGroup const type.
func PossibleInteractionGroupValues() []InteractionGroup {
	return []InteractionGroup{
		InteractionGroupCollaboratorsOnly,
		InteractionGroupContributorsOnly,
		InteractionGroupExistingUsers,
	}
}

// IssueStateReason - The reason for the current state
type IssueStateReason string

const (
	IssueStateReasonCompleted IssueStateReason = "completed"
	IssueStateReasonNotPlanned IssueStateReason = "not_planned"
	IssueStateReasonReopened IssueStateReason = "reopened"
)

// PossibleIssueStateReasonValues returns the possible values for the IssueStateReason const type.
func PossibleIssueStateReasonValues() []IssueStateReason {
	return []IssueStateReason{
		IssueStateReasonCompleted,
		IssueStateReasonNotPlanned,
		IssueStateReasonReopened,
	}
}

// JobConclusion - The outcome of the job.
type JobConclusion string

const (
	JobConclusionActionRequired JobConclusion = "action_required"
	JobConclusionCancelled JobConclusion = "cancelled"
	JobConclusionFailure JobConclusion = "failure"
	JobConclusionNeutral JobConclusion = "neutral"
	JobConclusionSkipped JobConclusion = "skipped"
	JobConclusionSuccess JobConclusion = "success"
	JobConclusionTimedOut JobConclusion = "timed_out"
)

// PossibleJobConclusionValues returns the possible values for the JobConclusion const type.
func PossibleJobConclusionValues() []JobConclusion {
	return []JobConclusion{
		JobConclusionActionRequired,
		JobConclusionCancelled,
		JobConclusionFailure,
		JobConclusionNeutral,
		JobConclusionSkipped,
		JobConclusionSuccess,
		JobConclusionTimedOut,
	}
}

// JobStatus - The phase of the lifecycle that the job is currently in.
type JobStatus string

const (
	JobStatusCompleted JobStatus = "completed"
	JobStatusInProgress JobStatus = "in_progress"
	JobStatusQueued JobStatus = "queued"
)

// PossibleJobStatusValues returns the possible values for the JobStatus const type.
func PossibleJobStatusValues() []JobStatus {
	return []JobStatus{
		JobStatusCompleted,
		JobStatusInProgress,
		JobStatusQueued,
	}
}

// JobStepsItemStatus - The phase of the lifecycle that the job is currently in.
type JobStepsItemStatus string

const (
	JobStepsItemStatusCompleted JobStepsItemStatus = "completed"
	JobStepsItemStatusInProgress JobStepsItemStatus = "in_progress"
	JobStepsItemStatusQueued JobStepsItemStatus = "queued"
)

// PossibleJobStepsItemStatusValues returns the possible values for the JobStepsItemStatus const type.
func PossibleJobStepsItemStatusValues() []JobStepsItemStatus {
	return []JobStepsItemStatus{
		JobStepsItemStatusCompleted,
		JobStepsItemStatusInProgress,
		JobStepsItemStatusQueued,
	}
}

type MarketplaceListingPlanPriceModel string

const (
	MarketplaceListingPlanPriceModelFLATRATE MarketplaceListingPlanPriceModel = "FLAT_RATE"
	MarketplaceListingPlanPriceModelFREE MarketplaceListingPlanPriceModel = "FREE"
	MarketplaceListingPlanPriceModelPERUNIT MarketplaceListingPlanPriceModel = "PER_UNIT"
)

// PossibleMarketplaceListingPlanPriceModelValues returns the possible values for the MarketplaceListingPlanPriceModel const type.
func PossibleMarketplaceListingPlanPriceModelValues() []MarketplaceListingPlanPriceModel {
	return []MarketplaceListingPlanPriceModel{
		MarketplaceListingPlanPriceModelFLATRATE,
		MarketplaceListingPlanPriceModelFREE,
		MarketplaceListingPlanPriceModelPERUNIT,
	}
}

type MergedUpstreamMergeType string

const (
	MergedUpstreamMergeTypeFastForward MergedUpstreamMergeType = "fast-forward"
	MergedUpstreamMergeTypeMerge MergedUpstreamMergeType = "merge"
	MergedUpstreamMergeTypeNone MergedUpstreamMergeType = "none"
)

// PossibleMergedUpstreamMergeTypeValues returns the possible values for the MergedUpstreamMergeType const type.
func PossibleMergedUpstreamMergeTypeValues() []MergedUpstreamMergeType {
	return []MergedUpstreamMergeType{
		MergedUpstreamMergeTypeFastForward,
		MergedUpstreamMergeTypeMerge,
		MergedUpstreamMergeTypeNone,
	}
}

// MilestoneState - The state of the milestone.
type MilestoneState string

const (
	MilestoneStateClosed MilestoneState = "closed"
	MilestoneStateOpen MilestoneState = "open"
)

// PossibleMilestoneStateValues returns the possible values for the MilestoneState const type.
func PossibleMilestoneStateValues() []MilestoneState {
	return []MilestoneState{
		MilestoneStateClosed,
		MilestoneStateOpen,
	}
}

// NullableCodespaceMachinePrebuildAvailability - Whether a prebuild is currently available when creating a codespace for
// this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be
// "null" if
// prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available.
// Latest values "ready" and "in_progress" indicate the prebuild
// availability status.
type NullableCodespaceMachinePrebuildAvailability string

const (
	NullableCodespaceMachinePrebuildAvailabilityInProgress NullableCodespaceMachinePrebuildAvailability = "in_progress"
	NullableCodespaceMachinePrebuildAvailabilityNone NullableCodespaceMachinePrebuildAvailability = "none"
	NullableCodespaceMachinePrebuildAvailabilityReady NullableCodespaceMachinePrebuildAvailability = "ready"
)

// PossibleNullableCodespaceMachinePrebuildAvailabilityValues returns the possible values for the NullableCodespaceMachinePrebuildAvailability const type.
func PossibleNullableCodespaceMachinePrebuildAvailabilityValues() []NullableCodespaceMachinePrebuildAvailability {
	return []NullableCodespaceMachinePrebuildAvailability{
		NullableCodespaceMachinePrebuildAvailabilityInProgress,
		NullableCodespaceMachinePrebuildAvailabilityNone,
		NullableCodespaceMachinePrebuildAvailabilityReady,
	}
}

// NullableIssueStateReason - The reason for the current state
type NullableIssueStateReason string

const (
	NullableIssueStateReasonCompleted NullableIssueStateReason = "completed"
	NullableIssueStateReasonNotPlanned NullableIssueStateReason = "not_planned"
	NullableIssueStateReasonReopened NullableIssueStateReason = "reopened"
)

// PossibleNullableIssueStateReasonValues returns the possible values for the NullableIssueStateReason const type.
func PossibleNullableIssueStateReasonValues() []NullableIssueStateReason {
	return []NullableIssueStateReason{
		NullableIssueStateReasonCompleted,
		NullableIssueStateReasonNotPlanned,
		NullableIssueStateReasonReopened,
	}
}

// NullableMilestoneState - The state of the milestone.
type NullableMilestoneState string

const (
	NullableMilestoneStateClosed NullableMilestoneState = "closed"
	NullableMilestoneStateOpen NullableMilestoneState = "open"
)

// PossibleNullableMilestoneStateValues returns the possible values for the NullableMilestoneState const type.
func PossibleNullableMilestoneStateValues() []NullableMilestoneState {
	return []NullableMilestoneState{
		NullableMilestoneStateClosed,
		NullableMilestoneStateOpen,
	}
}

// NullableRepositoryMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type NullableRepositoryMergeCommitMessage string

const (
	NullableRepositoryMergeCommitMessageBLANK NullableRepositoryMergeCommitMessage = "BLANK"
	NullableRepositoryMergeCommitMessagePRBODY NullableRepositoryMergeCommitMessage = "PR_BODY"
	NullableRepositoryMergeCommitMessagePRTITLE NullableRepositoryMergeCommitMessage = "PR_TITLE"
)

// PossibleNullableRepositoryMergeCommitMessageValues returns the possible values for the NullableRepositoryMergeCommitMessage const type.
func PossibleNullableRepositoryMergeCommitMessageValues() []NullableRepositoryMergeCommitMessage {
	return []NullableRepositoryMergeCommitMessage{
		NullableRepositoryMergeCommitMessageBLANK,
		NullableRepositoryMergeCommitMessagePRBODY,
		NullableRepositoryMergeCommitMessagePRTITLE,
	}
}

// NullableRepositoryMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type NullableRepositoryMergeCommitTitle string

const (
	NullableRepositoryMergeCommitTitleMERGEMESSAGE NullableRepositoryMergeCommitTitle = "MERGE_MESSAGE"
	NullableRepositoryMergeCommitTitlePRTITLE NullableRepositoryMergeCommitTitle = "PR_TITLE"
)

// PossibleNullableRepositoryMergeCommitTitleValues returns the possible values for the NullableRepositoryMergeCommitTitle const type.
func PossibleNullableRepositoryMergeCommitTitleValues() []NullableRepositoryMergeCommitTitle {
	return []NullableRepositoryMergeCommitTitle{
		NullableRepositoryMergeCommitTitleMERGEMESSAGE,
		NullableRepositoryMergeCommitTitlePRTITLE,
	}
}

// NullableRepositorySquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type NullableRepositorySquashMergeCommitMessage string

const (
	NullableRepositorySquashMergeCommitMessageBLANK NullableRepositorySquashMergeCommitMessage = "BLANK"
	NullableRepositorySquashMergeCommitMessageCOMMITMESSAGES NullableRepositorySquashMergeCommitMessage = "COMMIT_MESSAGES"
	NullableRepositorySquashMergeCommitMessagePRBODY NullableRepositorySquashMergeCommitMessage = "PR_BODY"
)

// PossibleNullableRepositorySquashMergeCommitMessageValues returns the possible values for the NullableRepositorySquashMergeCommitMessage const type.
func PossibleNullableRepositorySquashMergeCommitMessageValues() []NullableRepositorySquashMergeCommitMessage {
	return []NullableRepositorySquashMergeCommitMessage{
		NullableRepositorySquashMergeCommitMessageBLANK,
		NullableRepositorySquashMergeCommitMessageCOMMITMESSAGES,
		NullableRepositorySquashMergeCommitMessagePRBODY,
	}
}

// NullableRepositorySquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type NullableRepositorySquashMergeCommitTitle string

const (
	NullableRepositorySquashMergeCommitTitleCOMMITORPRTITLE NullableRepositorySquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	NullableRepositorySquashMergeCommitTitlePRTITLE NullableRepositorySquashMergeCommitTitle = "PR_TITLE"
)

// PossibleNullableRepositorySquashMergeCommitTitleValues returns the possible values for the NullableRepositorySquashMergeCommitTitle const type.
func PossibleNullableRepositorySquashMergeCommitTitleValues() []NullableRepositorySquashMergeCommitTitle {
	return []NullableRepositorySquashMergeCommitTitle{
		NullableRepositorySquashMergeCommitTitleCOMMITORPRTITLE,
		NullableRepositorySquashMergeCommitTitlePRTITLE,
	}
}

// NullableRepositoryTemplateRepositoryMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type NullableRepositoryTemplateRepositoryMergeCommitMessage string

const (
	NullableRepositoryTemplateRepositoryMergeCommitMessageBLANK NullableRepositoryTemplateRepositoryMergeCommitMessage = "BLANK"
	NullableRepositoryTemplateRepositoryMergeCommitMessagePRBODY NullableRepositoryTemplateRepositoryMergeCommitMessage = "PR_BODY"
	NullableRepositoryTemplateRepositoryMergeCommitMessagePRTITLE NullableRepositoryTemplateRepositoryMergeCommitMessage = "PR_TITLE"
)

// PossibleNullableRepositoryTemplateRepositoryMergeCommitMessageValues returns the possible values for the NullableRepositoryTemplateRepositoryMergeCommitMessage const type.
func PossibleNullableRepositoryTemplateRepositoryMergeCommitMessageValues() []NullableRepositoryTemplateRepositoryMergeCommitMessage {
	return []NullableRepositoryTemplateRepositoryMergeCommitMessage{
		NullableRepositoryTemplateRepositoryMergeCommitMessageBLANK,
		NullableRepositoryTemplateRepositoryMergeCommitMessagePRBODY,
		NullableRepositoryTemplateRepositoryMergeCommitMessagePRTITLE,
	}
}

// NullableRepositoryTemplateRepositoryMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type NullableRepositoryTemplateRepositoryMergeCommitTitle string

const (
	NullableRepositoryTemplateRepositoryMergeCommitTitleMERGEMESSAGE NullableRepositoryTemplateRepositoryMergeCommitTitle = "MERGE_MESSAGE"
	NullableRepositoryTemplateRepositoryMergeCommitTitlePRTITLE NullableRepositoryTemplateRepositoryMergeCommitTitle = "PR_TITLE"
)

// PossibleNullableRepositoryTemplateRepositoryMergeCommitTitleValues returns the possible values for the NullableRepositoryTemplateRepositoryMergeCommitTitle const type.
func PossibleNullableRepositoryTemplateRepositoryMergeCommitTitleValues() []NullableRepositoryTemplateRepositoryMergeCommitTitle {
	return []NullableRepositoryTemplateRepositoryMergeCommitTitle{
		NullableRepositoryTemplateRepositoryMergeCommitTitleMERGEMESSAGE,
		NullableRepositoryTemplateRepositoryMergeCommitTitlePRTITLE,
	}
}

// NullableRepositoryTemplateRepositorySquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type NullableRepositoryTemplateRepositorySquashMergeCommitMessage string

const (
	NullableRepositoryTemplateRepositorySquashMergeCommitMessageBLANK NullableRepositoryTemplateRepositorySquashMergeCommitMessage = "BLANK"
	NullableRepositoryTemplateRepositorySquashMergeCommitMessageCOMMITMESSAGES NullableRepositoryTemplateRepositorySquashMergeCommitMessage = "COMMIT_MESSAGES"
	NullableRepositoryTemplateRepositorySquashMergeCommitMessagePRBODY NullableRepositoryTemplateRepositorySquashMergeCommitMessage = "PR_BODY"
)

// PossibleNullableRepositoryTemplateRepositorySquashMergeCommitMessageValues returns the possible values for the NullableRepositoryTemplateRepositorySquashMergeCommitMessage const type.
func PossibleNullableRepositoryTemplateRepositorySquashMergeCommitMessageValues() []NullableRepositoryTemplateRepositorySquashMergeCommitMessage {
	return []NullableRepositoryTemplateRepositorySquashMergeCommitMessage{
		NullableRepositoryTemplateRepositorySquashMergeCommitMessageBLANK,
		NullableRepositoryTemplateRepositorySquashMergeCommitMessageCOMMITMESSAGES,
		NullableRepositoryTemplateRepositorySquashMergeCommitMessagePRBODY,
	}
}

// NullableRepositoryTemplateRepositorySquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type NullableRepositoryTemplateRepositorySquashMergeCommitTitle string

const (
	NullableRepositoryTemplateRepositorySquashMergeCommitTitleCOMMITORPRTITLE NullableRepositoryTemplateRepositorySquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	NullableRepositoryTemplateRepositorySquashMergeCommitTitlePRTITLE NullableRepositoryTemplateRepositorySquashMergeCommitTitle = "PR_TITLE"
)

// PossibleNullableRepositoryTemplateRepositorySquashMergeCommitTitleValues returns the possible values for the NullableRepositoryTemplateRepositorySquashMergeCommitTitle const type.
func PossibleNullableRepositoryTemplateRepositorySquashMergeCommitTitleValues() []NullableRepositoryTemplateRepositorySquashMergeCommitTitle {
	return []NullableRepositoryTemplateRepositorySquashMergeCommitTitle{
		NullableRepositoryTemplateRepositorySquashMergeCommitTitleCOMMITORPRTITLE,
		NullableRepositoryTemplateRepositorySquashMergeCommitTitlePRTITLE,
	}
}

// NullableScopedInstallationRepositorySelection - Describe whether all repositories have been selected or there's a selection
// involved
type NullableScopedInstallationRepositorySelection string

const (
	NullableScopedInstallationRepositorySelectionAll NullableScopedInstallationRepositorySelection = "all"
	NullableScopedInstallationRepositorySelectionSelected NullableScopedInstallationRepositorySelection = "selected"
)

// PossibleNullableScopedInstallationRepositorySelectionValues returns the possible values for the NullableScopedInstallationRepositorySelection const type.
func PossibleNullableScopedInstallationRepositorySelectionValues() []NullableScopedInstallationRepositorySelection {
	return []NullableScopedInstallationRepositorySelection{
		NullableScopedInstallationRepositorySelectionAll,
		NullableScopedInstallationRepositorySelectionSelected,
	}
}

// OrgMembershipRole - The user's membership type in the organization.
type OrgMembershipRole string

const (
	OrgMembershipRoleAdmin OrgMembershipRole = "admin"
	OrgMembershipRoleBillingManager OrgMembershipRole = "billing_manager"
	OrgMembershipRoleMember OrgMembershipRole = "member"
)

// PossibleOrgMembershipRoleValues returns the possible values for the OrgMembershipRole const type.
func PossibleOrgMembershipRoleValues() []OrgMembershipRole {
	return []OrgMembershipRole{
		OrgMembershipRoleAdmin,
		OrgMembershipRoleBillingManager,
		OrgMembershipRoleMember,
	}
}

// OrgMembershipState - The state of the member in the organization. The pending state indicates the user has not yet accepted
// an invitation.
type OrgMembershipState string

const (
	OrgMembershipStateActive OrgMembershipState = "active"
	OrgMembershipStatePending OrgMembershipState = "pending"
)

// PossibleOrgMembershipStateValues returns the possible values for the OrgMembershipState const type.
func PossibleOrgMembershipStateValues() []OrgMembershipState {
	return []OrgMembershipState{
		OrgMembershipStateActive,
		OrgMembershipStatePending,
	}
}

// OrganizationActionsSecretVisibility - Visibility of a secret
type OrganizationActionsSecretVisibility string

const (
	OrganizationActionsSecretVisibilityAll OrganizationActionsSecretVisibility = "all"
	OrganizationActionsSecretVisibilityPrivate OrganizationActionsSecretVisibility = "private"
	OrganizationActionsSecretVisibilitySelected OrganizationActionsSecretVisibility = "selected"
)

// PossibleOrganizationActionsSecretVisibilityValues returns the possible values for the OrganizationActionsSecretVisibility const type.
func PossibleOrganizationActionsSecretVisibilityValues() []OrganizationActionsSecretVisibility {
	return []OrganizationActionsSecretVisibility{
		OrganizationActionsSecretVisibilityAll,
		OrganizationActionsSecretVisibilityPrivate,
		OrganizationActionsSecretVisibilitySelected,
	}
}

// OrganizationActionsVariableVisibility - Visibility of a variable
type OrganizationActionsVariableVisibility string

const (
	OrganizationActionsVariableVisibilityAll OrganizationActionsVariableVisibility = "all"
	OrganizationActionsVariableVisibilityPrivate OrganizationActionsVariableVisibility = "private"
	OrganizationActionsVariableVisibilitySelected OrganizationActionsVariableVisibility = "selected"
)

// PossibleOrganizationActionsVariableVisibilityValues returns the possible values for the OrganizationActionsVariableVisibility const type.
func PossibleOrganizationActionsVariableVisibilityValues() []OrganizationActionsVariableVisibility {
	return []OrganizationActionsVariableVisibility{
		OrganizationActionsVariableVisibilityAll,
		OrganizationActionsVariableVisibilityPrivate,
		OrganizationActionsVariableVisibilitySelected,
	}
}

// OrganizationDependabotSecretVisibility - Visibility of a secret
type OrganizationDependabotSecretVisibility string

const (
	OrganizationDependabotSecretVisibilityAll OrganizationDependabotSecretVisibility = "all"
	OrganizationDependabotSecretVisibilityPrivate OrganizationDependabotSecretVisibility = "private"
	OrganizationDependabotSecretVisibilitySelected OrganizationDependabotSecretVisibility = "selected"
)

// PossibleOrganizationDependabotSecretVisibilityValues returns the possible values for the OrganizationDependabotSecretVisibility const type.
func PossibleOrganizationDependabotSecretVisibilityValues() []OrganizationDependabotSecretVisibility {
	return []OrganizationDependabotSecretVisibility{
		OrganizationDependabotSecretVisibilityAll,
		OrganizationDependabotSecretVisibilityPrivate,
		OrganizationDependabotSecretVisibilitySelected,
	}
}

type PackageType string

const (
	PackageTypeContainer PackageType = "container"
	PackageTypeDocker PackageType = "docker"
	PackageTypeMaven PackageType = "maven"
	PackageTypeNpm PackageType = "npm"
	PackageTypeNuget PackageType = "nuget"
	PackageTypeRubygems PackageType = "rubygems"
)

// PossiblePackageTypeValues returns the possible values for the PackageType const type.
func PossiblePackageTypeValues() []PackageType {
	return []PackageType{
		PackageTypeContainer,
		PackageTypeDocker,
		PackageTypeMaven,
		PackageTypeNpm,
		PackageTypeNuget,
		PackageTypeRubygems,
	}
}

type PackageVersionMetadataPackageType string

const (
	PackageVersionMetadataPackageTypeContainer PackageVersionMetadataPackageType = "container"
	PackageVersionMetadataPackageTypeDocker PackageVersionMetadataPackageType = "docker"
	PackageVersionMetadataPackageTypeMaven PackageVersionMetadataPackageType = "maven"
	PackageVersionMetadataPackageTypeNpm PackageVersionMetadataPackageType = "npm"
	PackageVersionMetadataPackageTypeNuget PackageVersionMetadataPackageType = "nuget"
	PackageVersionMetadataPackageTypeRubygems PackageVersionMetadataPackageType = "rubygems"
)

// PossiblePackageVersionMetadataPackageTypeValues returns the possible values for the PackageVersionMetadataPackageType const type.
func PossiblePackageVersionMetadataPackageTypeValues() []PackageVersionMetadataPackageType {
	return []PackageVersionMetadataPackageType{
		PackageVersionMetadataPackageTypeContainer,
		PackageVersionMetadataPackageTypeDocker,
		PackageVersionMetadataPackageTypeMaven,
		PackageVersionMetadataPackageTypeNpm,
		PackageVersionMetadataPackageTypeNuget,
		PackageVersionMetadataPackageTypeRubygems,
	}
}

type PackageVisibility string

const (
	PackageVisibilityPrivate PackageVisibility = "private"
	PackageVisibilityPublic PackageVisibility = "public"
)

// PossiblePackageVisibilityValues returns the possible values for the PackageVisibility const type.
func PossiblePackageVisibilityValues() []PackageVisibility {
	return []PackageVisibility{
		PackageVisibilityPrivate,
		PackageVisibilityPublic,
	}
}

// PageBuildType - The process in which the Page will be built.
type PageBuildType string

const (
	PageBuildTypeLegacy PageBuildType = "legacy"
	PageBuildTypeWorkflow PageBuildType = "workflow"
)

// PossiblePageBuildTypeValues returns the possible values for the PageBuildType const type.
func PossiblePageBuildTypeValues() []PageBuildType {
	return []PageBuildType{
		PageBuildTypeLegacy,
		PageBuildTypeWorkflow,
	}
}

// PageProtectedDomainState - The state if the domain is verified
type PageProtectedDomainState string

const (
	PageProtectedDomainStatePending PageProtectedDomainState = "pending"
	PageProtectedDomainStateUnverified PageProtectedDomainState = "unverified"
	PageProtectedDomainStateVerified PageProtectedDomainState = "verified"
)

// PossiblePageProtectedDomainStateValues returns the possible values for the PageProtectedDomainState const type.
func PossiblePageProtectedDomainStateValues() []PageProtectedDomainState {
	return []PageProtectedDomainState{
		PageProtectedDomainStatePending,
		PageProtectedDomainStateUnverified,
		PageProtectedDomainStateVerified,
	}
}

// PageStatus - The status of the most recent build of the Page.
type PageStatus string

const (
	PageStatusBuilding PageStatus = "building"
	PageStatusBuilt PageStatus = "built"
	PageStatusErrored PageStatus = "errored"
)

// PossiblePageStatusValues returns the possible values for the PageStatus const type.
func PossiblePageStatusValues() []PageStatus {
	return []PageStatus{
		PageStatusBuilding,
		PageStatusBuilt,
		PageStatusErrored,
	}
}

type PagesHTTPSCertificateState string

const (
	PagesHTTPSCertificateStateApproved PagesHTTPSCertificateState = "approved"
	PagesHTTPSCertificateStateAuthorizationCreated PagesHTTPSCertificateState = "authorization_created"
	PagesHTTPSCertificateStateAuthorizationPending PagesHTTPSCertificateState = "authorization_pending"
	PagesHTTPSCertificateStateAuthorizationRevoked PagesHTTPSCertificateState = "authorization_revoked"
	PagesHTTPSCertificateStateAuthorized PagesHTTPSCertificateState = "authorized"
	PagesHTTPSCertificateStateBadAuthz PagesHTTPSCertificateState = "bad_authz"
	PagesHTTPSCertificateStateDNSChanged PagesHTTPSCertificateState = "dns_changed"
	PagesHTTPSCertificateStateDestroyPending PagesHTTPSCertificateState = "destroy_pending"
	PagesHTTPSCertificateStateErrored PagesHTTPSCertificateState = "errored"
	PagesHTTPSCertificateStateIssued PagesHTTPSCertificateState = "issued"
	PagesHTTPSCertificateStateNew PagesHTTPSCertificateState = "new"
	PagesHTTPSCertificateStateUploaded PagesHTTPSCertificateState = "uploaded"
)

// PossiblePagesHTTPSCertificateStateValues returns the possible values for the PagesHTTPSCertificateState const type.
func PossiblePagesHTTPSCertificateStateValues() []PagesHTTPSCertificateState {
	return []PagesHTTPSCertificateState{
		PagesHTTPSCertificateStateApproved,
		PagesHTTPSCertificateStateAuthorizationCreated,
		PagesHTTPSCertificateStateAuthorizationPending,
		PagesHTTPSCertificateStateAuthorizationRevoked,
		PagesHTTPSCertificateStateAuthorized,
		PagesHTTPSCertificateStateBadAuthz,
		PagesHTTPSCertificateStateDNSChanged,
		PagesHTTPSCertificateStateDestroyPending,
		PagesHTTPSCertificateStateErrored,
		PagesHTTPSCertificateStateIssued,
		PagesHTTPSCertificateStateNew,
		PagesHTTPSCertificateStateUploaded,
	}
}

type PatchContentSchema0Status string

const (
	PatchContentSchema0StatusCompleted PatchContentSchema0Status = "completed"
)

// PossiblePatchContentSchema0StatusValues returns the possible values for the PatchContentSchema0Status const type.
func PossiblePatchContentSchema0StatusValues() []PatchContentSchema0Status {
	return []PatchContentSchema0Status{
		PatchContentSchema0StatusCompleted,
	}
}

type PatchContentSchema1Status string

const (
	PatchContentSchema1StatusInProgress PatchContentSchema1Status = "in_progress"
	PatchContentSchema1StatusQueued PatchContentSchema1Status = "queued"
)

// PossiblePatchContentSchema1StatusValues returns the possible values for the PatchContentSchema1Status const type.
func PossiblePatchContentSchema1StatusValues() []PatchContentSchema1Status {
	return []PatchContentSchema1Status{
		PatchContentSchema1StatusInProgress,
		PatchContentSchema1StatusQueued,
	}
}

// PatchContentSchemaConclusion - Required if you provide completed_at or a status of completed. The final conclusion of the
// check.Note: Providing conclusion will automatically set the status parameter to completed. You cannot change
// a check run conclusion to stale, only GitHub can set this.
type PatchContentSchemaConclusion string

const (
	PatchContentSchemaConclusionActionRequired PatchContentSchemaConclusion = "action_required"
	PatchContentSchemaConclusionCancelled PatchContentSchemaConclusion = "cancelled"
	PatchContentSchemaConclusionFailure PatchContentSchemaConclusion = "failure"
	PatchContentSchemaConclusionNeutral PatchContentSchemaConclusion = "neutral"
	PatchContentSchemaConclusionSkipped PatchContentSchemaConclusion = "skipped"
	PatchContentSchemaConclusionStale PatchContentSchemaConclusion = "stale"
	PatchContentSchemaConclusionSuccess PatchContentSchemaConclusion = "success"
	PatchContentSchemaConclusionTimedOut PatchContentSchemaConclusion = "timed_out"
)

// PossiblePatchContentSchemaConclusionValues returns the possible values for the PatchContentSchemaConclusion const type.
func PossiblePatchContentSchemaConclusionValues() []PatchContentSchemaConclusion {
	return []PatchContentSchemaConclusion{
		PatchContentSchemaConclusionActionRequired,
		PatchContentSchemaConclusionCancelled,
		PatchContentSchemaConclusionFailure,
		PatchContentSchemaConclusionNeutral,
		PatchContentSchemaConclusionSkipped,
		PatchContentSchemaConclusionStale,
		PatchContentSchemaConclusionSuccess,
		PatchContentSchemaConclusionTimedOut,
	}
}

// PatchContentSchemaDefaultRepositoryPermission - Default permission level members have for organization repositories.
type PatchContentSchemaDefaultRepositoryPermission string

const (
	PatchContentSchemaDefaultRepositoryPermissionAdmin PatchContentSchemaDefaultRepositoryPermission = "admin"
	PatchContentSchemaDefaultRepositoryPermissionNone PatchContentSchemaDefaultRepositoryPermission = "none"
	PatchContentSchemaDefaultRepositoryPermissionRead PatchContentSchemaDefaultRepositoryPermission = "read"
	PatchContentSchemaDefaultRepositoryPermissionWrite PatchContentSchemaDefaultRepositoryPermission = "write"
)

// PossiblePatchContentSchemaDefaultRepositoryPermissionValues returns the possible values for the PatchContentSchemaDefaultRepositoryPermission const type.
func PossiblePatchContentSchemaDefaultRepositoryPermissionValues() []PatchContentSchemaDefaultRepositoryPermission {
	return []PatchContentSchemaDefaultRepositoryPermission{
		PatchContentSchemaDefaultRepositoryPermissionAdmin,
		PatchContentSchemaDefaultRepositoryPermissionNone,
		PatchContentSchemaDefaultRepositoryPermissionRead,
		PatchContentSchemaDefaultRepositoryPermissionWrite,
	}
}

// PatchContentSchemaDismissedReason - Required when state is dismissed. A reason for dismissing the alert.
type PatchContentSchemaDismissedReason string

const (
	PatchContentSchemaDismissedReasonFixStarted PatchContentSchemaDismissedReason = "fix_started"
	PatchContentSchemaDismissedReasonInaccurate PatchContentSchemaDismissedReason = "inaccurate"
	PatchContentSchemaDismissedReasonNoBandwidth PatchContentSchemaDismissedReason = "no_bandwidth"
	PatchContentSchemaDismissedReasonNotUsed PatchContentSchemaDismissedReason = "not_used"
	PatchContentSchemaDismissedReasonTolerableRisk PatchContentSchemaDismissedReason = "tolerable_risk"
)

// PossiblePatchContentSchemaDismissedReasonValues returns the possible values for the PatchContentSchemaDismissedReason const type.
func PossiblePatchContentSchemaDismissedReasonValues() []PatchContentSchemaDismissedReason {
	return []PatchContentSchemaDismissedReason{
		PatchContentSchemaDismissedReasonFixStarted,
		PatchContentSchemaDismissedReasonInaccurate,
		PatchContentSchemaDismissedReasonNoBandwidth,
		PatchContentSchemaDismissedReasonNotUsed,
		PatchContentSchemaDismissedReasonTolerableRisk,
	}
}

// PatchContentSchemaMakeLatest - Specifies whether this release should be set as the latest release for the repository. Drafts
// and prereleases cannot be set as latest. Defaults to true for newly published releases. legacy specifies
// that the latest release should be determined based on the release creation date and higher semantic version.
type PatchContentSchemaMakeLatest string

const (
	PatchContentSchemaMakeLatestFalse PatchContentSchemaMakeLatest = "false"
	PatchContentSchemaMakeLatestLegacy PatchContentSchemaMakeLatest = "legacy"
	PatchContentSchemaMakeLatestTrue PatchContentSchemaMakeLatest = "true"
)

// PossiblePatchContentSchemaMakeLatestValues returns the possible values for the PatchContentSchemaMakeLatest const type.
func PossiblePatchContentSchemaMakeLatestValues() []PatchContentSchemaMakeLatest {
	return []PatchContentSchemaMakeLatest{
		PatchContentSchemaMakeLatestFalse,
		PatchContentSchemaMakeLatestLegacy,
		PatchContentSchemaMakeLatestTrue,
	}
}

// PatchContentSchemaMembersAllowedRepositoryCreationType - Specifies which types of repositories non-admin organization members
// can create. private is only available to repositories that are part of an organization on GitHub Enterprise Cloud.Note:
// This
// parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter
// overrides values set in members_can_create_repositories. See the
// parameter deprecation notice in the operation description for details.
type PatchContentSchemaMembersAllowedRepositoryCreationType string

const (
	PatchContentSchemaMembersAllowedRepositoryCreationTypeAll PatchContentSchemaMembersAllowedRepositoryCreationType = "all"
	PatchContentSchemaMembersAllowedRepositoryCreationTypeNone PatchContentSchemaMembersAllowedRepositoryCreationType = "none"
	PatchContentSchemaMembersAllowedRepositoryCreationTypePrivate PatchContentSchemaMembersAllowedRepositoryCreationType = "private"
)

// PossiblePatchContentSchemaMembersAllowedRepositoryCreationTypeValues returns the possible values for the PatchContentSchemaMembersAllowedRepositoryCreationType const type.
func PossiblePatchContentSchemaMembersAllowedRepositoryCreationTypeValues() []PatchContentSchemaMembersAllowedRepositoryCreationType {
	return []PatchContentSchemaMembersAllowedRepositoryCreationType{
		PatchContentSchemaMembersAllowedRepositoryCreationTypeAll,
		PatchContentSchemaMembersAllowedRepositoryCreationTypeNone,
		PatchContentSchemaMembersAllowedRepositoryCreationTypePrivate,
	}
}

// PatchContentSchemaMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type PatchContentSchemaMergeCommitMessage string

const (
	PatchContentSchemaMergeCommitMessageBLANK PatchContentSchemaMergeCommitMessage = "BLANK"
	PatchContentSchemaMergeCommitMessagePRBODY PatchContentSchemaMergeCommitMessage = "PR_BODY"
	PatchContentSchemaMergeCommitMessagePRTITLE PatchContentSchemaMergeCommitMessage = "PR_TITLE"
)

// PossiblePatchContentSchemaMergeCommitMessageValues returns the possible values for the PatchContentSchemaMergeCommitMessage const type.
func PossiblePatchContentSchemaMergeCommitMessageValues() []PatchContentSchemaMergeCommitMessage {
	return []PatchContentSchemaMergeCommitMessage{
		PatchContentSchemaMergeCommitMessageBLANK,
		PatchContentSchemaMergeCommitMessagePRBODY,
		PatchContentSchemaMergeCommitMessagePRTITLE,
	}
}

// PatchContentSchemaMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type PatchContentSchemaMergeCommitTitle string

const (
	PatchContentSchemaMergeCommitTitleMERGEMESSAGE PatchContentSchemaMergeCommitTitle = "MERGE_MESSAGE"
	PatchContentSchemaMergeCommitTitlePRTITLE PatchContentSchemaMergeCommitTitle = "PR_TITLE"
)

// PossiblePatchContentSchemaMergeCommitTitleValues returns the possible values for the PatchContentSchemaMergeCommitTitle const type.
func PossiblePatchContentSchemaMergeCommitTitleValues() []PatchContentSchemaMergeCommitTitle {
	return []PatchContentSchemaMergeCommitTitle{
		PatchContentSchemaMergeCommitTitleMERGEMESSAGE,
		PatchContentSchemaMergeCommitTitlePRTITLE,
	}
}

// PatchContentSchemaOrganizationPermission - The baseline permission that all organization members have on this project
type PatchContentSchemaOrganizationPermission string

const (
	PatchContentSchemaOrganizationPermissionAdmin PatchContentSchemaOrganizationPermission = "admin"
	PatchContentSchemaOrganizationPermissionNone PatchContentSchemaOrganizationPermission = "none"
	PatchContentSchemaOrganizationPermissionRead PatchContentSchemaOrganizationPermission = "read"
	PatchContentSchemaOrganizationPermissionWrite PatchContentSchemaOrganizationPermission = "write"
)

// PossiblePatchContentSchemaOrganizationPermissionValues returns the possible values for the PatchContentSchemaOrganizationPermission const type.
func PossiblePatchContentSchemaOrganizationPermissionValues() []PatchContentSchemaOrganizationPermission {
	return []PatchContentSchemaOrganizationPermission{
		PatchContentSchemaOrganizationPermissionAdmin,
		PatchContentSchemaOrganizationPermissionNone,
		PatchContentSchemaOrganizationPermissionRead,
		PatchContentSchemaOrganizationPermissionWrite,
	}
}

// PatchContentSchemaPermission - Deprecated. The permission that new repositories will be added to the team with when none
// is specified.
type PatchContentSchemaPermission string

const (
	PatchContentSchemaPermissionAdmin PatchContentSchemaPermission = "admin"
	PatchContentSchemaPermissionPull PatchContentSchemaPermission = "pull"
	PatchContentSchemaPermissionPush PatchContentSchemaPermission = "push"
)

// PossiblePatchContentSchemaPermissionValues returns the possible values for the PatchContentSchemaPermission const type.
func PossiblePatchContentSchemaPermissionValues() []PatchContentSchemaPermission {
	return []PatchContentSchemaPermission{
		PatchContentSchemaPermissionAdmin,
		PatchContentSchemaPermissionPull,
		PatchContentSchemaPermissionPush,
	}
}

// PatchContentSchemaPermissions - The permissions that the associated user will have on the repository. Valid values are
// read, write, maintain, triage, and admin.
type PatchContentSchemaPermissions string

const (
	PatchContentSchemaPermissionsAdmin PatchContentSchemaPermissions = "admin"
	PatchContentSchemaPermissionsMaintain PatchContentSchemaPermissions = "maintain"
	PatchContentSchemaPermissionsRead PatchContentSchemaPermissions = "read"
	PatchContentSchemaPermissionsTriage PatchContentSchemaPermissions = "triage"
	PatchContentSchemaPermissionsWrite PatchContentSchemaPermissions = "write"
)

// PossiblePatchContentSchemaPermissionsValues returns the possible values for the PatchContentSchemaPermissions const type.
func PossiblePatchContentSchemaPermissionsValues() []PatchContentSchemaPermissions {
	return []PatchContentSchemaPermissions{
		PatchContentSchemaPermissionsAdmin,
		PatchContentSchemaPermissionsMaintain,
		PatchContentSchemaPermissionsRead,
		PatchContentSchemaPermissionsTriage,
		PatchContentSchemaPermissionsWrite,
	}
}

// PatchContentSchemaPrivacy - The level of privacy this team should have. Editing teams without specifying this parameter
// leaves privacy intact. When a team is nested, the privacy for parent teams cannot be secret. The options
// are:
// For a non-nested team:
// * secret - only visible to organization owners and members of this team.
// * closed - visible to all members of this organization.
// For a parent or child team:
// * closed - visible to all members of this organization.
type PatchContentSchemaPrivacy string

const (
	PatchContentSchemaPrivacyClosed PatchContentSchemaPrivacy = "closed"
	PatchContentSchemaPrivacySecret PatchContentSchemaPrivacy = "secret"
)

// PossiblePatchContentSchemaPrivacyValues returns the possible values for the PatchContentSchemaPrivacy const type.
func PossiblePatchContentSchemaPrivacyValues() []PatchContentSchemaPrivacy {
	return []PatchContentSchemaPrivacy{
		PatchContentSchemaPrivacyClosed,
		PatchContentSchemaPrivacySecret,
	}
}

// PatchContentSchemaScope - Enable the required workflow for all repositories or selected repositories in the organization.
type PatchContentSchemaScope string

const (
	PatchContentSchemaScopeAll PatchContentSchemaScope = "all"
	PatchContentSchemaScopeSelected PatchContentSchemaScope = "selected"
)

// PossiblePatchContentSchemaScopeValues returns the possible values for the PatchContentSchemaScope const type.
func PossiblePatchContentSchemaScopeValues() []PatchContentSchemaScope {
	return []PatchContentSchemaScope{
		PatchContentSchemaScopeAll,
		PatchContentSchemaScopeSelected,
	}
}

// PatchContentSchemaSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type PatchContentSchemaSquashMergeCommitMessage string

const (
	PatchContentSchemaSquashMergeCommitMessageBLANK PatchContentSchemaSquashMergeCommitMessage = "BLANK"
	PatchContentSchemaSquashMergeCommitMessageCOMMITMESSAGES PatchContentSchemaSquashMergeCommitMessage = "COMMIT_MESSAGES"
	PatchContentSchemaSquashMergeCommitMessagePRBODY PatchContentSchemaSquashMergeCommitMessage = "PR_BODY"
)

// PossiblePatchContentSchemaSquashMergeCommitMessageValues returns the possible values for the PatchContentSchemaSquashMergeCommitMessage const type.
func PossiblePatchContentSchemaSquashMergeCommitMessageValues() []PatchContentSchemaSquashMergeCommitMessage {
	return []PatchContentSchemaSquashMergeCommitMessage{
		PatchContentSchemaSquashMergeCommitMessageBLANK,
		PatchContentSchemaSquashMergeCommitMessageCOMMITMESSAGES,
		PatchContentSchemaSquashMergeCommitMessagePRBODY,
	}
}

// PatchContentSchemaSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type PatchContentSchemaSquashMergeCommitTitle string

const (
	PatchContentSchemaSquashMergeCommitTitleCOMMITORPRTITLE PatchContentSchemaSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	PatchContentSchemaSquashMergeCommitTitlePRTITLE PatchContentSchemaSquashMergeCommitTitle = "PR_TITLE"
)

// PossiblePatchContentSchemaSquashMergeCommitTitleValues returns the possible values for the PatchContentSchemaSquashMergeCommitTitle const type.
func PossiblePatchContentSchemaSquashMergeCommitTitleValues() []PatchContentSchemaSquashMergeCommitTitle {
	return []PatchContentSchemaSquashMergeCommitTitle{
		PatchContentSchemaSquashMergeCommitTitleCOMMITORPRTITLE,
		PatchContentSchemaSquashMergeCommitTitlePRTITLE,
	}
}

// PatchContentSchemaStateReason - The reason for the state change. Ignored unless state is changed.
type PatchContentSchemaStateReason string

const (
	PatchContentSchemaStateReasonCompleted PatchContentSchemaStateReason = "completed"
	PatchContentSchemaStateReasonNotPlanned PatchContentSchemaStateReason = "not_planned"
	PatchContentSchemaStateReasonReopened PatchContentSchemaStateReason = "reopened"
)

// PossiblePatchContentSchemaStateReasonValues returns the possible values for the PatchContentSchemaStateReason const type.
func PossiblePatchContentSchemaStateReasonValues() []PatchContentSchemaStateReason {
	return []PatchContentSchemaStateReason{
		PatchContentSchemaStateReasonCompleted,
		PatchContentSchemaStateReasonNotPlanned,
		PatchContentSchemaStateReasonReopened,
	}
}

// PatchContentSchemaStatus - The current status.
type PatchContentSchemaStatus string

const (
	PatchContentSchemaStatusCompleted PatchContentSchemaStatus = "completed"
	PatchContentSchemaStatusInProgress PatchContentSchemaStatus = "in_progress"
	PatchContentSchemaStatusQueued PatchContentSchemaStatus = "queued"
)

// PossiblePatchContentSchemaStatusValues returns the possible values for the PatchContentSchemaStatus const type.
func PossiblePatchContentSchemaStatusValues() []PatchContentSchemaStatus {
	return []PatchContentSchemaStatus{
		PatchContentSchemaStatusCompleted,
		PatchContentSchemaStatusInProgress,
		PatchContentSchemaStatusQueued,
	}
}

// PatchContentSchemaUseLfs - Whether to store large files during the import. opt_in means large files will be stored using
// Git LFS. opt_out means large files will be removed during the import.
type PatchContentSchemaUseLfs string

const (
	PatchContentSchemaUseLfsOptIn PatchContentSchemaUseLfs = "opt_in"
	PatchContentSchemaUseLfsOptOut PatchContentSchemaUseLfs = "opt_out"
)

// PossiblePatchContentSchemaUseLfsValues returns the possible values for the PatchContentSchemaUseLfs const type.
func PossiblePatchContentSchemaUseLfsValues() []PatchContentSchemaUseLfs {
	return []PatchContentSchemaUseLfs{
		PatchContentSchemaUseLfsOptIn,
		PatchContentSchemaUseLfsOptOut,
	}
}

// PatchContentSchemaVcs - The type of version control system you are migrating from.
type PatchContentSchemaVcs string

const (
	PatchContentSchemaVcsGit PatchContentSchemaVcs = "git"
	PatchContentSchemaVcsMercurial PatchContentSchemaVcs = "mercurial"
	PatchContentSchemaVcsSubversion PatchContentSchemaVcs = "subversion"
	PatchContentSchemaVcsTfvc PatchContentSchemaVcs = "tfvc"
)

// PossiblePatchContentSchemaVcsValues returns the possible values for the PatchContentSchemaVcs const type.
func PossiblePatchContentSchemaVcsValues() []PatchContentSchemaVcs {
	return []PatchContentSchemaVcs{
		PatchContentSchemaVcsGit,
		PatchContentSchemaVcsMercurial,
		PatchContentSchemaVcsSubversion,
		PatchContentSchemaVcsTfvc,
	}
}

// PatchContentSchemaVisibility - The type of repositories in the organization that can access the variable. selected means
// only the repositories specified by selected_repository_ids can access the variable.
type PatchContentSchemaVisibility string

const (
	PatchContentSchemaVisibilityAll PatchContentSchemaVisibility = "all"
	PatchContentSchemaVisibilityPrivate PatchContentSchemaVisibility = "private"
	PatchContentSchemaVisibilitySelected PatchContentSchemaVisibility = "selected"
)

// PossiblePatchContentSchemaVisibilityValues returns the possible values for the PatchContentSchemaVisibility const type.
func PossiblePatchContentSchemaVisibilityValues() []PatchContentSchemaVisibility {
	return []PatchContentSchemaVisibility{
		PatchContentSchemaVisibilityAll,
		PatchContentSchemaVisibilityPrivate,
		PatchContentSchemaVisibilitySelected,
	}
}

// PatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel - The level of the annotation.
type PatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel string

const (
	PatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelFailure PatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel = "failure"
	PatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelNotice PatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel = "notice"
	PatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelWarning PatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel = "warning"
)

// PossiblePatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelValues returns the possible values for the PatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel const type.
func PossiblePatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelValues() []PatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel {
	return []PatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel{
		PatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelFailure,
		PatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelNotice,
		PatchRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelWarning,
	}
}

type PostContentSchema0Status string

const (
	PostContentSchema0StatusCompleted PostContentSchema0Status = "completed"
)

// PossiblePostContentSchema0StatusValues returns the possible values for the PostContentSchema0Status const type.
func PossiblePostContentSchema0StatusValues() []PostContentSchema0Status {
	return []PostContentSchema0Status{
		PostContentSchema0StatusCompleted,
	}
}

type PostContentSchema1Status string

const (
	PostContentSchema1StatusInProgress PostContentSchema1Status = "in_progress"
	PostContentSchema1StatusQueued PostContentSchema1Status = "queued"
)

// PossiblePostContentSchema1StatusValues returns the possible values for the PostContentSchema1Status const type.
func PossiblePostContentSchema1StatusValues() []PostContentSchema1Status {
	return []PostContentSchema1Status{
		PostContentSchema1StatusInProgress,
		PostContentSchema1StatusQueued,
	}
}

// PostContentSchemaBuildType - The process in which the Page will be built. Possible values are "legacy" and "workflow".
type PostContentSchemaBuildType string

const (
	PostContentSchemaBuildTypeLegacy PostContentSchemaBuildType = "legacy"
	PostContentSchemaBuildTypeWorkflow PostContentSchemaBuildType = "workflow"
)

// PossiblePostContentSchemaBuildTypeValues returns the possible values for the PostContentSchemaBuildType const type.
func PossiblePostContentSchemaBuildTypeValues() []PostContentSchemaBuildType {
	return []PostContentSchemaBuildType{
		PostContentSchemaBuildTypeLegacy,
		PostContentSchemaBuildTypeWorkflow,
	}
}

// PostContentSchemaConclusion - Required if you provide completed_at or a status of completed. The final conclusion of the
// check.Note: Providing conclusion will automatically set the status parameter to completed. You cannot change
// a check run conclusion to stale, only GitHub can set this.
type PostContentSchemaConclusion string

const (
	PostContentSchemaConclusionActionRequired PostContentSchemaConclusion = "action_required"
	PostContentSchemaConclusionCancelled PostContentSchemaConclusion = "cancelled"
	PostContentSchemaConclusionFailure PostContentSchemaConclusion = "failure"
	PostContentSchemaConclusionNeutral PostContentSchemaConclusion = "neutral"
	PostContentSchemaConclusionSkipped PostContentSchemaConclusion = "skipped"
	PostContentSchemaConclusionStale PostContentSchemaConclusion = "stale"
	PostContentSchemaConclusionSuccess PostContentSchemaConclusion = "success"
	PostContentSchemaConclusionTimedOut PostContentSchemaConclusion = "timed_out"
)

// PossiblePostContentSchemaConclusionValues returns the possible values for the PostContentSchemaConclusion const type.
func PossiblePostContentSchemaConclusionValues() []PostContentSchemaConclusion {
	return []PostContentSchemaConclusion{
		PostContentSchemaConclusionActionRequired,
		PostContentSchemaConclusionCancelled,
		PostContentSchemaConclusionFailure,
		PostContentSchemaConclusionNeutral,
		PostContentSchemaConclusionSkipped,
		PostContentSchemaConclusionStale,
		PostContentSchemaConclusionSuccess,
		PostContentSchemaConclusionTimedOut,
	}
}

// PostContentSchemaContent - The reaction type [https://docs.github.com/rest/reference/reactions#reaction-types] to add to
// the team discussion comment.
type PostContentSchemaContent string

const (
	PostContentSchemaContentThumbsUp PostContentSchemaContent = "+1"
	PostContentSchemaContent1ThumbsDown PostContentSchemaContent = "-1"
	PostContentSchemaContentConfused PostContentSchemaContent = "confused"
	PostContentSchemaContentEyes PostContentSchemaContent = "eyes"
	PostContentSchemaContentHeart PostContentSchemaContent = "heart"
	PostContentSchemaContentHooray PostContentSchemaContent = "hooray"
	PostContentSchemaContentLaugh PostContentSchemaContent = "laugh"
	PostContentSchemaContentRocket PostContentSchemaContent = "rocket"
)

// PossiblePostContentSchemaContentValues returns the possible values for the PostContentSchemaContent const type.
func PossiblePostContentSchemaContentValues() []PostContentSchemaContent {
	return []PostContentSchemaContent{
		PostContentSchemaContentThumbsUp,
		PostContentSchemaContent1ThumbsDown,
		PostContentSchemaContentConfused,
		PostContentSchemaContentEyes,
		PostContentSchemaContentHeart,
		PostContentSchemaContentHooray,
		PostContentSchemaContentLaugh,
		PostContentSchemaContentRocket,
	}
}

// PostContentSchemaEvent - The review action you want to perform. The review actions include: APPROVE, REQUEST_CHANGES, or
// COMMENT. By leaving this blank, you set the review action state to PENDING, which means you will need to
// submit the pull request review [https://docs.github.com/rest/pulls#submit-a-review-for-a-pull-request] when you are ready.
type PostContentSchemaEvent string

const (
	PostContentSchemaEventAPPROVE PostContentSchemaEvent = "APPROVE"
	PostContentSchemaEventCOMMENT PostContentSchemaEvent = "COMMENT"
	PostContentSchemaEventREQUESTCHANGES PostContentSchemaEvent = "REQUEST_CHANGES"
)

// PossiblePostContentSchemaEventValues returns the possible values for the PostContentSchemaEvent const type.
func PossiblePostContentSchemaEventValues() []PostContentSchemaEvent {
	return []PostContentSchemaEvent{
		PostContentSchemaEventAPPROVE,
		PostContentSchemaEventCOMMENT,
		PostContentSchemaEventREQUESTCHANGES,
	}
}

type PostContentSchemaExcludeItem string

const (
	PostContentSchemaExcludeItemRepositories PostContentSchemaExcludeItem = "repositories"
)

// PossiblePostContentSchemaExcludeItemValues returns the possible values for the PostContentSchemaExcludeItem const type.
func PossiblePostContentSchemaExcludeItemValues() []PostContentSchemaExcludeItem {
	return []PostContentSchemaExcludeItem{
		PostContentSchemaExcludeItemRepositories,
	}
}

// PostContentSchemaMakeLatest - Specifies whether this release should be set as the latest release for the repository. Drafts
// and prereleases cannot be set as latest. Defaults to true for newly published releases. legacy specifies
// that the latest release should be determined based on the release creation date and higher semantic version.
type PostContentSchemaMakeLatest string

const (
	PostContentSchemaMakeLatestFalse PostContentSchemaMakeLatest = "false"
	PostContentSchemaMakeLatestLegacy PostContentSchemaMakeLatest = "legacy"
	PostContentSchemaMakeLatestTrue PostContentSchemaMakeLatest = "true"
)

// PossiblePostContentSchemaMakeLatestValues returns the possible values for the PostContentSchemaMakeLatest const type.
func PossiblePostContentSchemaMakeLatestValues() []PostContentSchemaMakeLatest {
	return []PostContentSchemaMakeLatest{
		PostContentSchemaMakeLatestFalse,
		PostContentSchemaMakeLatestLegacy,
		PostContentSchemaMakeLatestTrue,
	}
}

// PostContentSchemaMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type PostContentSchemaMergeCommitMessage string

const (
	PostContentSchemaMergeCommitMessageBLANK PostContentSchemaMergeCommitMessage = "BLANK"
	PostContentSchemaMergeCommitMessagePRBODY PostContentSchemaMergeCommitMessage = "PR_BODY"
	PostContentSchemaMergeCommitMessagePRTITLE PostContentSchemaMergeCommitMessage = "PR_TITLE"
)

// PossiblePostContentSchemaMergeCommitMessageValues returns the possible values for the PostContentSchemaMergeCommitMessage const type.
func PossiblePostContentSchemaMergeCommitMessageValues() []PostContentSchemaMergeCommitMessage {
	return []PostContentSchemaMergeCommitMessage{
		PostContentSchemaMergeCommitMessageBLANK,
		PostContentSchemaMergeCommitMessagePRBODY,
		PostContentSchemaMergeCommitMessagePRTITLE,
	}
}

// PostContentSchemaMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type PostContentSchemaMergeCommitTitle string

const (
	PostContentSchemaMergeCommitTitleMERGEMESSAGE PostContentSchemaMergeCommitTitle = "MERGE_MESSAGE"
	PostContentSchemaMergeCommitTitlePRTITLE PostContentSchemaMergeCommitTitle = "PR_TITLE"
)

// PossiblePostContentSchemaMergeCommitTitleValues returns the possible values for the PostContentSchemaMergeCommitTitle const type.
func PossiblePostContentSchemaMergeCommitTitleValues() []PostContentSchemaMergeCommitTitle {
	return []PostContentSchemaMergeCommitTitle{
		PostContentSchemaMergeCommitTitleMERGEMESSAGE,
		PostContentSchemaMergeCommitTitlePRTITLE,
	}
}

// PostContentSchemaMode - The rendering mode.
type PostContentSchemaMode string

const (
	PostContentSchemaModeGfm PostContentSchemaMode = "gfm"
	PostContentSchemaModeMarkdown PostContentSchemaMode = "markdown"
)

// PossiblePostContentSchemaModeValues returns the possible values for the PostContentSchemaMode const type.
func PossiblePostContentSchemaModeValues() []PostContentSchemaMode {
	return []PostContentSchemaMode{
		PostContentSchemaModeGfm,
		PostContentSchemaModeMarkdown,
	}
}

// PostContentSchemaPermission - Deprecated. The permission that new repositories will be added to the team with when none
// is specified.
type PostContentSchemaPermission string

const (
	PostContentSchemaPermissionPull PostContentSchemaPermission = "pull"
	PostContentSchemaPermissionPush PostContentSchemaPermission = "push"
)

// PossiblePostContentSchemaPermissionValues returns the possible values for the PostContentSchemaPermission const type.
func PossiblePostContentSchemaPermissionValues() []PostContentSchemaPermission {
	return []PostContentSchemaPermission{
		PostContentSchemaPermissionPull,
		PostContentSchemaPermissionPush,
	}
}

// PostContentSchemaPrivacy - The level of privacy this team should have. The options are:
// For a non-nested team:
// * secret - only visible to organization owners and members of this team.
// * closed - visible to all members of this organization.
// Default: secret
// For a parent or child team:
// * closed - visible to all members of this organization.
// Default for child team: closed
type PostContentSchemaPrivacy string

const (
	PostContentSchemaPrivacyClosed PostContentSchemaPrivacy = "closed"
	PostContentSchemaPrivacySecret PostContentSchemaPrivacy = "secret"
)

// PossiblePostContentSchemaPrivacyValues returns the possible values for the PostContentSchemaPrivacy const type.
func PossiblePostContentSchemaPrivacyValues() []PostContentSchemaPrivacy {
	return []PostContentSchemaPrivacy{
		PostContentSchemaPrivacyClosed,
		PostContentSchemaPrivacySecret,
	}
}

// PostContentSchemaRole - The role for the new member.
// * admin - Organization owners with full administrative rights to the organization and complete access to all repositories
// and teams.
// * direct_member - Non-owner organization members with ability to see other members and join teams by invitation.
// * billing_manager - Non-owner organization members with ability to manage the billing settings of your organization.
type PostContentSchemaRole string

const (
	PostContentSchemaRoleAdmin PostContentSchemaRole = "admin"
	PostContentSchemaRoleBillingManager PostContentSchemaRole = "billing_manager"
	PostContentSchemaRoleDirectMember PostContentSchemaRole = "direct_member"
)

// PossiblePostContentSchemaRoleValues returns the possible values for the PostContentSchemaRole const type.
func PossiblePostContentSchemaRoleValues() []PostContentSchemaRole {
	return []PostContentSchemaRole{
		PostContentSchemaRoleAdmin,
		PostContentSchemaRoleBillingManager,
		PostContentSchemaRoleDirectMember,
	}
}

// PostContentSchemaScope - Enable the required workflow for all repositories or selected repositories in the organization.
type PostContentSchemaScope string

const (
	PostContentSchemaScopeAll PostContentSchemaScope = "all"
	PostContentSchemaScopeSelected PostContentSchemaScope = "selected"
)

// PossiblePostContentSchemaScopeValues returns the possible values for the PostContentSchemaScope const type.
func PossiblePostContentSchemaScopeValues() []PostContentSchemaScope {
	return []PostContentSchemaScope{
		PostContentSchemaScopeAll,
		PostContentSchemaScopeSelected,
	}
}

// PostContentSchemaSide - In a split diff view, the side of the diff that the pull request's changes appear on. Can be LEFT
// or RIGHT. Use LEFT for deletions that appear in red. Use RIGHT for additions that appear in green or
// unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last
// line of the comment range is a deletion or addition. For more information,
// see "Diff view options [https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options]"
// in the GitHub Help documentation.
type PostContentSchemaSide string

const (
	PostContentSchemaSideLEFT PostContentSchemaSide = "LEFT"
	PostContentSchemaSideRIGHT PostContentSchemaSide = "RIGHT"
)

// PossiblePostContentSchemaSideValues returns the possible values for the PostContentSchemaSide const type.
func PossiblePostContentSchemaSideValues() []PostContentSchemaSide {
	return []PostContentSchemaSide{
		PostContentSchemaSideLEFT,
		PostContentSchemaSideRIGHT,
	}
}

// PostContentSchemaSourcePath - The repository directory that includes the source files for the Pages site. Allowed paths
// are / or /docs. Default: /
type PostContentSchemaSourcePath string

const (
	PostContentSchemaSourcePathDocs PostContentSchemaSourcePath = "/docs"
	PostContentSchemaSourcePathSlash PostContentSchemaSourcePath = "/"
)

// PossiblePostContentSchemaSourcePathValues returns the possible values for the PostContentSchemaSourcePath const type.
func PossiblePostContentSchemaSourcePathValues() []PostContentSchemaSourcePath {
	return []PostContentSchemaSourcePath{
		PostContentSchemaSourcePathDocs,
		PostContentSchemaSourcePathSlash,
	}
}

// PostContentSchemaSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type PostContentSchemaSquashMergeCommitMessage string

const (
	PostContentSchemaSquashMergeCommitMessageBLANK PostContentSchemaSquashMergeCommitMessage = "BLANK"
	PostContentSchemaSquashMergeCommitMessageCOMMITMESSAGES PostContentSchemaSquashMergeCommitMessage = "COMMIT_MESSAGES"
	PostContentSchemaSquashMergeCommitMessagePRBODY PostContentSchemaSquashMergeCommitMessage = "PR_BODY"
)

// PossiblePostContentSchemaSquashMergeCommitMessageValues returns the possible values for the PostContentSchemaSquashMergeCommitMessage const type.
func PossiblePostContentSchemaSquashMergeCommitMessageValues() []PostContentSchemaSquashMergeCommitMessage {
	return []PostContentSchemaSquashMergeCommitMessage{
		PostContentSchemaSquashMergeCommitMessageBLANK,
		PostContentSchemaSquashMergeCommitMessageCOMMITMESSAGES,
		PostContentSchemaSquashMergeCommitMessagePRBODY,
	}
}

// PostContentSchemaSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type PostContentSchemaSquashMergeCommitTitle string

const (
	PostContentSchemaSquashMergeCommitTitleCOMMITORPRTITLE PostContentSchemaSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	PostContentSchemaSquashMergeCommitTitlePRTITLE PostContentSchemaSquashMergeCommitTitle = "PR_TITLE"
)

// PossiblePostContentSchemaSquashMergeCommitTitleValues returns the possible values for the PostContentSchemaSquashMergeCommitTitle const type.
func PossiblePostContentSchemaSquashMergeCommitTitleValues() []PostContentSchemaSquashMergeCommitTitle {
	return []PostContentSchemaSquashMergeCommitTitle{
		PostContentSchemaSquashMergeCommitTitleCOMMITORPRTITLE,
		PostContentSchemaSquashMergeCommitTitlePRTITLE,
	}
}

// PostContentSchemaStartSide - Required when using multi-line comments unless using in_reply_to. The start_side is the starting
// side of the diff that the comment applies to. Can be LEFT or RIGHT. To learn more about multi-line
// comments, see "Commenting on a pull request [https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request]"
// in the GitHub Help documentation. See side in this
// table for additional context.
type PostContentSchemaStartSide string

const (
	PostContentSchemaStartSideLEFT PostContentSchemaStartSide = "LEFT"
	PostContentSchemaStartSideRIGHT PostContentSchemaStartSide = "RIGHT"
	PostContentSchemaStartSideSide PostContentSchemaStartSide = "side"
)

// PossiblePostContentSchemaStartSideValues returns the possible values for the PostContentSchemaStartSide const type.
func PossiblePostContentSchemaStartSideValues() []PostContentSchemaStartSide {
	return []PostContentSchemaStartSide{
		PostContentSchemaStartSideLEFT,
		PostContentSchemaStartSideRIGHT,
		PostContentSchemaStartSideSide,
	}
}

// PostContentSchemaState - Whether to approve or reject deployment to the specified environments.
type PostContentSchemaState string

const (
	PostContentSchemaStateApproved PostContentSchemaState = "approved"
	PostContentSchemaStateRejected PostContentSchemaState = "rejected"
)

// PossiblePostContentSchemaStateValues returns the possible values for the PostContentSchemaState const type.
func PossiblePostContentSchemaStateValues() []PostContentSchemaState {
	return []PostContentSchemaState{
		PostContentSchemaStateApproved,
		PostContentSchemaStateRejected,
	}
}

// PostContentSchemaStatus - The current status.
type PostContentSchemaStatus string

const (
	PostContentSchemaStatusCompleted PostContentSchemaStatus = "completed"
	PostContentSchemaStatusInProgress PostContentSchemaStatus = "in_progress"
	PostContentSchemaStatusQueued PostContentSchemaStatus = "queued"
)

// PossiblePostContentSchemaStatusValues returns the possible values for the PostContentSchemaStatus const type.
func PossiblePostContentSchemaStatusValues() []PostContentSchemaStatus {
	return []PostContentSchemaStatus{
		PostContentSchemaStatusCompleted,
		PostContentSchemaStatusInProgress,
		PostContentSchemaStatusQueued,
	}
}

// PostContentSchemaType - The type of the object we're tagging. Normally this is a commit but it can also be a tree or a
// blob.
type PostContentSchemaType string

const (
	PostContentSchemaTypeBlob PostContentSchemaType = "blob"
	PostContentSchemaTypeCommit PostContentSchemaType = "commit"
	PostContentSchemaTypeTree PostContentSchemaType = "tree"
)

// PossiblePostContentSchemaTypeValues returns the possible values for the PostContentSchemaType const type.
func PossiblePostContentSchemaTypeValues() []PostContentSchemaType {
	return []PostContentSchemaType{
		PostContentSchemaTypeBlob,
		PostContentSchemaTypeCommit,
		PostContentSchemaTypeTree,
	}
}

// PostContentSchemaVisibility - The type of repositories in the organization that can access the variable. selected means
// only the repositories specified by selected_repository_ids can access the variable.
type PostContentSchemaVisibility string

const (
	PostContentSchemaVisibilityAll PostContentSchemaVisibility = "all"
	PostContentSchemaVisibilityPrivate PostContentSchemaVisibility = "private"
	PostContentSchemaVisibilitySelected PostContentSchemaVisibility = "selected"
)

// PossiblePostContentSchemaVisibilityValues returns the possible values for the PostContentSchemaVisibility const type.
func PossiblePostContentSchemaVisibilityValues() []PostContentSchemaVisibility {
	return []PostContentSchemaVisibility{
		PostContentSchemaVisibilityAll,
		PostContentSchemaVisibilityPrivate,
		PostContentSchemaVisibilitySelected,
	}
}

// PostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel - The level of the annotation.
type PostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel string

const (
	PostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelFailure PostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel = "failure"
	PostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelNotice PostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel = "notice"
	PostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelWarning PostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel = "warning"
)

// PossiblePostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelValues returns the possible values for the PostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel const type.
func PossiblePostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelValues() []PostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel {
	return []PostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevel{
		PostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelFailure,
		PostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelNotice,
		PostRequestBodyContentApplicationJSONSchemaOutputAnnotationsItemAnnotationLevelWarning,
	}
}

// PostRequestBodyContentApplicationJSONSchemaTreeItemMode - The file mode; one of 100644 for file (blob), 100755 for executable
// (blob), 040000 for subdirectory (tree), 160000 for submodule (commit), or 120000 for a blob that specifies the path of
// a symlink.
type PostRequestBodyContentApplicationJSONSchemaTreeItemMode string

const (
	PostRequestBodyContentApplicationJSONSchemaTreeItemModeFortyThousand PostRequestBodyContentApplicationJSONSchemaTreeItemMode = "040000"
	PostRequestBodyContentApplicationJSONSchemaTreeItemModeOneHundredSixtyThousand PostRequestBodyContentApplicationJSONSchemaTreeItemMode = "160000"
	PostRequestBodyContentApplicationJSONSchemaTreeItemModeOneHundredThousandSevenHundredFiftyFive PostRequestBodyContentApplicationJSONSchemaTreeItemMode = "100755"
	PostRequestBodyContentApplicationJSONSchemaTreeItemModeOneHundredThousandSixHundredFortyFour PostRequestBodyContentApplicationJSONSchemaTreeItemMode = "100644"
	PostRequestBodyContentApplicationJSONSchemaTreeItemModeOneHundredTwentyThousand PostRequestBodyContentApplicationJSONSchemaTreeItemMode = "120000"
)

// PossiblePostRequestBodyContentApplicationJSONSchemaTreeItemModeValues returns the possible values for the PostRequestBodyContentApplicationJSONSchemaTreeItemMode const type.
func PossiblePostRequestBodyContentApplicationJSONSchemaTreeItemModeValues() []PostRequestBodyContentApplicationJSONSchemaTreeItemMode {
	return []PostRequestBodyContentApplicationJSONSchemaTreeItemMode{
		PostRequestBodyContentApplicationJSONSchemaTreeItemModeFortyThousand,
		PostRequestBodyContentApplicationJSONSchemaTreeItemModeOneHundredSixtyThousand,
		PostRequestBodyContentApplicationJSONSchemaTreeItemModeOneHundredThousandSevenHundredFiftyFive,
		PostRequestBodyContentApplicationJSONSchemaTreeItemModeOneHundredThousandSixHundredFortyFour,
		PostRequestBodyContentApplicationJSONSchemaTreeItemModeOneHundredTwentyThousand,
	}
}

// PostRequestBodyContentApplicationJSONSchemaTreeItemType - Either blob, tree, or commit.
type PostRequestBodyContentApplicationJSONSchemaTreeItemType string

const (
	PostRequestBodyContentApplicationJSONSchemaTreeItemTypeBlob PostRequestBodyContentApplicationJSONSchemaTreeItemType = "blob"
	PostRequestBodyContentApplicationJSONSchemaTreeItemTypeCommit PostRequestBodyContentApplicationJSONSchemaTreeItemType = "commit"
	PostRequestBodyContentApplicationJSONSchemaTreeItemTypeTree PostRequestBodyContentApplicationJSONSchemaTreeItemType = "tree"
)

// PossiblePostRequestBodyContentApplicationJSONSchemaTreeItemTypeValues returns the possible values for the PostRequestBodyContentApplicationJSONSchemaTreeItemType const type.
func PossiblePostRequestBodyContentApplicationJSONSchemaTreeItemTypeValues() []PostRequestBodyContentApplicationJSONSchemaTreeItemType {
	return []PostRequestBodyContentApplicationJSONSchemaTreeItemType{
		PostRequestBodyContentApplicationJSONSchemaTreeItemTypeBlob,
		PostRequestBodyContentApplicationJSONSchemaTreeItemTypeCommit,
		PostRequestBodyContentApplicationJSONSchemaTreeItemTypeTree,
	}
}

// ProjectOrganizationPermission - The baseline permission that all organization members have on this project. Only present
// if owner is an organization.
type ProjectOrganizationPermission string

const (
	ProjectOrganizationPermissionAdmin ProjectOrganizationPermission = "admin"
	ProjectOrganizationPermissionNone ProjectOrganizationPermission = "none"
	ProjectOrganizationPermissionRead ProjectOrganizationPermission = "read"
	ProjectOrganizationPermissionWrite ProjectOrganizationPermission = "write"
)

// PossibleProjectOrganizationPermissionValues returns the possible values for the ProjectOrganizationPermission const type.
func PossibleProjectOrganizationPermissionValues() []ProjectOrganizationPermission {
	return []ProjectOrganizationPermission{
		ProjectOrganizationPermissionAdmin,
		ProjectOrganizationPermissionNone,
		ProjectOrganizationPermissionRead,
		ProjectOrganizationPermissionWrite,
	}
}

// ProjectsV2ItemContentType - The type of content tracked in a project item
type ProjectsV2ItemContentType string

const (
	ProjectsV2ItemContentTypeDraftIssue ProjectsV2ItemContentType = "DraftIssue"
	ProjectsV2ItemContentTypeIssue ProjectsV2ItemContentType = "Issue"
	ProjectsV2ItemContentTypePullRequest ProjectsV2ItemContentType = "PullRequest"
)

// PossibleProjectsV2ItemContentTypeValues returns the possible values for the ProjectsV2ItemContentType const type.
func PossibleProjectsV2ItemContentTypeValues() []ProjectsV2ItemContentType {
	return []ProjectsV2ItemContentType{
		ProjectsV2ItemContentTypeDraftIssue,
		ProjectsV2ItemContentTypeIssue,
		ProjectsV2ItemContentTypePullRequest,
	}
}

// PullRequestReviewCommentSide - The side of the diff to which the comment applies. The side of the last line of the range
// for a multi-line comment
type PullRequestReviewCommentSide string

const (
	PullRequestReviewCommentSideLEFT PullRequestReviewCommentSide = "LEFT"
	PullRequestReviewCommentSideRIGHT PullRequestReviewCommentSide = "RIGHT"
)

// PossiblePullRequestReviewCommentSideValues returns the possible values for the PullRequestReviewCommentSide const type.
func PossiblePullRequestReviewCommentSideValues() []PullRequestReviewCommentSide {
	return []PullRequestReviewCommentSide{
		PullRequestReviewCommentSideLEFT,
		PullRequestReviewCommentSideRIGHT,
	}
}

// PullRequestReviewCommentStartSide - The side of the first line of the range for a multi-line comment.
type PullRequestReviewCommentStartSide string

const (
	PullRequestReviewCommentStartSideLEFT PullRequestReviewCommentStartSide = "LEFT"
	PullRequestReviewCommentStartSideRIGHT PullRequestReviewCommentStartSide = "RIGHT"
)

// PossiblePullRequestReviewCommentStartSideValues returns the possible values for the PullRequestReviewCommentStartSide const type.
func PossiblePullRequestReviewCommentStartSideValues() []PullRequestReviewCommentStartSide {
	return []PullRequestReviewCommentStartSide{
		PullRequestReviewCommentStartSideLEFT,
		PullRequestReviewCommentStartSideRIGHT,
	}
}

// PullRequestState - State of this Pull Request. Either open or closed.
type PullRequestState string

const (
	PullRequestStateClosed PullRequestState = "closed"
	PullRequestStateOpen PullRequestState = "open"
)

// PossiblePullRequestStateValues returns the possible values for the PullRequestState const type.
func PossiblePullRequestStateValues() []PullRequestState {
	return []PullRequestState{
		PullRequestStateClosed,
		PullRequestStateOpen,
	}
}

// PutContentSchemaBuildType - The process by which the GitHub Pages site will be built. workflow means that the site is built
// by a custom GitHub Actions workflow. legacy means that the site is built by GitHub when changes are
// pushed to a specific branch.
type PutContentSchemaBuildType string

const (
	PutContentSchemaBuildTypeLegacy PutContentSchemaBuildType = "legacy"
	PutContentSchemaBuildTypeWorkflow PutContentSchemaBuildType = "workflow"
)

// PossiblePutContentSchemaBuildTypeValues returns the possible values for the PutContentSchemaBuildType const type.
func PossiblePutContentSchemaBuildTypeValues() []PutContentSchemaBuildType {
	return []PutContentSchemaBuildType{
		PutContentSchemaBuildTypeLegacy,
		PutContentSchemaBuildTypeWorkflow,
	}
}

type PutContentSchemaEvent string

const (
	PutContentSchemaEventDISMISS PutContentSchemaEvent = "DISMISS"
)

// PossiblePutContentSchemaEventValues returns the possible values for the PutContentSchemaEvent const type.
func PossiblePutContentSchemaEventValues() []PutContentSchemaEvent {
	return []PutContentSchemaEvent{
		PutContentSchemaEventDISMISS,
	}
}

// PutContentSchemaLockReason - The reason for locking the issue or pull request conversation. Lock will fail if you don't
// use one of these reasons:
// * off-topic
// * too heated
// * resolved
// * spam
type PutContentSchemaLockReason string

const (
	PutContentSchemaLockReasonOffTopic PutContentSchemaLockReason = "off-topic"
	PutContentSchemaLockReasonResolved PutContentSchemaLockReason = "resolved"
	PutContentSchemaLockReasonSpam PutContentSchemaLockReason = "spam"
	PutContentSchemaLockReasonTooHeated PutContentSchemaLockReason = "too heated"
)

// PossiblePutContentSchemaLockReasonValues returns the possible values for the PutContentSchemaLockReason const type.
func PossiblePutContentSchemaLockReasonValues() []PutContentSchemaLockReason {
	return []PutContentSchemaLockReason{
		PutContentSchemaLockReasonOffTopic,
		PutContentSchemaLockReasonResolved,
		PutContentSchemaLockReasonSpam,
		PutContentSchemaLockReasonTooHeated,
	}
}

// PutContentSchemaMergeMethod - The merge method to use.
type PutContentSchemaMergeMethod string

const (
	PutContentSchemaMergeMethodMerge PutContentSchemaMergeMethod = "merge"
	PutContentSchemaMergeMethodRebase PutContentSchemaMergeMethod = "rebase"
	PutContentSchemaMergeMethodSquash PutContentSchemaMergeMethod = "squash"
)

// PossiblePutContentSchemaMergeMethodValues returns the possible values for the PutContentSchemaMergeMethod const type.
func PossiblePutContentSchemaMergeMethodValues() []PutContentSchemaMergeMethod {
	return []PutContentSchemaMergeMethod{
		PutContentSchemaMergeMethodMerge,
		PutContentSchemaMergeMethodRebase,
		PutContentSchemaMergeMethodSquash,
	}
}

// PutContentSchemaPermission - The permission to grant to the team for this project. Default: the team's permission attribute
// will be used to determine what permission to grant the team on this project. Note that, if you choose not
// to pass any parameters, you'll need to set Content-Length to zero when calling this endpoint. For more information, see
// "HTTP verbs
// [https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs]."
type PutContentSchemaPermission string

const (
	PutContentSchemaPermissionAdmin PutContentSchemaPermission = "admin"
	PutContentSchemaPermissionRead PutContentSchemaPermission = "read"
	PutContentSchemaPermissionWrite PutContentSchemaPermission = "write"
)

// PossiblePutContentSchemaPermissionValues returns the possible values for the PutContentSchemaPermission const type.
func PossiblePutContentSchemaPermissionValues() []PutContentSchemaPermission {
	return []PutContentSchemaPermission{
		PutContentSchemaPermissionAdmin,
		PutContentSchemaPermissionRead,
		PutContentSchemaPermissionWrite,
	}
}

// PutContentSchemaRole - The role to give the user in the organization. Can be one of:
// * admin - The user will become an owner of the organization.
// * member - The user will become a non-owner member of the organization.
type PutContentSchemaRole string

const (
	PutContentSchemaRoleAdmin PutContentSchemaRole = "admin"
	PutContentSchemaRoleMember PutContentSchemaRole = "member"
)

// PossiblePutContentSchemaRoleValues returns the possible values for the PutContentSchemaRole const type.
func PossiblePutContentSchemaRoleValues() []PutContentSchemaRole {
	return []PutContentSchemaRole{
		PutContentSchemaRoleAdmin,
		PutContentSchemaRoleMember,
	}
}

// PutContentSchemaSource1Path - The repository directory that includes the source files for the Pages site. Allowed paths
// are / or /docs.
type PutContentSchemaSource1Path string

const (
	PutContentSchemaSource1PathDocs PutContentSchemaSource1Path = "/docs"
	PutContentSchemaSource1PathSlash PutContentSchemaSource1Path = "/"
)

// PossiblePutContentSchemaSource1PathValues returns the possible values for the PutContentSchemaSource1Path const type.
func PossiblePutContentSchemaSource1PathValues() []PutContentSchemaSource1Path {
	return []PutContentSchemaSource1Path{
		PutContentSchemaSource1PathDocs,
		PutContentSchemaSource1PathSlash,
	}
}

// PutContentSchemaVcs - The originating VCS type. Without this parameter, the import job will take additional time to detect
// the VCS type before beginning the import. This detection step will be reflected in the response.
type PutContentSchemaVcs string

const (
	PutContentSchemaVcsGit PutContentSchemaVcs = "git"
	PutContentSchemaVcsMercurial PutContentSchemaVcs = "mercurial"
	PutContentSchemaVcsSubversion PutContentSchemaVcs = "subversion"
	PutContentSchemaVcsTfvc PutContentSchemaVcs = "tfvc"
)

// PossiblePutContentSchemaVcsValues returns the possible values for the PutContentSchemaVcs const type.
func PossiblePutContentSchemaVcsValues() []PutContentSchemaVcs {
	return []PutContentSchemaVcs{
		PutContentSchemaVcsGit,
		PutContentSchemaVcsMercurial,
		PutContentSchemaVcsSubversion,
		PutContentSchemaVcsTfvc,
	}
}

// PutContentSchemaVisibility - Which type of organization repositories have access to the organization secret. selected means
// only the repositories specified by selected_repository_ids can access the secret.
type PutContentSchemaVisibility string

const (
	PutContentSchemaVisibilityAll PutContentSchemaVisibility = "all"
	PutContentSchemaVisibilityPrivate PutContentSchemaVisibility = "private"
	PutContentSchemaVisibilitySelected PutContentSchemaVisibility = "selected"
)

// PossiblePutContentSchemaVisibilityValues returns the possible values for the PutContentSchemaVisibility const type.
func PossiblePutContentSchemaVisibilityValues() []PutContentSchemaVisibility {
	return []PutContentSchemaVisibility{
		PutContentSchemaVisibilityAll,
		PutContentSchemaVisibilityPrivate,
		PutContentSchemaVisibilitySelected,
	}
}

// ReactionContent - The reaction to use
type ReactionContent string

const (
	ReactionContentThumbsUp ReactionContent = "+1"
	ReactionContentThumbsDown ReactionContent = "-1"
	ReactionContentConfused ReactionContent = "confused"
	ReactionContentEyes ReactionContent = "eyes"
	ReactionContentHeart ReactionContent = "heart"
	ReactionContentHooray ReactionContent = "hooray"
	ReactionContentLaugh ReactionContent = "laugh"
	ReactionContentRocket ReactionContent = "rocket"
)

// PossibleReactionContentValues returns the possible values for the ReactionContent const type.
func PossibleReactionContentValues() []ReactionContent {
	return []ReactionContent{
		ReactionContentThumbsUp,
		ReactionContentThumbsDown,
		ReactionContentConfused,
		ReactionContentEyes,
		ReactionContentHeart,
		ReactionContentHooray,
		ReactionContentLaugh,
		ReactionContentRocket,
	}
}

// ReleaseAssetState - State of the release asset.
type ReleaseAssetState string

const (
	ReleaseAssetStateOpen ReleaseAssetState = "open"
	ReleaseAssetStateUploaded ReleaseAssetState = "uploaded"
)

// PossibleReleaseAssetStateValues returns the possible values for the ReleaseAssetState const type.
func PossibleReleaseAssetStateValues() []ReleaseAssetState {
	return []ReleaseAssetState{
		ReleaseAssetStateOpen,
		ReleaseAssetStateUploaded,
	}
}

type RepoRequiredWorkflowState string

const (
	RepoRequiredWorkflowStateActive RepoRequiredWorkflowState = "active"
	RepoRequiredWorkflowStateDeleted RepoRequiredWorkflowState = "deleted"
)

// PossibleRepoRequiredWorkflowStateValues returns the possible values for the RepoRequiredWorkflowState const type.
func PossibleRepoRequiredWorkflowStateValues() []RepoRequiredWorkflowState {
	return []RepoRequiredWorkflowState{
		RepoRequiredWorkflowStateActive,
		RepoRequiredWorkflowStateDeleted,
	}
}

// RepositoryInvitationPermissions - The permission associated with the invitation.
type RepositoryInvitationPermissions string

const (
	RepositoryInvitationPermissionsAdmin RepositoryInvitationPermissions = "admin"
	RepositoryInvitationPermissionsMaintain RepositoryInvitationPermissions = "maintain"
	RepositoryInvitationPermissionsRead RepositoryInvitationPermissions = "read"
	RepositoryInvitationPermissionsTriage RepositoryInvitationPermissions = "triage"
	RepositoryInvitationPermissionsWrite RepositoryInvitationPermissions = "write"
)

// PossibleRepositoryInvitationPermissionsValues returns the possible values for the RepositoryInvitationPermissions const type.
func PossibleRepositoryInvitationPermissionsValues() []RepositoryInvitationPermissions {
	return []RepositoryInvitationPermissions{
		RepositoryInvitationPermissionsAdmin,
		RepositoryInvitationPermissionsMaintain,
		RepositoryInvitationPermissionsRead,
		RepositoryInvitationPermissionsTriage,
		RepositoryInvitationPermissionsWrite,
	}
}

// RepositoryMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type RepositoryMergeCommitMessage string

const (
	RepositoryMergeCommitMessageBLANK RepositoryMergeCommitMessage = "BLANK"
	RepositoryMergeCommitMessagePRBODY RepositoryMergeCommitMessage = "PR_BODY"
	RepositoryMergeCommitMessagePRTITLE RepositoryMergeCommitMessage = "PR_TITLE"
)

// PossibleRepositoryMergeCommitMessageValues returns the possible values for the RepositoryMergeCommitMessage const type.
func PossibleRepositoryMergeCommitMessageValues() []RepositoryMergeCommitMessage {
	return []RepositoryMergeCommitMessage{
		RepositoryMergeCommitMessageBLANK,
		RepositoryMergeCommitMessagePRBODY,
		RepositoryMergeCommitMessagePRTITLE,
	}
}

// RepositoryMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type RepositoryMergeCommitTitle string

const (
	RepositoryMergeCommitTitleMERGEMESSAGE RepositoryMergeCommitTitle = "MERGE_MESSAGE"
	RepositoryMergeCommitTitlePRTITLE RepositoryMergeCommitTitle = "PR_TITLE"
)

// PossibleRepositoryMergeCommitTitleValues returns the possible values for the RepositoryMergeCommitTitle const type.
func PossibleRepositoryMergeCommitTitleValues() []RepositoryMergeCommitTitle {
	return []RepositoryMergeCommitTitle{
		RepositoryMergeCommitTitleMERGEMESSAGE,
		RepositoryMergeCommitTitlePRTITLE,
	}
}

// RepositorySquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type RepositorySquashMergeCommitMessage string

const (
	RepositorySquashMergeCommitMessageBLANK RepositorySquashMergeCommitMessage = "BLANK"
	RepositorySquashMergeCommitMessageCOMMITMESSAGES RepositorySquashMergeCommitMessage = "COMMIT_MESSAGES"
	RepositorySquashMergeCommitMessagePRBODY RepositorySquashMergeCommitMessage = "PR_BODY"
)

// PossibleRepositorySquashMergeCommitMessageValues returns the possible values for the RepositorySquashMergeCommitMessage const type.
func PossibleRepositorySquashMergeCommitMessageValues() []RepositorySquashMergeCommitMessage {
	return []RepositorySquashMergeCommitMessage{
		RepositorySquashMergeCommitMessageBLANK,
		RepositorySquashMergeCommitMessageCOMMITMESSAGES,
		RepositorySquashMergeCommitMessagePRBODY,
	}
}

// RepositorySquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type RepositorySquashMergeCommitTitle string

const (
	RepositorySquashMergeCommitTitleCOMMITORPRTITLE RepositorySquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	RepositorySquashMergeCommitTitlePRTITLE RepositorySquashMergeCommitTitle = "PR_TITLE"
)

// PossibleRepositorySquashMergeCommitTitleValues returns the possible values for the RepositorySquashMergeCommitTitle const type.
func PossibleRepositorySquashMergeCommitTitleValues() []RepositorySquashMergeCommitTitle {
	return []RepositorySquashMergeCommitTitle{
		RepositorySquashMergeCommitTitleCOMMITORPRTITLE,
		RepositorySquashMergeCommitTitlePRTITLE,
	}
}

// RepositoryTemplateRepositoryMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type RepositoryTemplateRepositoryMergeCommitMessage string

const (
	RepositoryTemplateRepositoryMergeCommitMessageBLANK RepositoryTemplateRepositoryMergeCommitMessage = "BLANK"
	RepositoryTemplateRepositoryMergeCommitMessagePRBODY RepositoryTemplateRepositoryMergeCommitMessage = "PR_BODY"
	RepositoryTemplateRepositoryMergeCommitMessagePRTITLE RepositoryTemplateRepositoryMergeCommitMessage = "PR_TITLE"
)

// PossibleRepositoryTemplateRepositoryMergeCommitMessageValues returns the possible values for the RepositoryTemplateRepositoryMergeCommitMessage const type.
func PossibleRepositoryTemplateRepositoryMergeCommitMessageValues() []RepositoryTemplateRepositoryMergeCommitMessage {
	return []RepositoryTemplateRepositoryMergeCommitMessage{
		RepositoryTemplateRepositoryMergeCommitMessageBLANK,
		RepositoryTemplateRepositoryMergeCommitMessagePRBODY,
		RepositoryTemplateRepositoryMergeCommitMessagePRTITLE,
	}
}

// RepositoryTemplateRepositoryMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type RepositoryTemplateRepositoryMergeCommitTitle string

const (
	RepositoryTemplateRepositoryMergeCommitTitleMERGEMESSAGE RepositoryTemplateRepositoryMergeCommitTitle = "MERGE_MESSAGE"
	RepositoryTemplateRepositoryMergeCommitTitlePRTITLE RepositoryTemplateRepositoryMergeCommitTitle = "PR_TITLE"
)

// PossibleRepositoryTemplateRepositoryMergeCommitTitleValues returns the possible values for the RepositoryTemplateRepositoryMergeCommitTitle const type.
func PossibleRepositoryTemplateRepositoryMergeCommitTitleValues() []RepositoryTemplateRepositoryMergeCommitTitle {
	return []RepositoryTemplateRepositoryMergeCommitTitle{
		RepositoryTemplateRepositoryMergeCommitTitleMERGEMESSAGE,
		RepositoryTemplateRepositoryMergeCommitTitlePRTITLE,
	}
}

// RepositoryTemplateRepositorySquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type RepositoryTemplateRepositorySquashMergeCommitMessage string

const (
	RepositoryTemplateRepositorySquashMergeCommitMessageBLANK RepositoryTemplateRepositorySquashMergeCommitMessage = "BLANK"
	RepositoryTemplateRepositorySquashMergeCommitMessageCOMMITMESSAGES RepositoryTemplateRepositorySquashMergeCommitMessage = "COMMIT_MESSAGES"
	RepositoryTemplateRepositorySquashMergeCommitMessagePRBODY RepositoryTemplateRepositorySquashMergeCommitMessage = "PR_BODY"
)

// PossibleRepositoryTemplateRepositorySquashMergeCommitMessageValues returns the possible values for the RepositoryTemplateRepositorySquashMergeCommitMessage const type.
func PossibleRepositoryTemplateRepositorySquashMergeCommitMessageValues() []RepositoryTemplateRepositorySquashMergeCommitMessage {
	return []RepositoryTemplateRepositorySquashMergeCommitMessage{
		RepositoryTemplateRepositorySquashMergeCommitMessageBLANK,
		RepositoryTemplateRepositorySquashMergeCommitMessageCOMMITMESSAGES,
		RepositoryTemplateRepositorySquashMergeCommitMessagePRBODY,
	}
}

// RepositoryTemplateRepositorySquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type RepositoryTemplateRepositorySquashMergeCommitTitle string

const (
	RepositoryTemplateRepositorySquashMergeCommitTitleCOMMITORPRTITLE RepositoryTemplateRepositorySquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	RepositoryTemplateRepositorySquashMergeCommitTitlePRTITLE RepositoryTemplateRepositorySquashMergeCommitTitle = "PR_TITLE"
)

// PossibleRepositoryTemplateRepositorySquashMergeCommitTitleValues returns the possible values for the RepositoryTemplateRepositorySquashMergeCommitTitle const type.
func PossibleRepositoryTemplateRepositorySquashMergeCommitTitleValues() []RepositoryTemplateRepositorySquashMergeCommitTitle {
	return []RepositoryTemplateRepositorySquashMergeCommitTitle{
		RepositoryTemplateRepositorySquashMergeCommitTitleCOMMITORPRTITLE,
		RepositoryTemplateRepositorySquashMergeCommitTitlePRTITLE,
	}
}

// RequiredWorkflowScope - Scope of the required workflow
type RequiredWorkflowScope string

const (
	RequiredWorkflowScopeAll RequiredWorkflowScope = "all"
	RequiredWorkflowScopeSelected RequiredWorkflowScope = "selected"
)

// PossibleRequiredWorkflowScopeValues returns the possible values for the RequiredWorkflowScope const type.
func PossibleRequiredWorkflowScopeValues() []RequiredWorkflowScope {
	return []RequiredWorkflowScope{
		RequiredWorkflowScopeAll,
		RequiredWorkflowScopeSelected,
	}
}

// RequiredWorkflowState - State of the required workflow
type RequiredWorkflowState string

const (
	RequiredWorkflowStateActive RequiredWorkflowState = "active"
	RequiredWorkflowStateDeleted RequiredWorkflowState = "deleted"
)

// PossibleRequiredWorkflowStateValues returns the possible values for the RequiredWorkflowState const type.
func PossibleRequiredWorkflowStateValues() []RequiredWorkflowState {
	return []RequiredWorkflowState{
		RequiredWorkflowStateActive,
		RequiredWorkflowStateDeleted,
	}
}

// ReviewCommentSide - The side of the first line of the range for a multi-line comment.
type ReviewCommentSide string

const (
	ReviewCommentSideLEFT ReviewCommentSide = "LEFT"
	ReviewCommentSideRIGHT ReviewCommentSide = "RIGHT"
)

// PossibleReviewCommentSideValues returns the possible values for the ReviewCommentSide const type.
func PossibleReviewCommentSideValues() []ReviewCommentSide {
	return []ReviewCommentSide{
		ReviewCommentSideLEFT,
		ReviewCommentSideRIGHT,
	}
}

// ReviewCommentStartSide - The side of the first line of the range for a multi-line comment.
type ReviewCommentStartSide string

const (
	ReviewCommentStartSideLEFT ReviewCommentStartSide = "LEFT"
	ReviewCommentStartSideRIGHT ReviewCommentStartSide = "RIGHT"
)

// PossibleReviewCommentStartSideValues returns the possible values for the ReviewCommentStartSide const type.
func PossibleReviewCommentStartSideValues() []ReviewCommentStartSide {
	return []ReviewCommentStartSide{
		ReviewCommentStartSideLEFT,
		ReviewCommentStartSideRIGHT,
	}
}

// RunnerLabelType - The type of label. Read-only labels are applied automatically when the runner is configured.
type RunnerLabelType string

const (
	RunnerLabelTypeCustom RunnerLabelType = "custom"
	RunnerLabelTypeReadOnly RunnerLabelType = "read-only"
)

// PossibleRunnerLabelTypeValues returns the possible values for the RunnerLabelType const type.
func PossibleRunnerLabelTypeValues() []RunnerLabelType {
	return []RunnerLabelType{
		RunnerLabelTypeCustom,
		RunnerLabelTypeReadOnly,
	}
}

// SecretScanningAlertResolution - Required when the state is resolved. The reason for resolving the alert.
type SecretScanningAlertResolution string

const (
	SecretScanningAlertResolutionFalsePositive SecretScanningAlertResolution = "false_positive"
	SecretScanningAlertResolutionNull SecretScanningAlertResolution = "null"
	SecretScanningAlertResolutionRevoked SecretScanningAlertResolution = "revoked"
	SecretScanningAlertResolutionUsedInTests SecretScanningAlertResolution = "used_in_tests"
	SecretScanningAlertResolutionWontFix SecretScanningAlertResolution = "wont_fix"
)

// PossibleSecretScanningAlertResolutionValues returns the possible values for the SecretScanningAlertResolution const type.
func PossibleSecretScanningAlertResolutionValues() []SecretScanningAlertResolution {
	return []SecretScanningAlertResolution{
		SecretScanningAlertResolutionFalsePositive,
		SecretScanningAlertResolutionNull,
		SecretScanningAlertResolutionRevoked,
		SecretScanningAlertResolutionUsedInTests,
		SecretScanningAlertResolutionWontFix,
	}
}

// SecretScanningAlertState - Sets the state of the secret scanning alert. You must provide resolution when you set the state
// to resolved.
type SecretScanningAlertState string

const (
	SecretScanningAlertStateOpen SecretScanningAlertState = "open"
	SecretScanningAlertStateResolved SecretScanningAlertState = "resolved"
)

// PossibleSecretScanningAlertStateValues returns the possible values for the SecretScanningAlertState const type.
func PossibleSecretScanningAlertStateValues() []SecretScanningAlertState {
	return []SecretScanningAlertState{
		SecretScanningAlertStateOpen,
		SecretScanningAlertStateResolved,
	}
}

// SecretScanningLocationType - The location type. Because secrets may be found in different types of resources (ie. code,
// comments, issues), this field identifies the type of resource where the secret was found.
type SecretScanningLocationType string

const (
	SecretScanningLocationTypeCommit SecretScanningLocationType = "commit"
	SecretScanningLocationTypeIssueBody SecretScanningLocationType = "issue_body"
	SecretScanningLocationTypeIssueComment SecretScanningLocationType = "issue_comment"
	SecretScanningLocationTypeIssueTitle SecretScanningLocationType = "issue_title"
)

// PossibleSecretScanningLocationTypeValues returns the possible values for the SecretScanningLocationType const type.
func PossibleSecretScanningLocationTypeValues() []SecretScanningLocationType {
	return []SecretScanningLocationType{
		SecretScanningLocationTypeCommit,
		SecretScanningLocationTypeIssueBody,
		SecretScanningLocationTypeIssueComment,
		SecretScanningLocationTypeIssueTitle,
	}
}

type SecurityAndAnalysisAdvancedSecurityStatus string

const (
	SecurityAndAnalysisAdvancedSecurityStatusDisabled SecurityAndAnalysisAdvancedSecurityStatus = "disabled"
	SecurityAndAnalysisAdvancedSecurityStatusEnabled SecurityAndAnalysisAdvancedSecurityStatus = "enabled"
)

// PossibleSecurityAndAnalysisAdvancedSecurityStatusValues returns the possible values for the SecurityAndAnalysisAdvancedSecurityStatus const type.
func PossibleSecurityAndAnalysisAdvancedSecurityStatusValues() []SecurityAndAnalysisAdvancedSecurityStatus {
	return []SecurityAndAnalysisAdvancedSecurityStatus{
		SecurityAndAnalysisAdvancedSecurityStatusDisabled,
		SecurityAndAnalysisAdvancedSecurityStatusEnabled,
	}
}

type SecurityAndAnalysisSecretScanningPushProtectionStatus string

const (
	SecurityAndAnalysisSecretScanningPushProtectionStatusDisabled SecurityAndAnalysisSecretScanningPushProtectionStatus = "disabled"
	SecurityAndAnalysisSecretScanningPushProtectionStatusEnabled SecurityAndAnalysisSecretScanningPushProtectionStatus = "enabled"
)

// PossibleSecurityAndAnalysisSecretScanningPushProtectionStatusValues returns the possible values for the SecurityAndAnalysisSecretScanningPushProtectionStatus const type.
func PossibleSecurityAndAnalysisSecretScanningPushProtectionStatusValues() []SecurityAndAnalysisSecretScanningPushProtectionStatus {
	return []SecurityAndAnalysisSecretScanningPushProtectionStatus{
		SecurityAndAnalysisSecretScanningPushProtectionStatusDisabled,
		SecurityAndAnalysisSecretScanningPushProtectionStatusEnabled,
	}
}

type SecurityAndAnalysisSecretScanningStatus string

const (
	SecurityAndAnalysisSecretScanningStatusDisabled SecurityAndAnalysisSecretScanningStatus = "disabled"
	SecurityAndAnalysisSecretScanningStatusEnabled SecurityAndAnalysisSecretScanningStatus = "enabled"
)

// PossibleSecurityAndAnalysisSecretScanningStatusValues returns the possible values for the SecurityAndAnalysisSecretScanningStatus const type.
func PossibleSecurityAndAnalysisSecretScanningStatusValues() []SecurityAndAnalysisSecretScanningStatus {
	return []SecurityAndAnalysisSecretScanningStatus{
		SecurityAndAnalysisSecretScanningStatusDisabled,
		SecurityAndAnalysisSecretScanningStatusEnabled,
	}
}

type SimpleCheckSuiteConclusion string

const (
	SimpleCheckSuiteConclusionActionRequired SimpleCheckSuiteConclusion = "action_required"
	SimpleCheckSuiteConclusionCancelled SimpleCheckSuiteConclusion = "cancelled"
	SimpleCheckSuiteConclusionFailure SimpleCheckSuiteConclusion = "failure"
	SimpleCheckSuiteConclusionNeutral SimpleCheckSuiteConclusion = "neutral"
	SimpleCheckSuiteConclusionSkipped SimpleCheckSuiteConclusion = "skipped"
	SimpleCheckSuiteConclusionStale SimpleCheckSuiteConclusion = "stale"
	SimpleCheckSuiteConclusionStartupFailure SimpleCheckSuiteConclusion = "startup_failure"
	SimpleCheckSuiteConclusionSuccess SimpleCheckSuiteConclusion = "success"
	SimpleCheckSuiteConclusionTimedOut SimpleCheckSuiteConclusion = "timed_out"
)

// PossibleSimpleCheckSuiteConclusionValues returns the possible values for the SimpleCheckSuiteConclusion const type.
func PossibleSimpleCheckSuiteConclusionValues() []SimpleCheckSuiteConclusion {
	return []SimpleCheckSuiteConclusion{
		SimpleCheckSuiteConclusionActionRequired,
		SimpleCheckSuiteConclusionCancelled,
		SimpleCheckSuiteConclusionFailure,
		SimpleCheckSuiteConclusionNeutral,
		SimpleCheckSuiteConclusionSkipped,
		SimpleCheckSuiteConclusionStale,
		SimpleCheckSuiteConclusionStartupFailure,
		SimpleCheckSuiteConclusionSuccess,
		SimpleCheckSuiteConclusionTimedOut,
	}
}

type SimpleCheckSuiteStatus string

const (
	SimpleCheckSuiteStatusCompleted SimpleCheckSuiteStatus = "completed"
	SimpleCheckSuiteStatusInProgress SimpleCheckSuiteStatus = "in_progress"
	SimpleCheckSuiteStatusPending SimpleCheckSuiteStatus = "pending"
	SimpleCheckSuiteStatusQueued SimpleCheckSuiteStatus = "queued"
	SimpleCheckSuiteStatusWaiting SimpleCheckSuiteStatus = "waiting"
)

// PossibleSimpleCheckSuiteStatusValues returns the possible values for the SimpleCheckSuiteStatus const type.
func PossibleSimpleCheckSuiteStatusValues() []SimpleCheckSuiteStatus {
	return []SimpleCheckSuiteStatus{
		SimpleCheckSuiteStatusCompleted,
		SimpleCheckSuiteStatusInProgress,
		SimpleCheckSuiteStatusPending,
		SimpleCheckSuiteStatusQueued,
		SimpleCheckSuiteStatusWaiting,
	}
}

// TeamFullPrivacy - The level of privacy this team should have
type TeamFullPrivacy string

const (
	TeamFullPrivacyClosed TeamFullPrivacy = "closed"
	TeamFullPrivacySecret TeamFullPrivacy = "secret"
)

// PossibleTeamFullPrivacyValues returns the possible values for the TeamFullPrivacy const type.
func PossibleTeamFullPrivacyValues() []TeamFullPrivacy {
	return []TeamFullPrivacy{
		TeamFullPrivacyClosed,
		TeamFullPrivacySecret,
	}
}

// TeamMembershipRole - The role of the user in the team.
type TeamMembershipRole string

const (
	TeamMembershipRoleMaintainer TeamMembershipRole = "maintainer"
	TeamMembershipRoleMember TeamMembershipRole = "member"
)

// PossibleTeamMembershipRoleValues returns the possible values for the TeamMembershipRole const type.
func PossibleTeamMembershipRoleValues() []TeamMembershipRole {
	return []TeamMembershipRole{
		TeamMembershipRoleMaintainer,
		TeamMembershipRoleMember,
	}
}

// TeamMembershipState - The state of the user's membership in the team.
type TeamMembershipState string

const (
	TeamMembershipStateActive TeamMembershipState = "active"
	TeamMembershipStatePending TeamMembershipState = "pending"
)

// PossibleTeamMembershipStateValues returns the possible values for the TeamMembershipState const type.
func PossibleTeamMembershipStateValues() []TeamMembershipState {
	return []TeamMembershipState{
		TeamMembershipStateActive,
		TeamMembershipStatePending,
	}
}

type WebhookBranchProtectionRuleCreatedAction string

const (
	WebhookBranchProtectionRuleCreatedActionCreated WebhookBranchProtectionRuleCreatedAction = "created"
)

// PossibleWebhookBranchProtectionRuleCreatedActionValues returns the possible values for the WebhookBranchProtectionRuleCreatedAction const type.
func PossibleWebhookBranchProtectionRuleCreatedActionValues() []WebhookBranchProtectionRuleCreatedAction {
	return []WebhookBranchProtectionRuleCreatedAction{
		WebhookBranchProtectionRuleCreatedActionCreated,
	}
}

type WebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel string

const (
	WebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevelEveryone WebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevelNonAdmins WebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevelOff WebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevelValues() []WebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel {
	return []WebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevel{
		WebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevelEveryone,
		WebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleCreatedRuleAllowDeletionsEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevel string

const (
	WebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevelEveryone WebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevelNonAdmins WebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevelOff WebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevelValues() []WebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevel {
	return []WebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevel{
		WebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevelEveryone,
		WebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleCreatedRuleAllowForcePushesEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevel string

const (
	WebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevelEveryone WebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevelNonAdmins WebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevelOff WebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevelValues() []WebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevel {
	return []WebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevel{
		WebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevelEveryone,
		WebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleCreatedRuleLinearHistoryRequirementEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevel string

const (
	WebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevelEveryone WebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevelNonAdmins WebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevelOff WebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevelValues() []WebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevel {
	return []WebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevel{
		WebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevelEveryone,
		WebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleCreatedRuleMergeQueueEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevel string

const (
	WebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevelEveryone WebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevelNonAdmins WebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevelOff WebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevelValues() []WebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevel {
	return []WebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevel{
		WebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevelEveryone,
		WebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleCreatedRulePullRequestReviewsEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevel string

const (
	WebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevelEveryone WebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevel = "everyone"
	WebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevelNonAdmins WebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevel = "non_admins"
	WebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevelOff WebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevel = "off"
)

// PossibleWebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevelValues returns the possible values for the WebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevel const type.
func PossibleWebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevelValues() []WebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevel {
	return []WebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevel{
		WebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevelEveryone,
		WebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevelNonAdmins,
		WebhookBranchProtectionRuleCreatedRuleRequiredConversationResolutionLevelOff,
	}
}

type WebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevel string

const (
	WebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevelEveryone WebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevelNonAdmins WebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevelOff WebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevelValues() []WebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevel {
	return []WebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevel{
		WebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevelEveryone,
		WebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleCreatedRuleRequiredDeploymentsEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevel string

const (
	WebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevelEveryone WebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevelNonAdmins WebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevelOff WebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevelValues() []WebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevel {
	return []WebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevel{
		WebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevelEveryone,
		WebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleCreatedRuleRequiredStatusChecksEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevel string

const (
	WebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevelEveryone WebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevelNonAdmins WebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevelOff WebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevelValues() []WebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevel {
	return []WebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevel{
		WebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevelEveryone,
		WebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleCreatedRuleSignatureRequirementEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleDeletedAction string

const (
	WebhookBranchProtectionRuleDeletedActionDeleted WebhookBranchProtectionRuleDeletedAction = "deleted"
)

// PossibleWebhookBranchProtectionRuleDeletedActionValues returns the possible values for the WebhookBranchProtectionRuleDeletedAction const type.
func PossibleWebhookBranchProtectionRuleDeletedActionValues() []WebhookBranchProtectionRuleDeletedAction {
	return []WebhookBranchProtectionRuleDeletedAction{
		WebhookBranchProtectionRuleDeletedActionDeleted,
	}
}

type WebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevel string

const (
	WebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevelEveryone WebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevelNonAdmins WebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevelOff WebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevelValues() []WebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevel {
	return []WebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevel{
		WebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevelEveryone,
		WebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleDeletedRuleAllowDeletionsEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevel string

const (
	WebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevelEveryone WebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevelNonAdmins WebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevelOff WebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevelValues() []WebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevel {
	return []WebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevel{
		WebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevelEveryone,
		WebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleDeletedRuleAllowForcePushesEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevel string

const (
	WebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevelEveryone WebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevelNonAdmins WebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevelOff WebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevelValues() []WebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevel {
	return []WebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevel{
		WebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevelEveryone,
		WebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleDeletedRuleLinearHistoryRequirementEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevel string

const (
	WebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevelEveryone WebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevelNonAdmins WebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevelOff WebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevelValues() []WebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevel {
	return []WebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevel{
		WebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevelEveryone,
		WebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleDeletedRuleMergeQueueEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevel string

const (
	WebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevelEveryone WebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevelNonAdmins WebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevelOff WebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevelValues() []WebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevel {
	return []WebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevel{
		WebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevelEveryone,
		WebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleDeletedRulePullRequestReviewsEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevel string

const (
	WebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevelEveryone WebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevel = "everyone"
	WebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevelNonAdmins WebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevel = "non_admins"
	WebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevelOff WebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevel = "off"
)

// PossibleWebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevelValues returns the possible values for the WebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevel const type.
func PossibleWebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevelValues() []WebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevel {
	return []WebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevel{
		WebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevelEveryone,
		WebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevelNonAdmins,
		WebhookBranchProtectionRuleDeletedRuleRequiredConversationResolutionLevelOff,
	}
}

type WebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevel string

const (
	WebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevelEveryone WebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevelNonAdmins WebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevelOff WebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevelValues() []WebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevel {
	return []WebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevel{
		WebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevelEveryone,
		WebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleDeletedRuleRequiredDeploymentsEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevel string

const (
	WebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevelEveryone WebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevelNonAdmins WebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevelOff WebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevelValues() []WebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevel {
	return []WebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevel{
		WebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevelEveryone,
		WebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleDeletedRuleRequiredStatusChecksEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevel string

const (
	WebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevelEveryone WebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevelNonAdmins WebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevelOff WebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevelValues() []WebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevel {
	return []WebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevel{
		WebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevelEveryone,
		WebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleDeletedRuleSignatureRequirementEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleEditedAction string

const (
	WebhookBranchProtectionRuleEditedActionEdited WebhookBranchProtectionRuleEditedAction = "edited"
)

// PossibleWebhookBranchProtectionRuleEditedActionValues returns the possible values for the WebhookBranchProtectionRuleEditedAction const type.
func PossibleWebhookBranchProtectionRuleEditedActionValues() []WebhookBranchProtectionRuleEditedAction {
	return []WebhookBranchProtectionRuleEditedAction{
		WebhookBranchProtectionRuleEditedActionEdited,
	}
}

type WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFrom string

const (
	WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFromEveryone WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFrom = "everyone"
	WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFromNonAdmins WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFrom = "non_admins"
	WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFromOff WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFrom = "off"
)

// PossibleWebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFromValues returns the possible values for the WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFrom const type.
func PossibleWebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFromValues() []WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFrom {
	return []WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFrom{
		WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFromEveryone,
		WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFromNonAdmins,
		WebhookBranchProtectionRuleEditedChangesLinearHistoryRequirementEnforcementLevelFromOff,
	}
}

type WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFrom string

const (
	WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFromEveryone WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFrom = "everyone"
	WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFromNonAdmins WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFrom = "non_admins"
	WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFromOff WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFrom = "off"
)

// PossibleWebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFromValues returns the possible values for the WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFrom const type.
func PossibleWebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFromValues() []WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFrom {
	return []WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFrom{
		WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFromEveryone,
		WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFromNonAdmins,
		WebhookBranchProtectionRuleEditedChangesRequiredStatusChecksEnforcementLevelFromOff,
	}
}

type WebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevel string

const (
	WebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevelEveryone WebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevelNonAdmins WebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevelOff WebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevelValues() []WebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevel {
	return []WebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevel{
		WebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevelEveryone,
		WebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleEditedRuleAllowDeletionsEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevel string

const (
	WebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevelEveryone WebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevelNonAdmins WebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevelOff WebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevelValues() []WebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevel {
	return []WebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevel{
		WebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevelEveryone,
		WebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleEditedRuleAllowForcePushesEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevel string

const (
	WebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevelEveryone WebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevelNonAdmins WebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevelOff WebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevelValues() []WebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevel {
	return []WebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevel{
		WebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevelEveryone,
		WebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleEditedRuleLinearHistoryRequirementEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevel string

const (
	WebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevelEveryone WebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevelNonAdmins WebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevelOff WebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevelValues() []WebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevel {
	return []WebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevel{
		WebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevelEveryone,
		WebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleEditedRuleMergeQueueEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevel string

const (
	WebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevelEveryone WebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevelNonAdmins WebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevelOff WebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevelValues() []WebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevel {
	return []WebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevel{
		WebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevelEveryone,
		WebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleEditedRulePullRequestReviewsEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevel string

const (
	WebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevelEveryone WebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevel = "everyone"
	WebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevelNonAdmins WebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevel = "non_admins"
	WebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevelOff WebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevel = "off"
)

// PossibleWebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevelValues returns the possible values for the WebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevel const type.
func PossibleWebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevelValues() []WebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevel {
	return []WebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevel{
		WebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevelEveryone,
		WebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevelNonAdmins,
		WebhookBranchProtectionRuleEditedRuleRequiredConversationResolutionLevelOff,
	}
}

type WebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevel string

const (
	WebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevelEveryone WebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevelNonAdmins WebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevelOff WebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevelValues() []WebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevel {
	return []WebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevel{
		WebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevelEveryone,
		WebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleEditedRuleRequiredDeploymentsEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevel string

const (
	WebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevelEveryone WebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevelNonAdmins WebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevelOff WebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevelValues() []WebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevel {
	return []WebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevel{
		WebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevelEveryone,
		WebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleEditedRuleRequiredStatusChecksEnforcementLevelOff,
	}
}

type WebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevel string

const (
	WebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevelEveryone WebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevel = "everyone"
	WebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevelNonAdmins WebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevel = "non_admins"
	WebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevelOff WebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevel = "off"
)

// PossibleWebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevelValues returns the possible values for the WebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevel const type.
func PossibleWebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevelValues() []WebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevel {
	return []WebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevel{
		WebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevelEveryone,
		WebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevelNonAdmins,
		WebhookBranchProtectionRuleEditedRuleSignatureRequirementEnforcementLevelOff,
	}
}

type WebhookCheckRunCompletedAction string

const (
	WebhookCheckRunCompletedActionCompleted WebhookCheckRunCompletedAction = "completed"
)

// PossibleWebhookCheckRunCompletedActionValues returns the possible values for the WebhookCheckRunCompletedAction const type.
func PossibleWebhookCheckRunCompletedActionValues() []WebhookCheckRunCompletedAction {
	return []WebhookCheckRunCompletedAction{
		WebhookCheckRunCompletedActionCompleted,
	}
}

type WebhookCheckRunCreatedAction string

const (
	WebhookCheckRunCreatedActionCreated WebhookCheckRunCreatedAction = "created"
)

// PossibleWebhookCheckRunCreatedActionValues returns the possible values for the WebhookCheckRunCreatedAction const type.
func PossibleWebhookCheckRunCreatedActionValues() []WebhookCheckRunCreatedAction {
	return []WebhookCheckRunCreatedAction{
		WebhookCheckRunCreatedActionCreated,
	}
}

type WebhookCheckRunRequestedActionAction string

const (
	WebhookCheckRunRequestedActionActionRequestedAction WebhookCheckRunRequestedActionAction = "requested_action"
)

// PossibleWebhookCheckRunRequestedActionActionValues returns the possible values for the WebhookCheckRunRequestedActionAction const type.
func PossibleWebhookCheckRunRequestedActionActionValues() []WebhookCheckRunRequestedActionAction {
	return []WebhookCheckRunRequestedActionAction{
		WebhookCheckRunRequestedActionActionRequestedAction,
	}
}

type WebhookCheckRunRerequestedAction string

const (
	WebhookCheckRunRerequestedActionRerequested WebhookCheckRunRerequestedAction = "rerequested"
)

// PossibleWebhookCheckRunRerequestedActionValues returns the possible values for the WebhookCheckRunRerequestedAction const type.
func PossibleWebhookCheckRunRerequestedActionValues() []WebhookCheckRunRerequestedAction {
	return []WebhookCheckRunRerequestedAction{
		WebhookCheckRunRerequestedActionRerequested,
	}
}

type WebhookCheckSuiteCompletedAction string

const (
	WebhookCheckSuiteCompletedActionCompleted WebhookCheckSuiteCompletedAction = "completed"
)

// PossibleWebhookCheckSuiteCompletedActionValues returns the possible values for the WebhookCheckSuiteCompletedAction const type.
func PossibleWebhookCheckSuiteCompletedActionValues() []WebhookCheckSuiteCompletedAction {
	return []WebhookCheckSuiteCompletedAction{
		WebhookCheckSuiteCompletedActionCompleted,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppEventsItem string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemBranchProtectionRule WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "branch_protection_rule"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemCheckRun WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "check_run"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemCheckSuite WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "check_suite"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemCodeScanningAlert WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "code_scanning_alert"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemCommitComment WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "commit_comment"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemContentReference WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "content_reference"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemCreate WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "create"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemDelete WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "delete"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemDeployKey WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "deploy_key"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemDeployment WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "deployment"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemDeploymentReview WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "deployment_review"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemDeploymentStatus WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "deployment_status"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemDiscussion WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "discussion"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemDiscussionComment WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "discussion_comment"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemFork WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "fork"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemGollum WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "gollum"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemIssueComment WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "issue_comment"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemIssues WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "issues"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemLabel WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "label"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemMember WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "member"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemMembership WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "membership"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemMergeGroup WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "merge_group"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemMergeQueueEntry WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "merge_queue_entry"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemMilestone WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "milestone"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemOrgBlock WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "org_block"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemOrganization WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "organization"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemPageBuild WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "page_build"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemProject WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "project"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemProjectCard WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "project_card"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemProjectColumn WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "project_column"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemProjectsV2Item WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "projects_v2_item"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemPublic WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "public"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemPullRequest WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "pull_request"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemPullRequestReview WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "pull_request_review"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemPullRequestReviewComment WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "pull_request_review_comment"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemPullRequestReviewThread WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "pull_request_review_thread"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemPush WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "push"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemRegistryPackage WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "registry_package"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemRelease WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "release"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemRepository WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "repository"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemRepositoryDispatch WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "repository_dispatch"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemSecretScanningAlert WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "secret_scanning_alert"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemSecretScanningAlertLocation WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "secret_scanning_alert_location"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemSecurityAndAnalysis WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "security_and_analysis"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemStar WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "star"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemStatus WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "status"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemTeam WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "team"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemTeamAdd WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "team_add"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemWatch WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "watch"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemWorkflowDispatch WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "workflow_dispatch"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemWorkflowJob WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "workflow_job"
	WebhookCheckSuiteCompletedCheckSuiteAppEventsItemWorkflowRun WebhookCheckSuiteCompletedCheckSuiteAppEventsItem = "workflow_run"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppEventsItemValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppEventsItem const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppEventsItemValues() []WebhookCheckSuiteCompletedCheckSuiteAppEventsItem {
	return []WebhookCheckSuiteCompletedCheckSuiteAppEventsItem{
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemBranchProtectionRule,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemCheckRun,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemCheckSuite,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemCodeScanningAlert,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemCommitComment,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemContentReference,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemCreate,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemDelete,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemDeployKey,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemDeployment,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemDeploymentReview,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemDeploymentStatus,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemDiscussion,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemDiscussionComment,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemFork,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemGollum,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemIssueComment,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemIssues,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemLabel,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemMember,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemMembership,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemMergeGroup,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemMergeQueueEntry,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemMilestone,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemOrgBlock,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemOrganization,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemPageBuild,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemProject,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemProjectCard,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemProjectColumn,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemProjectsV2Item,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemPublic,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemPullRequest,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemPullRequestReview,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemPullRequestReviewComment,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemPullRequestReviewThread,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemPush,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemRegistryPackage,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemRelease,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemRepository,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemRepositoryDispatch,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemSecretScanningAlert,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemSecretScanningAlertLocation,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemSecurityAndAnalysis,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemStar,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemStatus,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemTeam,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemTeamAdd,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemWatch,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemWorkflowDispatch,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemWorkflowJob,
		WebhookCheckSuiteCompletedCheckSuiteAppEventsItemWorkflowRun,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppOwnerType string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppOwnerTypeBot WebhookCheckSuiteCompletedCheckSuiteAppOwnerType = "Bot"
	WebhookCheckSuiteCompletedCheckSuiteAppOwnerTypeOrganization WebhookCheckSuiteCompletedCheckSuiteAppOwnerType = "Organization"
	WebhookCheckSuiteCompletedCheckSuiteAppOwnerTypeUser WebhookCheckSuiteCompletedCheckSuiteAppOwnerType = "User"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppOwnerTypeValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppOwnerType const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppOwnerTypeValues() []WebhookCheckSuiteCompletedCheckSuiteAppOwnerType {
	return []WebhookCheckSuiteCompletedCheckSuiteAppOwnerType{
		WebhookCheckSuiteCompletedCheckSuiteAppOwnerTypeBot,
		WebhookCheckSuiteCompletedCheckSuiteAppOwnerTypeOrganization,
		WebhookCheckSuiteCompletedCheckSuiteAppOwnerTypeUser,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsActions string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsActionsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsActions = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsActionsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsActions = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsActionsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsActions const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsActionsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsActions {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsActions{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsActionsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsActionsWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsAdministration string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsAdministrationRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsAdministration = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsAdministrationWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsAdministration = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsAdministrationValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsAdministration const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsAdministrationValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsAdministration {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsAdministration{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsAdministrationRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsAdministrationWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsChecks string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsChecksRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsChecks = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsChecksWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsChecks = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsChecksValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsChecks const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsChecksValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsChecks {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsChecks{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsChecksRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsChecksWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentReferences string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentReferencesRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentReferences = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentReferencesWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentReferences = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentReferencesValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentReferences const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentReferencesValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentReferences {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentReferences{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentReferencesRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentReferencesWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContents string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContents = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContents = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContents const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContents {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContents{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsContentsWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDeployments string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDeploymentsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDeployments = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDeploymentsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDeployments = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsDeploymentsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDeployments const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsDeploymentsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDeployments {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDeployments{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDeploymentsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDeploymentsWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDiscussions string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDiscussionsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDiscussions = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDiscussionsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDiscussions = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsDiscussionsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDiscussions const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsDiscussionsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDiscussions {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDiscussions{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDiscussionsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsDiscussionsWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEmails string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEmailsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEmails = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEmailsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEmails = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsEmailsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEmails const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsEmailsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEmails {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEmails{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEmailsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEmailsWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEnvironments string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEnvironmentsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEnvironments = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEnvironmentsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEnvironments = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsEnvironmentsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEnvironments const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsEnvironmentsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEnvironments {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEnvironments{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEnvironmentsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsEnvironmentsWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsIssues string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsIssuesRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsIssues = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsIssuesWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsIssues = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsIssuesValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsIssues const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsIssuesValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsIssues {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsIssues{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsIssuesRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsIssuesWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsKeys string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsKeysRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsKeys = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsKeysWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsKeys = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsKeysValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsKeys const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsKeysValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsKeys {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsKeys{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsKeysRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsKeysWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMembers string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMembersRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMembers = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMembersWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMembers = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsMembersValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMembers const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsMembersValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMembers {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMembers{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMembersRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMembersWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMetadata string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMetadataRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMetadata = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMetadataWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMetadata = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsMetadataValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMetadata const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsMetadataValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMetadata {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMetadata{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMetadataRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsMetadataWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationAdministration string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationAdministrationRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationAdministration = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationAdministrationWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationAdministration const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationAdministrationValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationAdministration {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationAdministration{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationAdministrationRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationHooks string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationHooksRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationHooks = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationHooksWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationHooksValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationHooks const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationHooksValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationHooks {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationHooks{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationHooksRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPackages string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPackagesRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPackages = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPackagesWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPackages const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPackagesValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPackages {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPackages{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPackagesRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPlan string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPlanRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPlan = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPlanWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPlanValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPlan const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPlanValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPlan {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPlan{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPlanRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjects string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjectsAdmin WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjects = "admin"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjectsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjects = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjectsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjects const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjectsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjects {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjects{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjectsAdmin,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjectsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSecrets string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSecretsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSecrets = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSecretsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSecrets const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSecretsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSecrets {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSecrets{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSecretsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSelfHostedRunners{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationUserBlocking string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationUserBlockingRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationUserBlocking = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationUserBlockingWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationUserBlockingValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationUserBlocking {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationUserBlocking{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationUserBlockingRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPackages string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPackagesRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPackages = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPackagesWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPackages = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsPackagesValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPackages const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsPackagesValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPackages {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPackages{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPackagesRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPackagesWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPages string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPagesRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPages = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPagesWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPages = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsPagesValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPages const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsPagesValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPages {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPages{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPagesRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPagesWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPullRequests string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPullRequestsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPullRequests = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPullRequestsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPullRequests = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsPullRequestsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPullRequests const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsPullRequestsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPullRequests {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPullRequests{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPullRequestsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsPullRequestsWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryHooks string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryHooksRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryHooks = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryHooksWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryHooksValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryHooks const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryHooksValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryHooks {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryHooks{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryHooksRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjects string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjectsAdmin WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjects = "admin"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjectsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjects = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjectsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjects const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjectsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjects {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjects{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjectsAdmin,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjectsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretScanningAlerts string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretScanningAlertsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretScanningAlerts = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretScanningAlertsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretScanningAlertsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretScanningAlerts {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretScanningAlerts{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretScanningAlertsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecrets string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecrets = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecrets = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecrets const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecrets {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecrets{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecretsWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityEvents string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityEventsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityEvents = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityEventsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityEventsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityEvents const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityEventsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityEvents {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityEvents{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityEventsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityEventsWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityScanningAlert string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityScanningAlertRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityScanningAlert = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityScanningAlertWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityScanningAlertValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityScanningAlert {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityScanningAlert{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityScanningAlertRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSingleFile string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSingleFileRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSingleFile = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSingleFileWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSingleFile = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsSingleFileValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSingleFile const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsSingleFileValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSingleFile {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSingleFile{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSingleFileRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsSingleFileWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsStatuses string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsStatusesRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsStatuses = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsStatusesWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsStatuses = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsStatusesValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsStatuses const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsStatusesValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsStatuses {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsStatuses{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsStatusesRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsStatusesWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsTeamDiscussions string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsTeamDiscussionsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsTeamDiscussions = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsTeamDiscussionsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsTeamDiscussions const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsTeamDiscussionsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsTeamDiscussions {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsTeamDiscussions{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsTeamDiscussionsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsVulnerabilityAlerts string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsVulnerabilityAlertsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsVulnerabilityAlerts = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsVulnerabilityAlertsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsVulnerabilityAlertsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsVulnerabilityAlerts {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsVulnerabilityAlerts{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsVulnerabilityAlertsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookCheckSuiteCompletedCheckSuiteAppPermissionsWorkflows string

const (
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsWorkflowsRead WebhookCheckSuiteCompletedCheckSuiteAppPermissionsWorkflows = "read"
	WebhookCheckSuiteCompletedCheckSuiteAppPermissionsWorkflowsWrite WebhookCheckSuiteCompletedCheckSuiteAppPermissionsWorkflows = "write"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsWorkflowsValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteAppPermissionsWorkflows const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteAppPermissionsWorkflowsValues() []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsWorkflows {
	return []WebhookCheckSuiteCompletedCheckSuiteAppPermissionsWorkflows{
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsWorkflowsRead,
		WebhookCheckSuiteCompletedCheckSuiteAppPermissionsWorkflowsWrite,
	}
}

// WebhookCheckSuiteCompletedCheckSuiteConclusion - The summary conclusion for all check runs that are part of the check suite.
// Can be one of success, failure, neutral, cancelled, timed_out, action_required or stale. This value will be null until
// the
// check run has completed.
type WebhookCheckSuiteCompletedCheckSuiteConclusion string

const (
	WebhookCheckSuiteCompletedCheckSuiteConclusionActionRequired WebhookCheckSuiteCompletedCheckSuiteConclusion = "action_required"
	WebhookCheckSuiteCompletedCheckSuiteConclusionCancelled WebhookCheckSuiteCompletedCheckSuiteConclusion = "cancelled"
	WebhookCheckSuiteCompletedCheckSuiteConclusionFailure WebhookCheckSuiteCompletedCheckSuiteConclusion = "failure"
	WebhookCheckSuiteCompletedCheckSuiteConclusionNeutral WebhookCheckSuiteCompletedCheckSuiteConclusion = "neutral"
	WebhookCheckSuiteCompletedCheckSuiteConclusionNull WebhookCheckSuiteCompletedCheckSuiteConclusion = "null"
	WebhookCheckSuiteCompletedCheckSuiteConclusionSkipped WebhookCheckSuiteCompletedCheckSuiteConclusion = "skipped"
	WebhookCheckSuiteCompletedCheckSuiteConclusionStale WebhookCheckSuiteCompletedCheckSuiteConclusion = "stale"
	WebhookCheckSuiteCompletedCheckSuiteConclusionStartupFailure WebhookCheckSuiteCompletedCheckSuiteConclusion = "startup_failure"
	WebhookCheckSuiteCompletedCheckSuiteConclusionSuccess WebhookCheckSuiteCompletedCheckSuiteConclusion = "success"
	WebhookCheckSuiteCompletedCheckSuiteConclusionTimedOut WebhookCheckSuiteCompletedCheckSuiteConclusion = "timed_out"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteConclusionValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteConclusion const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteConclusionValues() []WebhookCheckSuiteCompletedCheckSuiteConclusion {
	return []WebhookCheckSuiteCompletedCheckSuiteConclusion{
		WebhookCheckSuiteCompletedCheckSuiteConclusionActionRequired,
		WebhookCheckSuiteCompletedCheckSuiteConclusionCancelled,
		WebhookCheckSuiteCompletedCheckSuiteConclusionFailure,
		WebhookCheckSuiteCompletedCheckSuiteConclusionNeutral,
		WebhookCheckSuiteCompletedCheckSuiteConclusionNull,
		WebhookCheckSuiteCompletedCheckSuiteConclusionSkipped,
		WebhookCheckSuiteCompletedCheckSuiteConclusionStale,
		WebhookCheckSuiteCompletedCheckSuiteConclusionStartupFailure,
		WebhookCheckSuiteCompletedCheckSuiteConclusionSuccess,
		WebhookCheckSuiteCompletedCheckSuiteConclusionTimedOut,
	}
}

// WebhookCheckSuiteCompletedCheckSuiteStatus - The summary status for all check runs that are part of the check suite. Can
// be requested, in_progress, or completed.
type WebhookCheckSuiteCompletedCheckSuiteStatus string

const (
	WebhookCheckSuiteCompletedCheckSuiteStatusCompleted WebhookCheckSuiteCompletedCheckSuiteStatus = "completed"
	WebhookCheckSuiteCompletedCheckSuiteStatusInProgress WebhookCheckSuiteCompletedCheckSuiteStatus = "in_progress"
	WebhookCheckSuiteCompletedCheckSuiteStatusNull WebhookCheckSuiteCompletedCheckSuiteStatus = "null"
	WebhookCheckSuiteCompletedCheckSuiteStatusPending WebhookCheckSuiteCompletedCheckSuiteStatus = "pending"
	WebhookCheckSuiteCompletedCheckSuiteStatusQueued WebhookCheckSuiteCompletedCheckSuiteStatus = "queued"
	WebhookCheckSuiteCompletedCheckSuiteStatusRequested WebhookCheckSuiteCompletedCheckSuiteStatus = "requested"
)

// PossibleWebhookCheckSuiteCompletedCheckSuiteStatusValues returns the possible values for the WebhookCheckSuiteCompletedCheckSuiteStatus const type.
func PossibleWebhookCheckSuiteCompletedCheckSuiteStatusValues() []WebhookCheckSuiteCompletedCheckSuiteStatus {
	return []WebhookCheckSuiteCompletedCheckSuiteStatus{
		WebhookCheckSuiteCompletedCheckSuiteStatusCompleted,
		WebhookCheckSuiteCompletedCheckSuiteStatusInProgress,
		WebhookCheckSuiteCompletedCheckSuiteStatusNull,
		WebhookCheckSuiteCompletedCheckSuiteStatusPending,
		WebhookCheckSuiteCompletedCheckSuiteStatusQueued,
		WebhookCheckSuiteCompletedCheckSuiteStatusRequested,
	}
}

type WebhookCheckSuiteRequestedAction string

const (
	WebhookCheckSuiteRequestedActionRequested WebhookCheckSuiteRequestedAction = "requested"
)

// PossibleWebhookCheckSuiteRequestedActionValues returns the possible values for the WebhookCheckSuiteRequestedAction const type.
func PossibleWebhookCheckSuiteRequestedActionValues() []WebhookCheckSuiteRequestedAction {
	return []WebhookCheckSuiteRequestedAction{
		WebhookCheckSuiteRequestedActionRequested,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppEventsItem string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemBranchProtectionRule WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "branch_protection_rule"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemCheckRun WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "check_run"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemCheckSuite WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "check_suite"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemCodeScanningAlert WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "code_scanning_alert"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemCommitComment WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "commit_comment"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemContentReference WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "content_reference"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemCreate WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "create"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemDelete WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "delete"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemDeployKey WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "deploy_key"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemDeployment WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "deployment"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemDeploymentReview WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "deployment_review"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemDeploymentStatus WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "deployment_status"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemDiscussion WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "discussion"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemDiscussionComment WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "discussion_comment"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemFork WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "fork"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemGollum WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "gollum"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemIssueComment WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "issue_comment"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemIssues WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "issues"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemLabel WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "label"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemMember WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "member"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemMembership WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "membership"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemMergeGroup WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "merge_group"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemMergeQueueEntry WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "merge_queue_entry"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemMilestone WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "milestone"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemOrgBlock WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "org_block"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemOrganization WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "organization"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemPageBuild WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "page_build"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemProject WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "project"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemProjectCard WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "project_card"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemProjectColumn WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "project_column"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemProjectsV2Item WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "projects_v2_item"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemPublic WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "public"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemPullRequest WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "pull_request"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemPullRequestReview WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "pull_request_review"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemPullRequestReviewComment WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "pull_request_review_comment"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemPullRequestReviewThread WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "pull_request_review_thread"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemPush WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "push"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemRegistryPackage WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "registry_package"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemRelease WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "release"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemRepository WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "repository"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemRepositoryDispatch WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "repository_dispatch"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemRepositoryImport WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "repository_import"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemSecretScanningAlert WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "secret_scanning_alert"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemSecretScanningAlertLocation WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "secret_scanning_alert_location"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemSecurityAndAnalysis WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "security_and_analysis"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemStar WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "star"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemStatus WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "status"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemTeam WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "team"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemTeamAdd WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "team_add"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemWatch WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "watch"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemWorkflowDispatch WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "workflow_dispatch"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemWorkflowJob WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "workflow_job"
	WebhookCheckSuiteRequestedCheckSuiteAppEventsItemWorkflowRun WebhookCheckSuiteRequestedCheckSuiteAppEventsItem = "workflow_run"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppEventsItemValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppEventsItem const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppEventsItemValues() []WebhookCheckSuiteRequestedCheckSuiteAppEventsItem {
	return []WebhookCheckSuiteRequestedCheckSuiteAppEventsItem{
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemBranchProtectionRule,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemCheckRun,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemCheckSuite,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemCodeScanningAlert,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemCommitComment,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemContentReference,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemCreate,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemDelete,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemDeployKey,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemDeployment,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemDeploymentReview,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemDeploymentStatus,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemDiscussion,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemDiscussionComment,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemFork,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemGollum,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemIssueComment,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemIssues,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemLabel,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemMember,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemMembership,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemMergeGroup,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemMergeQueueEntry,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemMilestone,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemOrgBlock,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemOrganization,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemPageBuild,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemProject,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemProjectCard,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemProjectColumn,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemProjectsV2Item,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemPublic,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemPullRequest,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemPullRequestReview,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemPullRequestReviewComment,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemPullRequestReviewThread,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemPush,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemRegistryPackage,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemRelease,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemRepository,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemRepositoryDispatch,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemRepositoryImport,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemSecretScanningAlert,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemSecretScanningAlertLocation,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemSecurityAndAnalysis,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemStar,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemStatus,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemTeam,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemTeamAdd,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemWatch,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemWorkflowDispatch,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemWorkflowJob,
		WebhookCheckSuiteRequestedCheckSuiteAppEventsItemWorkflowRun,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppOwnerType string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppOwnerTypeBot WebhookCheckSuiteRequestedCheckSuiteAppOwnerType = "Bot"
	WebhookCheckSuiteRequestedCheckSuiteAppOwnerTypeOrganization WebhookCheckSuiteRequestedCheckSuiteAppOwnerType = "Organization"
	WebhookCheckSuiteRequestedCheckSuiteAppOwnerTypeUser WebhookCheckSuiteRequestedCheckSuiteAppOwnerType = "User"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppOwnerTypeValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppOwnerType const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppOwnerTypeValues() []WebhookCheckSuiteRequestedCheckSuiteAppOwnerType {
	return []WebhookCheckSuiteRequestedCheckSuiteAppOwnerType{
		WebhookCheckSuiteRequestedCheckSuiteAppOwnerTypeBot,
		WebhookCheckSuiteRequestedCheckSuiteAppOwnerTypeOrganization,
		WebhookCheckSuiteRequestedCheckSuiteAppOwnerTypeUser,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsActions string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsActionsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsActions = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsActionsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsActions = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsActionsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsActions const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsActionsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsActions {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsActions{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsActionsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsActionsWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsAdministration string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsAdministrationRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsAdministration = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsAdministrationWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsAdministration = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsAdministrationValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsAdministration const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsAdministrationValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsAdministration {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsAdministration{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsAdministrationRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsAdministrationWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsChecks string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsChecksRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsChecks = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsChecksWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsChecks = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsChecksValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsChecks const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsChecksValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsChecks {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsChecks{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsChecksRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsChecksWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentReferences string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentReferencesRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentReferences = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentReferencesWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentReferences = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentReferencesValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentReferences const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentReferencesValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentReferences {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentReferences{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentReferencesRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentReferencesWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContents string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContents = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContents = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContents const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContents {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContents{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsContentsWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDeployments string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDeploymentsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDeployments = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDeploymentsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDeployments = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsDeploymentsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDeployments const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsDeploymentsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDeployments {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDeployments{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDeploymentsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDeploymentsWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDiscussions string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDiscussionsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDiscussions = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDiscussionsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDiscussions = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsDiscussionsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDiscussions const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsDiscussionsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDiscussions {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDiscussions{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDiscussionsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsDiscussionsWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEmails string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEmailsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEmails = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEmailsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEmails = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsEmailsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEmails const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsEmailsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEmails {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEmails{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEmailsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEmailsWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEnvironments string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEnvironmentsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEnvironments = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEnvironmentsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEnvironments = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsEnvironmentsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEnvironments const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsEnvironmentsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEnvironments {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEnvironments{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEnvironmentsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsEnvironmentsWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsIssues string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsIssuesRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsIssues = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsIssuesWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsIssues = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsIssuesValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsIssues const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsIssuesValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsIssues {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsIssues{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsIssuesRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsIssuesWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsKeys string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsKeysRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsKeys = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsKeysWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsKeys = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsKeysValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsKeys const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsKeysValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsKeys {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsKeys{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsKeysRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsKeysWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMembers string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMembersRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMembers = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMembersWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMembers = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsMembersValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMembers const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsMembersValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMembers {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMembers{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMembersRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMembersWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMetadata string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMetadataRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMetadata = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMetadataWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMetadata = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsMetadataValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMetadata const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsMetadataValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMetadata {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMetadata{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMetadataRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsMetadataWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationAdministration string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationAdministrationRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationAdministration = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationAdministrationWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationAdministration const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationAdministrationValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationAdministration {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationAdministration{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationAdministrationRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationHooks string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationHooksRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationHooks = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationHooksWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationHooksValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationHooks const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationHooksValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationHooks {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationHooks{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationHooksRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPackages string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPackagesRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPackages = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPackagesWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPackages const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPackagesValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPackages {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPackages{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPackagesRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPlan string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPlanRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPlan = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPlanWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPlanValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPlan const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPlanValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPlan {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPlan{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPlanRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjects string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjectsAdmin WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjects = "admin"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjectsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjects = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjectsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjects const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjectsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjects {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjects{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjectsAdmin,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjectsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSecrets string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSecretsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSecrets = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSecretsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSecrets const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSecretsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSecrets {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSecrets{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSecretsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunners{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationUserBlocking string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationUserBlockingRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationUserBlocking = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationUserBlockingWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationUserBlockingValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationUserBlocking {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationUserBlocking{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationUserBlockingRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPackages string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPackagesRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPackages = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPackagesWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPackages = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsPackagesValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPackages const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsPackagesValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPackages {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPackages{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPackagesRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPackagesWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPages string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPagesRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPages = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPagesWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPages = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsPagesValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPages const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsPagesValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPages {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPages{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPagesRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPagesWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPullRequests string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPullRequestsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPullRequests = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPullRequestsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPullRequests = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsPullRequestsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPullRequests const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsPullRequestsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPullRequests {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPullRequests{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPullRequestsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsPullRequestsWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryHooks string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryHooksRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryHooks = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryHooksWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryHooksValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryHooks const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryHooksValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryHooks {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryHooks{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryHooksRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjects string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjectsAdmin WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjects = "admin"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjectsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjects = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjectsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjects const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjectsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjects {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjects{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjectsAdmin,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjectsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretScanningAlerts string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretScanningAlertsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretScanningAlerts = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretScanningAlertsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretScanningAlertsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretScanningAlerts {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretScanningAlerts{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretScanningAlertsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecrets string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecrets = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecrets = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecrets const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecrets {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecrets{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecretsWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityEvents string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityEventsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityEvents = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityEventsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityEventsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityEvents const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityEventsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityEvents {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityEvents{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityEventsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityEventsWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityScanningAlert string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityScanningAlertRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityScanningAlert = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityScanningAlertWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityScanningAlertValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityScanningAlert {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityScanningAlert{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityScanningAlertRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSingleFile string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSingleFileRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSingleFile = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSingleFileWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSingleFile = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsSingleFileValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSingleFile const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsSingleFileValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSingleFile {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSingleFile{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSingleFileRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsSingleFileWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsStatuses string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsStatusesRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsStatuses = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsStatusesWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsStatuses = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsStatusesValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsStatuses const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsStatusesValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsStatuses {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsStatuses{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsStatusesRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsStatusesWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsTeamDiscussions string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsTeamDiscussionsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsTeamDiscussions = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsTeamDiscussionsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsTeamDiscussions const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsTeamDiscussionsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsTeamDiscussions {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsTeamDiscussions{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsTeamDiscussionsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsVulnerabilityAlerts string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsVulnerabilityAlertsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsVulnerabilityAlerts = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsVulnerabilityAlertsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsVulnerabilityAlertsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsVulnerabilityAlerts {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsVulnerabilityAlerts{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsVulnerabilityAlertsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookCheckSuiteRequestedCheckSuiteAppPermissionsWorkflows string

const (
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsWorkflowsRead WebhookCheckSuiteRequestedCheckSuiteAppPermissionsWorkflows = "read"
	WebhookCheckSuiteRequestedCheckSuiteAppPermissionsWorkflowsWrite WebhookCheckSuiteRequestedCheckSuiteAppPermissionsWorkflows = "write"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsWorkflowsValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteAppPermissionsWorkflows const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteAppPermissionsWorkflowsValues() []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsWorkflows {
	return []WebhookCheckSuiteRequestedCheckSuiteAppPermissionsWorkflows{
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsWorkflowsRead,
		WebhookCheckSuiteRequestedCheckSuiteAppPermissionsWorkflowsWrite,
	}
}

// WebhookCheckSuiteRequestedCheckSuiteConclusion - The summary conclusion for all check runs that are part of the check suite.
// Can be one of success, failure,neutral, cancelled, timed_out, action_required or stale. This value will be null until the
// check run has completed.
type WebhookCheckSuiteRequestedCheckSuiteConclusion string

const (
	WebhookCheckSuiteRequestedCheckSuiteConclusionActionRequired WebhookCheckSuiteRequestedCheckSuiteConclusion = "action_required"
	WebhookCheckSuiteRequestedCheckSuiteConclusionCancelled WebhookCheckSuiteRequestedCheckSuiteConclusion = "cancelled"
	WebhookCheckSuiteRequestedCheckSuiteConclusionFailure WebhookCheckSuiteRequestedCheckSuiteConclusion = "failure"
	WebhookCheckSuiteRequestedCheckSuiteConclusionNeutral WebhookCheckSuiteRequestedCheckSuiteConclusion = "neutral"
	WebhookCheckSuiteRequestedCheckSuiteConclusionNull WebhookCheckSuiteRequestedCheckSuiteConclusion = "null"
	WebhookCheckSuiteRequestedCheckSuiteConclusionSkipped WebhookCheckSuiteRequestedCheckSuiteConclusion = "skipped"
	WebhookCheckSuiteRequestedCheckSuiteConclusionStale WebhookCheckSuiteRequestedCheckSuiteConclusion = "stale"
	WebhookCheckSuiteRequestedCheckSuiteConclusionSuccess WebhookCheckSuiteRequestedCheckSuiteConclusion = "success"
	WebhookCheckSuiteRequestedCheckSuiteConclusionTimedOut WebhookCheckSuiteRequestedCheckSuiteConclusion = "timed_out"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteConclusionValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteConclusion const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteConclusionValues() []WebhookCheckSuiteRequestedCheckSuiteConclusion {
	return []WebhookCheckSuiteRequestedCheckSuiteConclusion{
		WebhookCheckSuiteRequestedCheckSuiteConclusionActionRequired,
		WebhookCheckSuiteRequestedCheckSuiteConclusionCancelled,
		WebhookCheckSuiteRequestedCheckSuiteConclusionFailure,
		WebhookCheckSuiteRequestedCheckSuiteConclusionNeutral,
		WebhookCheckSuiteRequestedCheckSuiteConclusionNull,
		WebhookCheckSuiteRequestedCheckSuiteConclusionSkipped,
		WebhookCheckSuiteRequestedCheckSuiteConclusionStale,
		WebhookCheckSuiteRequestedCheckSuiteConclusionSuccess,
		WebhookCheckSuiteRequestedCheckSuiteConclusionTimedOut,
	}
}

// WebhookCheckSuiteRequestedCheckSuiteStatus - The summary status for all check runs that are part of the check suite. Can
// be requested, in_progress, or completed.
type WebhookCheckSuiteRequestedCheckSuiteStatus string

const (
	WebhookCheckSuiteRequestedCheckSuiteStatusCompleted WebhookCheckSuiteRequestedCheckSuiteStatus = "completed"
	WebhookCheckSuiteRequestedCheckSuiteStatusInProgress WebhookCheckSuiteRequestedCheckSuiteStatus = "in_progress"
	WebhookCheckSuiteRequestedCheckSuiteStatusNull WebhookCheckSuiteRequestedCheckSuiteStatus = "null"
	WebhookCheckSuiteRequestedCheckSuiteStatusQueued WebhookCheckSuiteRequestedCheckSuiteStatus = "queued"
	WebhookCheckSuiteRequestedCheckSuiteStatusRequested WebhookCheckSuiteRequestedCheckSuiteStatus = "requested"
)

// PossibleWebhookCheckSuiteRequestedCheckSuiteStatusValues returns the possible values for the WebhookCheckSuiteRequestedCheckSuiteStatus const type.
func PossibleWebhookCheckSuiteRequestedCheckSuiteStatusValues() []WebhookCheckSuiteRequestedCheckSuiteStatus {
	return []WebhookCheckSuiteRequestedCheckSuiteStatus{
		WebhookCheckSuiteRequestedCheckSuiteStatusCompleted,
		WebhookCheckSuiteRequestedCheckSuiteStatusInProgress,
		WebhookCheckSuiteRequestedCheckSuiteStatusNull,
		WebhookCheckSuiteRequestedCheckSuiteStatusQueued,
		WebhookCheckSuiteRequestedCheckSuiteStatusRequested,
	}
}

type WebhookCheckSuiteRerequestedAction string

const (
	WebhookCheckSuiteRerequestedActionRerequested WebhookCheckSuiteRerequestedAction = "rerequested"
)

// PossibleWebhookCheckSuiteRerequestedActionValues returns the possible values for the WebhookCheckSuiteRerequestedAction const type.
func PossibleWebhookCheckSuiteRerequestedActionValues() []WebhookCheckSuiteRerequestedAction {
	return []WebhookCheckSuiteRerequestedAction{
		WebhookCheckSuiteRerequestedActionRerequested,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemBranchProtectionRule WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "branch_protection_rule"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemCheckRun WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "check_run"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemCheckSuite WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "check_suite"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemCodeScanningAlert WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "code_scanning_alert"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemCommitComment WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "commit_comment"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemContentReference WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "content_reference"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemCreate WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "create"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemDelete WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "delete"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemDeployKey WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "deploy_key"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemDeployment WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "deployment"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemDeploymentReview WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "deployment_review"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemDeploymentStatus WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "deployment_status"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemDiscussion WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "discussion"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemDiscussionComment WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "discussion_comment"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemFork WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "fork"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemGollum WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "gollum"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemIssueComment WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "issue_comment"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemIssues WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "issues"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemLabel WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "label"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemMember WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "member"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemMembership WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "membership"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemMergeQueueEntry WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "merge_queue_entry"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemMilestone WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "milestone"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemOrgBlock WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "org_block"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemOrganization WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "organization"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemPageBuild WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "page_build"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemProject WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "project"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemProjectCard WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "project_card"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemProjectColumn WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "project_column"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemPublic WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "public"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemPullRequest WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "pull_request"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemPullRequestReview WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "pull_request_review"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemPullRequestReviewComment WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "pull_request_review_comment"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemPullRequestReviewThread WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "pull_request_review_thread"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemPush WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "push"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemRegistryPackage WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "registry_package"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemRelease WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "release"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemRepository WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "repository"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemRepositoryDispatch WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "repository_dispatch"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemSecretScanningAlert WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "secret_scanning_alert"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemStar WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "star"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemStatus WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "status"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemTeam WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "team"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemTeamAdd WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "team_add"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemWatch WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "watch"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemWorkflowDispatch WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "workflow_dispatch"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemWorkflowJob WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "workflow_job"
	WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemWorkflowRun WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem = "workflow_run"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppEventsItemValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppEventsItemValues() []WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppEventsItem{
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemBranchProtectionRule,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemCheckRun,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemCheckSuite,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemCodeScanningAlert,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemCommitComment,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemContentReference,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemCreate,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemDelete,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemDeployKey,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemDeployment,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemDeploymentReview,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemDeploymentStatus,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemDiscussion,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemDiscussionComment,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemFork,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemGollum,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemIssueComment,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemIssues,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemLabel,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemMember,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemMembership,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemMergeQueueEntry,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemMilestone,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemOrgBlock,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemOrganization,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemPageBuild,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemProject,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemProjectCard,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemProjectColumn,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemPublic,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemPullRequest,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemPullRequestReview,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemPullRequestReviewComment,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemPullRequestReviewThread,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemPush,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemRegistryPackage,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemRelease,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemRepository,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemRepositoryDispatch,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemSecretScanningAlert,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemStar,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemStatus,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemTeam,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemTeamAdd,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemWatch,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemWorkflowDispatch,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemWorkflowJob,
		WebhookCheckSuiteRerequestedCheckSuiteAppEventsItemWorkflowRun,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppOwnerType string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppOwnerTypeBot WebhookCheckSuiteRerequestedCheckSuiteAppOwnerType = "Bot"
	WebhookCheckSuiteRerequestedCheckSuiteAppOwnerTypeOrganization WebhookCheckSuiteRerequestedCheckSuiteAppOwnerType = "Organization"
	WebhookCheckSuiteRerequestedCheckSuiteAppOwnerTypeUser WebhookCheckSuiteRerequestedCheckSuiteAppOwnerType = "User"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppOwnerTypeValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppOwnerType const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppOwnerTypeValues() []WebhookCheckSuiteRerequestedCheckSuiteAppOwnerType {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppOwnerType{
		WebhookCheckSuiteRerequestedCheckSuiteAppOwnerTypeBot,
		WebhookCheckSuiteRerequestedCheckSuiteAppOwnerTypeOrganization,
		WebhookCheckSuiteRerequestedCheckSuiteAppOwnerTypeUser,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsActions string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsActionsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsActions = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsActionsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsActions = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsActionsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsActions const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsActionsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsActions {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsActions{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsActionsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsActionsWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsAdministration string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsAdministrationRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsAdministration = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsAdministrationWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsAdministration = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsAdministrationValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsAdministration const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsAdministrationValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsAdministration {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsAdministration{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsAdministrationRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsAdministrationWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsChecks string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsChecksRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsChecks = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsChecksWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsChecks = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsChecksValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsChecks const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsChecksValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsChecks {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsChecks{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsChecksRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsChecksWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentReferences string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentReferencesRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentReferences = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentReferencesWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentReferences = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentReferencesValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentReferences const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentReferencesValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentReferences {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentReferences{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentReferencesRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentReferencesWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContents string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContents = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContents = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContents const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContents {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContents{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsContentsWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDeployments string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDeploymentsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDeployments = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDeploymentsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDeployments = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDeploymentsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDeployments const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDeploymentsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDeployments {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDeployments{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDeploymentsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDeploymentsWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDiscussions string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDiscussionsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDiscussions = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDiscussionsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDiscussions = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDiscussionsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDiscussions const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDiscussionsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDiscussions {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDiscussions{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDiscussionsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsDiscussionsWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEmails string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEmailsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEmails = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEmailsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEmails = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEmailsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEmails const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEmailsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEmails {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEmails{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEmailsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEmailsWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEnvironments string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEnvironmentsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEnvironments = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEnvironmentsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEnvironments = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEnvironmentsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEnvironments const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEnvironmentsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEnvironments {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEnvironments{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEnvironmentsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsEnvironmentsWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsIssues string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsIssuesRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsIssues = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsIssuesWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsIssues = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsIssuesValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsIssues const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsIssuesValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsIssues {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsIssues{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsIssuesRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsIssuesWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsKeys string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsKeysRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsKeys = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsKeysWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsKeys = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsKeysValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsKeys const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsKeysValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsKeys {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsKeys{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsKeysRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsKeysWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMembers string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMembersRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMembers = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMembersWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMembers = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMembersValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMembers const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMembersValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMembers {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMembers{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMembersRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMembersWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMetadata string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMetadataRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMetadata = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMetadataWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMetadata = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMetadataValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMetadata const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMetadataValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMetadata {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMetadata{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMetadataRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsMetadataWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationAdministration string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationAdministrationRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationAdministration = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationAdministrationWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationAdministration const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationAdministrationValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationAdministration {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationAdministration{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationAdministrationRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationHooks string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationHooksRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationHooks = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationHooksWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationHooksValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationHooks const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationHooksValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationHooks {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationHooks{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationHooksRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPackages string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPackagesRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPackages = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPackagesWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPackages const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPackagesValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPackages {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPackages{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPackagesRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPlan string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPlanRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPlan = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPlanWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPlanValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPlan const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPlanValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPlan {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPlan{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPlanRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjects string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjectsAdmin WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjects = "admin"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjectsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjects = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjectsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjects const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjectsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjects {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjects{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjectsAdmin,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjectsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSecrets string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSecretsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSecrets = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSecretsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSecrets const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSecretsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSecrets {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSecrets{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSecretsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunners{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationUserBlocking string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationUserBlockingRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationUserBlocking = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationUserBlockingWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationUserBlockingValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationUserBlocking {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationUserBlocking{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationUserBlockingRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPackages string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPackagesRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPackages = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPackagesWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPackages = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPackagesValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPackages const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPackagesValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPackages {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPackages{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPackagesRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPackagesWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPages string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPagesRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPages = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPagesWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPages = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPagesValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPages const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPagesValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPages {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPages{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPagesRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPagesWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPullRequests string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPullRequestsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPullRequests = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPullRequestsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPullRequests = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPullRequestsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPullRequests const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPullRequestsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPullRequests {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPullRequests{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPullRequestsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsPullRequestsWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryHooks string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryHooksRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryHooks = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryHooksWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryHooksValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryHooks const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryHooksValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryHooks {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryHooks{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryHooksRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjects string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjectsAdmin WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjects = "admin"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjectsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjects = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjectsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjects const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjectsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjects {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjects{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjectsAdmin,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjectsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretScanningAlerts string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretScanningAlertsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretScanningAlerts = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretScanningAlertsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretScanningAlertsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretScanningAlerts {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretScanningAlerts{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretScanningAlertsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecrets string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecrets = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecrets = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecrets const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecrets {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecrets{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecretsWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityEvents string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityEventsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityEvents = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityEventsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityEventsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityEvents const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityEventsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityEvents {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityEvents{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityEventsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityEventsWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityScanningAlert string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityScanningAlertRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityScanningAlert = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityScanningAlertWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityScanningAlertValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityScanningAlert {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityScanningAlert{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityScanningAlertRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSingleFile string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSingleFileRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSingleFile = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSingleFileWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSingleFile = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSingleFileValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSingleFile const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSingleFileValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSingleFile {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSingleFile{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSingleFileRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsSingleFileWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsStatuses string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsStatusesRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsStatuses = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsStatusesWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsStatuses = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsStatusesValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsStatuses const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsStatusesValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsStatuses {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsStatuses{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsStatusesRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsStatusesWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsTeamDiscussions string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsTeamDiscussionsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsTeamDiscussions = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsTeamDiscussionsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsTeamDiscussions const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsTeamDiscussionsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsTeamDiscussions {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsTeamDiscussions{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsTeamDiscussionsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsVulnerabilityAlerts string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsVulnerabilityAlertsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsVulnerabilityAlerts = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsVulnerabilityAlertsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsVulnerabilityAlertsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsVulnerabilityAlerts {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsVulnerabilityAlerts{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsVulnerabilityAlertsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsWorkflows string

const (
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsWorkflowsRead WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsWorkflows = "read"
	WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsWorkflowsWrite WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsWorkflows = "write"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsWorkflowsValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsWorkflows const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteAppPermissionsWorkflowsValues() []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsWorkflows {
	return []WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsWorkflows{
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsWorkflowsRead,
		WebhookCheckSuiteRerequestedCheckSuiteAppPermissionsWorkflowsWrite,
	}
}

// WebhookCheckSuiteRerequestedCheckSuiteConclusion - The summary conclusion for all check runs that are part of the check
// suite. Can be one of success, failure,neutral, cancelled, timed_out, action_required or stale. This value will be null
// until the
// check run has completed.
type WebhookCheckSuiteRerequestedCheckSuiteConclusion string

const (
	WebhookCheckSuiteRerequestedCheckSuiteConclusionActionRequired WebhookCheckSuiteRerequestedCheckSuiteConclusion = "action_required"
	WebhookCheckSuiteRerequestedCheckSuiteConclusionCancelled WebhookCheckSuiteRerequestedCheckSuiteConclusion = "cancelled"
	WebhookCheckSuiteRerequestedCheckSuiteConclusionFailure WebhookCheckSuiteRerequestedCheckSuiteConclusion = "failure"
	WebhookCheckSuiteRerequestedCheckSuiteConclusionNeutral WebhookCheckSuiteRerequestedCheckSuiteConclusion = "neutral"
	WebhookCheckSuiteRerequestedCheckSuiteConclusionNull WebhookCheckSuiteRerequestedCheckSuiteConclusion = "null"
	WebhookCheckSuiteRerequestedCheckSuiteConclusionStale WebhookCheckSuiteRerequestedCheckSuiteConclusion = "stale"
	WebhookCheckSuiteRerequestedCheckSuiteConclusionSuccess WebhookCheckSuiteRerequestedCheckSuiteConclusion = "success"
	WebhookCheckSuiteRerequestedCheckSuiteConclusionTimedOut WebhookCheckSuiteRerequestedCheckSuiteConclusion = "timed_out"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteConclusionValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteConclusion const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteConclusionValues() []WebhookCheckSuiteRerequestedCheckSuiteConclusion {
	return []WebhookCheckSuiteRerequestedCheckSuiteConclusion{
		WebhookCheckSuiteRerequestedCheckSuiteConclusionActionRequired,
		WebhookCheckSuiteRerequestedCheckSuiteConclusionCancelled,
		WebhookCheckSuiteRerequestedCheckSuiteConclusionFailure,
		WebhookCheckSuiteRerequestedCheckSuiteConclusionNeutral,
		WebhookCheckSuiteRerequestedCheckSuiteConclusionNull,
		WebhookCheckSuiteRerequestedCheckSuiteConclusionStale,
		WebhookCheckSuiteRerequestedCheckSuiteConclusionSuccess,
		WebhookCheckSuiteRerequestedCheckSuiteConclusionTimedOut,
	}
}

// WebhookCheckSuiteRerequestedCheckSuiteStatus - The summary status for all check runs that are part of the check suite.
// Can be requested, in_progress, or completed.
type WebhookCheckSuiteRerequestedCheckSuiteStatus string

const (
	WebhookCheckSuiteRerequestedCheckSuiteStatusCompleted WebhookCheckSuiteRerequestedCheckSuiteStatus = "completed"
	WebhookCheckSuiteRerequestedCheckSuiteStatusInProgress WebhookCheckSuiteRerequestedCheckSuiteStatus = "in_progress"
	WebhookCheckSuiteRerequestedCheckSuiteStatusNull WebhookCheckSuiteRerequestedCheckSuiteStatus = "null"
	WebhookCheckSuiteRerequestedCheckSuiteStatusQueued WebhookCheckSuiteRerequestedCheckSuiteStatus = "queued"
	WebhookCheckSuiteRerequestedCheckSuiteStatusRequested WebhookCheckSuiteRerequestedCheckSuiteStatus = "requested"
)

// PossibleWebhookCheckSuiteRerequestedCheckSuiteStatusValues returns the possible values for the WebhookCheckSuiteRerequestedCheckSuiteStatus const type.
func PossibleWebhookCheckSuiteRerequestedCheckSuiteStatusValues() []WebhookCheckSuiteRerequestedCheckSuiteStatus {
	return []WebhookCheckSuiteRerequestedCheckSuiteStatus{
		WebhookCheckSuiteRerequestedCheckSuiteStatusCompleted,
		WebhookCheckSuiteRerequestedCheckSuiteStatusInProgress,
		WebhookCheckSuiteRerequestedCheckSuiteStatusNull,
		WebhookCheckSuiteRerequestedCheckSuiteStatusQueued,
		WebhookCheckSuiteRerequestedCheckSuiteStatusRequested,
	}
}

type WebhookCodeScanningAlertAppearedInBranchAction string

const (
	WebhookCodeScanningAlertAppearedInBranchActionAppearedInBranch WebhookCodeScanningAlertAppearedInBranchAction = "appeared_in_branch"
)

// PossibleWebhookCodeScanningAlertAppearedInBranchActionValues returns the possible values for the WebhookCodeScanningAlertAppearedInBranchAction const type.
func PossibleWebhookCodeScanningAlertAppearedInBranchActionValues() []WebhookCodeScanningAlertAppearedInBranchAction {
	return []WebhookCodeScanningAlertAppearedInBranchAction{
		WebhookCodeScanningAlertAppearedInBranchActionAppearedInBranch,
	}
}

type WebhookCodeScanningAlertAppearedInBranchAlertDismissedByType string

const (
	WebhookCodeScanningAlertAppearedInBranchAlertDismissedByTypeBot WebhookCodeScanningAlertAppearedInBranchAlertDismissedByType = "Bot"
	WebhookCodeScanningAlertAppearedInBranchAlertDismissedByTypeOrganization WebhookCodeScanningAlertAppearedInBranchAlertDismissedByType = "Organization"
	WebhookCodeScanningAlertAppearedInBranchAlertDismissedByTypeUser WebhookCodeScanningAlertAppearedInBranchAlertDismissedByType = "User"
)

// PossibleWebhookCodeScanningAlertAppearedInBranchAlertDismissedByTypeValues returns the possible values for the WebhookCodeScanningAlertAppearedInBranchAlertDismissedByType const type.
func PossibleWebhookCodeScanningAlertAppearedInBranchAlertDismissedByTypeValues() []WebhookCodeScanningAlertAppearedInBranchAlertDismissedByType {
	return []WebhookCodeScanningAlertAppearedInBranchAlertDismissedByType{
		WebhookCodeScanningAlertAppearedInBranchAlertDismissedByTypeBot,
		WebhookCodeScanningAlertAppearedInBranchAlertDismissedByTypeOrganization,
		WebhookCodeScanningAlertAppearedInBranchAlertDismissedByTypeUser,
	}
}

// WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason - The reason for dismissing or closing the alert. Can be one
// of: false positive, won't fix, and used in tests.
type WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason string

const (
	WebhookCodeScanningAlertAppearedInBranchAlertDismissedReasonFalsePositive WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason = "false positive"
	WebhookCodeScanningAlertAppearedInBranchAlertDismissedReasonNull WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason = "null"
	WebhookCodeScanningAlertAppearedInBranchAlertDismissedReasonUsedInTests WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason = "used in tests"
	WebhookCodeScanningAlertAppearedInBranchAlertDismissedReasonWonTFix WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason = "won't fix"
)

// PossibleWebhookCodeScanningAlertAppearedInBranchAlertDismissedReasonValues returns the possible values for the WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason const type.
func PossibleWebhookCodeScanningAlertAppearedInBranchAlertDismissedReasonValues() []WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason {
	return []WebhookCodeScanningAlertAppearedInBranchAlertDismissedReason{
		WebhookCodeScanningAlertAppearedInBranchAlertDismissedReasonFalsePositive,
		WebhookCodeScanningAlertAppearedInBranchAlertDismissedReasonNull,
		WebhookCodeScanningAlertAppearedInBranchAlertDismissedReasonUsedInTests,
		WebhookCodeScanningAlertAppearedInBranchAlertDismissedReasonWonTFix,
	}
}

// WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceState - State of a code scanning alert.
type WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceState string

const (
	WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceStateDismissed WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceState = "dismissed"
	WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceStateFixed WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceState = "fixed"
	WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceStateOpen WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceState = "open"
)

// PossibleWebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceStateValues returns the possible values for the WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceState const type.
func PossibleWebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceStateValues() []WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceState {
	return []WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceState{
		WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceStateDismissed,
		WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceStateFixed,
		WebhookCodeScanningAlertAppearedInBranchAlertMostRecentInstanceStateOpen,
	}
}

// WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity - The severity of the alert.
type WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity string

const (
	WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverityError WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity = "error"
	WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverityNone WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity = "none"
	WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverityNote WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity = "note"
	WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverityNull WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity = "null"
	WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverityWarning WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity = "warning"
)

// PossibleWebhookCodeScanningAlertAppearedInBranchAlertRuleSeverityValues returns the possible values for the WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity const type.
func PossibleWebhookCodeScanningAlertAppearedInBranchAlertRuleSeverityValues() []WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity {
	return []WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverity{
		WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverityError,
		WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverityNone,
		WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverityNote,
		WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverityNull,
		WebhookCodeScanningAlertAppearedInBranchAlertRuleSeverityWarning,
	}
}

// WebhookCodeScanningAlertAppearedInBranchAlertState - State of a code scanning alert.
type WebhookCodeScanningAlertAppearedInBranchAlertState string

const (
	WebhookCodeScanningAlertAppearedInBranchAlertStateDismissed WebhookCodeScanningAlertAppearedInBranchAlertState = "dismissed"
	WebhookCodeScanningAlertAppearedInBranchAlertStateFixed WebhookCodeScanningAlertAppearedInBranchAlertState = "fixed"
	WebhookCodeScanningAlertAppearedInBranchAlertStateOpen WebhookCodeScanningAlertAppearedInBranchAlertState = "open"
)

// PossibleWebhookCodeScanningAlertAppearedInBranchAlertStateValues returns the possible values for the WebhookCodeScanningAlertAppearedInBranchAlertState const type.
func PossibleWebhookCodeScanningAlertAppearedInBranchAlertStateValues() []WebhookCodeScanningAlertAppearedInBranchAlertState {
	return []WebhookCodeScanningAlertAppearedInBranchAlertState{
		WebhookCodeScanningAlertAppearedInBranchAlertStateDismissed,
		WebhookCodeScanningAlertAppearedInBranchAlertStateFixed,
		WebhookCodeScanningAlertAppearedInBranchAlertStateOpen,
	}
}

type WebhookCodeScanningAlertClosedByUserAction string

const (
	WebhookCodeScanningAlertClosedByUserActionClosedByUser WebhookCodeScanningAlertClosedByUserAction = "closed_by_user"
)

// PossibleWebhookCodeScanningAlertClosedByUserActionValues returns the possible values for the WebhookCodeScanningAlertClosedByUserAction const type.
func PossibleWebhookCodeScanningAlertClosedByUserActionValues() []WebhookCodeScanningAlertClosedByUserAction {
	return []WebhookCodeScanningAlertClosedByUserAction{
		WebhookCodeScanningAlertClosedByUserActionClosedByUser,
	}
}

type WebhookCodeScanningAlertClosedByUserAlertDismissedByType string

const (
	WebhookCodeScanningAlertClosedByUserAlertDismissedByTypeBot WebhookCodeScanningAlertClosedByUserAlertDismissedByType = "Bot"
	WebhookCodeScanningAlertClosedByUserAlertDismissedByTypeOrganization WebhookCodeScanningAlertClosedByUserAlertDismissedByType = "Organization"
	WebhookCodeScanningAlertClosedByUserAlertDismissedByTypeUser WebhookCodeScanningAlertClosedByUserAlertDismissedByType = "User"
)

// PossibleWebhookCodeScanningAlertClosedByUserAlertDismissedByTypeValues returns the possible values for the WebhookCodeScanningAlertClosedByUserAlertDismissedByType const type.
func PossibleWebhookCodeScanningAlertClosedByUserAlertDismissedByTypeValues() []WebhookCodeScanningAlertClosedByUserAlertDismissedByType {
	return []WebhookCodeScanningAlertClosedByUserAlertDismissedByType{
		WebhookCodeScanningAlertClosedByUserAlertDismissedByTypeBot,
		WebhookCodeScanningAlertClosedByUserAlertDismissedByTypeOrganization,
		WebhookCodeScanningAlertClosedByUserAlertDismissedByTypeUser,
	}
}

// WebhookCodeScanningAlertClosedByUserAlertDismissedReason - The reason for dismissing or closing the alert. Can be one of:
// false positive, won't fix, and used in tests.
type WebhookCodeScanningAlertClosedByUserAlertDismissedReason string

const (
	WebhookCodeScanningAlertClosedByUserAlertDismissedReasonFalsePositive WebhookCodeScanningAlertClosedByUserAlertDismissedReason = "false positive"
	WebhookCodeScanningAlertClosedByUserAlertDismissedReasonNull WebhookCodeScanningAlertClosedByUserAlertDismissedReason = "null"
	WebhookCodeScanningAlertClosedByUserAlertDismissedReasonUsedInTests WebhookCodeScanningAlertClosedByUserAlertDismissedReason = "used in tests"
	WebhookCodeScanningAlertClosedByUserAlertDismissedReasonWonTFix WebhookCodeScanningAlertClosedByUserAlertDismissedReason = "won't fix"
)

// PossibleWebhookCodeScanningAlertClosedByUserAlertDismissedReasonValues returns the possible values for the WebhookCodeScanningAlertClosedByUserAlertDismissedReason const type.
func PossibleWebhookCodeScanningAlertClosedByUserAlertDismissedReasonValues() []WebhookCodeScanningAlertClosedByUserAlertDismissedReason {
	return []WebhookCodeScanningAlertClosedByUserAlertDismissedReason{
		WebhookCodeScanningAlertClosedByUserAlertDismissedReasonFalsePositive,
		WebhookCodeScanningAlertClosedByUserAlertDismissedReasonNull,
		WebhookCodeScanningAlertClosedByUserAlertDismissedReasonUsedInTests,
		WebhookCodeScanningAlertClosedByUserAlertDismissedReasonWonTFix,
	}
}

// WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceState - State of a code scanning alert.
type WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceState string

const (
	WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceStateDismissed WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceState = "dismissed"
	WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceStateFixed WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceState = "fixed"
	WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceStateOpen WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceState = "open"
)

// PossibleWebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceStateValues returns the possible values for the WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceState const type.
func PossibleWebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceStateValues() []WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceState {
	return []WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceState{
		WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceStateDismissed,
		WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceStateFixed,
		WebhookCodeScanningAlertClosedByUserAlertMostRecentInstanceStateOpen,
	}
}

// WebhookCodeScanningAlertClosedByUserAlertRuleSeverity - The severity of the alert.
type WebhookCodeScanningAlertClosedByUserAlertRuleSeverity string

const (
	WebhookCodeScanningAlertClosedByUserAlertRuleSeverityError WebhookCodeScanningAlertClosedByUserAlertRuleSeverity = "error"
	WebhookCodeScanningAlertClosedByUserAlertRuleSeverityNone WebhookCodeScanningAlertClosedByUserAlertRuleSeverity = "none"
	WebhookCodeScanningAlertClosedByUserAlertRuleSeverityNote WebhookCodeScanningAlertClosedByUserAlertRuleSeverity = "note"
	WebhookCodeScanningAlertClosedByUserAlertRuleSeverityNull WebhookCodeScanningAlertClosedByUserAlertRuleSeverity = "null"
	WebhookCodeScanningAlertClosedByUserAlertRuleSeverityWarning WebhookCodeScanningAlertClosedByUserAlertRuleSeverity = "warning"
)

// PossibleWebhookCodeScanningAlertClosedByUserAlertRuleSeverityValues returns the possible values for the WebhookCodeScanningAlertClosedByUserAlertRuleSeverity const type.
func PossibleWebhookCodeScanningAlertClosedByUserAlertRuleSeverityValues() []WebhookCodeScanningAlertClosedByUserAlertRuleSeverity {
	return []WebhookCodeScanningAlertClosedByUserAlertRuleSeverity{
		WebhookCodeScanningAlertClosedByUserAlertRuleSeverityError,
		WebhookCodeScanningAlertClosedByUserAlertRuleSeverityNone,
		WebhookCodeScanningAlertClosedByUserAlertRuleSeverityNote,
		WebhookCodeScanningAlertClosedByUserAlertRuleSeverityNull,
		WebhookCodeScanningAlertClosedByUserAlertRuleSeverityWarning,
	}
}

// WebhookCodeScanningAlertClosedByUserAlertState - State of a code scanning alert.
type WebhookCodeScanningAlertClosedByUserAlertState string

const (
	WebhookCodeScanningAlertClosedByUserAlertStateDismissed WebhookCodeScanningAlertClosedByUserAlertState = "dismissed"
	WebhookCodeScanningAlertClosedByUserAlertStateFixed WebhookCodeScanningAlertClosedByUserAlertState = "fixed"
)

// PossibleWebhookCodeScanningAlertClosedByUserAlertStateValues returns the possible values for the WebhookCodeScanningAlertClosedByUserAlertState const type.
func PossibleWebhookCodeScanningAlertClosedByUserAlertStateValues() []WebhookCodeScanningAlertClosedByUserAlertState {
	return []WebhookCodeScanningAlertClosedByUserAlertState{
		WebhookCodeScanningAlertClosedByUserAlertStateDismissed,
		WebhookCodeScanningAlertClosedByUserAlertStateFixed,
	}
}

type WebhookCodeScanningAlertCreatedAction string

const (
	WebhookCodeScanningAlertCreatedActionCreated WebhookCodeScanningAlertCreatedAction = "created"
)

// PossibleWebhookCodeScanningAlertCreatedActionValues returns the possible values for the WebhookCodeScanningAlertCreatedAction const type.
func PossibleWebhookCodeScanningAlertCreatedActionValues() []WebhookCodeScanningAlertCreatedAction {
	return []WebhookCodeScanningAlertCreatedAction{
		WebhookCodeScanningAlertCreatedActionCreated,
	}
}

// WebhookCodeScanningAlertCreatedAlertMostRecentInstanceState - State of a code scanning alert.
type WebhookCodeScanningAlertCreatedAlertMostRecentInstanceState string

const (
	WebhookCodeScanningAlertCreatedAlertMostRecentInstanceStateDismissed WebhookCodeScanningAlertCreatedAlertMostRecentInstanceState = "dismissed"
	WebhookCodeScanningAlertCreatedAlertMostRecentInstanceStateFixed WebhookCodeScanningAlertCreatedAlertMostRecentInstanceState = "fixed"
	WebhookCodeScanningAlertCreatedAlertMostRecentInstanceStateOpen WebhookCodeScanningAlertCreatedAlertMostRecentInstanceState = "open"
)

// PossibleWebhookCodeScanningAlertCreatedAlertMostRecentInstanceStateValues returns the possible values for the WebhookCodeScanningAlertCreatedAlertMostRecentInstanceState const type.
func PossibleWebhookCodeScanningAlertCreatedAlertMostRecentInstanceStateValues() []WebhookCodeScanningAlertCreatedAlertMostRecentInstanceState {
	return []WebhookCodeScanningAlertCreatedAlertMostRecentInstanceState{
		WebhookCodeScanningAlertCreatedAlertMostRecentInstanceStateDismissed,
		WebhookCodeScanningAlertCreatedAlertMostRecentInstanceStateFixed,
		WebhookCodeScanningAlertCreatedAlertMostRecentInstanceStateOpen,
	}
}

// WebhookCodeScanningAlertCreatedAlertRuleSeverity - The severity of the alert.
type WebhookCodeScanningAlertCreatedAlertRuleSeverity string

const (
	WebhookCodeScanningAlertCreatedAlertRuleSeverityError WebhookCodeScanningAlertCreatedAlertRuleSeverity = "error"
	WebhookCodeScanningAlertCreatedAlertRuleSeverityNone WebhookCodeScanningAlertCreatedAlertRuleSeverity = "none"
	WebhookCodeScanningAlertCreatedAlertRuleSeverityNote WebhookCodeScanningAlertCreatedAlertRuleSeverity = "note"
	WebhookCodeScanningAlertCreatedAlertRuleSeverityNull WebhookCodeScanningAlertCreatedAlertRuleSeverity = "null"
	WebhookCodeScanningAlertCreatedAlertRuleSeverityWarning WebhookCodeScanningAlertCreatedAlertRuleSeverity = "warning"
)

// PossibleWebhookCodeScanningAlertCreatedAlertRuleSeverityValues returns the possible values for the WebhookCodeScanningAlertCreatedAlertRuleSeverity const type.
func PossibleWebhookCodeScanningAlertCreatedAlertRuleSeverityValues() []WebhookCodeScanningAlertCreatedAlertRuleSeverity {
	return []WebhookCodeScanningAlertCreatedAlertRuleSeverity{
		WebhookCodeScanningAlertCreatedAlertRuleSeverityError,
		WebhookCodeScanningAlertCreatedAlertRuleSeverityNone,
		WebhookCodeScanningAlertCreatedAlertRuleSeverityNote,
		WebhookCodeScanningAlertCreatedAlertRuleSeverityNull,
		WebhookCodeScanningAlertCreatedAlertRuleSeverityWarning,
	}
}

// WebhookCodeScanningAlertCreatedAlertState - State of a code scanning alert.
type WebhookCodeScanningAlertCreatedAlertState string

const (
	WebhookCodeScanningAlertCreatedAlertStateDismissed WebhookCodeScanningAlertCreatedAlertState = "dismissed"
	WebhookCodeScanningAlertCreatedAlertStateOpen WebhookCodeScanningAlertCreatedAlertState = "open"
)

// PossibleWebhookCodeScanningAlertCreatedAlertStateValues returns the possible values for the WebhookCodeScanningAlertCreatedAlertState const type.
func PossibleWebhookCodeScanningAlertCreatedAlertStateValues() []WebhookCodeScanningAlertCreatedAlertState {
	return []WebhookCodeScanningAlertCreatedAlertState{
		WebhookCodeScanningAlertCreatedAlertStateDismissed,
		WebhookCodeScanningAlertCreatedAlertStateOpen,
	}
}

type WebhookCodeScanningAlertFixedAction string

const (
	WebhookCodeScanningAlertFixedActionFixed WebhookCodeScanningAlertFixedAction = "fixed"
)

// PossibleWebhookCodeScanningAlertFixedActionValues returns the possible values for the WebhookCodeScanningAlertFixedAction const type.
func PossibleWebhookCodeScanningAlertFixedActionValues() []WebhookCodeScanningAlertFixedAction {
	return []WebhookCodeScanningAlertFixedAction{
		WebhookCodeScanningAlertFixedActionFixed,
	}
}

type WebhookCodeScanningAlertFixedAlertDismissedByType string

const (
	WebhookCodeScanningAlertFixedAlertDismissedByTypeBot WebhookCodeScanningAlertFixedAlertDismissedByType = "Bot"
	WebhookCodeScanningAlertFixedAlertDismissedByTypeOrganization WebhookCodeScanningAlertFixedAlertDismissedByType = "Organization"
	WebhookCodeScanningAlertFixedAlertDismissedByTypeUser WebhookCodeScanningAlertFixedAlertDismissedByType = "User"
)

// PossibleWebhookCodeScanningAlertFixedAlertDismissedByTypeValues returns the possible values for the WebhookCodeScanningAlertFixedAlertDismissedByType const type.
func PossibleWebhookCodeScanningAlertFixedAlertDismissedByTypeValues() []WebhookCodeScanningAlertFixedAlertDismissedByType {
	return []WebhookCodeScanningAlertFixedAlertDismissedByType{
		WebhookCodeScanningAlertFixedAlertDismissedByTypeBot,
		WebhookCodeScanningAlertFixedAlertDismissedByTypeOrganization,
		WebhookCodeScanningAlertFixedAlertDismissedByTypeUser,
	}
}

// WebhookCodeScanningAlertFixedAlertDismissedReason - The reason for dismissing or closing the alert. Can be one of: false
// positive, won't fix, and used in tests.
type WebhookCodeScanningAlertFixedAlertDismissedReason string

const (
	WebhookCodeScanningAlertFixedAlertDismissedReasonFalsePositive WebhookCodeScanningAlertFixedAlertDismissedReason = "false positive"
	WebhookCodeScanningAlertFixedAlertDismissedReasonNull WebhookCodeScanningAlertFixedAlertDismissedReason = "null"
	WebhookCodeScanningAlertFixedAlertDismissedReasonUsedInTests WebhookCodeScanningAlertFixedAlertDismissedReason = "used in tests"
	WebhookCodeScanningAlertFixedAlertDismissedReasonWonTFix WebhookCodeScanningAlertFixedAlertDismissedReason = "won't fix"
)

// PossibleWebhookCodeScanningAlertFixedAlertDismissedReasonValues returns the possible values for the WebhookCodeScanningAlertFixedAlertDismissedReason const type.
func PossibleWebhookCodeScanningAlertFixedAlertDismissedReasonValues() []WebhookCodeScanningAlertFixedAlertDismissedReason {
	return []WebhookCodeScanningAlertFixedAlertDismissedReason{
		WebhookCodeScanningAlertFixedAlertDismissedReasonFalsePositive,
		WebhookCodeScanningAlertFixedAlertDismissedReasonNull,
		WebhookCodeScanningAlertFixedAlertDismissedReasonUsedInTests,
		WebhookCodeScanningAlertFixedAlertDismissedReasonWonTFix,
	}
}

// WebhookCodeScanningAlertFixedAlertMostRecentInstanceState - State of a code scanning alert.
type WebhookCodeScanningAlertFixedAlertMostRecentInstanceState string

const (
	WebhookCodeScanningAlertFixedAlertMostRecentInstanceStateDismissed WebhookCodeScanningAlertFixedAlertMostRecentInstanceState = "dismissed"
	WebhookCodeScanningAlertFixedAlertMostRecentInstanceStateFixed WebhookCodeScanningAlertFixedAlertMostRecentInstanceState = "fixed"
	WebhookCodeScanningAlertFixedAlertMostRecentInstanceStateOpen WebhookCodeScanningAlertFixedAlertMostRecentInstanceState = "open"
)

// PossibleWebhookCodeScanningAlertFixedAlertMostRecentInstanceStateValues returns the possible values for the WebhookCodeScanningAlertFixedAlertMostRecentInstanceState const type.
func PossibleWebhookCodeScanningAlertFixedAlertMostRecentInstanceStateValues() []WebhookCodeScanningAlertFixedAlertMostRecentInstanceState {
	return []WebhookCodeScanningAlertFixedAlertMostRecentInstanceState{
		WebhookCodeScanningAlertFixedAlertMostRecentInstanceStateDismissed,
		WebhookCodeScanningAlertFixedAlertMostRecentInstanceStateFixed,
		WebhookCodeScanningAlertFixedAlertMostRecentInstanceStateOpen,
	}
}

// WebhookCodeScanningAlertFixedAlertRuleSeverity - The severity of the alert.
type WebhookCodeScanningAlertFixedAlertRuleSeverity string

const (
	WebhookCodeScanningAlertFixedAlertRuleSeverityError WebhookCodeScanningAlertFixedAlertRuleSeverity = "error"
	WebhookCodeScanningAlertFixedAlertRuleSeverityNone WebhookCodeScanningAlertFixedAlertRuleSeverity = "none"
	WebhookCodeScanningAlertFixedAlertRuleSeverityNote WebhookCodeScanningAlertFixedAlertRuleSeverity = "note"
	WebhookCodeScanningAlertFixedAlertRuleSeverityNull WebhookCodeScanningAlertFixedAlertRuleSeverity = "null"
	WebhookCodeScanningAlertFixedAlertRuleSeverityWarning WebhookCodeScanningAlertFixedAlertRuleSeverity = "warning"
)

// PossibleWebhookCodeScanningAlertFixedAlertRuleSeverityValues returns the possible values for the WebhookCodeScanningAlertFixedAlertRuleSeverity const type.
func PossibleWebhookCodeScanningAlertFixedAlertRuleSeverityValues() []WebhookCodeScanningAlertFixedAlertRuleSeverity {
	return []WebhookCodeScanningAlertFixedAlertRuleSeverity{
		WebhookCodeScanningAlertFixedAlertRuleSeverityError,
		WebhookCodeScanningAlertFixedAlertRuleSeverityNone,
		WebhookCodeScanningAlertFixedAlertRuleSeverityNote,
		WebhookCodeScanningAlertFixedAlertRuleSeverityNull,
		WebhookCodeScanningAlertFixedAlertRuleSeverityWarning,
	}
}

// WebhookCodeScanningAlertFixedAlertState - State of a code scanning alert.
type WebhookCodeScanningAlertFixedAlertState string

const (
	WebhookCodeScanningAlertFixedAlertStateFixed WebhookCodeScanningAlertFixedAlertState = "fixed"
)

// PossibleWebhookCodeScanningAlertFixedAlertStateValues returns the possible values for the WebhookCodeScanningAlertFixedAlertState const type.
func PossibleWebhookCodeScanningAlertFixedAlertStateValues() []WebhookCodeScanningAlertFixedAlertState {
	return []WebhookCodeScanningAlertFixedAlertState{
		WebhookCodeScanningAlertFixedAlertStateFixed,
	}
}

type WebhookCodeScanningAlertReopenedAction string

const (
	WebhookCodeScanningAlertReopenedActionReopened WebhookCodeScanningAlertReopenedAction = "reopened"
)

// PossibleWebhookCodeScanningAlertReopenedActionValues returns the possible values for the WebhookCodeScanningAlertReopenedAction const type.
func PossibleWebhookCodeScanningAlertReopenedActionValues() []WebhookCodeScanningAlertReopenedAction {
	return []WebhookCodeScanningAlertReopenedAction{
		WebhookCodeScanningAlertReopenedActionReopened,
	}
}

// WebhookCodeScanningAlertReopenedAlertMostRecentInstanceState - State of a code scanning alert.
type WebhookCodeScanningAlertReopenedAlertMostRecentInstanceState string

const (
	WebhookCodeScanningAlertReopenedAlertMostRecentInstanceStateDismissed WebhookCodeScanningAlertReopenedAlertMostRecentInstanceState = "dismissed"
	WebhookCodeScanningAlertReopenedAlertMostRecentInstanceStateFixed WebhookCodeScanningAlertReopenedAlertMostRecentInstanceState = "fixed"
	WebhookCodeScanningAlertReopenedAlertMostRecentInstanceStateOpen WebhookCodeScanningAlertReopenedAlertMostRecentInstanceState = "open"
)

// PossibleWebhookCodeScanningAlertReopenedAlertMostRecentInstanceStateValues returns the possible values for the WebhookCodeScanningAlertReopenedAlertMostRecentInstanceState const type.
func PossibleWebhookCodeScanningAlertReopenedAlertMostRecentInstanceStateValues() []WebhookCodeScanningAlertReopenedAlertMostRecentInstanceState {
	return []WebhookCodeScanningAlertReopenedAlertMostRecentInstanceState{
		WebhookCodeScanningAlertReopenedAlertMostRecentInstanceStateDismissed,
		WebhookCodeScanningAlertReopenedAlertMostRecentInstanceStateFixed,
		WebhookCodeScanningAlertReopenedAlertMostRecentInstanceStateOpen,
	}
}

// WebhookCodeScanningAlertReopenedAlertRuleSeverity - The severity of the alert.
type WebhookCodeScanningAlertReopenedAlertRuleSeverity string

const (
	WebhookCodeScanningAlertReopenedAlertRuleSeverityError WebhookCodeScanningAlertReopenedAlertRuleSeverity = "error"
	WebhookCodeScanningAlertReopenedAlertRuleSeverityNone WebhookCodeScanningAlertReopenedAlertRuleSeverity = "none"
	WebhookCodeScanningAlertReopenedAlertRuleSeverityNote WebhookCodeScanningAlertReopenedAlertRuleSeverity = "note"
	WebhookCodeScanningAlertReopenedAlertRuleSeverityNull WebhookCodeScanningAlertReopenedAlertRuleSeverity = "null"
	WebhookCodeScanningAlertReopenedAlertRuleSeverityWarning WebhookCodeScanningAlertReopenedAlertRuleSeverity = "warning"
)

// PossibleWebhookCodeScanningAlertReopenedAlertRuleSeverityValues returns the possible values for the WebhookCodeScanningAlertReopenedAlertRuleSeverity const type.
func PossibleWebhookCodeScanningAlertReopenedAlertRuleSeverityValues() []WebhookCodeScanningAlertReopenedAlertRuleSeverity {
	return []WebhookCodeScanningAlertReopenedAlertRuleSeverity{
		WebhookCodeScanningAlertReopenedAlertRuleSeverityError,
		WebhookCodeScanningAlertReopenedAlertRuleSeverityNone,
		WebhookCodeScanningAlertReopenedAlertRuleSeverityNote,
		WebhookCodeScanningAlertReopenedAlertRuleSeverityNull,
		WebhookCodeScanningAlertReopenedAlertRuleSeverityWarning,
	}
}

// WebhookCodeScanningAlertReopenedAlertState - State of a code scanning alert.
type WebhookCodeScanningAlertReopenedAlertState string

const (
	WebhookCodeScanningAlertReopenedAlertStateDismissed WebhookCodeScanningAlertReopenedAlertState = "dismissed"
	WebhookCodeScanningAlertReopenedAlertStateFixed WebhookCodeScanningAlertReopenedAlertState = "fixed"
	WebhookCodeScanningAlertReopenedAlertStateOpen WebhookCodeScanningAlertReopenedAlertState = "open"
)

// PossibleWebhookCodeScanningAlertReopenedAlertStateValues returns the possible values for the WebhookCodeScanningAlertReopenedAlertState const type.
func PossibleWebhookCodeScanningAlertReopenedAlertStateValues() []WebhookCodeScanningAlertReopenedAlertState {
	return []WebhookCodeScanningAlertReopenedAlertState{
		WebhookCodeScanningAlertReopenedAlertStateDismissed,
		WebhookCodeScanningAlertReopenedAlertStateFixed,
		WebhookCodeScanningAlertReopenedAlertStateOpen,
	}
}

type WebhookCodeScanningAlertReopenedByUserAction string

const (
	WebhookCodeScanningAlertReopenedByUserActionReopenedByUser WebhookCodeScanningAlertReopenedByUserAction = "reopened_by_user"
)

// PossibleWebhookCodeScanningAlertReopenedByUserActionValues returns the possible values for the WebhookCodeScanningAlertReopenedByUserAction const type.
func PossibleWebhookCodeScanningAlertReopenedByUserActionValues() []WebhookCodeScanningAlertReopenedByUserAction {
	return []WebhookCodeScanningAlertReopenedByUserAction{
		WebhookCodeScanningAlertReopenedByUserActionReopenedByUser,
	}
}

// WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceState - State of a code scanning alert.
type WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceState string

const (
	WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceStateDismissed WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceState = "dismissed"
	WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceStateFixed WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceState = "fixed"
	WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceStateOpen WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceState = "open"
)

// PossibleWebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceStateValues returns the possible values for the WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceState const type.
func PossibleWebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceStateValues() []WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceState {
	return []WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceState{
		WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceStateDismissed,
		WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceStateFixed,
		WebhookCodeScanningAlertReopenedByUserAlertMostRecentInstanceStateOpen,
	}
}

// WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity - The severity of the alert.
type WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity string

const (
	WebhookCodeScanningAlertReopenedByUserAlertRuleSeverityError WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity = "error"
	WebhookCodeScanningAlertReopenedByUserAlertRuleSeverityNone WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity = "none"
	WebhookCodeScanningAlertReopenedByUserAlertRuleSeverityNote WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity = "note"
	WebhookCodeScanningAlertReopenedByUserAlertRuleSeverityNull WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity = "null"
	WebhookCodeScanningAlertReopenedByUserAlertRuleSeverityWarning WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity = "warning"
)

// PossibleWebhookCodeScanningAlertReopenedByUserAlertRuleSeverityValues returns the possible values for the WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity const type.
func PossibleWebhookCodeScanningAlertReopenedByUserAlertRuleSeverityValues() []WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity {
	return []WebhookCodeScanningAlertReopenedByUserAlertRuleSeverity{
		WebhookCodeScanningAlertReopenedByUserAlertRuleSeverityError,
		WebhookCodeScanningAlertReopenedByUserAlertRuleSeverityNone,
		WebhookCodeScanningAlertReopenedByUserAlertRuleSeverityNote,
		WebhookCodeScanningAlertReopenedByUserAlertRuleSeverityNull,
		WebhookCodeScanningAlertReopenedByUserAlertRuleSeverityWarning,
	}
}

// WebhookCodeScanningAlertReopenedByUserAlertState - State of a code scanning alert.
type WebhookCodeScanningAlertReopenedByUserAlertState string

const (
	WebhookCodeScanningAlertReopenedByUserAlertStateFixed WebhookCodeScanningAlertReopenedByUserAlertState = "fixed"
	WebhookCodeScanningAlertReopenedByUserAlertStateOpen WebhookCodeScanningAlertReopenedByUserAlertState = "open"
)

// PossibleWebhookCodeScanningAlertReopenedByUserAlertStateValues returns the possible values for the WebhookCodeScanningAlertReopenedByUserAlertState const type.
func PossibleWebhookCodeScanningAlertReopenedByUserAlertStateValues() []WebhookCodeScanningAlertReopenedByUserAlertState {
	return []WebhookCodeScanningAlertReopenedByUserAlertState{
		WebhookCodeScanningAlertReopenedByUserAlertStateFixed,
		WebhookCodeScanningAlertReopenedByUserAlertStateOpen,
	}
}

// WebhookCommitCommentCreatedAction - The action performed. Can be created.
type WebhookCommitCommentCreatedAction string

const (
	WebhookCommitCommentCreatedActionCreated WebhookCommitCommentCreatedAction = "created"
)

// PossibleWebhookCommitCommentCreatedActionValues returns the possible values for the WebhookCommitCommentCreatedAction const type.
func PossibleWebhookCommitCommentCreatedActionValues() []WebhookCommitCommentCreatedAction {
	return []WebhookCommitCommentCreatedAction{
		WebhookCommitCommentCreatedActionCreated,
	}
}

// WebhookCommitCommentCreatedCommentAuthorAssociation - How the author is associated with the repository.
type WebhookCommitCommentCreatedCommentAuthorAssociation string

const (
	WebhookCommitCommentCreatedCommentAuthorAssociationCOLLABORATOR WebhookCommitCommentCreatedCommentAuthorAssociation = "COLLABORATOR"
	WebhookCommitCommentCreatedCommentAuthorAssociationCONTRIBUTOR WebhookCommitCommentCreatedCommentAuthorAssociation = "CONTRIBUTOR"
	WebhookCommitCommentCreatedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookCommitCommentCreatedCommentAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookCommitCommentCreatedCommentAuthorAssociationFIRSTTIMER WebhookCommitCommentCreatedCommentAuthorAssociation = "FIRST_TIMER"
	WebhookCommitCommentCreatedCommentAuthorAssociationMANNEQUIN WebhookCommitCommentCreatedCommentAuthorAssociation = "MANNEQUIN"
	WebhookCommitCommentCreatedCommentAuthorAssociationMEMBER WebhookCommitCommentCreatedCommentAuthorAssociation = "MEMBER"
	WebhookCommitCommentCreatedCommentAuthorAssociationNONE WebhookCommitCommentCreatedCommentAuthorAssociation = "NONE"
	WebhookCommitCommentCreatedCommentAuthorAssociationOWNER WebhookCommitCommentCreatedCommentAuthorAssociation = "OWNER"
)

// PossibleWebhookCommitCommentCreatedCommentAuthorAssociationValues returns the possible values for the WebhookCommitCommentCreatedCommentAuthorAssociation const type.
func PossibleWebhookCommitCommentCreatedCommentAuthorAssociationValues() []WebhookCommitCommentCreatedCommentAuthorAssociation {
	return []WebhookCommitCommentCreatedCommentAuthorAssociation{
		WebhookCommitCommentCreatedCommentAuthorAssociationCOLLABORATOR,
		WebhookCommitCommentCreatedCommentAuthorAssociationCONTRIBUTOR,
		WebhookCommitCommentCreatedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookCommitCommentCreatedCommentAuthorAssociationFIRSTTIMER,
		WebhookCommitCommentCreatedCommentAuthorAssociationMANNEQUIN,
		WebhookCommitCommentCreatedCommentAuthorAssociationMEMBER,
		WebhookCommitCommentCreatedCommentAuthorAssociationNONE,
		WebhookCommitCommentCreatedCommentAuthorAssociationOWNER,
	}
}

type WebhookCommitCommentCreatedCommentUserType string

const (
	WebhookCommitCommentCreatedCommentUserTypeBot WebhookCommitCommentCreatedCommentUserType = "Bot"
	WebhookCommitCommentCreatedCommentUserTypeOrganization WebhookCommitCommentCreatedCommentUserType = "Organization"
	WebhookCommitCommentCreatedCommentUserTypeUser WebhookCommitCommentCreatedCommentUserType = "User"
)

// PossibleWebhookCommitCommentCreatedCommentUserTypeValues returns the possible values for the WebhookCommitCommentCreatedCommentUserType const type.
func PossibleWebhookCommitCommentCreatedCommentUserTypeValues() []WebhookCommitCommentCreatedCommentUserType {
	return []WebhookCommitCommentCreatedCommentUserType{
		WebhookCommitCommentCreatedCommentUserTypeBot,
		WebhookCommitCommentCreatedCommentUserTypeOrganization,
		WebhookCommitCommentCreatedCommentUserTypeUser,
	}
}

// WebhookCreateRefType - The type of Git ref object created in the repository.
type WebhookCreateRefType string

const (
	WebhookCreateRefTypeBranch WebhookCreateRefType = "branch"
	WebhookCreateRefTypeTag WebhookCreateRefType = "tag"
)

// PossibleWebhookCreateRefTypeValues returns the possible values for the WebhookCreateRefType const type.
func PossibleWebhookCreateRefTypeValues() []WebhookCreateRefType {
	return []WebhookCreateRefType{
		WebhookCreateRefTypeBranch,
		WebhookCreateRefTypeTag,
	}
}

// WebhookDeleteRefType - The type of Git ref object deleted in the repository.
type WebhookDeleteRefType string

const (
	WebhookDeleteRefTypeBranch WebhookDeleteRefType = "branch"
	WebhookDeleteRefTypeTag WebhookDeleteRefType = "tag"
)

// PossibleWebhookDeleteRefTypeValues returns the possible values for the WebhookDeleteRefType const type.
func PossibleWebhookDeleteRefTypeValues() []WebhookDeleteRefType {
	return []WebhookDeleteRefType{
		WebhookDeleteRefTypeBranch,
		WebhookDeleteRefTypeTag,
	}
}

type WebhookDependabotAlertCreatedAction string

const (
	WebhookDependabotAlertCreatedActionCreated WebhookDependabotAlertCreatedAction = "created"
)

// PossibleWebhookDependabotAlertCreatedActionValues returns the possible values for the WebhookDependabotAlertCreatedAction const type.
func PossibleWebhookDependabotAlertCreatedActionValues() []WebhookDependabotAlertCreatedAction {
	return []WebhookDependabotAlertCreatedAction{
		WebhookDependabotAlertCreatedActionCreated,
	}
}

type WebhookDependabotAlertDismissedAction string

const (
	WebhookDependabotAlertDismissedActionDismissed WebhookDependabotAlertDismissedAction = "dismissed"
)

// PossibleWebhookDependabotAlertDismissedActionValues returns the possible values for the WebhookDependabotAlertDismissedAction const type.
func PossibleWebhookDependabotAlertDismissedActionValues() []WebhookDependabotAlertDismissedAction {
	return []WebhookDependabotAlertDismissedAction{
		WebhookDependabotAlertDismissedActionDismissed,
	}
}

type WebhookDependabotAlertFixedAction string

const (
	WebhookDependabotAlertFixedActionFixed WebhookDependabotAlertFixedAction = "fixed"
)

// PossibleWebhookDependabotAlertFixedActionValues returns the possible values for the WebhookDependabotAlertFixedAction const type.
func PossibleWebhookDependabotAlertFixedActionValues() []WebhookDependabotAlertFixedAction {
	return []WebhookDependabotAlertFixedAction{
		WebhookDependabotAlertFixedActionFixed,
	}
}

type WebhookDependabotAlertReintroducedAction string

const (
	WebhookDependabotAlertReintroducedActionReintroduced WebhookDependabotAlertReintroducedAction = "reintroduced"
)

// PossibleWebhookDependabotAlertReintroducedActionValues returns the possible values for the WebhookDependabotAlertReintroducedAction const type.
func PossibleWebhookDependabotAlertReintroducedActionValues() []WebhookDependabotAlertReintroducedAction {
	return []WebhookDependabotAlertReintroducedAction{
		WebhookDependabotAlertReintroducedActionReintroduced,
	}
}

type WebhookDependabotAlertReopenedAction string

const (
	WebhookDependabotAlertReopenedActionReopened WebhookDependabotAlertReopenedAction = "reopened"
)

// PossibleWebhookDependabotAlertReopenedActionValues returns the possible values for the WebhookDependabotAlertReopenedAction const type.
func PossibleWebhookDependabotAlertReopenedActionValues() []WebhookDependabotAlertReopenedAction {
	return []WebhookDependabotAlertReopenedAction{
		WebhookDependabotAlertReopenedActionReopened,
	}
}

type WebhookDeployKeyCreatedAction string

const (
	WebhookDeployKeyCreatedActionCreated WebhookDeployKeyCreatedAction = "created"
)

// PossibleWebhookDeployKeyCreatedActionValues returns the possible values for the WebhookDeployKeyCreatedAction const type.
func PossibleWebhookDeployKeyCreatedActionValues() []WebhookDeployKeyCreatedAction {
	return []WebhookDeployKeyCreatedAction{
		WebhookDeployKeyCreatedActionCreated,
	}
}

type WebhookDeployKeyDeletedAction string

const (
	WebhookDeployKeyDeletedActionDeleted WebhookDeployKeyDeletedAction = "deleted"
)

// PossibleWebhookDeployKeyDeletedActionValues returns the possible values for the WebhookDeployKeyDeletedAction const type.
func PossibleWebhookDeployKeyDeletedActionValues() []WebhookDeployKeyDeletedAction {
	return []WebhookDeployKeyDeletedAction{
		WebhookDeployKeyDeletedActionDeleted,
	}
}

type WebhookDeploymentCreatedAction string

const (
	WebhookDeploymentCreatedActionCreated WebhookDeploymentCreatedAction = "created"
)

// PossibleWebhookDeploymentCreatedActionValues returns the possible values for the WebhookDeploymentCreatedAction const type.
func PossibleWebhookDeploymentCreatedActionValues() []WebhookDeploymentCreatedAction {
	return []WebhookDeploymentCreatedAction{
		WebhookDeploymentCreatedActionCreated,
	}
}

type WebhookDeploymentCreatedDeploymentCreatorType string

const (
	WebhookDeploymentCreatedDeploymentCreatorTypeBot WebhookDeploymentCreatedDeploymentCreatorType = "Bot"
	WebhookDeploymentCreatedDeploymentCreatorTypeOrganization WebhookDeploymentCreatedDeploymentCreatorType = "Organization"
	WebhookDeploymentCreatedDeploymentCreatorTypeUser WebhookDeploymentCreatedDeploymentCreatorType = "User"
)

// PossibleWebhookDeploymentCreatedDeploymentCreatorTypeValues returns the possible values for the WebhookDeploymentCreatedDeploymentCreatorType const type.
func PossibleWebhookDeploymentCreatedDeploymentCreatorTypeValues() []WebhookDeploymentCreatedDeploymentCreatorType {
	return []WebhookDeploymentCreatedDeploymentCreatorType{
		WebhookDeploymentCreatedDeploymentCreatorTypeBot,
		WebhookDeploymentCreatedDeploymentCreatorTypeOrganization,
		WebhookDeploymentCreatedDeploymentCreatorTypeUser,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemBranchProtectionRule WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemCheckRun WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "check_run"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemCheckSuite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "check_suite"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemCodeScanningAlert WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemCommitComment WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "commit_comment"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemContentReference WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "content_reference"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemCreate WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "create"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemDelete WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "delete"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemDeployKey WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "deploy_key"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemDeployment WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "deployment"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemDeploymentReview WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "deployment_review"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemDeploymentStatus WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "deployment_status"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemDiscussion WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "discussion"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemDiscussionComment WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemFork WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "fork"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemGollum WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "gollum"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemIssueComment WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "issue_comment"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemIssues WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "issues"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemLabel WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "label"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemMember WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "member"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemMembership WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "membership"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemMergeGroup WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "merge_group"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemMergeQueueEntry WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "merge_queue_entry"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemMilestone WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "milestone"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemOrgBlock WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "org_block"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemOrganization WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "organization"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemPageBuild WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "page_build"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemProject WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "project"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemProjectCard WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "project_card"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemProjectColumn WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "project_column"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemPublic WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "public"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemPullRequest WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "pull_request"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemPullRequestReview WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemPullRequestReviewComment WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemPullRequestReviewThread WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "pull_request_review_thread"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemPush WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "push"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemRegistryPackage WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "registry_package"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemRelease WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "release"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemRepository WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "repository"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemRepositoryDispatch WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemSecretScanningAlert WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemSecretScanningAlertLocation WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "secret_scanning_alert_location"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemStar WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "star"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemStatus WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "status"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemTeam WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "team"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemTeamAdd WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "team_add"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemWatch WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "watch"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemWorkflowDispatch WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemWorkflowJob WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "workflow_job"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemWorkflowRun WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItem{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemCheckRun,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemCheckSuite,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemCommitComment,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemContentReference,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemCreate,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemDelete,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemDeployKey,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemDeployment,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemDeploymentReview,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemDiscussion,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemDiscussionComment,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemFork,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemGollum,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemIssueComment,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemIssues,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemLabel,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemMember,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemMembership,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemMergeGroup,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemMergeQueueEntry,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemMilestone,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemOrgBlock,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemOrganization,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemPageBuild,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemProject,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemProjectCard,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemProjectColumn,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemPublic,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemPullRequest,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemPullRequestReview,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemPullRequestReviewThread,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemPush,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemRegistryPackage,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemRelease,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemRepository,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemSecretScanningAlertLocation,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemStar,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemStatus,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemTeam,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemTeamAdd,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemWatch,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemWorkflowJob,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerType string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerTypeBot WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerType = "Bot"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerTypeOrganization WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerType = "Organization"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerTypeUser WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerType const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerTypeValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerType {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerType{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerTypeBot,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerTypeOrganization,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsActions string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsActionsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsActions = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsActionsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsActionsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsActions {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsActions{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsActionsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsAdministration string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsAdministrationRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsAdministration = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsAdministrationWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsAdministrationValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsAdministration {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsAdministration{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsAdministrationRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsChecks string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsChecksRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsChecks = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsChecksWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsChecksValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsChecks {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsChecks{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsChecksRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentReferencesRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentReferencesWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentReferencesValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentReferences {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentReferences{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContents string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContents = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContents {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContents{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDeployments string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDeploymentsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDeployments = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDeploymentsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDeploymentsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDeployments {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDeployments{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDiscussionsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDiscussionsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDiscussionsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDiscussions {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDiscussions{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEmails string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEmailsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEmails = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEmailsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEmailsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEmails {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEmails{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEmailsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEnvironmentsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEnvironmentsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEnvironments {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEnvironments{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsIssues string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsIssuesRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsIssues = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsIssuesWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsIssuesValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsIssues {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsIssues{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsIssuesRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsKeys string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsKeysRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsKeys = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsKeysWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsKeysValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsKeys {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsKeys{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsKeysRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMembers string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMembersRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMembers = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMembersWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMembersValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMembers {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMembers{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMembersRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMetadata string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMetadataRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMetadata = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMetadataWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMetadataValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMetadata {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMetadata{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMetadataRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooksRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlanRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPackages string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPackagesRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPackages = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPackagesWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPackagesValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPackages {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPackages{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPackagesRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPages string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPagesRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPages = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPagesWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPagesValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPages {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPages{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPagesRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPullRequestsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPullRequestsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPullRequestsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPullRequests {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPullRequests{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooksRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecrets string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecrets = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecrets {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecrets{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEventsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEventsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEvents{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSingleFileRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSingleFileWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSingleFileValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSingleFile {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSingleFile{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSingleFileRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsStatuses string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsStatusesRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsStatuses = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsStatusesWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsStatusesValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsStatuses {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsStatuses{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsStatusesRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsWorkflowsRead WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsWorkflowsWrite WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsWorkflowsValues() []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsWorkflows {
	return []WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsWorkflows{
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookDeploymentCreatedDeploymentPerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

type WebhookDeploymentCreatedWorkflowRunActorType string

const (
	WebhookDeploymentCreatedWorkflowRunActorTypeBot WebhookDeploymentCreatedWorkflowRunActorType = "Bot"
	WebhookDeploymentCreatedWorkflowRunActorTypeOrganization WebhookDeploymentCreatedWorkflowRunActorType = "Organization"
	WebhookDeploymentCreatedWorkflowRunActorTypeUser WebhookDeploymentCreatedWorkflowRunActorType = "User"
)

// PossibleWebhookDeploymentCreatedWorkflowRunActorTypeValues returns the possible values for the WebhookDeploymentCreatedWorkflowRunActorType const type.
func PossibleWebhookDeploymentCreatedWorkflowRunActorTypeValues() []WebhookDeploymentCreatedWorkflowRunActorType {
	return []WebhookDeploymentCreatedWorkflowRunActorType{
		WebhookDeploymentCreatedWorkflowRunActorTypeBot,
		WebhookDeploymentCreatedWorkflowRunActorTypeOrganization,
		WebhookDeploymentCreatedWorkflowRunActorTypeUser,
	}
}

type WebhookDeploymentCreatedWorkflowRunConclusion string

const (
	WebhookDeploymentCreatedWorkflowRunConclusionActionRequired WebhookDeploymentCreatedWorkflowRunConclusion = "action_required"
	WebhookDeploymentCreatedWorkflowRunConclusionCancelled WebhookDeploymentCreatedWorkflowRunConclusion = "cancelled"
	WebhookDeploymentCreatedWorkflowRunConclusionFailure WebhookDeploymentCreatedWorkflowRunConclusion = "failure"
	WebhookDeploymentCreatedWorkflowRunConclusionNeutral WebhookDeploymentCreatedWorkflowRunConclusion = "neutral"
	WebhookDeploymentCreatedWorkflowRunConclusionNull WebhookDeploymentCreatedWorkflowRunConclusion = "null"
	WebhookDeploymentCreatedWorkflowRunConclusionStale WebhookDeploymentCreatedWorkflowRunConclusion = "stale"
	WebhookDeploymentCreatedWorkflowRunConclusionSuccess WebhookDeploymentCreatedWorkflowRunConclusion = "success"
	WebhookDeploymentCreatedWorkflowRunConclusionTimedOut WebhookDeploymentCreatedWorkflowRunConclusion = "timed_out"
)

// PossibleWebhookDeploymentCreatedWorkflowRunConclusionValues returns the possible values for the WebhookDeploymentCreatedWorkflowRunConclusion const type.
func PossibleWebhookDeploymentCreatedWorkflowRunConclusionValues() []WebhookDeploymentCreatedWorkflowRunConclusion {
	return []WebhookDeploymentCreatedWorkflowRunConclusion{
		WebhookDeploymentCreatedWorkflowRunConclusionActionRequired,
		WebhookDeploymentCreatedWorkflowRunConclusionCancelled,
		WebhookDeploymentCreatedWorkflowRunConclusionFailure,
		WebhookDeploymentCreatedWorkflowRunConclusionNeutral,
		WebhookDeploymentCreatedWorkflowRunConclusionNull,
		WebhookDeploymentCreatedWorkflowRunConclusionStale,
		WebhookDeploymentCreatedWorkflowRunConclusionSuccess,
		WebhookDeploymentCreatedWorkflowRunConclusionTimedOut,
	}
}

type WebhookDeploymentCreatedWorkflowRunStatus string

const (
	WebhookDeploymentCreatedWorkflowRunStatusCompleted WebhookDeploymentCreatedWorkflowRunStatus = "completed"
	WebhookDeploymentCreatedWorkflowRunStatusInProgress WebhookDeploymentCreatedWorkflowRunStatus = "in_progress"
	WebhookDeploymentCreatedWorkflowRunStatusPending WebhookDeploymentCreatedWorkflowRunStatus = "pending"
	WebhookDeploymentCreatedWorkflowRunStatusQueued WebhookDeploymentCreatedWorkflowRunStatus = "queued"
	WebhookDeploymentCreatedWorkflowRunStatusRequested WebhookDeploymentCreatedWorkflowRunStatus = "requested"
	WebhookDeploymentCreatedWorkflowRunStatusWaiting WebhookDeploymentCreatedWorkflowRunStatus = "waiting"
)

// PossibleWebhookDeploymentCreatedWorkflowRunStatusValues returns the possible values for the WebhookDeploymentCreatedWorkflowRunStatus const type.
func PossibleWebhookDeploymentCreatedWorkflowRunStatusValues() []WebhookDeploymentCreatedWorkflowRunStatus {
	return []WebhookDeploymentCreatedWorkflowRunStatus{
		WebhookDeploymentCreatedWorkflowRunStatusCompleted,
		WebhookDeploymentCreatedWorkflowRunStatusInProgress,
		WebhookDeploymentCreatedWorkflowRunStatusPending,
		WebhookDeploymentCreatedWorkflowRunStatusQueued,
		WebhookDeploymentCreatedWorkflowRunStatusRequested,
		WebhookDeploymentCreatedWorkflowRunStatusWaiting,
	}
}

type WebhookDeploymentCreatedWorkflowRunTriggeringActorType string

const (
	WebhookDeploymentCreatedWorkflowRunTriggeringActorTypeBot WebhookDeploymentCreatedWorkflowRunTriggeringActorType = "Bot"
	WebhookDeploymentCreatedWorkflowRunTriggeringActorTypeOrganization WebhookDeploymentCreatedWorkflowRunTriggeringActorType = "Organization"
	WebhookDeploymentCreatedWorkflowRunTriggeringActorTypeUser WebhookDeploymentCreatedWorkflowRunTriggeringActorType = "User"
)

// PossibleWebhookDeploymentCreatedWorkflowRunTriggeringActorTypeValues returns the possible values for the WebhookDeploymentCreatedWorkflowRunTriggeringActorType const type.
func PossibleWebhookDeploymentCreatedWorkflowRunTriggeringActorTypeValues() []WebhookDeploymentCreatedWorkflowRunTriggeringActorType {
	return []WebhookDeploymentCreatedWorkflowRunTriggeringActorType{
		WebhookDeploymentCreatedWorkflowRunTriggeringActorTypeBot,
		WebhookDeploymentCreatedWorkflowRunTriggeringActorTypeOrganization,
		WebhookDeploymentCreatedWorkflowRunTriggeringActorTypeUser,
	}
}

type WebhookDeploymentStatusCreatedAction string

const (
	WebhookDeploymentStatusCreatedActionCreated WebhookDeploymentStatusCreatedAction = "created"
)

// PossibleWebhookDeploymentStatusCreatedActionValues returns the possible values for the WebhookDeploymentStatusCreatedAction const type.
func PossibleWebhookDeploymentStatusCreatedActionValues() []WebhookDeploymentStatusCreatedAction {
	return []WebhookDeploymentStatusCreatedAction{
		WebhookDeploymentStatusCreatedActionCreated,
	}
}

// WebhookDeploymentStatusCreatedCheckRunConclusion - The result of the completed check run. Can be one of success, failure,
// neutral, cancelled, timed_out, action_required or stale. This value will be null until the check run has completed.
type WebhookDeploymentStatusCreatedCheckRunConclusion string

const (
	WebhookDeploymentStatusCreatedCheckRunConclusionActionRequired WebhookDeploymentStatusCreatedCheckRunConclusion = "action_required"
	WebhookDeploymentStatusCreatedCheckRunConclusionCancelled WebhookDeploymentStatusCreatedCheckRunConclusion = "cancelled"
	WebhookDeploymentStatusCreatedCheckRunConclusionFailure WebhookDeploymentStatusCreatedCheckRunConclusion = "failure"
	WebhookDeploymentStatusCreatedCheckRunConclusionNeutral WebhookDeploymentStatusCreatedCheckRunConclusion = "neutral"
	WebhookDeploymentStatusCreatedCheckRunConclusionNull WebhookDeploymentStatusCreatedCheckRunConclusion = "null"
	WebhookDeploymentStatusCreatedCheckRunConclusionSkipped WebhookDeploymentStatusCreatedCheckRunConclusion = "skipped"
	WebhookDeploymentStatusCreatedCheckRunConclusionStale WebhookDeploymentStatusCreatedCheckRunConclusion = "stale"
	WebhookDeploymentStatusCreatedCheckRunConclusionSuccess WebhookDeploymentStatusCreatedCheckRunConclusion = "success"
	WebhookDeploymentStatusCreatedCheckRunConclusionTimedOut WebhookDeploymentStatusCreatedCheckRunConclusion = "timed_out"
)

// PossibleWebhookDeploymentStatusCreatedCheckRunConclusionValues returns the possible values for the WebhookDeploymentStatusCreatedCheckRunConclusion const type.
func PossibleWebhookDeploymentStatusCreatedCheckRunConclusionValues() []WebhookDeploymentStatusCreatedCheckRunConclusion {
	return []WebhookDeploymentStatusCreatedCheckRunConclusion{
		WebhookDeploymentStatusCreatedCheckRunConclusionActionRequired,
		WebhookDeploymentStatusCreatedCheckRunConclusionCancelled,
		WebhookDeploymentStatusCreatedCheckRunConclusionFailure,
		WebhookDeploymentStatusCreatedCheckRunConclusionNeutral,
		WebhookDeploymentStatusCreatedCheckRunConclusionNull,
		WebhookDeploymentStatusCreatedCheckRunConclusionSkipped,
		WebhookDeploymentStatusCreatedCheckRunConclusionStale,
		WebhookDeploymentStatusCreatedCheckRunConclusionSuccess,
		WebhookDeploymentStatusCreatedCheckRunConclusionTimedOut,
	}
}

// WebhookDeploymentStatusCreatedCheckRunStatus - The current status of the check run. Can be queued, in_progress, or completed.
type WebhookDeploymentStatusCreatedCheckRunStatus string

const (
	WebhookDeploymentStatusCreatedCheckRunStatusCompleted WebhookDeploymentStatusCreatedCheckRunStatus = "completed"
	WebhookDeploymentStatusCreatedCheckRunStatusInProgress WebhookDeploymentStatusCreatedCheckRunStatus = "in_progress"
	WebhookDeploymentStatusCreatedCheckRunStatusPending WebhookDeploymentStatusCreatedCheckRunStatus = "pending"
	WebhookDeploymentStatusCreatedCheckRunStatusQueued WebhookDeploymentStatusCreatedCheckRunStatus = "queued"
	WebhookDeploymentStatusCreatedCheckRunStatusWaiting WebhookDeploymentStatusCreatedCheckRunStatus = "waiting"
)

// PossibleWebhookDeploymentStatusCreatedCheckRunStatusValues returns the possible values for the WebhookDeploymentStatusCreatedCheckRunStatus const type.
func PossibleWebhookDeploymentStatusCreatedCheckRunStatusValues() []WebhookDeploymentStatusCreatedCheckRunStatus {
	return []WebhookDeploymentStatusCreatedCheckRunStatus{
		WebhookDeploymentStatusCreatedCheckRunStatusCompleted,
		WebhookDeploymentStatusCreatedCheckRunStatusInProgress,
		WebhookDeploymentStatusCreatedCheckRunStatusPending,
		WebhookDeploymentStatusCreatedCheckRunStatusQueued,
		WebhookDeploymentStatusCreatedCheckRunStatusWaiting,
	}
}

type WebhookDeploymentStatusCreatedDeploymentCreatorType string

const (
	WebhookDeploymentStatusCreatedDeploymentCreatorTypeBot WebhookDeploymentStatusCreatedDeploymentCreatorType = "Bot"
	WebhookDeploymentStatusCreatedDeploymentCreatorTypeOrganization WebhookDeploymentStatusCreatedDeploymentCreatorType = "Organization"
	WebhookDeploymentStatusCreatedDeploymentCreatorTypeUser WebhookDeploymentStatusCreatedDeploymentCreatorType = "User"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentCreatorTypeValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentCreatorType const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentCreatorTypeValues() []WebhookDeploymentStatusCreatedDeploymentCreatorType {
	return []WebhookDeploymentStatusCreatedDeploymentCreatorType{
		WebhookDeploymentStatusCreatedDeploymentCreatorTypeBot,
		WebhookDeploymentStatusCreatedDeploymentCreatorTypeOrganization,
		WebhookDeploymentStatusCreatedDeploymentCreatorTypeUser,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemBranchProtectionRule WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemCheckRun WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "check_run"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemCheckSuite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "check_suite"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemCodeScanningAlert WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemCommitComment WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "commit_comment"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemContentReference WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "content_reference"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemCreate WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "create"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemDelete WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "delete"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemDeployKey WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "deploy_key"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemDeployment WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "deployment"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemDeploymentReview WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "deployment_review"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemDeploymentStatus WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "deployment_status"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemDiscussion WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "discussion"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemDiscussionComment WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemFork WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "fork"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemGollum WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "gollum"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemIssueComment WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "issue_comment"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemIssues WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "issues"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemLabel WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "label"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemMember WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "member"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemMembership WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "membership"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemMergeGroup WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "merge_group"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemMergeQueueEntry WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "merge_queue_entry"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemMilestone WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "milestone"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemOrgBlock WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "org_block"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemOrganization WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "organization"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemPageBuild WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "page_build"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemProject WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "project"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemProjectCard WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "project_card"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemProjectColumn WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "project_column"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemPublic WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "public"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemPullRequest WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "pull_request"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemPullRequestReview WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemPullRequestReviewComment WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemPullRequestReviewThread WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "pull_request_review_thread"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemPush WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "push"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemRegistryPackage WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "registry_package"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemRelease WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "release"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemRepository WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "repository"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemRepositoryDispatch WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemSecretScanningAlert WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemSecretScanningAlertLocation WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "secret_scanning_alert_location"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemStar WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "star"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemStatus WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "status"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemTeam WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "team"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemTeamAdd WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "team_add"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemWatch WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "watch"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemWorkflowDispatch WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemWorkflowJob WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "workflow_job"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemWorkflowRun WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItem{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemCheckRun,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemCheckSuite,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemCommitComment,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemContentReference,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemCreate,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemDelete,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemDeployKey,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemDeployment,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemDeploymentReview,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemDiscussion,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemDiscussionComment,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemFork,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemGollum,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemIssueComment,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemIssues,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemLabel,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemMember,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemMembership,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemMergeGroup,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemMergeQueueEntry,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemMilestone,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemOrgBlock,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemOrganization,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemPageBuild,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemProject,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemProjectCard,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemProjectColumn,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemPublic,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemPullRequest,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemPullRequestReview,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemPullRequestReviewThread,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemPush,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemRegistryPackage,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemRelease,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemRepository,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemSecretScanningAlertLocation,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemStar,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemStatus,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemTeam,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemTeamAdd,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemWatch,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemWorkflowJob,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerType string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerTypeBot WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerType = "Bot"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerTypeOrganization WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerType = "Organization"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerTypeUser WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerType const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerTypeValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerType {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerType{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerTypeBot,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerTypeOrganization,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActionsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActionsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActionsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActions{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActionsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsAdministration string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsAdministrationRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsAdministration = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsAdministrationWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsAdministrationValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsAdministration {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsAdministration{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsAdministrationRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsChecks string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsChecksRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsChecks = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsChecksWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsChecksValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsChecks {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsChecks{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsChecksRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentReferencesRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentReferencesWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentReferencesValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentReferences {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentReferences{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContents string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContents = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContents {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContents{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDeployments string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDeploymentsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDeployments = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDeploymentsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDeploymentsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDeployments {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDeployments{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDiscussionsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDiscussionsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDiscussionsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDiscussions {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDiscussions{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEmails string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEmailsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEmails = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEmailsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEmailsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEmails {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEmails{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEmailsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEnvironmentsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEnvironmentsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEnvironments {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEnvironments{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsIssues string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsIssuesRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsIssues = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsIssuesWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsIssuesValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsIssues {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsIssues{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsIssuesRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsKeys string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsKeysRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsKeys = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsKeysWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsKeysValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsKeys {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsKeys{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsKeysRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMembers string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMembersRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMembers = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMembersWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMembersValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMembers {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMembers{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMembersRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMetadata string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMetadataRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMetadata = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMetadataWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMetadataValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMetadata {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMetadata{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMetadataRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooksRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlanRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPackages string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPackagesRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPackages = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPackagesWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPackagesValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPackages {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPackages{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPackagesRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPages string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPagesRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPages = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPagesWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPagesValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPages {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPages{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPagesRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPullRequestsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPullRequestsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPullRequestsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPullRequests {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPullRequests{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooksRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecrets string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecrets = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecrets {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecrets{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEventsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEventsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEvents{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSingleFileRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSingleFileWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSingleFileValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSingleFile {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSingleFile{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSingleFileRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsStatuses string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsStatusesRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsStatuses = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsStatusesWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsStatusesValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsStatuses {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsStatuses{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsStatusesRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsWorkflowsRead WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsWorkflowsWrite WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsWorkflowsValues() []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsWorkflows {
	return []WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsWorkflows{
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookDeploymentStatusCreatedDeploymentPerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusCreatorType string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusCreatorTypeBot WebhookDeploymentStatusCreatedDeploymentStatusCreatorType = "Bot"
	WebhookDeploymentStatusCreatedDeploymentStatusCreatorTypeOrganization WebhookDeploymentStatusCreatedDeploymentStatusCreatorType = "Organization"
	WebhookDeploymentStatusCreatedDeploymentStatusCreatorTypeUser WebhookDeploymentStatusCreatedDeploymentStatusCreatorType = "User"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusCreatorTypeValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusCreatorType const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusCreatorTypeValues() []WebhookDeploymentStatusCreatedDeploymentStatusCreatorType {
	return []WebhookDeploymentStatusCreatedDeploymentStatusCreatorType{
		WebhookDeploymentStatusCreatedDeploymentStatusCreatorTypeBot,
		WebhookDeploymentStatusCreatedDeploymentStatusCreatorTypeOrganization,
		WebhookDeploymentStatusCreatedDeploymentStatusCreatorTypeUser,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemBranchProtectionRule WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemCheckRun WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "check_run"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemCheckSuite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "check_suite"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemCodeScanningAlert WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemCommitComment WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "commit_comment"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemContentReference WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "content_reference"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemCreate WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "create"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemDelete WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "delete"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemDeployKey WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "deploy_key"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemDeployment WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "deployment"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemDeploymentReview WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "deployment_review"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemDeploymentStatus WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "deployment_status"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemDiscussion WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "discussion"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemDiscussionComment WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemFork WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "fork"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemGollum WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "gollum"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemIssueComment WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "issue_comment"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemIssues WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "issues"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemLabel WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "label"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemMember WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "member"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemMembership WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "membership"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemMergeGroup WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "merge_group"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemMergeQueueEntry WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "merge_queue_entry"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemMilestone WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "milestone"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemOrgBlock WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "org_block"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemOrganization WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "organization"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemPageBuild WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "page_build"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemProject WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "project"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemProjectCard WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "project_card"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemProjectColumn WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "project_column"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemPublic WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "public"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemPullRequest WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "pull_request"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemPullRequestReview WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemPullRequestReviewComment WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemPullRequestReviewThread WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "pull_request_review_thread"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemPush WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "push"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemRegistryPackage WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "registry_package"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemRelease WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "release"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemRepository WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "repository"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemRepositoryDispatch WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemSecretScanningAlert WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemSecretScanningAlertLocation WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "secret_scanning_alert_location"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemStar WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "star"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemStatus WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "status"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemTeam WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "team"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemTeamAdd WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "team_add"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemWatch WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "watch"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemWorkflowDispatch WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemWorkflowJob WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "workflow_job"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemWorkflowRun WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItem{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemCheckRun,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemCheckSuite,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemCommitComment,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemContentReference,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemCreate,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemDelete,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemDeployKey,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemDeployment,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemDeploymentReview,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemDiscussion,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemDiscussionComment,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemFork,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemGollum,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemIssueComment,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemIssues,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemLabel,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemMember,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemMembership,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemMergeGroup,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemMergeQueueEntry,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemMilestone,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemOrgBlock,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemOrganization,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemPageBuild,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemProject,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemProjectCard,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemProjectColumn,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemPublic,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemPullRequest,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemPullRequestReview,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemPullRequestReviewThread,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemPush,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemRegistryPackage,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemRelease,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemRepository,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemSecretScanningAlertLocation,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemStar,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemStatus,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemTeam,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemTeamAdd,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemWatch,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemWorkflowJob,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerType string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerTypeBot WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerType = "Bot"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerTypeOrganization WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerType = "Organization"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerTypeUser WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerType const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerTypeValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerType {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerType{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerTypeBot,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerTypeOrganization,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsActions string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsActionsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsActions = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsActionsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsActionsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsActions {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsActions{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsActionsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsAdministration string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsAdministrationRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsAdministration = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsAdministrationWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsAdministrationValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsAdministration {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsAdministration{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsAdministrationRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsChecks string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsChecksRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsChecks = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsChecksWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsChecksValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsChecks {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsChecks{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsChecksRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentReferencesRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentReferencesWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentReferencesValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentReferences {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentReferences{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContents string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContents = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContents {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContents{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDeployments string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDeploymentsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDeployments = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDeploymentsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDeploymentsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDeployments {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDeployments{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDiscussionsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDiscussionsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDiscussionsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDiscussions {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDiscussions{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEmails string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEmailsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEmails = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEmailsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEmailsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEmails {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEmails{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEmailsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEnvironmentsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEnvironmentsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEnvironments {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEnvironments{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsIssues string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsIssuesRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsIssues = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsIssuesWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsIssuesValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsIssues {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsIssues{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsIssuesRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsKeys string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsKeysRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsKeys = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsKeysWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsKeysValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsKeys {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsKeys{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsKeysRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMembers string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMembersRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMembers = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMembersWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMembersValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMembers {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMembers{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMembersRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMetadata string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMetadataRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMetadata = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMetadataWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMetadataValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMetadata {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMetadata{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMetadataRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationHooksRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPlanRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPackages string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPackagesRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPackages = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPackagesWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPackagesValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPackages {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPackages{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPackagesRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPages string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPagesRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPages = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPagesWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPagesValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPages {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPages{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPagesRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPullRequestsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPullRequestsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPullRequestsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPullRequests {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPullRequests{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryHooksRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecrets string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecrets = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecrets {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecrets{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityEventsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityEventsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityEvents{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSingleFileRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSingleFileWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSingleFileValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSingleFile {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSingleFile{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSingleFileRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsStatuses string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsStatusesRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsStatuses = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsStatusesWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsStatusesValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsStatuses {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsStatuses{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsStatusesRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsWorkflowsRead WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsWorkflowsWrite WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsWorkflowsValues() []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsWorkflows {
	return []WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsWorkflows{
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookDeploymentStatusCreatedDeploymentStatusPerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

type WebhookDeploymentStatusCreatedWorkflowRunActorType string

const (
	WebhookDeploymentStatusCreatedWorkflowRunActorTypeBot WebhookDeploymentStatusCreatedWorkflowRunActorType = "Bot"
	WebhookDeploymentStatusCreatedWorkflowRunActorTypeOrganization WebhookDeploymentStatusCreatedWorkflowRunActorType = "Organization"
	WebhookDeploymentStatusCreatedWorkflowRunActorTypeUser WebhookDeploymentStatusCreatedWorkflowRunActorType = "User"
)

// PossibleWebhookDeploymentStatusCreatedWorkflowRunActorTypeValues returns the possible values for the WebhookDeploymentStatusCreatedWorkflowRunActorType const type.
func PossibleWebhookDeploymentStatusCreatedWorkflowRunActorTypeValues() []WebhookDeploymentStatusCreatedWorkflowRunActorType {
	return []WebhookDeploymentStatusCreatedWorkflowRunActorType{
		WebhookDeploymentStatusCreatedWorkflowRunActorTypeBot,
		WebhookDeploymentStatusCreatedWorkflowRunActorTypeOrganization,
		WebhookDeploymentStatusCreatedWorkflowRunActorTypeUser,
	}
}

type WebhookDeploymentStatusCreatedWorkflowRunConclusion string

const (
	WebhookDeploymentStatusCreatedWorkflowRunConclusionActionRequired WebhookDeploymentStatusCreatedWorkflowRunConclusion = "action_required"
	WebhookDeploymentStatusCreatedWorkflowRunConclusionCancelled WebhookDeploymentStatusCreatedWorkflowRunConclusion = "cancelled"
	WebhookDeploymentStatusCreatedWorkflowRunConclusionFailure WebhookDeploymentStatusCreatedWorkflowRunConclusion = "failure"
	WebhookDeploymentStatusCreatedWorkflowRunConclusionNeutral WebhookDeploymentStatusCreatedWorkflowRunConclusion = "neutral"
	WebhookDeploymentStatusCreatedWorkflowRunConclusionNull WebhookDeploymentStatusCreatedWorkflowRunConclusion = "null"
	WebhookDeploymentStatusCreatedWorkflowRunConclusionStale WebhookDeploymentStatusCreatedWorkflowRunConclusion = "stale"
	WebhookDeploymentStatusCreatedWorkflowRunConclusionStartupFailure WebhookDeploymentStatusCreatedWorkflowRunConclusion = "startup_failure"
	WebhookDeploymentStatusCreatedWorkflowRunConclusionSuccess WebhookDeploymentStatusCreatedWorkflowRunConclusion = "success"
	WebhookDeploymentStatusCreatedWorkflowRunConclusionTimedOut WebhookDeploymentStatusCreatedWorkflowRunConclusion = "timed_out"
)

// PossibleWebhookDeploymentStatusCreatedWorkflowRunConclusionValues returns the possible values for the WebhookDeploymentStatusCreatedWorkflowRunConclusion const type.
func PossibleWebhookDeploymentStatusCreatedWorkflowRunConclusionValues() []WebhookDeploymentStatusCreatedWorkflowRunConclusion {
	return []WebhookDeploymentStatusCreatedWorkflowRunConclusion{
		WebhookDeploymentStatusCreatedWorkflowRunConclusionActionRequired,
		WebhookDeploymentStatusCreatedWorkflowRunConclusionCancelled,
		WebhookDeploymentStatusCreatedWorkflowRunConclusionFailure,
		WebhookDeploymentStatusCreatedWorkflowRunConclusionNeutral,
		WebhookDeploymentStatusCreatedWorkflowRunConclusionNull,
		WebhookDeploymentStatusCreatedWorkflowRunConclusionStale,
		WebhookDeploymentStatusCreatedWorkflowRunConclusionStartupFailure,
		WebhookDeploymentStatusCreatedWorkflowRunConclusionSuccess,
		WebhookDeploymentStatusCreatedWorkflowRunConclusionTimedOut,
	}
}

type WebhookDeploymentStatusCreatedWorkflowRunStatus string

const (
	WebhookDeploymentStatusCreatedWorkflowRunStatusCompleted WebhookDeploymentStatusCreatedWorkflowRunStatus = "completed"
	WebhookDeploymentStatusCreatedWorkflowRunStatusInProgress WebhookDeploymentStatusCreatedWorkflowRunStatus = "in_progress"
	WebhookDeploymentStatusCreatedWorkflowRunStatusPending WebhookDeploymentStatusCreatedWorkflowRunStatus = "pending"
	WebhookDeploymentStatusCreatedWorkflowRunStatusQueued WebhookDeploymentStatusCreatedWorkflowRunStatus = "queued"
	WebhookDeploymentStatusCreatedWorkflowRunStatusRequested WebhookDeploymentStatusCreatedWorkflowRunStatus = "requested"
	WebhookDeploymentStatusCreatedWorkflowRunStatusWaiting WebhookDeploymentStatusCreatedWorkflowRunStatus = "waiting"
)

// PossibleWebhookDeploymentStatusCreatedWorkflowRunStatusValues returns the possible values for the WebhookDeploymentStatusCreatedWorkflowRunStatus const type.
func PossibleWebhookDeploymentStatusCreatedWorkflowRunStatusValues() []WebhookDeploymentStatusCreatedWorkflowRunStatus {
	return []WebhookDeploymentStatusCreatedWorkflowRunStatus{
		WebhookDeploymentStatusCreatedWorkflowRunStatusCompleted,
		WebhookDeploymentStatusCreatedWorkflowRunStatusInProgress,
		WebhookDeploymentStatusCreatedWorkflowRunStatusPending,
		WebhookDeploymentStatusCreatedWorkflowRunStatusQueued,
		WebhookDeploymentStatusCreatedWorkflowRunStatusRequested,
		WebhookDeploymentStatusCreatedWorkflowRunStatusWaiting,
	}
}

type WebhookDeploymentStatusCreatedWorkflowRunTriggeringActorType string

const (
	WebhookDeploymentStatusCreatedWorkflowRunTriggeringActorTypeBot WebhookDeploymentStatusCreatedWorkflowRunTriggeringActorType = "Bot"
	WebhookDeploymentStatusCreatedWorkflowRunTriggeringActorTypeOrganization WebhookDeploymentStatusCreatedWorkflowRunTriggeringActorType = "Organization"
	WebhookDeploymentStatusCreatedWorkflowRunTriggeringActorTypeUser WebhookDeploymentStatusCreatedWorkflowRunTriggeringActorType = "User"
)

// PossibleWebhookDeploymentStatusCreatedWorkflowRunTriggeringActorTypeValues returns the possible values for the WebhookDeploymentStatusCreatedWorkflowRunTriggeringActorType const type.
func PossibleWebhookDeploymentStatusCreatedWorkflowRunTriggeringActorTypeValues() []WebhookDeploymentStatusCreatedWorkflowRunTriggeringActorType {
	return []WebhookDeploymentStatusCreatedWorkflowRunTriggeringActorType{
		WebhookDeploymentStatusCreatedWorkflowRunTriggeringActorTypeBot,
		WebhookDeploymentStatusCreatedWorkflowRunTriggeringActorTypeOrganization,
		WebhookDeploymentStatusCreatedWorkflowRunTriggeringActorTypeUser,
	}
}

type WebhookDiscussionAnsweredAction string

const (
	WebhookDiscussionAnsweredActionAnswered WebhookDiscussionAnsweredAction = "answered"
)

// PossibleWebhookDiscussionAnsweredActionValues returns the possible values for the WebhookDiscussionAnsweredAction const type.
func PossibleWebhookDiscussionAnsweredActionValues() []WebhookDiscussionAnsweredAction {
	return []WebhookDiscussionAnsweredAction{
		WebhookDiscussionAnsweredActionAnswered,
	}
}

// WebhookDiscussionAnsweredAnswerAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionAnsweredAnswerAuthorAssociation string

const (
	WebhookDiscussionAnsweredAnswerAuthorAssociationCOLLABORATOR WebhookDiscussionAnsweredAnswerAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionAnsweredAnswerAuthorAssociationCONTRIBUTOR WebhookDiscussionAnsweredAnswerAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionAnsweredAnswerAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionAnsweredAnswerAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionAnsweredAnswerAuthorAssociationFIRSTTIMER WebhookDiscussionAnsweredAnswerAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionAnsweredAnswerAuthorAssociationMANNEQUIN WebhookDiscussionAnsweredAnswerAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionAnsweredAnswerAuthorAssociationMEMBER WebhookDiscussionAnsweredAnswerAuthorAssociation = "MEMBER"
	WebhookDiscussionAnsweredAnswerAuthorAssociationNONE WebhookDiscussionAnsweredAnswerAuthorAssociation = "NONE"
	WebhookDiscussionAnsweredAnswerAuthorAssociationOWNER WebhookDiscussionAnsweredAnswerAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionAnsweredAnswerAuthorAssociationValues returns the possible values for the WebhookDiscussionAnsweredAnswerAuthorAssociation const type.
func PossibleWebhookDiscussionAnsweredAnswerAuthorAssociationValues() []WebhookDiscussionAnsweredAnswerAuthorAssociation {
	return []WebhookDiscussionAnsweredAnswerAuthorAssociation{
		WebhookDiscussionAnsweredAnswerAuthorAssociationCOLLABORATOR,
		WebhookDiscussionAnsweredAnswerAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionAnsweredAnswerAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionAnsweredAnswerAuthorAssociationFIRSTTIMER,
		WebhookDiscussionAnsweredAnswerAuthorAssociationMANNEQUIN,
		WebhookDiscussionAnsweredAnswerAuthorAssociationMEMBER,
		WebhookDiscussionAnsweredAnswerAuthorAssociationNONE,
		WebhookDiscussionAnsweredAnswerAuthorAssociationOWNER,
	}
}

type WebhookDiscussionAnsweredAnswerUserType string

const (
	WebhookDiscussionAnsweredAnswerUserTypeBot WebhookDiscussionAnsweredAnswerUserType = "Bot"
	WebhookDiscussionAnsweredAnswerUserTypeOrganization WebhookDiscussionAnsweredAnswerUserType = "Organization"
	WebhookDiscussionAnsweredAnswerUserTypeUser WebhookDiscussionAnsweredAnswerUserType = "User"
)

// PossibleWebhookDiscussionAnsweredAnswerUserTypeValues returns the possible values for the WebhookDiscussionAnsweredAnswerUserType const type.
func PossibleWebhookDiscussionAnsweredAnswerUserTypeValues() []WebhookDiscussionAnsweredAnswerUserType {
	return []WebhookDiscussionAnsweredAnswerUserType{
		WebhookDiscussionAnsweredAnswerUserTypeBot,
		WebhookDiscussionAnsweredAnswerUserTypeOrganization,
		WebhookDiscussionAnsweredAnswerUserTypeUser,
	}
}

type WebhookDiscussionAnsweredDiscussion0AnswerChosenByType string

const (
	WebhookDiscussionAnsweredDiscussion0AnswerChosenByTypeBot WebhookDiscussionAnsweredDiscussion0AnswerChosenByType = "Bot"
	WebhookDiscussionAnsweredDiscussion0AnswerChosenByTypeOrganization WebhookDiscussionAnsweredDiscussion0AnswerChosenByType = "Organization"
	WebhookDiscussionAnsweredDiscussion0AnswerChosenByTypeUser WebhookDiscussionAnsweredDiscussion0AnswerChosenByType = "User"
)

// PossibleWebhookDiscussionAnsweredDiscussion0AnswerChosenByTypeValues returns the possible values for the WebhookDiscussionAnsweredDiscussion0AnswerChosenByType const type.
func PossibleWebhookDiscussionAnsweredDiscussion0AnswerChosenByTypeValues() []WebhookDiscussionAnsweredDiscussion0AnswerChosenByType {
	return []WebhookDiscussionAnsweredDiscussion0AnswerChosenByType{
		WebhookDiscussionAnsweredDiscussion0AnswerChosenByTypeBot,
		WebhookDiscussionAnsweredDiscussion0AnswerChosenByTypeOrganization,
		WebhookDiscussionAnsweredDiscussion0AnswerChosenByTypeUser,
	}
}

// WebhookDiscussionAnsweredDiscussion0AuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionAnsweredDiscussion0AuthorAssociation string

const (
	WebhookDiscussionAnsweredDiscussion0AuthorAssociationCOLLABORATOR WebhookDiscussionAnsweredDiscussion0AuthorAssociation = "COLLABORATOR"
	WebhookDiscussionAnsweredDiscussion0AuthorAssociationCONTRIBUTOR WebhookDiscussionAnsweredDiscussion0AuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionAnsweredDiscussion0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionAnsweredDiscussion0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionAnsweredDiscussion0AuthorAssociationFIRSTTIMER WebhookDiscussionAnsweredDiscussion0AuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionAnsweredDiscussion0AuthorAssociationMANNEQUIN WebhookDiscussionAnsweredDiscussion0AuthorAssociation = "MANNEQUIN"
	WebhookDiscussionAnsweredDiscussion0AuthorAssociationMEMBER WebhookDiscussionAnsweredDiscussion0AuthorAssociation = "MEMBER"
	WebhookDiscussionAnsweredDiscussion0AuthorAssociationNONE WebhookDiscussionAnsweredDiscussion0AuthorAssociation = "NONE"
	WebhookDiscussionAnsweredDiscussion0AuthorAssociationOWNER WebhookDiscussionAnsweredDiscussion0AuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionAnsweredDiscussion0AuthorAssociationValues returns the possible values for the WebhookDiscussionAnsweredDiscussion0AuthorAssociation const type.
func PossibleWebhookDiscussionAnsweredDiscussion0AuthorAssociationValues() []WebhookDiscussionAnsweredDiscussion0AuthorAssociation {
	return []WebhookDiscussionAnsweredDiscussion0AuthorAssociation{
		WebhookDiscussionAnsweredDiscussion0AuthorAssociationCOLLABORATOR,
		WebhookDiscussionAnsweredDiscussion0AuthorAssociationCONTRIBUTOR,
		WebhookDiscussionAnsweredDiscussion0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionAnsweredDiscussion0AuthorAssociationFIRSTTIMER,
		WebhookDiscussionAnsweredDiscussion0AuthorAssociationMANNEQUIN,
		WebhookDiscussionAnsweredDiscussion0AuthorAssociationMEMBER,
		WebhookDiscussionAnsweredDiscussion0AuthorAssociationNONE,
		WebhookDiscussionAnsweredDiscussion0AuthorAssociationOWNER,
	}
}

type WebhookDiscussionAnsweredDiscussion0State string

const (
	WebhookDiscussionAnsweredDiscussion0StateConverting WebhookDiscussionAnsweredDiscussion0State = "converting"
	WebhookDiscussionAnsweredDiscussion0StateLocked WebhookDiscussionAnsweredDiscussion0State = "locked"
	WebhookDiscussionAnsweredDiscussion0StateOpen WebhookDiscussionAnsweredDiscussion0State = "open"
	WebhookDiscussionAnsweredDiscussion0StateTransferring WebhookDiscussionAnsweredDiscussion0State = "transferring"
)

// PossibleWebhookDiscussionAnsweredDiscussion0StateValues returns the possible values for the WebhookDiscussionAnsweredDiscussion0State const type.
func PossibleWebhookDiscussionAnsweredDiscussion0StateValues() []WebhookDiscussionAnsweredDiscussion0State {
	return []WebhookDiscussionAnsweredDiscussion0State{
		WebhookDiscussionAnsweredDiscussion0StateConverting,
		WebhookDiscussionAnsweredDiscussion0StateLocked,
		WebhookDiscussionAnsweredDiscussion0StateOpen,
		WebhookDiscussionAnsweredDiscussion0StateTransferring,
	}
}

type WebhookDiscussionAnsweredDiscussion0UserType string

const (
	WebhookDiscussionAnsweredDiscussion0UserTypeBot WebhookDiscussionAnsweredDiscussion0UserType = "Bot"
	WebhookDiscussionAnsweredDiscussion0UserTypeOrganization WebhookDiscussionAnsweredDiscussion0UserType = "Organization"
	WebhookDiscussionAnsweredDiscussion0UserTypeUser WebhookDiscussionAnsweredDiscussion0UserType = "User"
)

// PossibleWebhookDiscussionAnsweredDiscussion0UserTypeValues returns the possible values for the WebhookDiscussionAnsweredDiscussion0UserType const type.
func PossibleWebhookDiscussionAnsweredDiscussion0UserTypeValues() []WebhookDiscussionAnsweredDiscussion0UserType {
	return []WebhookDiscussionAnsweredDiscussion0UserType{
		WebhookDiscussionAnsweredDiscussion0UserTypeBot,
		WebhookDiscussionAnsweredDiscussion0UserTypeOrganization,
		WebhookDiscussionAnsweredDiscussion0UserTypeUser,
	}
}

type WebhookDiscussionAnsweredDiscussion1AnswerChosenByType string

const (
	WebhookDiscussionAnsweredDiscussion1AnswerChosenByTypeBot WebhookDiscussionAnsweredDiscussion1AnswerChosenByType = "Bot"
	WebhookDiscussionAnsweredDiscussion1AnswerChosenByTypeOrganization WebhookDiscussionAnsweredDiscussion1AnswerChosenByType = "Organization"
	WebhookDiscussionAnsweredDiscussion1AnswerChosenByTypeUser WebhookDiscussionAnsweredDiscussion1AnswerChosenByType = "User"
)

// PossibleWebhookDiscussionAnsweredDiscussion1AnswerChosenByTypeValues returns the possible values for the WebhookDiscussionAnsweredDiscussion1AnswerChosenByType const type.
func PossibleWebhookDiscussionAnsweredDiscussion1AnswerChosenByTypeValues() []WebhookDiscussionAnsweredDiscussion1AnswerChosenByType {
	return []WebhookDiscussionAnsweredDiscussion1AnswerChosenByType{
		WebhookDiscussionAnsweredDiscussion1AnswerChosenByTypeBot,
		WebhookDiscussionAnsweredDiscussion1AnswerChosenByTypeOrganization,
		WebhookDiscussionAnsweredDiscussion1AnswerChosenByTypeUser,
	}
}

type WebhookDiscussionCategoryChangedAction string

const (
	WebhookDiscussionCategoryChangedActionCategoryChanged WebhookDiscussionCategoryChangedAction = "category_changed"
)

// PossibleWebhookDiscussionCategoryChangedActionValues returns the possible values for the WebhookDiscussionCategoryChangedAction const type.
func PossibleWebhookDiscussionCategoryChangedActionValues() []WebhookDiscussionCategoryChangedAction {
	return []WebhookDiscussionCategoryChangedAction{
		WebhookDiscussionCategoryChangedActionCategoryChanged,
	}
}

type WebhookDiscussionCategoryChangedDiscussionAnswerChosenByType string

const (
	WebhookDiscussionCategoryChangedDiscussionAnswerChosenByTypeBot WebhookDiscussionCategoryChangedDiscussionAnswerChosenByType = "Bot"
	WebhookDiscussionCategoryChangedDiscussionAnswerChosenByTypeOrganization WebhookDiscussionCategoryChangedDiscussionAnswerChosenByType = "Organization"
	WebhookDiscussionCategoryChangedDiscussionAnswerChosenByTypeUser WebhookDiscussionCategoryChangedDiscussionAnswerChosenByType = "User"
)

// PossibleWebhookDiscussionCategoryChangedDiscussionAnswerChosenByTypeValues returns the possible values for the WebhookDiscussionCategoryChangedDiscussionAnswerChosenByType const type.
func PossibleWebhookDiscussionCategoryChangedDiscussionAnswerChosenByTypeValues() []WebhookDiscussionCategoryChangedDiscussionAnswerChosenByType {
	return []WebhookDiscussionCategoryChangedDiscussionAnswerChosenByType{
		WebhookDiscussionCategoryChangedDiscussionAnswerChosenByTypeBot,
		WebhookDiscussionCategoryChangedDiscussionAnswerChosenByTypeOrganization,
		WebhookDiscussionCategoryChangedDiscussionAnswerChosenByTypeUser,
	}
}

// WebhookDiscussionCategoryChangedDiscussionAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionCategoryChangedDiscussionAuthorAssociation string

const (
	WebhookDiscussionCategoryChangedDiscussionAuthorAssociationCOLLABORATOR WebhookDiscussionCategoryChangedDiscussionAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionCategoryChangedDiscussionAuthorAssociationCONTRIBUTOR WebhookDiscussionCategoryChangedDiscussionAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionCategoryChangedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionCategoryChangedDiscussionAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionCategoryChangedDiscussionAuthorAssociationFIRSTTIMER WebhookDiscussionCategoryChangedDiscussionAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionCategoryChangedDiscussionAuthorAssociationMANNEQUIN WebhookDiscussionCategoryChangedDiscussionAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionCategoryChangedDiscussionAuthorAssociationMEMBER WebhookDiscussionCategoryChangedDiscussionAuthorAssociation = "MEMBER"
	WebhookDiscussionCategoryChangedDiscussionAuthorAssociationNONE WebhookDiscussionCategoryChangedDiscussionAuthorAssociation = "NONE"
	WebhookDiscussionCategoryChangedDiscussionAuthorAssociationOWNER WebhookDiscussionCategoryChangedDiscussionAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionCategoryChangedDiscussionAuthorAssociationValues returns the possible values for the WebhookDiscussionCategoryChangedDiscussionAuthorAssociation const type.
func PossibleWebhookDiscussionCategoryChangedDiscussionAuthorAssociationValues() []WebhookDiscussionCategoryChangedDiscussionAuthorAssociation {
	return []WebhookDiscussionCategoryChangedDiscussionAuthorAssociation{
		WebhookDiscussionCategoryChangedDiscussionAuthorAssociationCOLLABORATOR,
		WebhookDiscussionCategoryChangedDiscussionAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionCategoryChangedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionCategoryChangedDiscussionAuthorAssociationFIRSTTIMER,
		WebhookDiscussionCategoryChangedDiscussionAuthorAssociationMANNEQUIN,
		WebhookDiscussionCategoryChangedDiscussionAuthorAssociationMEMBER,
		WebhookDiscussionCategoryChangedDiscussionAuthorAssociationNONE,
		WebhookDiscussionCategoryChangedDiscussionAuthorAssociationOWNER,
	}
}

type WebhookDiscussionCategoryChangedDiscussionState string

const (
	WebhookDiscussionCategoryChangedDiscussionStateConverting WebhookDiscussionCategoryChangedDiscussionState = "converting"
	WebhookDiscussionCategoryChangedDiscussionStateLocked WebhookDiscussionCategoryChangedDiscussionState = "locked"
	WebhookDiscussionCategoryChangedDiscussionStateOpen WebhookDiscussionCategoryChangedDiscussionState = "open"
	WebhookDiscussionCategoryChangedDiscussionStateTransferring WebhookDiscussionCategoryChangedDiscussionState = "transferring"
)

// PossibleWebhookDiscussionCategoryChangedDiscussionStateValues returns the possible values for the WebhookDiscussionCategoryChangedDiscussionState const type.
func PossibleWebhookDiscussionCategoryChangedDiscussionStateValues() []WebhookDiscussionCategoryChangedDiscussionState {
	return []WebhookDiscussionCategoryChangedDiscussionState{
		WebhookDiscussionCategoryChangedDiscussionStateConverting,
		WebhookDiscussionCategoryChangedDiscussionStateLocked,
		WebhookDiscussionCategoryChangedDiscussionStateOpen,
		WebhookDiscussionCategoryChangedDiscussionStateTransferring,
	}
}

type WebhookDiscussionCategoryChangedDiscussionUserType string

const (
	WebhookDiscussionCategoryChangedDiscussionUserTypeBot WebhookDiscussionCategoryChangedDiscussionUserType = "Bot"
	WebhookDiscussionCategoryChangedDiscussionUserTypeOrganization WebhookDiscussionCategoryChangedDiscussionUserType = "Organization"
	WebhookDiscussionCategoryChangedDiscussionUserTypeUser WebhookDiscussionCategoryChangedDiscussionUserType = "User"
)

// PossibleWebhookDiscussionCategoryChangedDiscussionUserTypeValues returns the possible values for the WebhookDiscussionCategoryChangedDiscussionUserType const type.
func PossibleWebhookDiscussionCategoryChangedDiscussionUserTypeValues() []WebhookDiscussionCategoryChangedDiscussionUserType {
	return []WebhookDiscussionCategoryChangedDiscussionUserType{
		WebhookDiscussionCategoryChangedDiscussionUserTypeBot,
		WebhookDiscussionCategoryChangedDiscussionUserTypeOrganization,
		WebhookDiscussionCategoryChangedDiscussionUserTypeUser,
	}
}

type WebhookDiscussionCommentCreatedAction string

const (
	WebhookDiscussionCommentCreatedActionCreated WebhookDiscussionCommentCreatedAction = "created"
)

// PossibleWebhookDiscussionCommentCreatedActionValues returns the possible values for the WebhookDiscussionCommentCreatedAction const type.
func PossibleWebhookDiscussionCommentCreatedActionValues() []WebhookDiscussionCommentCreatedAction {
	return []WebhookDiscussionCommentCreatedAction{
		WebhookDiscussionCommentCreatedActionCreated,
	}
}

// WebhookDiscussionCommentCreatedCommentAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionCommentCreatedCommentAuthorAssociation string

const (
	WebhookDiscussionCommentCreatedCommentAuthorAssociationCOLLABORATOR WebhookDiscussionCommentCreatedCommentAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionCommentCreatedCommentAuthorAssociationCONTRIBUTOR WebhookDiscussionCommentCreatedCommentAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionCommentCreatedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionCommentCreatedCommentAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionCommentCreatedCommentAuthorAssociationFIRSTTIMER WebhookDiscussionCommentCreatedCommentAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionCommentCreatedCommentAuthorAssociationMANNEQUIN WebhookDiscussionCommentCreatedCommentAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionCommentCreatedCommentAuthorAssociationMEMBER WebhookDiscussionCommentCreatedCommentAuthorAssociation = "MEMBER"
	WebhookDiscussionCommentCreatedCommentAuthorAssociationNONE WebhookDiscussionCommentCreatedCommentAuthorAssociation = "NONE"
	WebhookDiscussionCommentCreatedCommentAuthorAssociationOWNER WebhookDiscussionCommentCreatedCommentAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionCommentCreatedCommentAuthorAssociationValues returns the possible values for the WebhookDiscussionCommentCreatedCommentAuthorAssociation const type.
func PossibleWebhookDiscussionCommentCreatedCommentAuthorAssociationValues() []WebhookDiscussionCommentCreatedCommentAuthorAssociation {
	return []WebhookDiscussionCommentCreatedCommentAuthorAssociation{
		WebhookDiscussionCommentCreatedCommentAuthorAssociationCOLLABORATOR,
		WebhookDiscussionCommentCreatedCommentAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionCommentCreatedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionCommentCreatedCommentAuthorAssociationFIRSTTIMER,
		WebhookDiscussionCommentCreatedCommentAuthorAssociationMANNEQUIN,
		WebhookDiscussionCommentCreatedCommentAuthorAssociationMEMBER,
		WebhookDiscussionCommentCreatedCommentAuthorAssociationNONE,
		WebhookDiscussionCommentCreatedCommentAuthorAssociationOWNER,
	}
}

type WebhookDiscussionCommentCreatedCommentUserType string

const (
	WebhookDiscussionCommentCreatedCommentUserTypeBot WebhookDiscussionCommentCreatedCommentUserType = "Bot"
	WebhookDiscussionCommentCreatedCommentUserTypeOrganization WebhookDiscussionCommentCreatedCommentUserType = "Organization"
	WebhookDiscussionCommentCreatedCommentUserTypeUser WebhookDiscussionCommentCreatedCommentUserType = "User"
)

// PossibleWebhookDiscussionCommentCreatedCommentUserTypeValues returns the possible values for the WebhookDiscussionCommentCreatedCommentUserType const type.
func PossibleWebhookDiscussionCommentCreatedCommentUserTypeValues() []WebhookDiscussionCommentCreatedCommentUserType {
	return []WebhookDiscussionCommentCreatedCommentUserType{
		WebhookDiscussionCommentCreatedCommentUserTypeBot,
		WebhookDiscussionCommentCreatedCommentUserTypeOrganization,
		WebhookDiscussionCommentCreatedCommentUserTypeUser,
	}
}

type WebhookDiscussionCommentCreatedDiscussionAnswerChosenByType string

const (
	WebhookDiscussionCommentCreatedDiscussionAnswerChosenByTypeBot WebhookDiscussionCommentCreatedDiscussionAnswerChosenByType = "Bot"
	WebhookDiscussionCommentCreatedDiscussionAnswerChosenByTypeOrganization WebhookDiscussionCommentCreatedDiscussionAnswerChosenByType = "Organization"
	WebhookDiscussionCommentCreatedDiscussionAnswerChosenByTypeUser WebhookDiscussionCommentCreatedDiscussionAnswerChosenByType = "User"
)

// PossibleWebhookDiscussionCommentCreatedDiscussionAnswerChosenByTypeValues returns the possible values for the WebhookDiscussionCommentCreatedDiscussionAnswerChosenByType const type.
func PossibleWebhookDiscussionCommentCreatedDiscussionAnswerChosenByTypeValues() []WebhookDiscussionCommentCreatedDiscussionAnswerChosenByType {
	return []WebhookDiscussionCommentCreatedDiscussionAnswerChosenByType{
		WebhookDiscussionCommentCreatedDiscussionAnswerChosenByTypeBot,
		WebhookDiscussionCommentCreatedDiscussionAnswerChosenByTypeOrganization,
		WebhookDiscussionCommentCreatedDiscussionAnswerChosenByTypeUser,
	}
}

// WebhookDiscussionCommentCreatedDiscussionAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionCommentCreatedDiscussionAuthorAssociation string

const (
	WebhookDiscussionCommentCreatedDiscussionAuthorAssociationCOLLABORATOR WebhookDiscussionCommentCreatedDiscussionAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionCommentCreatedDiscussionAuthorAssociationCONTRIBUTOR WebhookDiscussionCommentCreatedDiscussionAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionCommentCreatedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionCommentCreatedDiscussionAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionCommentCreatedDiscussionAuthorAssociationFIRSTTIMER WebhookDiscussionCommentCreatedDiscussionAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionCommentCreatedDiscussionAuthorAssociationMANNEQUIN WebhookDiscussionCommentCreatedDiscussionAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionCommentCreatedDiscussionAuthorAssociationMEMBER WebhookDiscussionCommentCreatedDiscussionAuthorAssociation = "MEMBER"
	WebhookDiscussionCommentCreatedDiscussionAuthorAssociationNONE WebhookDiscussionCommentCreatedDiscussionAuthorAssociation = "NONE"
	WebhookDiscussionCommentCreatedDiscussionAuthorAssociationOWNER WebhookDiscussionCommentCreatedDiscussionAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionCommentCreatedDiscussionAuthorAssociationValues returns the possible values for the WebhookDiscussionCommentCreatedDiscussionAuthorAssociation const type.
func PossibleWebhookDiscussionCommentCreatedDiscussionAuthorAssociationValues() []WebhookDiscussionCommentCreatedDiscussionAuthorAssociation {
	return []WebhookDiscussionCommentCreatedDiscussionAuthorAssociation{
		WebhookDiscussionCommentCreatedDiscussionAuthorAssociationCOLLABORATOR,
		WebhookDiscussionCommentCreatedDiscussionAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionCommentCreatedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionCommentCreatedDiscussionAuthorAssociationFIRSTTIMER,
		WebhookDiscussionCommentCreatedDiscussionAuthorAssociationMANNEQUIN,
		WebhookDiscussionCommentCreatedDiscussionAuthorAssociationMEMBER,
		WebhookDiscussionCommentCreatedDiscussionAuthorAssociationNONE,
		WebhookDiscussionCommentCreatedDiscussionAuthorAssociationOWNER,
	}
}

type WebhookDiscussionCommentCreatedDiscussionState string

const (
	WebhookDiscussionCommentCreatedDiscussionStateConverting WebhookDiscussionCommentCreatedDiscussionState = "converting"
	WebhookDiscussionCommentCreatedDiscussionStateLocked WebhookDiscussionCommentCreatedDiscussionState = "locked"
	WebhookDiscussionCommentCreatedDiscussionStateOpen WebhookDiscussionCommentCreatedDiscussionState = "open"
	WebhookDiscussionCommentCreatedDiscussionStateTransferring WebhookDiscussionCommentCreatedDiscussionState = "transferring"
)

// PossibleWebhookDiscussionCommentCreatedDiscussionStateValues returns the possible values for the WebhookDiscussionCommentCreatedDiscussionState const type.
func PossibleWebhookDiscussionCommentCreatedDiscussionStateValues() []WebhookDiscussionCommentCreatedDiscussionState {
	return []WebhookDiscussionCommentCreatedDiscussionState{
		WebhookDiscussionCommentCreatedDiscussionStateConverting,
		WebhookDiscussionCommentCreatedDiscussionStateLocked,
		WebhookDiscussionCommentCreatedDiscussionStateOpen,
		WebhookDiscussionCommentCreatedDiscussionStateTransferring,
	}
}

type WebhookDiscussionCommentCreatedDiscussionUserType string

const (
	WebhookDiscussionCommentCreatedDiscussionUserTypeBot WebhookDiscussionCommentCreatedDiscussionUserType = "Bot"
	WebhookDiscussionCommentCreatedDiscussionUserTypeOrganization WebhookDiscussionCommentCreatedDiscussionUserType = "Organization"
	WebhookDiscussionCommentCreatedDiscussionUserTypeUser WebhookDiscussionCommentCreatedDiscussionUserType = "User"
)

// PossibleWebhookDiscussionCommentCreatedDiscussionUserTypeValues returns the possible values for the WebhookDiscussionCommentCreatedDiscussionUserType const type.
func PossibleWebhookDiscussionCommentCreatedDiscussionUserTypeValues() []WebhookDiscussionCommentCreatedDiscussionUserType {
	return []WebhookDiscussionCommentCreatedDiscussionUserType{
		WebhookDiscussionCommentCreatedDiscussionUserTypeBot,
		WebhookDiscussionCommentCreatedDiscussionUserTypeOrganization,
		WebhookDiscussionCommentCreatedDiscussionUserTypeUser,
	}
}

type WebhookDiscussionCommentDeletedAction string

const (
	WebhookDiscussionCommentDeletedActionDeleted WebhookDiscussionCommentDeletedAction = "deleted"
)

// PossibleWebhookDiscussionCommentDeletedActionValues returns the possible values for the WebhookDiscussionCommentDeletedAction const type.
func PossibleWebhookDiscussionCommentDeletedActionValues() []WebhookDiscussionCommentDeletedAction {
	return []WebhookDiscussionCommentDeletedAction{
		WebhookDiscussionCommentDeletedActionDeleted,
	}
}

// WebhookDiscussionCommentDeletedCommentAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionCommentDeletedCommentAuthorAssociation string

const (
	WebhookDiscussionCommentDeletedCommentAuthorAssociationCOLLABORATOR WebhookDiscussionCommentDeletedCommentAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionCommentDeletedCommentAuthorAssociationCONTRIBUTOR WebhookDiscussionCommentDeletedCommentAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionCommentDeletedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionCommentDeletedCommentAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionCommentDeletedCommentAuthorAssociationFIRSTTIMER WebhookDiscussionCommentDeletedCommentAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionCommentDeletedCommentAuthorAssociationMANNEQUIN WebhookDiscussionCommentDeletedCommentAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionCommentDeletedCommentAuthorAssociationMEMBER WebhookDiscussionCommentDeletedCommentAuthorAssociation = "MEMBER"
	WebhookDiscussionCommentDeletedCommentAuthorAssociationNONE WebhookDiscussionCommentDeletedCommentAuthorAssociation = "NONE"
	WebhookDiscussionCommentDeletedCommentAuthorAssociationOWNER WebhookDiscussionCommentDeletedCommentAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionCommentDeletedCommentAuthorAssociationValues returns the possible values for the WebhookDiscussionCommentDeletedCommentAuthorAssociation const type.
func PossibleWebhookDiscussionCommentDeletedCommentAuthorAssociationValues() []WebhookDiscussionCommentDeletedCommentAuthorAssociation {
	return []WebhookDiscussionCommentDeletedCommentAuthorAssociation{
		WebhookDiscussionCommentDeletedCommentAuthorAssociationCOLLABORATOR,
		WebhookDiscussionCommentDeletedCommentAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionCommentDeletedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionCommentDeletedCommentAuthorAssociationFIRSTTIMER,
		WebhookDiscussionCommentDeletedCommentAuthorAssociationMANNEQUIN,
		WebhookDiscussionCommentDeletedCommentAuthorAssociationMEMBER,
		WebhookDiscussionCommentDeletedCommentAuthorAssociationNONE,
		WebhookDiscussionCommentDeletedCommentAuthorAssociationOWNER,
	}
}

type WebhookDiscussionCommentDeletedCommentUserType string

const (
	WebhookDiscussionCommentDeletedCommentUserTypeBot WebhookDiscussionCommentDeletedCommentUserType = "Bot"
	WebhookDiscussionCommentDeletedCommentUserTypeOrganization WebhookDiscussionCommentDeletedCommentUserType = "Organization"
	WebhookDiscussionCommentDeletedCommentUserTypeUser WebhookDiscussionCommentDeletedCommentUserType = "User"
)

// PossibleWebhookDiscussionCommentDeletedCommentUserTypeValues returns the possible values for the WebhookDiscussionCommentDeletedCommentUserType const type.
func PossibleWebhookDiscussionCommentDeletedCommentUserTypeValues() []WebhookDiscussionCommentDeletedCommentUserType {
	return []WebhookDiscussionCommentDeletedCommentUserType{
		WebhookDiscussionCommentDeletedCommentUserTypeBot,
		WebhookDiscussionCommentDeletedCommentUserTypeOrganization,
		WebhookDiscussionCommentDeletedCommentUserTypeUser,
	}
}

type WebhookDiscussionCommentDeletedDiscussionAnswerChosenByType string

const (
	WebhookDiscussionCommentDeletedDiscussionAnswerChosenByTypeBot WebhookDiscussionCommentDeletedDiscussionAnswerChosenByType = "Bot"
	WebhookDiscussionCommentDeletedDiscussionAnswerChosenByTypeOrganization WebhookDiscussionCommentDeletedDiscussionAnswerChosenByType = "Organization"
	WebhookDiscussionCommentDeletedDiscussionAnswerChosenByTypeUser WebhookDiscussionCommentDeletedDiscussionAnswerChosenByType = "User"
)

// PossibleWebhookDiscussionCommentDeletedDiscussionAnswerChosenByTypeValues returns the possible values for the WebhookDiscussionCommentDeletedDiscussionAnswerChosenByType const type.
func PossibleWebhookDiscussionCommentDeletedDiscussionAnswerChosenByTypeValues() []WebhookDiscussionCommentDeletedDiscussionAnswerChosenByType {
	return []WebhookDiscussionCommentDeletedDiscussionAnswerChosenByType{
		WebhookDiscussionCommentDeletedDiscussionAnswerChosenByTypeBot,
		WebhookDiscussionCommentDeletedDiscussionAnswerChosenByTypeOrganization,
		WebhookDiscussionCommentDeletedDiscussionAnswerChosenByTypeUser,
	}
}

// WebhookDiscussionCommentDeletedDiscussionAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionCommentDeletedDiscussionAuthorAssociation string

const (
	WebhookDiscussionCommentDeletedDiscussionAuthorAssociationCOLLABORATOR WebhookDiscussionCommentDeletedDiscussionAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionCommentDeletedDiscussionAuthorAssociationCONTRIBUTOR WebhookDiscussionCommentDeletedDiscussionAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionCommentDeletedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionCommentDeletedDiscussionAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionCommentDeletedDiscussionAuthorAssociationFIRSTTIMER WebhookDiscussionCommentDeletedDiscussionAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionCommentDeletedDiscussionAuthorAssociationMANNEQUIN WebhookDiscussionCommentDeletedDiscussionAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionCommentDeletedDiscussionAuthorAssociationMEMBER WebhookDiscussionCommentDeletedDiscussionAuthorAssociation = "MEMBER"
	WebhookDiscussionCommentDeletedDiscussionAuthorAssociationNONE WebhookDiscussionCommentDeletedDiscussionAuthorAssociation = "NONE"
	WebhookDiscussionCommentDeletedDiscussionAuthorAssociationOWNER WebhookDiscussionCommentDeletedDiscussionAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionCommentDeletedDiscussionAuthorAssociationValues returns the possible values for the WebhookDiscussionCommentDeletedDiscussionAuthorAssociation const type.
func PossibleWebhookDiscussionCommentDeletedDiscussionAuthorAssociationValues() []WebhookDiscussionCommentDeletedDiscussionAuthorAssociation {
	return []WebhookDiscussionCommentDeletedDiscussionAuthorAssociation{
		WebhookDiscussionCommentDeletedDiscussionAuthorAssociationCOLLABORATOR,
		WebhookDiscussionCommentDeletedDiscussionAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionCommentDeletedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionCommentDeletedDiscussionAuthorAssociationFIRSTTIMER,
		WebhookDiscussionCommentDeletedDiscussionAuthorAssociationMANNEQUIN,
		WebhookDiscussionCommentDeletedDiscussionAuthorAssociationMEMBER,
		WebhookDiscussionCommentDeletedDiscussionAuthorAssociationNONE,
		WebhookDiscussionCommentDeletedDiscussionAuthorAssociationOWNER,
	}
}

type WebhookDiscussionCommentDeletedDiscussionState string

const (
	WebhookDiscussionCommentDeletedDiscussionStateConverting WebhookDiscussionCommentDeletedDiscussionState = "converting"
	WebhookDiscussionCommentDeletedDiscussionStateLocked WebhookDiscussionCommentDeletedDiscussionState = "locked"
	WebhookDiscussionCommentDeletedDiscussionStateOpen WebhookDiscussionCommentDeletedDiscussionState = "open"
	WebhookDiscussionCommentDeletedDiscussionStateTransferring WebhookDiscussionCommentDeletedDiscussionState = "transferring"
)

// PossibleWebhookDiscussionCommentDeletedDiscussionStateValues returns the possible values for the WebhookDiscussionCommentDeletedDiscussionState const type.
func PossibleWebhookDiscussionCommentDeletedDiscussionStateValues() []WebhookDiscussionCommentDeletedDiscussionState {
	return []WebhookDiscussionCommentDeletedDiscussionState{
		WebhookDiscussionCommentDeletedDiscussionStateConverting,
		WebhookDiscussionCommentDeletedDiscussionStateLocked,
		WebhookDiscussionCommentDeletedDiscussionStateOpen,
		WebhookDiscussionCommentDeletedDiscussionStateTransferring,
	}
}

type WebhookDiscussionCommentDeletedDiscussionUserType string

const (
	WebhookDiscussionCommentDeletedDiscussionUserTypeBot WebhookDiscussionCommentDeletedDiscussionUserType = "Bot"
	WebhookDiscussionCommentDeletedDiscussionUserTypeOrganization WebhookDiscussionCommentDeletedDiscussionUserType = "Organization"
	WebhookDiscussionCommentDeletedDiscussionUserTypeUser WebhookDiscussionCommentDeletedDiscussionUserType = "User"
)

// PossibleWebhookDiscussionCommentDeletedDiscussionUserTypeValues returns the possible values for the WebhookDiscussionCommentDeletedDiscussionUserType const type.
func PossibleWebhookDiscussionCommentDeletedDiscussionUserTypeValues() []WebhookDiscussionCommentDeletedDiscussionUserType {
	return []WebhookDiscussionCommentDeletedDiscussionUserType{
		WebhookDiscussionCommentDeletedDiscussionUserTypeBot,
		WebhookDiscussionCommentDeletedDiscussionUserTypeOrganization,
		WebhookDiscussionCommentDeletedDiscussionUserTypeUser,
	}
}

type WebhookDiscussionCommentEditedAction string

const (
	WebhookDiscussionCommentEditedActionEdited WebhookDiscussionCommentEditedAction = "edited"
)

// PossibleWebhookDiscussionCommentEditedActionValues returns the possible values for the WebhookDiscussionCommentEditedAction const type.
func PossibleWebhookDiscussionCommentEditedActionValues() []WebhookDiscussionCommentEditedAction {
	return []WebhookDiscussionCommentEditedAction{
		WebhookDiscussionCommentEditedActionEdited,
	}
}

// WebhookDiscussionCommentEditedCommentAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionCommentEditedCommentAuthorAssociation string

const (
	WebhookDiscussionCommentEditedCommentAuthorAssociationCOLLABORATOR WebhookDiscussionCommentEditedCommentAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionCommentEditedCommentAuthorAssociationCONTRIBUTOR WebhookDiscussionCommentEditedCommentAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionCommentEditedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionCommentEditedCommentAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionCommentEditedCommentAuthorAssociationFIRSTTIMER WebhookDiscussionCommentEditedCommentAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionCommentEditedCommentAuthorAssociationMANNEQUIN WebhookDiscussionCommentEditedCommentAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionCommentEditedCommentAuthorAssociationMEMBER WebhookDiscussionCommentEditedCommentAuthorAssociation = "MEMBER"
	WebhookDiscussionCommentEditedCommentAuthorAssociationNONE WebhookDiscussionCommentEditedCommentAuthorAssociation = "NONE"
	WebhookDiscussionCommentEditedCommentAuthorAssociationOWNER WebhookDiscussionCommentEditedCommentAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionCommentEditedCommentAuthorAssociationValues returns the possible values for the WebhookDiscussionCommentEditedCommentAuthorAssociation const type.
func PossibleWebhookDiscussionCommentEditedCommentAuthorAssociationValues() []WebhookDiscussionCommentEditedCommentAuthorAssociation {
	return []WebhookDiscussionCommentEditedCommentAuthorAssociation{
		WebhookDiscussionCommentEditedCommentAuthorAssociationCOLLABORATOR,
		WebhookDiscussionCommentEditedCommentAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionCommentEditedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionCommentEditedCommentAuthorAssociationFIRSTTIMER,
		WebhookDiscussionCommentEditedCommentAuthorAssociationMANNEQUIN,
		WebhookDiscussionCommentEditedCommentAuthorAssociationMEMBER,
		WebhookDiscussionCommentEditedCommentAuthorAssociationNONE,
		WebhookDiscussionCommentEditedCommentAuthorAssociationOWNER,
	}
}

type WebhookDiscussionCommentEditedCommentUserType string

const (
	WebhookDiscussionCommentEditedCommentUserTypeBot WebhookDiscussionCommentEditedCommentUserType = "Bot"
	WebhookDiscussionCommentEditedCommentUserTypeOrganization WebhookDiscussionCommentEditedCommentUserType = "Organization"
	WebhookDiscussionCommentEditedCommentUserTypeUser WebhookDiscussionCommentEditedCommentUserType = "User"
)

// PossibleWebhookDiscussionCommentEditedCommentUserTypeValues returns the possible values for the WebhookDiscussionCommentEditedCommentUserType const type.
func PossibleWebhookDiscussionCommentEditedCommentUserTypeValues() []WebhookDiscussionCommentEditedCommentUserType {
	return []WebhookDiscussionCommentEditedCommentUserType{
		WebhookDiscussionCommentEditedCommentUserTypeBot,
		WebhookDiscussionCommentEditedCommentUserTypeOrganization,
		WebhookDiscussionCommentEditedCommentUserTypeUser,
	}
}

type WebhookDiscussionCommentEditedDiscussionAnswerChosenByType string

const (
	WebhookDiscussionCommentEditedDiscussionAnswerChosenByTypeBot WebhookDiscussionCommentEditedDiscussionAnswerChosenByType = "Bot"
	WebhookDiscussionCommentEditedDiscussionAnswerChosenByTypeOrganization WebhookDiscussionCommentEditedDiscussionAnswerChosenByType = "Organization"
	WebhookDiscussionCommentEditedDiscussionAnswerChosenByTypeUser WebhookDiscussionCommentEditedDiscussionAnswerChosenByType = "User"
)

// PossibleWebhookDiscussionCommentEditedDiscussionAnswerChosenByTypeValues returns the possible values for the WebhookDiscussionCommentEditedDiscussionAnswerChosenByType const type.
func PossibleWebhookDiscussionCommentEditedDiscussionAnswerChosenByTypeValues() []WebhookDiscussionCommentEditedDiscussionAnswerChosenByType {
	return []WebhookDiscussionCommentEditedDiscussionAnswerChosenByType{
		WebhookDiscussionCommentEditedDiscussionAnswerChosenByTypeBot,
		WebhookDiscussionCommentEditedDiscussionAnswerChosenByTypeOrganization,
		WebhookDiscussionCommentEditedDiscussionAnswerChosenByTypeUser,
	}
}

// WebhookDiscussionCommentEditedDiscussionAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionCommentEditedDiscussionAuthorAssociation string

const (
	WebhookDiscussionCommentEditedDiscussionAuthorAssociationCOLLABORATOR WebhookDiscussionCommentEditedDiscussionAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionCommentEditedDiscussionAuthorAssociationCONTRIBUTOR WebhookDiscussionCommentEditedDiscussionAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionCommentEditedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionCommentEditedDiscussionAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionCommentEditedDiscussionAuthorAssociationFIRSTTIMER WebhookDiscussionCommentEditedDiscussionAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionCommentEditedDiscussionAuthorAssociationMANNEQUIN WebhookDiscussionCommentEditedDiscussionAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionCommentEditedDiscussionAuthorAssociationMEMBER WebhookDiscussionCommentEditedDiscussionAuthorAssociation = "MEMBER"
	WebhookDiscussionCommentEditedDiscussionAuthorAssociationNONE WebhookDiscussionCommentEditedDiscussionAuthorAssociation = "NONE"
	WebhookDiscussionCommentEditedDiscussionAuthorAssociationOWNER WebhookDiscussionCommentEditedDiscussionAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionCommentEditedDiscussionAuthorAssociationValues returns the possible values for the WebhookDiscussionCommentEditedDiscussionAuthorAssociation const type.
func PossibleWebhookDiscussionCommentEditedDiscussionAuthorAssociationValues() []WebhookDiscussionCommentEditedDiscussionAuthorAssociation {
	return []WebhookDiscussionCommentEditedDiscussionAuthorAssociation{
		WebhookDiscussionCommentEditedDiscussionAuthorAssociationCOLLABORATOR,
		WebhookDiscussionCommentEditedDiscussionAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionCommentEditedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionCommentEditedDiscussionAuthorAssociationFIRSTTIMER,
		WebhookDiscussionCommentEditedDiscussionAuthorAssociationMANNEQUIN,
		WebhookDiscussionCommentEditedDiscussionAuthorAssociationMEMBER,
		WebhookDiscussionCommentEditedDiscussionAuthorAssociationNONE,
		WebhookDiscussionCommentEditedDiscussionAuthorAssociationOWNER,
	}
}

type WebhookDiscussionCommentEditedDiscussionState string

const (
	WebhookDiscussionCommentEditedDiscussionStateConverting WebhookDiscussionCommentEditedDiscussionState = "converting"
	WebhookDiscussionCommentEditedDiscussionStateLocked WebhookDiscussionCommentEditedDiscussionState = "locked"
	WebhookDiscussionCommentEditedDiscussionStateOpen WebhookDiscussionCommentEditedDiscussionState = "open"
	WebhookDiscussionCommentEditedDiscussionStateTransferring WebhookDiscussionCommentEditedDiscussionState = "transferring"
)

// PossibleWebhookDiscussionCommentEditedDiscussionStateValues returns the possible values for the WebhookDiscussionCommentEditedDiscussionState const type.
func PossibleWebhookDiscussionCommentEditedDiscussionStateValues() []WebhookDiscussionCommentEditedDiscussionState {
	return []WebhookDiscussionCommentEditedDiscussionState{
		WebhookDiscussionCommentEditedDiscussionStateConverting,
		WebhookDiscussionCommentEditedDiscussionStateLocked,
		WebhookDiscussionCommentEditedDiscussionStateOpen,
		WebhookDiscussionCommentEditedDiscussionStateTransferring,
	}
}

type WebhookDiscussionCommentEditedDiscussionUserType string

const (
	WebhookDiscussionCommentEditedDiscussionUserTypeBot WebhookDiscussionCommentEditedDiscussionUserType = "Bot"
	WebhookDiscussionCommentEditedDiscussionUserTypeOrganization WebhookDiscussionCommentEditedDiscussionUserType = "Organization"
	WebhookDiscussionCommentEditedDiscussionUserTypeUser WebhookDiscussionCommentEditedDiscussionUserType = "User"
)

// PossibleWebhookDiscussionCommentEditedDiscussionUserTypeValues returns the possible values for the WebhookDiscussionCommentEditedDiscussionUserType const type.
func PossibleWebhookDiscussionCommentEditedDiscussionUserTypeValues() []WebhookDiscussionCommentEditedDiscussionUserType {
	return []WebhookDiscussionCommentEditedDiscussionUserType{
		WebhookDiscussionCommentEditedDiscussionUserTypeBot,
		WebhookDiscussionCommentEditedDiscussionUserTypeOrganization,
		WebhookDiscussionCommentEditedDiscussionUserTypeUser,
	}
}

type WebhookDiscussionCreatedAction string

const (
	WebhookDiscussionCreatedActionCreated WebhookDiscussionCreatedAction = "created"
)

// PossibleWebhookDiscussionCreatedActionValues returns the possible values for the WebhookDiscussionCreatedAction const type.
func PossibleWebhookDiscussionCreatedActionValues() []WebhookDiscussionCreatedAction {
	return []WebhookDiscussionCreatedAction{
		WebhookDiscussionCreatedActionCreated,
	}
}

type WebhookDiscussionCreatedDiscussion0AnswerChosenByType string

const (
	WebhookDiscussionCreatedDiscussion0AnswerChosenByTypeBot WebhookDiscussionCreatedDiscussion0AnswerChosenByType = "Bot"
	WebhookDiscussionCreatedDiscussion0AnswerChosenByTypeOrganization WebhookDiscussionCreatedDiscussion0AnswerChosenByType = "Organization"
	WebhookDiscussionCreatedDiscussion0AnswerChosenByTypeUser WebhookDiscussionCreatedDiscussion0AnswerChosenByType = "User"
)

// PossibleWebhookDiscussionCreatedDiscussion0AnswerChosenByTypeValues returns the possible values for the WebhookDiscussionCreatedDiscussion0AnswerChosenByType const type.
func PossibleWebhookDiscussionCreatedDiscussion0AnswerChosenByTypeValues() []WebhookDiscussionCreatedDiscussion0AnswerChosenByType {
	return []WebhookDiscussionCreatedDiscussion0AnswerChosenByType{
		WebhookDiscussionCreatedDiscussion0AnswerChosenByTypeBot,
		WebhookDiscussionCreatedDiscussion0AnswerChosenByTypeOrganization,
		WebhookDiscussionCreatedDiscussion0AnswerChosenByTypeUser,
	}
}

// WebhookDiscussionCreatedDiscussion0AuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionCreatedDiscussion0AuthorAssociation string

const (
	WebhookDiscussionCreatedDiscussion0AuthorAssociationCOLLABORATOR WebhookDiscussionCreatedDiscussion0AuthorAssociation = "COLLABORATOR"
	WebhookDiscussionCreatedDiscussion0AuthorAssociationCONTRIBUTOR WebhookDiscussionCreatedDiscussion0AuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionCreatedDiscussion0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionCreatedDiscussion0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionCreatedDiscussion0AuthorAssociationFIRSTTIMER WebhookDiscussionCreatedDiscussion0AuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionCreatedDiscussion0AuthorAssociationMANNEQUIN WebhookDiscussionCreatedDiscussion0AuthorAssociation = "MANNEQUIN"
	WebhookDiscussionCreatedDiscussion0AuthorAssociationMEMBER WebhookDiscussionCreatedDiscussion0AuthorAssociation = "MEMBER"
	WebhookDiscussionCreatedDiscussion0AuthorAssociationNONE WebhookDiscussionCreatedDiscussion0AuthorAssociation = "NONE"
	WebhookDiscussionCreatedDiscussion0AuthorAssociationOWNER WebhookDiscussionCreatedDiscussion0AuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionCreatedDiscussion0AuthorAssociationValues returns the possible values for the WebhookDiscussionCreatedDiscussion0AuthorAssociation const type.
func PossibleWebhookDiscussionCreatedDiscussion0AuthorAssociationValues() []WebhookDiscussionCreatedDiscussion0AuthorAssociation {
	return []WebhookDiscussionCreatedDiscussion0AuthorAssociation{
		WebhookDiscussionCreatedDiscussion0AuthorAssociationCOLLABORATOR,
		WebhookDiscussionCreatedDiscussion0AuthorAssociationCONTRIBUTOR,
		WebhookDiscussionCreatedDiscussion0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionCreatedDiscussion0AuthorAssociationFIRSTTIMER,
		WebhookDiscussionCreatedDiscussion0AuthorAssociationMANNEQUIN,
		WebhookDiscussionCreatedDiscussion0AuthorAssociationMEMBER,
		WebhookDiscussionCreatedDiscussion0AuthorAssociationNONE,
		WebhookDiscussionCreatedDiscussion0AuthorAssociationOWNER,
	}
}

type WebhookDiscussionCreatedDiscussion0State string

const (
	WebhookDiscussionCreatedDiscussion0StateConverting WebhookDiscussionCreatedDiscussion0State = "converting"
	WebhookDiscussionCreatedDiscussion0StateLocked WebhookDiscussionCreatedDiscussion0State = "locked"
	WebhookDiscussionCreatedDiscussion0StateOpen WebhookDiscussionCreatedDiscussion0State = "open"
	WebhookDiscussionCreatedDiscussion0StateTransferring WebhookDiscussionCreatedDiscussion0State = "transferring"
)

// PossibleWebhookDiscussionCreatedDiscussion0StateValues returns the possible values for the WebhookDiscussionCreatedDiscussion0State const type.
func PossibleWebhookDiscussionCreatedDiscussion0StateValues() []WebhookDiscussionCreatedDiscussion0State {
	return []WebhookDiscussionCreatedDiscussion0State{
		WebhookDiscussionCreatedDiscussion0StateConverting,
		WebhookDiscussionCreatedDiscussion0StateLocked,
		WebhookDiscussionCreatedDiscussion0StateOpen,
		WebhookDiscussionCreatedDiscussion0StateTransferring,
	}
}

type WebhookDiscussionCreatedDiscussion0UserType string

const (
	WebhookDiscussionCreatedDiscussion0UserTypeBot WebhookDiscussionCreatedDiscussion0UserType = "Bot"
	WebhookDiscussionCreatedDiscussion0UserTypeOrganization WebhookDiscussionCreatedDiscussion0UserType = "Organization"
	WebhookDiscussionCreatedDiscussion0UserTypeUser WebhookDiscussionCreatedDiscussion0UserType = "User"
)

// PossibleWebhookDiscussionCreatedDiscussion0UserTypeValues returns the possible values for the WebhookDiscussionCreatedDiscussion0UserType const type.
func PossibleWebhookDiscussionCreatedDiscussion0UserTypeValues() []WebhookDiscussionCreatedDiscussion0UserType {
	return []WebhookDiscussionCreatedDiscussion0UserType{
		WebhookDiscussionCreatedDiscussion0UserTypeBot,
		WebhookDiscussionCreatedDiscussion0UserTypeOrganization,
		WebhookDiscussionCreatedDiscussion0UserTypeUser,
	}
}

type WebhookDiscussionCreatedDiscussion1State string

const (
	WebhookDiscussionCreatedDiscussion1StateConverting WebhookDiscussionCreatedDiscussion1State = "converting"
	WebhookDiscussionCreatedDiscussion1StateOpen WebhookDiscussionCreatedDiscussion1State = "open"
	WebhookDiscussionCreatedDiscussion1StateTransferring WebhookDiscussionCreatedDiscussion1State = "transferring"
)

// PossibleWebhookDiscussionCreatedDiscussion1StateValues returns the possible values for the WebhookDiscussionCreatedDiscussion1State const type.
func PossibleWebhookDiscussionCreatedDiscussion1StateValues() []WebhookDiscussionCreatedDiscussion1State {
	return []WebhookDiscussionCreatedDiscussion1State{
		WebhookDiscussionCreatedDiscussion1StateConverting,
		WebhookDiscussionCreatedDiscussion1StateOpen,
		WebhookDiscussionCreatedDiscussion1StateTransferring,
	}
}

type WebhookDiscussionDeletedAction string

const (
	WebhookDiscussionDeletedActionDeleted WebhookDiscussionDeletedAction = "deleted"
)

// PossibleWebhookDiscussionDeletedActionValues returns the possible values for the WebhookDiscussionDeletedAction const type.
func PossibleWebhookDiscussionDeletedActionValues() []WebhookDiscussionDeletedAction {
	return []WebhookDiscussionDeletedAction{
		WebhookDiscussionDeletedActionDeleted,
	}
}

type WebhookDiscussionDeletedDiscussionAnswerChosenByType string

const (
	WebhookDiscussionDeletedDiscussionAnswerChosenByTypeBot WebhookDiscussionDeletedDiscussionAnswerChosenByType = "Bot"
	WebhookDiscussionDeletedDiscussionAnswerChosenByTypeOrganization WebhookDiscussionDeletedDiscussionAnswerChosenByType = "Organization"
	WebhookDiscussionDeletedDiscussionAnswerChosenByTypeUser WebhookDiscussionDeletedDiscussionAnswerChosenByType = "User"
)

// PossibleWebhookDiscussionDeletedDiscussionAnswerChosenByTypeValues returns the possible values for the WebhookDiscussionDeletedDiscussionAnswerChosenByType const type.
func PossibleWebhookDiscussionDeletedDiscussionAnswerChosenByTypeValues() []WebhookDiscussionDeletedDiscussionAnswerChosenByType {
	return []WebhookDiscussionDeletedDiscussionAnswerChosenByType{
		WebhookDiscussionDeletedDiscussionAnswerChosenByTypeBot,
		WebhookDiscussionDeletedDiscussionAnswerChosenByTypeOrganization,
		WebhookDiscussionDeletedDiscussionAnswerChosenByTypeUser,
	}
}

// WebhookDiscussionDeletedDiscussionAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionDeletedDiscussionAuthorAssociation string

const (
	WebhookDiscussionDeletedDiscussionAuthorAssociationCOLLABORATOR WebhookDiscussionDeletedDiscussionAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionDeletedDiscussionAuthorAssociationCONTRIBUTOR WebhookDiscussionDeletedDiscussionAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionDeletedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionDeletedDiscussionAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionDeletedDiscussionAuthorAssociationFIRSTTIMER WebhookDiscussionDeletedDiscussionAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionDeletedDiscussionAuthorAssociationMANNEQUIN WebhookDiscussionDeletedDiscussionAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionDeletedDiscussionAuthorAssociationMEMBER WebhookDiscussionDeletedDiscussionAuthorAssociation = "MEMBER"
	WebhookDiscussionDeletedDiscussionAuthorAssociationNONE WebhookDiscussionDeletedDiscussionAuthorAssociation = "NONE"
	WebhookDiscussionDeletedDiscussionAuthorAssociationOWNER WebhookDiscussionDeletedDiscussionAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionDeletedDiscussionAuthorAssociationValues returns the possible values for the WebhookDiscussionDeletedDiscussionAuthorAssociation const type.
func PossibleWebhookDiscussionDeletedDiscussionAuthorAssociationValues() []WebhookDiscussionDeletedDiscussionAuthorAssociation {
	return []WebhookDiscussionDeletedDiscussionAuthorAssociation{
		WebhookDiscussionDeletedDiscussionAuthorAssociationCOLLABORATOR,
		WebhookDiscussionDeletedDiscussionAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionDeletedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionDeletedDiscussionAuthorAssociationFIRSTTIMER,
		WebhookDiscussionDeletedDiscussionAuthorAssociationMANNEQUIN,
		WebhookDiscussionDeletedDiscussionAuthorAssociationMEMBER,
		WebhookDiscussionDeletedDiscussionAuthorAssociationNONE,
		WebhookDiscussionDeletedDiscussionAuthorAssociationOWNER,
	}
}

type WebhookDiscussionDeletedDiscussionState string

const (
	WebhookDiscussionDeletedDiscussionStateConverting WebhookDiscussionDeletedDiscussionState = "converting"
	WebhookDiscussionDeletedDiscussionStateLocked WebhookDiscussionDeletedDiscussionState = "locked"
	WebhookDiscussionDeletedDiscussionStateOpen WebhookDiscussionDeletedDiscussionState = "open"
	WebhookDiscussionDeletedDiscussionStateTransferring WebhookDiscussionDeletedDiscussionState = "transferring"
)

// PossibleWebhookDiscussionDeletedDiscussionStateValues returns the possible values for the WebhookDiscussionDeletedDiscussionState const type.
func PossibleWebhookDiscussionDeletedDiscussionStateValues() []WebhookDiscussionDeletedDiscussionState {
	return []WebhookDiscussionDeletedDiscussionState{
		WebhookDiscussionDeletedDiscussionStateConverting,
		WebhookDiscussionDeletedDiscussionStateLocked,
		WebhookDiscussionDeletedDiscussionStateOpen,
		WebhookDiscussionDeletedDiscussionStateTransferring,
	}
}

type WebhookDiscussionDeletedDiscussionUserType string

const (
	WebhookDiscussionDeletedDiscussionUserTypeBot WebhookDiscussionDeletedDiscussionUserType = "Bot"
	WebhookDiscussionDeletedDiscussionUserTypeOrganization WebhookDiscussionDeletedDiscussionUserType = "Organization"
	WebhookDiscussionDeletedDiscussionUserTypeUser WebhookDiscussionDeletedDiscussionUserType = "User"
)

// PossibleWebhookDiscussionDeletedDiscussionUserTypeValues returns the possible values for the WebhookDiscussionDeletedDiscussionUserType const type.
func PossibleWebhookDiscussionDeletedDiscussionUserTypeValues() []WebhookDiscussionDeletedDiscussionUserType {
	return []WebhookDiscussionDeletedDiscussionUserType{
		WebhookDiscussionDeletedDiscussionUserTypeBot,
		WebhookDiscussionDeletedDiscussionUserTypeOrganization,
		WebhookDiscussionDeletedDiscussionUserTypeUser,
	}
}

type WebhookDiscussionEditedAction string

const (
	WebhookDiscussionEditedActionEdited WebhookDiscussionEditedAction = "edited"
)

// PossibleWebhookDiscussionEditedActionValues returns the possible values for the WebhookDiscussionEditedAction const type.
func PossibleWebhookDiscussionEditedActionValues() []WebhookDiscussionEditedAction {
	return []WebhookDiscussionEditedAction{
		WebhookDiscussionEditedActionEdited,
	}
}

type WebhookDiscussionEditedDiscussionAnswerChosenByType string

const (
	WebhookDiscussionEditedDiscussionAnswerChosenByTypeBot WebhookDiscussionEditedDiscussionAnswerChosenByType = "Bot"
	WebhookDiscussionEditedDiscussionAnswerChosenByTypeOrganization WebhookDiscussionEditedDiscussionAnswerChosenByType = "Organization"
	WebhookDiscussionEditedDiscussionAnswerChosenByTypeUser WebhookDiscussionEditedDiscussionAnswerChosenByType = "User"
)

// PossibleWebhookDiscussionEditedDiscussionAnswerChosenByTypeValues returns the possible values for the WebhookDiscussionEditedDiscussionAnswerChosenByType const type.
func PossibleWebhookDiscussionEditedDiscussionAnswerChosenByTypeValues() []WebhookDiscussionEditedDiscussionAnswerChosenByType {
	return []WebhookDiscussionEditedDiscussionAnswerChosenByType{
		WebhookDiscussionEditedDiscussionAnswerChosenByTypeBot,
		WebhookDiscussionEditedDiscussionAnswerChosenByTypeOrganization,
		WebhookDiscussionEditedDiscussionAnswerChosenByTypeUser,
	}
}

// WebhookDiscussionEditedDiscussionAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionEditedDiscussionAuthorAssociation string

const (
	WebhookDiscussionEditedDiscussionAuthorAssociationCOLLABORATOR WebhookDiscussionEditedDiscussionAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionEditedDiscussionAuthorAssociationCONTRIBUTOR WebhookDiscussionEditedDiscussionAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionEditedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionEditedDiscussionAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionEditedDiscussionAuthorAssociationFIRSTTIMER WebhookDiscussionEditedDiscussionAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionEditedDiscussionAuthorAssociationMANNEQUIN WebhookDiscussionEditedDiscussionAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionEditedDiscussionAuthorAssociationMEMBER WebhookDiscussionEditedDiscussionAuthorAssociation = "MEMBER"
	WebhookDiscussionEditedDiscussionAuthorAssociationNONE WebhookDiscussionEditedDiscussionAuthorAssociation = "NONE"
	WebhookDiscussionEditedDiscussionAuthorAssociationOWNER WebhookDiscussionEditedDiscussionAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionEditedDiscussionAuthorAssociationValues returns the possible values for the WebhookDiscussionEditedDiscussionAuthorAssociation const type.
func PossibleWebhookDiscussionEditedDiscussionAuthorAssociationValues() []WebhookDiscussionEditedDiscussionAuthorAssociation {
	return []WebhookDiscussionEditedDiscussionAuthorAssociation{
		WebhookDiscussionEditedDiscussionAuthorAssociationCOLLABORATOR,
		WebhookDiscussionEditedDiscussionAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionEditedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionEditedDiscussionAuthorAssociationFIRSTTIMER,
		WebhookDiscussionEditedDiscussionAuthorAssociationMANNEQUIN,
		WebhookDiscussionEditedDiscussionAuthorAssociationMEMBER,
		WebhookDiscussionEditedDiscussionAuthorAssociationNONE,
		WebhookDiscussionEditedDiscussionAuthorAssociationOWNER,
	}
}

type WebhookDiscussionEditedDiscussionState string

const (
	WebhookDiscussionEditedDiscussionStateConverting WebhookDiscussionEditedDiscussionState = "converting"
	WebhookDiscussionEditedDiscussionStateLocked WebhookDiscussionEditedDiscussionState = "locked"
	WebhookDiscussionEditedDiscussionStateOpen WebhookDiscussionEditedDiscussionState = "open"
	WebhookDiscussionEditedDiscussionStateTransferring WebhookDiscussionEditedDiscussionState = "transferring"
)

// PossibleWebhookDiscussionEditedDiscussionStateValues returns the possible values for the WebhookDiscussionEditedDiscussionState const type.
func PossibleWebhookDiscussionEditedDiscussionStateValues() []WebhookDiscussionEditedDiscussionState {
	return []WebhookDiscussionEditedDiscussionState{
		WebhookDiscussionEditedDiscussionStateConverting,
		WebhookDiscussionEditedDiscussionStateLocked,
		WebhookDiscussionEditedDiscussionStateOpen,
		WebhookDiscussionEditedDiscussionStateTransferring,
	}
}

type WebhookDiscussionEditedDiscussionUserType string

const (
	WebhookDiscussionEditedDiscussionUserTypeBot WebhookDiscussionEditedDiscussionUserType = "Bot"
	WebhookDiscussionEditedDiscussionUserTypeOrganization WebhookDiscussionEditedDiscussionUserType = "Organization"
	WebhookDiscussionEditedDiscussionUserTypeUser WebhookDiscussionEditedDiscussionUserType = "User"
)

// PossibleWebhookDiscussionEditedDiscussionUserTypeValues returns the possible values for the WebhookDiscussionEditedDiscussionUserType const type.
func PossibleWebhookDiscussionEditedDiscussionUserTypeValues() []WebhookDiscussionEditedDiscussionUserType {
	return []WebhookDiscussionEditedDiscussionUserType{
		WebhookDiscussionEditedDiscussionUserTypeBot,
		WebhookDiscussionEditedDiscussionUserTypeOrganization,
		WebhookDiscussionEditedDiscussionUserTypeUser,
	}
}

type WebhookDiscussionLabeledAction string

const (
	WebhookDiscussionLabeledActionLabeled WebhookDiscussionLabeledAction = "labeled"
)

// PossibleWebhookDiscussionLabeledActionValues returns the possible values for the WebhookDiscussionLabeledAction const type.
func PossibleWebhookDiscussionLabeledActionValues() []WebhookDiscussionLabeledAction {
	return []WebhookDiscussionLabeledAction{
		WebhookDiscussionLabeledActionLabeled,
	}
}

type WebhookDiscussionLabeledDiscussionAnswerChosenByType string

const (
	WebhookDiscussionLabeledDiscussionAnswerChosenByTypeBot WebhookDiscussionLabeledDiscussionAnswerChosenByType = "Bot"
	WebhookDiscussionLabeledDiscussionAnswerChosenByTypeOrganization WebhookDiscussionLabeledDiscussionAnswerChosenByType = "Organization"
	WebhookDiscussionLabeledDiscussionAnswerChosenByTypeUser WebhookDiscussionLabeledDiscussionAnswerChosenByType = "User"
)

// PossibleWebhookDiscussionLabeledDiscussionAnswerChosenByTypeValues returns the possible values for the WebhookDiscussionLabeledDiscussionAnswerChosenByType const type.
func PossibleWebhookDiscussionLabeledDiscussionAnswerChosenByTypeValues() []WebhookDiscussionLabeledDiscussionAnswerChosenByType {
	return []WebhookDiscussionLabeledDiscussionAnswerChosenByType{
		WebhookDiscussionLabeledDiscussionAnswerChosenByTypeBot,
		WebhookDiscussionLabeledDiscussionAnswerChosenByTypeOrganization,
		WebhookDiscussionLabeledDiscussionAnswerChosenByTypeUser,
	}
}

// WebhookDiscussionLabeledDiscussionAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionLabeledDiscussionAuthorAssociation string

const (
	WebhookDiscussionLabeledDiscussionAuthorAssociationCOLLABORATOR WebhookDiscussionLabeledDiscussionAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionLabeledDiscussionAuthorAssociationCONTRIBUTOR WebhookDiscussionLabeledDiscussionAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionLabeledDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionLabeledDiscussionAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionLabeledDiscussionAuthorAssociationFIRSTTIMER WebhookDiscussionLabeledDiscussionAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionLabeledDiscussionAuthorAssociationMANNEQUIN WebhookDiscussionLabeledDiscussionAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionLabeledDiscussionAuthorAssociationMEMBER WebhookDiscussionLabeledDiscussionAuthorAssociation = "MEMBER"
	WebhookDiscussionLabeledDiscussionAuthorAssociationNONE WebhookDiscussionLabeledDiscussionAuthorAssociation = "NONE"
	WebhookDiscussionLabeledDiscussionAuthorAssociationOWNER WebhookDiscussionLabeledDiscussionAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionLabeledDiscussionAuthorAssociationValues returns the possible values for the WebhookDiscussionLabeledDiscussionAuthorAssociation const type.
func PossibleWebhookDiscussionLabeledDiscussionAuthorAssociationValues() []WebhookDiscussionLabeledDiscussionAuthorAssociation {
	return []WebhookDiscussionLabeledDiscussionAuthorAssociation{
		WebhookDiscussionLabeledDiscussionAuthorAssociationCOLLABORATOR,
		WebhookDiscussionLabeledDiscussionAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionLabeledDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionLabeledDiscussionAuthorAssociationFIRSTTIMER,
		WebhookDiscussionLabeledDiscussionAuthorAssociationMANNEQUIN,
		WebhookDiscussionLabeledDiscussionAuthorAssociationMEMBER,
		WebhookDiscussionLabeledDiscussionAuthorAssociationNONE,
		WebhookDiscussionLabeledDiscussionAuthorAssociationOWNER,
	}
}

type WebhookDiscussionLabeledDiscussionState string

const (
	WebhookDiscussionLabeledDiscussionStateConverting WebhookDiscussionLabeledDiscussionState = "converting"
	WebhookDiscussionLabeledDiscussionStateLocked WebhookDiscussionLabeledDiscussionState = "locked"
	WebhookDiscussionLabeledDiscussionStateOpen WebhookDiscussionLabeledDiscussionState = "open"
	WebhookDiscussionLabeledDiscussionStateTransferring WebhookDiscussionLabeledDiscussionState = "transferring"
)

// PossibleWebhookDiscussionLabeledDiscussionStateValues returns the possible values for the WebhookDiscussionLabeledDiscussionState const type.
func PossibleWebhookDiscussionLabeledDiscussionStateValues() []WebhookDiscussionLabeledDiscussionState {
	return []WebhookDiscussionLabeledDiscussionState{
		WebhookDiscussionLabeledDiscussionStateConverting,
		WebhookDiscussionLabeledDiscussionStateLocked,
		WebhookDiscussionLabeledDiscussionStateOpen,
		WebhookDiscussionLabeledDiscussionStateTransferring,
	}
}

type WebhookDiscussionLabeledDiscussionUserType string

const (
	WebhookDiscussionLabeledDiscussionUserTypeBot WebhookDiscussionLabeledDiscussionUserType = "Bot"
	WebhookDiscussionLabeledDiscussionUserTypeOrganization WebhookDiscussionLabeledDiscussionUserType = "Organization"
	WebhookDiscussionLabeledDiscussionUserTypeUser WebhookDiscussionLabeledDiscussionUserType = "User"
)

// PossibleWebhookDiscussionLabeledDiscussionUserTypeValues returns the possible values for the WebhookDiscussionLabeledDiscussionUserType const type.
func PossibleWebhookDiscussionLabeledDiscussionUserTypeValues() []WebhookDiscussionLabeledDiscussionUserType {
	return []WebhookDiscussionLabeledDiscussionUserType{
		WebhookDiscussionLabeledDiscussionUserTypeBot,
		WebhookDiscussionLabeledDiscussionUserTypeOrganization,
		WebhookDiscussionLabeledDiscussionUserTypeUser,
	}
}

type WebhookDiscussionLockedAction string

const (
	WebhookDiscussionLockedActionLocked WebhookDiscussionLockedAction = "locked"
)

// PossibleWebhookDiscussionLockedActionValues returns the possible values for the WebhookDiscussionLockedAction const type.
func PossibleWebhookDiscussionLockedActionValues() []WebhookDiscussionLockedAction {
	return []WebhookDiscussionLockedAction{
		WebhookDiscussionLockedActionLocked,
	}
}

type WebhookDiscussionLockedDiscussion0AnswerChosenByType string

const (
	WebhookDiscussionLockedDiscussion0AnswerChosenByTypeBot WebhookDiscussionLockedDiscussion0AnswerChosenByType = "Bot"
	WebhookDiscussionLockedDiscussion0AnswerChosenByTypeOrganization WebhookDiscussionLockedDiscussion0AnswerChosenByType = "Organization"
	WebhookDiscussionLockedDiscussion0AnswerChosenByTypeUser WebhookDiscussionLockedDiscussion0AnswerChosenByType = "User"
)

// PossibleWebhookDiscussionLockedDiscussion0AnswerChosenByTypeValues returns the possible values for the WebhookDiscussionLockedDiscussion0AnswerChosenByType const type.
func PossibleWebhookDiscussionLockedDiscussion0AnswerChosenByTypeValues() []WebhookDiscussionLockedDiscussion0AnswerChosenByType {
	return []WebhookDiscussionLockedDiscussion0AnswerChosenByType{
		WebhookDiscussionLockedDiscussion0AnswerChosenByTypeBot,
		WebhookDiscussionLockedDiscussion0AnswerChosenByTypeOrganization,
		WebhookDiscussionLockedDiscussion0AnswerChosenByTypeUser,
	}
}

// WebhookDiscussionLockedDiscussion0AuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionLockedDiscussion0AuthorAssociation string

const (
	WebhookDiscussionLockedDiscussion0AuthorAssociationCOLLABORATOR WebhookDiscussionLockedDiscussion0AuthorAssociation = "COLLABORATOR"
	WebhookDiscussionLockedDiscussion0AuthorAssociationCONTRIBUTOR WebhookDiscussionLockedDiscussion0AuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionLockedDiscussion0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionLockedDiscussion0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionLockedDiscussion0AuthorAssociationFIRSTTIMER WebhookDiscussionLockedDiscussion0AuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionLockedDiscussion0AuthorAssociationMANNEQUIN WebhookDiscussionLockedDiscussion0AuthorAssociation = "MANNEQUIN"
	WebhookDiscussionLockedDiscussion0AuthorAssociationMEMBER WebhookDiscussionLockedDiscussion0AuthorAssociation = "MEMBER"
	WebhookDiscussionLockedDiscussion0AuthorAssociationNONE WebhookDiscussionLockedDiscussion0AuthorAssociation = "NONE"
	WebhookDiscussionLockedDiscussion0AuthorAssociationOWNER WebhookDiscussionLockedDiscussion0AuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionLockedDiscussion0AuthorAssociationValues returns the possible values for the WebhookDiscussionLockedDiscussion0AuthorAssociation const type.
func PossibleWebhookDiscussionLockedDiscussion0AuthorAssociationValues() []WebhookDiscussionLockedDiscussion0AuthorAssociation {
	return []WebhookDiscussionLockedDiscussion0AuthorAssociation{
		WebhookDiscussionLockedDiscussion0AuthorAssociationCOLLABORATOR,
		WebhookDiscussionLockedDiscussion0AuthorAssociationCONTRIBUTOR,
		WebhookDiscussionLockedDiscussion0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionLockedDiscussion0AuthorAssociationFIRSTTIMER,
		WebhookDiscussionLockedDiscussion0AuthorAssociationMANNEQUIN,
		WebhookDiscussionLockedDiscussion0AuthorAssociationMEMBER,
		WebhookDiscussionLockedDiscussion0AuthorAssociationNONE,
		WebhookDiscussionLockedDiscussion0AuthorAssociationOWNER,
	}
}

type WebhookDiscussionLockedDiscussion0State string

const (
	WebhookDiscussionLockedDiscussion0StateConverting WebhookDiscussionLockedDiscussion0State = "converting"
	WebhookDiscussionLockedDiscussion0StateLocked WebhookDiscussionLockedDiscussion0State = "locked"
	WebhookDiscussionLockedDiscussion0StateOpen WebhookDiscussionLockedDiscussion0State = "open"
	WebhookDiscussionLockedDiscussion0StateTransferring WebhookDiscussionLockedDiscussion0State = "transferring"
)

// PossibleWebhookDiscussionLockedDiscussion0StateValues returns the possible values for the WebhookDiscussionLockedDiscussion0State const type.
func PossibleWebhookDiscussionLockedDiscussion0StateValues() []WebhookDiscussionLockedDiscussion0State {
	return []WebhookDiscussionLockedDiscussion0State{
		WebhookDiscussionLockedDiscussion0StateConverting,
		WebhookDiscussionLockedDiscussion0StateLocked,
		WebhookDiscussionLockedDiscussion0StateOpen,
		WebhookDiscussionLockedDiscussion0StateTransferring,
	}
}

type WebhookDiscussionLockedDiscussion0UserType string

const (
	WebhookDiscussionLockedDiscussion0UserTypeBot WebhookDiscussionLockedDiscussion0UserType = "Bot"
	WebhookDiscussionLockedDiscussion0UserTypeOrganization WebhookDiscussionLockedDiscussion0UserType = "Organization"
	WebhookDiscussionLockedDiscussion0UserTypeUser WebhookDiscussionLockedDiscussion0UserType = "User"
)

// PossibleWebhookDiscussionLockedDiscussion0UserTypeValues returns the possible values for the WebhookDiscussionLockedDiscussion0UserType const type.
func PossibleWebhookDiscussionLockedDiscussion0UserTypeValues() []WebhookDiscussionLockedDiscussion0UserType {
	return []WebhookDiscussionLockedDiscussion0UserType{
		WebhookDiscussionLockedDiscussion0UserTypeBot,
		WebhookDiscussionLockedDiscussion0UserTypeOrganization,
		WebhookDiscussionLockedDiscussion0UserTypeUser,
	}
}

type WebhookDiscussionLockedDiscussion1State string

const (
	WebhookDiscussionLockedDiscussion1StateLocked WebhookDiscussionLockedDiscussion1State = "locked"
)

// PossibleWebhookDiscussionLockedDiscussion1StateValues returns the possible values for the WebhookDiscussionLockedDiscussion1State const type.
func PossibleWebhookDiscussionLockedDiscussion1StateValues() []WebhookDiscussionLockedDiscussion1State {
	return []WebhookDiscussionLockedDiscussion1State{
		WebhookDiscussionLockedDiscussion1StateLocked,
	}
}

type WebhookDiscussionPinnedAction string

const (
	WebhookDiscussionPinnedActionPinned WebhookDiscussionPinnedAction = "pinned"
)

// PossibleWebhookDiscussionPinnedActionValues returns the possible values for the WebhookDiscussionPinnedAction const type.
func PossibleWebhookDiscussionPinnedActionValues() []WebhookDiscussionPinnedAction {
	return []WebhookDiscussionPinnedAction{
		WebhookDiscussionPinnedActionPinned,
	}
}

type WebhookDiscussionPinnedDiscussionAnswerChosenByType string

const (
	WebhookDiscussionPinnedDiscussionAnswerChosenByTypeBot WebhookDiscussionPinnedDiscussionAnswerChosenByType = "Bot"
	WebhookDiscussionPinnedDiscussionAnswerChosenByTypeOrganization WebhookDiscussionPinnedDiscussionAnswerChosenByType = "Organization"
	WebhookDiscussionPinnedDiscussionAnswerChosenByTypeUser WebhookDiscussionPinnedDiscussionAnswerChosenByType = "User"
)

// PossibleWebhookDiscussionPinnedDiscussionAnswerChosenByTypeValues returns the possible values for the WebhookDiscussionPinnedDiscussionAnswerChosenByType const type.
func PossibleWebhookDiscussionPinnedDiscussionAnswerChosenByTypeValues() []WebhookDiscussionPinnedDiscussionAnswerChosenByType {
	return []WebhookDiscussionPinnedDiscussionAnswerChosenByType{
		WebhookDiscussionPinnedDiscussionAnswerChosenByTypeBot,
		WebhookDiscussionPinnedDiscussionAnswerChosenByTypeOrganization,
		WebhookDiscussionPinnedDiscussionAnswerChosenByTypeUser,
	}
}

// WebhookDiscussionPinnedDiscussionAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionPinnedDiscussionAuthorAssociation string

const (
	WebhookDiscussionPinnedDiscussionAuthorAssociationCOLLABORATOR WebhookDiscussionPinnedDiscussionAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionPinnedDiscussionAuthorAssociationCONTRIBUTOR WebhookDiscussionPinnedDiscussionAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionPinnedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionPinnedDiscussionAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionPinnedDiscussionAuthorAssociationFIRSTTIMER WebhookDiscussionPinnedDiscussionAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionPinnedDiscussionAuthorAssociationMANNEQUIN WebhookDiscussionPinnedDiscussionAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionPinnedDiscussionAuthorAssociationMEMBER WebhookDiscussionPinnedDiscussionAuthorAssociation = "MEMBER"
	WebhookDiscussionPinnedDiscussionAuthorAssociationNONE WebhookDiscussionPinnedDiscussionAuthorAssociation = "NONE"
	WebhookDiscussionPinnedDiscussionAuthorAssociationOWNER WebhookDiscussionPinnedDiscussionAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionPinnedDiscussionAuthorAssociationValues returns the possible values for the WebhookDiscussionPinnedDiscussionAuthorAssociation const type.
func PossibleWebhookDiscussionPinnedDiscussionAuthorAssociationValues() []WebhookDiscussionPinnedDiscussionAuthorAssociation {
	return []WebhookDiscussionPinnedDiscussionAuthorAssociation{
		WebhookDiscussionPinnedDiscussionAuthorAssociationCOLLABORATOR,
		WebhookDiscussionPinnedDiscussionAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionPinnedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionPinnedDiscussionAuthorAssociationFIRSTTIMER,
		WebhookDiscussionPinnedDiscussionAuthorAssociationMANNEQUIN,
		WebhookDiscussionPinnedDiscussionAuthorAssociationMEMBER,
		WebhookDiscussionPinnedDiscussionAuthorAssociationNONE,
		WebhookDiscussionPinnedDiscussionAuthorAssociationOWNER,
	}
}

type WebhookDiscussionPinnedDiscussionState string

const (
	WebhookDiscussionPinnedDiscussionStateConverting WebhookDiscussionPinnedDiscussionState = "converting"
	WebhookDiscussionPinnedDiscussionStateLocked WebhookDiscussionPinnedDiscussionState = "locked"
	WebhookDiscussionPinnedDiscussionStateOpen WebhookDiscussionPinnedDiscussionState = "open"
	WebhookDiscussionPinnedDiscussionStateTransferring WebhookDiscussionPinnedDiscussionState = "transferring"
)

// PossibleWebhookDiscussionPinnedDiscussionStateValues returns the possible values for the WebhookDiscussionPinnedDiscussionState const type.
func PossibleWebhookDiscussionPinnedDiscussionStateValues() []WebhookDiscussionPinnedDiscussionState {
	return []WebhookDiscussionPinnedDiscussionState{
		WebhookDiscussionPinnedDiscussionStateConverting,
		WebhookDiscussionPinnedDiscussionStateLocked,
		WebhookDiscussionPinnedDiscussionStateOpen,
		WebhookDiscussionPinnedDiscussionStateTransferring,
	}
}

type WebhookDiscussionPinnedDiscussionUserType string

const (
	WebhookDiscussionPinnedDiscussionUserTypeBot WebhookDiscussionPinnedDiscussionUserType = "Bot"
	WebhookDiscussionPinnedDiscussionUserTypeOrganization WebhookDiscussionPinnedDiscussionUserType = "Organization"
	WebhookDiscussionPinnedDiscussionUserTypeUser WebhookDiscussionPinnedDiscussionUserType = "User"
)

// PossibleWebhookDiscussionPinnedDiscussionUserTypeValues returns the possible values for the WebhookDiscussionPinnedDiscussionUserType const type.
func PossibleWebhookDiscussionPinnedDiscussionUserTypeValues() []WebhookDiscussionPinnedDiscussionUserType {
	return []WebhookDiscussionPinnedDiscussionUserType{
		WebhookDiscussionPinnedDiscussionUserTypeBot,
		WebhookDiscussionPinnedDiscussionUserTypeOrganization,
		WebhookDiscussionPinnedDiscussionUserTypeUser,
	}
}

type WebhookDiscussionTransferredAction string

const (
	WebhookDiscussionTransferredActionTransferred WebhookDiscussionTransferredAction = "transferred"
)

// PossibleWebhookDiscussionTransferredActionValues returns the possible values for the WebhookDiscussionTransferredAction const type.
func PossibleWebhookDiscussionTransferredActionValues() []WebhookDiscussionTransferredAction {
	return []WebhookDiscussionTransferredAction{
		WebhookDiscussionTransferredActionTransferred,
	}
}

type WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByType string

const (
	WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByTypeBot WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByType = "Bot"
	WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByTypeOrganization WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByType = "Organization"
	WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByTypeUser WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByType = "User"
)

// PossibleWebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByTypeValues returns the possible values for the WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByType const type.
func PossibleWebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByTypeValues() []WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByType {
	return []WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByType{
		WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByTypeBot,
		WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByTypeOrganization,
		WebhookDiscussionTransferredChangesNewDiscussionAnswerChosenByTypeUser,
	}
}

// WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociation string

const (
	WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationCOLLABORATOR WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationCONTRIBUTOR WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationFIRSTTIMER WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationMANNEQUIN WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationMEMBER WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociation = "MEMBER"
	WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationNONE WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociation = "NONE"
	WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationOWNER WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationValues returns the possible values for the WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociation const type.
func PossibleWebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationValues() []WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociation {
	return []WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociation{
		WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationCOLLABORATOR,
		WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationFIRSTTIMER,
		WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationMANNEQUIN,
		WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationMEMBER,
		WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationNONE,
		WebhookDiscussionTransferredChangesNewDiscussionAuthorAssociationOWNER,
	}
}

type WebhookDiscussionTransferredChangesNewDiscussionState string

const (
	WebhookDiscussionTransferredChangesNewDiscussionStateConverting WebhookDiscussionTransferredChangesNewDiscussionState = "converting"
	WebhookDiscussionTransferredChangesNewDiscussionStateLocked WebhookDiscussionTransferredChangesNewDiscussionState = "locked"
	WebhookDiscussionTransferredChangesNewDiscussionStateOpen WebhookDiscussionTransferredChangesNewDiscussionState = "open"
	WebhookDiscussionTransferredChangesNewDiscussionStateTransferring WebhookDiscussionTransferredChangesNewDiscussionState = "transferring"
)

// PossibleWebhookDiscussionTransferredChangesNewDiscussionStateValues returns the possible values for the WebhookDiscussionTransferredChangesNewDiscussionState const type.
func PossibleWebhookDiscussionTransferredChangesNewDiscussionStateValues() []WebhookDiscussionTransferredChangesNewDiscussionState {
	return []WebhookDiscussionTransferredChangesNewDiscussionState{
		WebhookDiscussionTransferredChangesNewDiscussionStateConverting,
		WebhookDiscussionTransferredChangesNewDiscussionStateLocked,
		WebhookDiscussionTransferredChangesNewDiscussionStateOpen,
		WebhookDiscussionTransferredChangesNewDiscussionStateTransferring,
	}
}

type WebhookDiscussionTransferredChangesNewDiscussionUserType string

const (
	WebhookDiscussionTransferredChangesNewDiscussionUserTypeBot WebhookDiscussionTransferredChangesNewDiscussionUserType = "Bot"
	WebhookDiscussionTransferredChangesNewDiscussionUserTypeOrganization WebhookDiscussionTransferredChangesNewDiscussionUserType = "Organization"
	WebhookDiscussionTransferredChangesNewDiscussionUserTypeUser WebhookDiscussionTransferredChangesNewDiscussionUserType = "User"
)

// PossibleWebhookDiscussionTransferredChangesNewDiscussionUserTypeValues returns the possible values for the WebhookDiscussionTransferredChangesNewDiscussionUserType const type.
func PossibleWebhookDiscussionTransferredChangesNewDiscussionUserTypeValues() []WebhookDiscussionTransferredChangesNewDiscussionUserType {
	return []WebhookDiscussionTransferredChangesNewDiscussionUserType{
		WebhookDiscussionTransferredChangesNewDiscussionUserTypeBot,
		WebhookDiscussionTransferredChangesNewDiscussionUserTypeOrganization,
		WebhookDiscussionTransferredChangesNewDiscussionUserTypeUser,
	}
}

type WebhookDiscussionTransferredChangesNewRepositoryOwnerType string

const (
	WebhookDiscussionTransferredChangesNewRepositoryOwnerTypeBot WebhookDiscussionTransferredChangesNewRepositoryOwnerType = "Bot"
	WebhookDiscussionTransferredChangesNewRepositoryOwnerTypeOrganization WebhookDiscussionTransferredChangesNewRepositoryOwnerType = "Organization"
	WebhookDiscussionTransferredChangesNewRepositoryOwnerTypeUser WebhookDiscussionTransferredChangesNewRepositoryOwnerType = "User"
)

// PossibleWebhookDiscussionTransferredChangesNewRepositoryOwnerTypeValues returns the possible values for the WebhookDiscussionTransferredChangesNewRepositoryOwnerType const type.
func PossibleWebhookDiscussionTransferredChangesNewRepositoryOwnerTypeValues() []WebhookDiscussionTransferredChangesNewRepositoryOwnerType {
	return []WebhookDiscussionTransferredChangesNewRepositoryOwnerType{
		WebhookDiscussionTransferredChangesNewRepositoryOwnerTypeBot,
		WebhookDiscussionTransferredChangesNewRepositoryOwnerTypeOrganization,
		WebhookDiscussionTransferredChangesNewRepositoryOwnerTypeUser,
	}
}

type WebhookDiscussionTransferredChangesNewRepositoryVisibility string

const (
	WebhookDiscussionTransferredChangesNewRepositoryVisibilityInternal WebhookDiscussionTransferredChangesNewRepositoryVisibility = "internal"
	WebhookDiscussionTransferredChangesNewRepositoryVisibilityPrivate WebhookDiscussionTransferredChangesNewRepositoryVisibility = "private"
	WebhookDiscussionTransferredChangesNewRepositoryVisibilityPublic WebhookDiscussionTransferredChangesNewRepositoryVisibility = "public"
)

// PossibleWebhookDiscussionTransferredChangesNewRepositoryVisibilityValues returns the possible values for the WebhookDiscussionTransferredChangesNewRepositoryVisibility const type.
func PossibleWebhookDiscussionTransferredChangesNewRepositoryVisibilityValues() []WebhookDiscussionTransferredChangesNewRepositoryVisibility {
	return []WebhookDiscussionTransferredChangesNewRepositoryVisibility{
		WebhookDiscussionTransferredChangesNewRepositoryVisibilityInternal,
		WebhookDiscussionTransferredChangesNewRepositoryVisibilityPrivate,
		WebhookDiscussionTransferredChangesNewRepositoryVisibilityPublic,
	}
}

type WebhookDiscussionTransferredDiscussionAnswerChosenByType string

const (
	WebhookDiscussionTransferredDiscussionAnswerChosenByTypeBot WebhookDiscussionTransferredDiscussionAnswerChosenByType = "Bot"
	WebhookDiscussionTransferredDiscussionAnswerChosenByTypeOrganization WebhookDiscussionTransferredDiscussionAnswerChosenByType = "Organization"
	WebhookDiscussionTransferredDiscussionAnswerChosenByTypeUser WebhookDiscussionTransferredDiscussionAnswerChosenByType = "User"
)

// PossibleWebhookDiscussionTransferredDiscussionAnswerChosenByTypeValues returns the possible values for the WebhookDiscussionTransferredDiscussionAnswerChosenByType const type.
func PossibleWebhookDiscussionTransferredDiscussionAnswerChosenByTypeValues() []WebhookDiscussionTransferredDiscussionAnswerChosenByType {
	return []WebhookDiscussionTransferredDiscussionAnswerChosenByType{
		WebhookDiscussionTransferredDiscussionAnswerChosenByTypeBot,
		WebhookDiscussionTransferredDiscussionAnswerChosenByTypeOrganization,
		WebhookDiscussionTransferredDiscussionAnswerChosenByTypeUser,
	}
}

// WebhookDiscussionTransferredDiscussionAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionTransferredDiscussionAuthorAssociation string

const (
	WebhookDiscussionTransferredDiscussionAuthorAssociationCOLLABORATOR WebhookDiscussionTransferredDiscussionAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionTransferredDiscussionAuthorAssociationCONTRIBUTOR WebhookDiscussionTransferredDiscussionAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionTransferredDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionTransferredDiscussionAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionTransferredDiscussionAuthorAssociationFIRSTTIMER WebhookDiscussionTransferredDiscussionAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionTransferredDiscussionAuthorAssociationMANNEQUIN WebhookDiscussionTransferredDiscussionAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionTransferredDiscussionAuthorAssociationMEMBER WebhookDiscussionTransferredDiscussionAuthorAssociation = "MEMBER"
	WebhookDiscussionTransferredDiscussionAuthorAssociationNONE WebhookDiscussionTransferredDiscussionAuthorAssociation = "NONE"
	WebhookDiscussionTransferredDiscussionAuthorAssociationOWNER WebhookDiscussionTransferredDiscussionAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionTransferredDiscussionAuthorAssociationValues returns the possible values for the WebhookDiscussionTransferredDiscussionAuthorAssociation const type.
func PossibleWebhookDiscussionTransferredDiscussionAuthorAssociationValues() []WebhookDiscussionTransferredDiscussionAuthorAssociation {
	return []WebhookDiscussionTransferredDiscussionAuthorAssociation{
		WebhookDiscussionTransferredDiscussionAuthorAssociationCOLLABORATOR,
		WebhookDiscussionTransferredDiscussionAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionTransferredDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionTransferredDiscussionAuthorAssociationFIRSTTIMER,
		WebhookDiscussionTransferredDiscussionAuthorAssociationMANNEQUIN,
		WebhookDiscussionTransferredDiscussionAuthorAssociationMEMBER,
		WebhookDiscussionTransferredDiscussionAuthorAssociationNONE,
		WebhookDiscussionTransferredDiscussionAuthorAssociationOWNER,
	}
}

type WebhookDiscussionTransferredDiscussionState string

const (
	WebhookDiscussionTransferredDiscussionStateConverting WebhookDiscussionTransferredDiscussionState = "converting"
	WebhookDiscussionTransferredDiscussionStateLocked WebhookDiscussionTransferredDiscussionState = "locked"
	WebhookDiscussionTransferredDiscussionStateOpen WebhookDiscussionTransferredDiscussionState = "open"
	WebhookDiscussionTransferredDiscussionStateTransferring WebhookDiscussionTransferredDiscussionState = "transferring"
)

// PossibleWebhookDiscussionTransferredDiscussionStateValues returns the possible values for the WebhookDiscussionTransferredDiscussionState const type.
func PossibleWebhookDiscussionTransferredDiscussionStateValues() []WebhookDiscussionTransferredDiscussionState {
	return []WebhookDiscussionTransferredDiscussionState{
		WebhookDiscussionTransferredDiscussionStateConverting,
		WebhookDiscussionTransferredDiscussionStateLocked,
		WebhookDiscussionTransferredDiscussionStateOpen,
		WebhookDiscussionTransferredDiscussionStateTransferring,
	}
}

type WebhookDiscussionTransferredDiscussionUserType string

const (
	WebhookDiscussionTransferredDiscussionUserTypeBot WebhookDiscussionTransferredDiscussionUserType = "Bot"
	WebhookDiscussionTransferredDiscussionUserTypeOrganization WebhookDiscussionTransferredDiscussionUserType = "Organization"
	WebhookDiscussionTransferredDiscussionUserTypeUser WebhookDiscussionTransferredDiscussionUserType = "User"
)

// PossibleWebhookDiscussionTransferredDiscussionUserTypeValues returns the possible values for the WebhookDiscussionTransferredDiscussionUserType const type.
func PossibleWebhookDiscussionTransferredDiscussionUserTypeValues() []WebhookDiscussionTransferredDiscussionUserType {
	return []WebhookDiscussionTransferredDiscussionUserType{
		WebhookDiscussionTransferredDiscussionUserTypeBot,
		WebhookDiscussionTransferredDiscussionUserTypeOrganization,
		WebhookDiscussionTransferredDiscussionUserTypeUser,
	}
}

type WebhookDiscussionUnansweredAction string

const (
	WebhookDiscussionUnansweredActionUnanswered WebhookDiscussionUnansweredAction = "unanswered"
)

// PossibleWebhookDiscussionUnansweredActionValues returns the possible values for the WebhookDiscussionUnansweredAction const type.
func PossibleWebhookDiscussionUnansweredActionValues() []WebhookDiscussionUnansweredAction {
	return []WebhookDiscussionUnansweredAction{
		WebhookDiscussionUnansweredActionUnanswered,
	}
}

type WebhookDiscussionUnansweredDiscussion0AnswerChosenByType string

const (
	WebhookDiscussionUnansweredDiscussion0AnswerChosenByTypeBot WebhookDiscussionUnansweredDiscussion0AnswerChosenByType = "Bot"
	WebhookDiscussionUnansweredDiscussion0AnswerChosenByTypeOrganization WebhookDiscussionUnansweredDiscussion0AnswerChosenByType = "Organization"
	WebhookDiscussionUnansweredDiscussion0AnswerChosenByTypeUser WebhookDiscussionUnansweredDiscussion0AnswerChosenByType = "User"
)

// PossibleWebhookDiscussionUnansweredDiscussion0AnswerChosenByTypeValues returns the possible values for the WebhookDiscussionUnansweredDiscussion0AnswerChosenByType const type.
func PossibleWebhookDiscussionUnansweredDiscussion0AnswerChosenByTypeValues() []WebhookDiscussionUnansweredDiscussion0AnswerChosenByType {
	return []WebhookDiscussionUnansweredDiscussion0AnswerChosenByType{
		WebhookDiscussionUnansweredDiscussion0AnswerChosenByTypeBot,
		WebhookDiscussionUnansweredDiscussion0AnswerChosenByTypeOrganization,
		WebhookDiscussionUnansweredDiscussion0AnswerChosenByTypeUser,
	}
}

// WebhookDiscussionUnansweredDiscussion0AuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionUnansweredDiscussion0AuthorAssociation string

const (
	WebhookDiscussionUnansweredDiscussion0AuthorAssociationCOLLABORATOR WebhookDiscussionUnansweredDiscussion0AuthorAssociation = "COLLABORATOR"
	WebhookDiscussionUnansweredDiscussion0AuthorAssociationCONTRIBUTOR WebhookDiscussionUnansweredDiscussion0AuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionUnansweredDiscussion0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionUnansweredDiscussion0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionUnansweredDiscussion0AuthorAssociationFIRSTTIMER WebhookDiscussionUnansweredDiscussion0AuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionUnansweredDiscussion0AuthorAssociationMANNEQUIN WebhookDiscussionUnansweredDiscussion0AuthorAssociation = "MANNEQUIN"
	WebhookDiscussionUnansweredDiscussion0AuthorAssociationMEMBER WebhookDiscussionUnansweredDiscussion0AuthorAssociation = "MEMBER"
	WebhookDiscussionUnansweredDiscussion0AuthorAssociationNONE WebhookDiscussionUnansweredDiscussion0AuthorAssociation = "NONE"
	WebhookDiscussionUnansweredDiscussion0AuthorAssociationOWNER WebhookDiscussionUnansweredDiscussion0AuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionUnansweredDiscussion0AuthorAssociationValues returns the possible values for the WebhookDiscussionUnansweredDiscussion0AuthorAssociation const type.
func PossibleWebhookDiscussionUnansweredDiscussion0AuthorAssociationValues() []WebhookDiscussionUnansweredDiscussion0AuthorAssociation {
	return []WebhookDiscussionUnansweredDiscussion0AuthorAssociation{
		WebhookDiscussionUnansweredDiscussion0AuthorAssociationCOLLABORATOR,
		WebhookDiscussionUnansweredDiscussion0AuthorAssociationCONTRIBUTOR,
		WebhookDiscussionUnansweredDiscussion0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionUnansweredDiscussion0AuthorAssociationFIRSTTIMER,
		WebhookDiscussionUnansweredDiscussion0AuthorAssociationMANNEQUIN,
		WebhookDiscussionUnansweredDiscussion0AuthorAssociationMEMBER,
		WebhookDiscussionUnansweredDiscussion0AuthorAssociationNONE,
		WebhookDiscussionUnansweredDiscussion0AuthorAssociationOWNER,
	}
}

type WebhookDiscussionUnansweredDiscussion0State string

const (
	WebhookDiscussionUnansweredDiscussion0StateConverting WebhookDiscussionUnansweredDiscussion0State = "converting"
	WebhookDiscussionUnansweredDiscussion0StateLocked WebhookDiscussionUnansweredDiscussion0State = "locked"
	WebhookDiscussionUnansweredDiscussion0StateOpen WebhookDiscussionUnansweredDiscussion0State = "open"
	WebhookDiscussionUnansweredDiscussion0StateTransferring WebhookDiscussionUnansweredDiscussion0State = "transferring"
)

// PossibleWebhookDiscussionUnansweredDiscussion0StateValues returns the possible values for the WebhookDiscussionUnansweredDiscussion0State const type.
func PossibleWebhookDiscussionUnansweredDiscussion0StateValues() []WebhookDiscussionUnansweredDiscussion0State {
	return []WebhookDiscussionUnansweredDiscussion0State{
		WebhookDiscussionUnansweredDiscussion0StateConverting,
		WebhookDiscussionUnansweredDiscussion0StateLocked,
		WebhookDiscussionUnansweredDiscussion0StateOpen,
		WebhookDiscussionUnansweredDiscussion0StateTransferring,
	}
}

type WebhookDiscussionUnansweredDiscussion0UserType string

const (
	WebhookDiscussionUnansweredDiscussion0UserTypeBot WebhookDiscussionUnansweredDiscussion0UserType = "Bot"
	WebhookDiscussionUnansweredDiscussion0UserTypeOrganization WebhookDiscussionUnansweredDiscussion0UserType = "Organization"
	WebhookDiscussionUnansweredDiscussion0UserTypeUser WebhookDiscussionUnansweredDiscussion0UserType = "User"
)

// PossibleWebhookDiscussionUnansweredDiscussion0UserTypeValues returns the possible values for the WebhookDiscussionUnansweredDiscussion0UserType const type.
func PossibleWebhookDiscussionUnansweredDiscussion0UserTypeValues() []WebhookDiscussionUnansweredDiscussion0UserType {
	return []WebhookDiscussionUnansweredDiscussion0UserType{
		WebhookDiscussionUnansweredDiscussion0UserTypeBot,
		WebhookDiscussionUnansweredDiscussion0UserTypeOrganization,
		WebhookDiscussionUnansweredDiscussion0UserTypeUser,
	}
}

// WebhookDiscussionUnansweredOldAnswerAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionUnansweredOldAnswerAuthorAssociation string

const (
	WebhookDiscussionUnansweredOldAnswerAuthorAssociationCOLLABORATOR WebhookDiscussionUnansweredOldAnswerAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionUnansweredOldAnswerAuthorAssociationCONTRIBUTOR WebhookDiscussionUnansweredOldAnswerAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionUnansweredOldAnswerAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionUnansweredOldAnswerAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionUnansweredOldAnswerAuthorAssociationFIRSTTIMER WebhookDiscussionUnansweredOldAnswerAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionUnansweredOldAnswerAuthorAssociationMANNEQUIN WebhookDiscussionUnansweredOldAnswerAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionUnansweredOldAnswerAuthorAssociationMEMBER WebhookDiscussionUnansweredOldAnswerAuthorAssociation = "MEMBER"
	WebhookDiscussionUnansweredOldAnswerAuthorAssociationNONE WebhookDiscussionUnansweredOldAnswerAuthorAssociation = "NONE"
	WebhookDiscussionUnansweredOldAnswerAuthorAssociationOWNER WebhookDiscussionUnansweredOldAnswerAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionUnansweredOldAnswerAuthorAssociationValues returns the possible values for the WebhookDiscussionUnansweredOldAnswerAuthorAssociation const type.
func PossibleWebhookDiscussionUnansweredOldAnswerAuthorAssociationValues() []WebhookDiscussionUnansweredOldAnswerAuthorAssociation {
	return []WebhookDiscussionUnansweredOldAnswerAuthorAssociation{
		WebhookDiscussionUnansweredOldAnswerAuthorAssociationCOLLABORATOR,
		WebhookDiscussionUnansweredOldAnswerAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionUnansweredOldAnswerAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionUnansweredOldAnswerAuthorAssociationFIRSTTIMER,
		WebhookDiscussionUnansweredOldAnswerAuthorAssociationMANNEQUIN,
		WebhookDiscussionUnansweredOldAnswerAuthorAssociationMEMBER,
		WebhookDiscussionUnansweredOldAnswerAuthorAssociationNONE,
		WebhookDiscussionUnansweredOldAnswerAuthorAssociationOWNER,
	}
}

type WebhookDiscussionUnansweredOldAnswerUserType string

const (
	WebhookDiscussionUnansweredOldAnswerUserTypeBot WebhookDiscussionUnansweredOldAnswerUserType = "Bot"
	WebhookDiscussionUnansweredOldAnswerUserTypeOrganization WebhookDiscussionUnansweredOldAnswerUserType = "Organization"
	WebhookDiscussionUnansweredOldAnswerUserTypeUser WebhookDiscussionUnansweredOldAnswerUserType = "User"
)

// PossibleWebhookDiscussionUnansweredOldAnswerUserTypeValues returns the possible values for the WebhookDiscussionUnansweredOldAnswerUserType const type.
func PossibleWebhookDiscussionUnansweredOldAnswerUserTypeValues() []WebhookDiscussionUnansweredOldAnswerUserType {
	return []WebhookDiscussionUnansweredOldAnswerUserType{
		WebhookDiscussionUnansweredOldAnswerUserTypeBot,
		WebhookDiscussionUnansweredOldAnswerUserTypeOrganization,
		WebhookDiscussionUnansweredOldAnswerUserTypeUser,
	}
}

type WebhookDiscussionUnlabeledAction string

const (
	WebhookDiscussionUnlabeledActionUnlabeled WebhookDiscussionUnlabeledAction = "unlabeled"
)

// PossibleWebhookDiscussionUnlabeledActionValues returns the possible values for the WebhookDiscussionUnlabeledAction const type.
func PossibleWebhookDiscussionUnlabeledActionValues() []WebhookDiscussionUnlabeledAction {
	return []WebhookDiscussionUnlabeledAction{
		WebhookDiscussionUnlabeledActionUnlabeled,
	}
}

type WebhookDiscussionUnlabeledDiscussionAnswerChosenByType string

const (
	WebhookDiscussionUnlabeledDiscussionAnswerChosenByTypeBot WebhookDiscussionUnlabeledDiscussionAnswerChosenByType = "Bot"
	WebhookDiscussionUnlabeledDiscussionAnswerChosenByTypeOrganization WebhookDiscussionUnlabeledDiscussionAnswerChosenByType = "Organization"
	WebhookDiscussionUnlabeledDiscussionAnswerChosenByTypeUser WebhookDiscussionUnlabeledDiscussionAnswerChosenByType = "User"
)

// PossibleWebhookDiscussionUnlabeledDiscussionAnswerChosenByTypeValues returns the possible values for the WebhookDiscussionUnlabeledDiscussionAnswerChosenByType const type.
func PossibleWebhookDiscussionUnlabeledDiscussionAnswerChosenByTypeValues() []WebhookDiscussionUnlabeledDiscussionAnswerChosenByType {
	return []WebhookDiscussionUnlabeledDiscussionAnswerChosenByType{
		WebhookDiscussionUnlabeledDiscussionAnswerChosenByTypeBot,
		WebhookDiscussionUnlabeledDiscussionAnswerChosenByTypeOrganization,
		WebhookDiscussionUnlabeledDiscussionAnswerChosenByTypeUser,
	}
}

// WebhookDiscussionUnlabeledDiscussionAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionUnlabeledDiscussionAuthorAssociation string

const (
	WebhookDiscussionUnlabeledDiscussionAuthorAssociationCOLLABORATOR WebhookDiscussionUnlabeledDiscussionAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionUnlabeledDiscussionAuthorAssociationCONTRIBUTOR WebhookDiscussionUnlabeledDiscussionAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionUnlabeledDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionUnlabeledDiscussionAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionUnlabeledDiscussionAuthorAssociationFIRSTTIMER WebhookDiscussionUnlabeledDiscussionAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionUnlabeledDiscussionAuthorAssociationMANNEQUIN WebhookDiscussionUnlabeledDiscussionAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionUnlabeledDiscussionAuthorAssociationMEMBER WebhookDiscussionUnlabeledDiscussionAuthorAssociation = "MEMBER"
	WebhookDiscussionUnlabeledDiscussionAuthorAssociationNONE WebhookDiscussionUnlabeledDiscussionAuthorAssociation = "NONE"
	WebhookDiscussionUnlabeledDiscussionAuthorAssociationOWNER WebhookDiscussionUnlabeledDiscussionAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionUnlabeledDiscussionAuthorAssociationValues returns the possible values for the WebhookDiscussionUnlabeledDiscussionAuthorAssociation const type.
func PossibleWebhookDiscussionUnlabeledDiscussionAuthorAssociationValues() []WebhookDiscussionUnlabeledDiscussionAuthorAssociation {
	return []WebhookDiscussionUnlabeledDiscussionAuthorAssociation{
		WebhookDiscussionUnlabeledDiscussionAuthorAssociationCOLLABORATOR,
		WebhookDiscussionUnlabeledDiscussionAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionUnlabeledDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionUnlabeledDiscussionAuthorAssociationFIRSTTIMER,
		WebhookDiscussionUnlabeledDiscussionAuthorAssociationMANNEQUIN,
		WebhookDiscussionUnlabeledDiscussionAuthorAssociationMEMBER,
		WebhookDiscussionUnlabeledDiscussionAuthorAssociationNONE,
		WebhookDiscussionUnlabeledDiscussionAuthorAssociationOWNER,
	}
}

type WebhookDiscussionUnlabeledDiscussionState string

const (
	WebhookDiscussionUnlabeledDiscussionStateConverting WebhookDiscussionUnlabeledDiscussionState = "converting"
	WebhookDiscussionUnlabeledDiscussionStateLocked WebhookDiscussionUnlabeledDiscussionState = "locked"
	WebhookDiscussionUnlabeledDiscussionStateOpen WebhookDiscussionUnlabeledDiscussionState = "open"
	WebhookDiscussionUnlabeledDiscussionStateTransferring WebhookDiscussionUnlabeledDiscussionState = "transferring"
)

// PossibleWebhookDiscussionUnlabeledDiscussionStateValues returns the possible values for the WebhookDiscussionUnlabeledDiscussionState const type.
func PossibleWebhookDiscussionUnlabeledDiscussionStateValues() []WebhookDiscussionUnlabeledDiscussionState {
	return []WebhookDiscussionUnlabeledDiscussionState{
		WebhookDiscussionUnlabeledDiscussionStateConverting,
		WebhookDiscussionUnlabeledDiscussionStateLocked,
		WebhookDiscussionUnlabeledDiscussionStateOpen,
		WebhookDiscussionUnlabeledDiscussionStateTransferring,
	}
}

type WebhookDiscussionUnlabeledDiscussionUserType string

const (
	WebhookDiscussionUnlabeledDiscussionUserTypeBot WebhookDiscussionUnlabeledDiscussionUserType = "Bot"
	WebhookDiscussionUnlabeledDiscussionUserTypeOrganization WebhookDiscussionUnlabeledDiscussionUserType = "Organization"
	WebhookDiscussionUnlabeledDiscussionUserTypeUser WebhookDiscussionUnlabeledDiscussionUserType = "User"
)

// PossibleWebhookDiscussionUnlabeledDiscussionUserTypeValues returns the possible values for the WebhookDiscussionUnlabeledDiscussionUserType const type.
func PossibleWebhookDiscussionUnlabeledDiscussionUserTypeValues() []WebhookDiscussionUnlabeledDiscussionUserType {
	return []WebhookDiscussionUnlabeledDiscussionUserType{
		WebhookDiscussionUnlabeledDiscussionUserTypeBot,
		WebhookDiscussionUnlabeledDiscussionUserTypeOrganization,
		WebhookDiscussionUnlabeledDiscussionUserTypeUser,
	}
}

type WebhookDiscussionUnlockedAction string

const (
	WebhookDiscussionUnlockedActionUnlocked WebhookDiscussionUnlockedAction = "unlocked"
)

// PossibleWebhookDiscussionUnlockedActionValues returns the possible values for the WebhookDiscussionUnlockedAction const type.
func PossibleWebhookDiscussionUnlockedActionValues() []WebhookDiscussionUnlockedAction {
	return []WebhookDiscussionUnlockedAction{
		WebhookDiscussionUnlockedActionUnlocked,
	}
}

type WebhookDiscussionUnlockedDiscussion0AnswerChosenByType string

const (
	WebhookDiscussionUnlockedDiscussion0AnswerChosenByTypeBot WebhookDiscussionUnlockedDiscussion0AnswerChosenByType = "Bot"
	WebhookDiscussionUnlockedDiscussion0AnswerChosenByTypeOrganization WebhookDiscussionUnlockedDiscussion0AnswerChosenByType = "Organization"
	WebhookDiscussionUnlockedDiscussion0AnswerChosenByTypeUser WebhookDiscussionUnlockedDiscussion0AnswerChosenByType = "User"
)

// PossibleWebhookDiscussionUnlockedDiscussion0AnswerChosenByTypeValues returns the possible values for the WebhookDiscussionUnlockedDiscussion0AnswerChosenByType const type.
func PossibleWebhookDiscussionUnlockedDiscussion0AnswerChosenByTypeValues() []WebhookDiscussionUnlockedDiscussion0AnswerChosenByType {
	return []WebhookDiscussionUnlockedDiscussion0AnswerChosenByType{
		WebhookDiscussionUnlockedDiscussion0AnswerChosenByTypeBot,
		WebhookDiscussionUnlockedDiscussion0AnswerChosenByTypeOrganization,
		WebhookDiscussionUnlockedDiscussion0AnswerChosenByTypeUser,
	}
}

// WebhookDiscussionUnlockedDiscussion0AuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionUnlockedDiscussion0AuthorAssociation string

const (
	WebhookDiscussionUnlockedDiscussion0AuthorAssociationCOLLABORATOR WebhookDiscussionUnlockedDiscussion0AuthorAssociation = "COLLABORATOR"
	WebhookDiscussionUnlockedDiscussion0AuthorAssociationCONTRIBUTOR WebhookDiscussionUnlockedDiscussion0AuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionUnlockedDiscussion0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionUnlockedDiscussion0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionUnlockedDiscussion0AuthorAssociationFIRSTTIMER WebhookDiscussionUnlockedDiscussion0AuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionUnlockedDiscussion0AuthorAssociationMANNEQUIN WebhookDiscussionUnlockedDiscussion0AuthorAssociation = "MANNEQUIN"
	WebhookDiscussionUnlockedDiscussion0AuthorAssociationMEMBER WebhookDiscussionUnlockedDiscussion0AuthorAssociation = "MEMBER"
	WebhookDiscussionUnlockedDiscussion0AuthorAssociationNONE WebhookDiscussionUnlockedDiscussion0AuthorAssociation = "NONE"
	WebhookDiscussionUnlockedDiscussion0AuthorAssociationOWNER WebhookDiscussionUnlockedDiscussion0AuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionUnlockedDiscussion0AuthorAssociationValues returns the possible values for the WebhookDiscussionUnlockedDiscussion0AuthorAssociation const type.
func PossibleWebhookDiscussionUnlockedDiscussion0AuthorAssociationValues() []WebhookDiscussionUnlockedDiscussion0AuthorAssociation {
	return []WebhookDiscussionUnlockedDiscussion0AuthorAssociation{
		WebhookDiscussionUnlockedDiscussion0AuthorAssociationCOLLABORATOR,
		WebhookDiscussionUnlockedDiscussion0AuthorAssociationCONTRIBUTOR,
		WebhookDiscussionUnlockedDiscussion0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionUnlockedDiscussion0AuthorAssociationFIRSTTIMER,
		WebhookDiscussionUnlockedDiscussion0AuthorAssociationMANNEQUIN,
		WebhookDiscussionUnlockedDiscussion0AuthorAssociationMEMBER,
		WebhookDiscussionUnlockedDiscussion0AuthorAssociationNONE,
		WebhookDiscussionUnlockedDiscussion0AuthorAssociationOWNER,
	}
}

type WebhookDiscussionUnlockedDiscussion0State string

const (
	WebhookDiscussionUnlockedDiscussion0StateConverting WebhookDiscussionUnlockedDiscussion0State = "converting"
	WebhookDiscussionUnlockedDiscussion0StateLocked WebhookDiscussionUnlockedDiscussion0State = "locked"
	WebhookDiscussionUnlockedDiscussion0StateOpen WebhookDiscussionUnlockedDiscussion0State = "open"
	WebhookDiscussionUnlockedDiscussion0StateTransferring WebhookDiscussionUnlockedDiscussion0State = "transferring"
)

// PossibleWebhookDiscussionUnlockedDiscussion0StateValues returns the possible values for the WebhookDiscussionUnlockedDiscussion0State const type.
func PossibleWebhookDiscussionUnlockedDiscussion0StateValues() []WebhookDiscussionUnlockedDiscussion0State {
	return []WebhookDiscussionUnlockedDiscussion0State{
		WebhookDiscussionUnlockedDiscussion0StateConverting,
		WebhookDiscussionUnlockedDiscussion0StateLocked,
		WebhookDiscussionUnlockedDiscussion0StateOpen,
		WebhookDiscussionUnlockedDiscussion0StateTransferring,
	}
}

type WebhookDiscussionUnlockedDiscussion0UserType string

const (
	WebhookDiscussionUnlockedDiscussion0UserTypeBot WebhookDiscussionUnlockedDiscussion0UserType = "Bot"
	WebhookDiscussionUnlockedDiscussion0UserTypeOrganization WebhookDiscussionUnlockedDiscussion0UserType = "Organization"
	WebhookDiscussionUnlockedDiscussion0UserTypeUser WebhookDiscussionUnlockedDiscussion0UserType = "User"
)

// PossibleWebhookDiscussionUnlockedDiscussion0UserTypeValues returns the possible values for the WebhookDiscussionUnlockedDiscussion0UserType const type.
func PossibleWebhookDiscussionUnlockedDiscussion0UserTypeValues() []WebhookDiscussionUnlockedDiscussion0UserType {
	return []WebhookDiscussionUnlockedDiscussion0UserType{
		WebhookDiscussionUnlockedDiscussion0UserTypeBot,
		WebhookDiscussionUnlockedDiscussion0UserTypeOrganization,
		WebhookDiscussionUnlockedDiscussion0UserTypeUser,
	}
}

type WebhookDiscussionUnlockedDiscussion1State string

const (
	WebhookDiscussionUnlockedDiscussion1StateOpen WebhookDiscussionUnlockedDiscussion1State = "open"
)

// PossibleWebhookDiscussionUnlockedDiscussion1StateValues returns the possible values for the WebhookDiscussionUnlockedDiscussion1State const type.
func PossibleWebhookDiscussionUnlockedDiscussion1StateValues() []WebhookDiscussionUnlockedDiscussion1State {
	return []WebhookDiscussionUnlockedDiscussion1State{
		WebhookDiscussionUnlockedDiscussion1StateOpen,
	}
}

type WebhookDiscussionUnpinnedAction string

const (
	WebhookDiscussionUnpinnedActionUnpinned WebhookDiscussionUnpinnedAction = "unpinned"
)

// PossibleWebhookDiscussionUnpinnedActionValues returns the possible values for the WebhookDiscussionUnpinnedAction const type.
func PossibleWebhookDiscussionUnpinnedActionValues() []WebhookDiscussionUnpinnedAction {
	return []WebhookDiscussionUnpinnedAction{
		WebhookDiscussionUnpinnedActionUnpinned,
	}
}

type WebhookDiscussionUnpinnedDiscussionAnswerChosenByType string

const (
	WebhookDiscussionUnpinnedDiscussionAnswerChosenByTypeBot WebhookDiscussionUnpinnedDiscussionAnswerChosenByType = "Bot"
	WebhookDiscussionUnpinnedDiscussionAnswerChosenByTypeOrganization WebhookDiscussionUnpinnedDiscussionAnswerChosenByType = "Organization"
	WebhookDiscussionUnpinnedDiscussionAnswerChosenByTypeUser WebhookDiscussionUnpinnedDiscussionAnswerChosenByType = "User"
)

// PossibleWebhookDiscussionUnpinnedDiscussionAnswerChosenByTypeValues returns the possible values for the WebhookDiscussionUnpinnedDiscussionAnswerChosenByType const type.
func PossibleWebhookDiscussionUnpinnedDiscussionAnswerChosenByTypeValues() []WebhookDiscussionUnpinnedDiscussionAnswerChosenByType {
	return []WebhookDiscussionUnpinnedDiscussionAnswerChosenByType{
		WebhookDiscussionUnpinnedDiscussionAnswerChosenByTypeBot,
		WebhookDiscussionUnpinnedDiscussionAnswerChosenByTypeOrganization,
		WebhookDiscussionUnpinnedDiscussionAnswerChosenByTypeUser,
	}
}

// WebhookDiscussionUnpinnedDiscussionAuthorAssociation - How the author is associated with the repository.
type WebhookDiscussionUnpinnedDiscussionAuthorAssociation string

const (
	WebhookDiscussionUnpinnedDiscussionAuthorAssociationCOLLABORATOR WebhookDiscussionUnpinnedDiscussionAuthorAssociation = "COLLABORATOR"
	WebhookDiscussionUnpinnedDiscussionAuthorAssociationCONTRIBUTOR WebhookDiscussionUnpinnedDiscussionAuthorAssociation = "CONTRIBUTOR"
	WebhookDiscussionUnpinnedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookDiscussionUnpinnedDiscussionAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookDiscussionUnpinnedDiscussionAuthorAssociationFIRSTTIMER WebhookDiscussionUnpinnedDiscussionAuthorAssociation = "FIRST_TIMER"
	WebhookDiscussionUnpinnedDiscussionAuthorAssociationMANNEQUIN WebhookDiscussionUnpinnedDiscussionAuthorAssociation = "MANNEQUIN"
	WebhookDiscussionUnpinnedDiscussionAuthorAssociationMEMBER WebhookDiscussionUnpinnedDiscussionAuthorAssociation = "MEMBER"
	WebhookDiscussionUnpinnedDiscussionAuthorAssociationNONE WebhookDiscussionUnpinnedDiscussionAuthorAssociation = "NONE"
	WebhookDiscussionUnpinnedDiscussionAuthorAssociationOWNER WebhookDiscussionUnpinnedDiscussionAuthorAssociation = "OWNER"
)

// PossibleWebhookDiscussionUnpinnedDiscussionAuthorAssociationValues returns the possible values for the WebhookDiscussionUnpinnedDiscussionAuthorAssociation const type.
func PossibleWebhookDiscussionUnpinnedDiscussionAuthorAssociationValues() []WebhookDiscussionUnpinnedDiscussionAuthorAssociation {
	return []WebhookDiscussionUnpinnedDiscussionAuthorAssociation{
		WebhookDiscussionUnpinnedDiscussionAuthorAssociationCOLLABORATOR,
		WebhookDiscussionUnpinnedDiscussionAuthorAssociationCONTRIBUTOR,
		WebhookDiscussionUnpinnedDiscussionAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookDiscussionUnpinnedDiscussionAuthorAssociationFIRSTTIMER,
		WebhookDiscussionUnpinnedDiscussionAuthorAssociationMANNEQUIN,
		WebhookDiscussionUnpinnedDiscussionAuthorAssociationMEMBER,
		WebhookDiscussionUnpinnedDiscussionAuthorAssociationNONE,
		WebhookDiscussionUnpinnedDiscussionAuthorAssociationOWNER,
	}
}

type WebhookDiscussionUnpinnedDiscussionState string

const (
	WebhookDiscussionUnpinnedDiscussionStateConverting WebhookDiscussionUnpinnedDiscussionState = "converting"
	WebhookDiscussionUnpinnedDiscussionStateLocked WebhookDiscussionUnpinnedDiscussionState = "locked"
	WebhookDiscussionUnpinnedDiscussionStateOpen WebhookDiscussionUnpinnedDiscussionState = "open"
	WebhookDiscussionUnpinnedDiscussionStateTransferring WebhookDiscussionUnpinnedDiscussionState = "transferring"
)

// PossibleWebhookDiscussionUnpinnedDiscussionStateValues returns the possible values for the WebhookDiscussionUnpinnedDiscussionState const type.
func PossibleWebhookDiscussionUnpinnedDiscussionStateValues() []WebhookDiscussionUnpinnedDiscussionState {
	return []WebhookDiscussionUnpinnedDiscussionState{
		WebhookDiscussionUnpinnedDiscussionStateConverting,
		WebhookDiscussionUnpinnedDiscussionStateLocked,
		WebhookDiscussionUnpinnedDiscussionStateOpen,
		WebhookDiscussionUnpinnedDiscussionStateTransferring,
	}
}

type WebhookDiscussionUnpinnedDiscussionUserType string

const (
	WebhookDiscussionUnpinnedDiscussionUserTypeBot WebhookDiscussionUnpinnedDiscussionUserType = "Bot"
	WebhookDiscussionUnpinnedDiscussionUserTypeOrganization WebhookDiscussionUnpinnedDiscussionUserType = "Organization"
	WebhookDiscussionUnpinnedDiscussionUserTypeUser WebhookDiscussionUnpinnedDiscussionUserType = "User"
)

// PossibleWebhookDiscussionUnpinnedDiscussionUserTypeValues returns the possible values for the WebhookDiscussionUnpinnedDiscussionUserType const type.
func PossibleWebhookDiscussionUnpinnedDiscussionUserTypeValues() []WebhookDiscussionUnpinnedDiscussionUserType {
	return []WebhookDiscussionUnpinnedDiscussionUserType{
		WebhookDiscussionUnpinnedDiscussionUserTypeBot,
		WebhookDiscussionUnpinnedDiscussionUserTypeOrganization,
		WebhookDiscussionUnpinnedDiscussionUserTypeUser,
	}
}

type WebhookForkForkee0OwnerType string

const (
	WebhookForkForkee0OwnerTypeBot WebhookForkForkee0OwnerType = "Bot"
	WebhookForkForkee0OwnerTypeOrganization WebhookForkForkee0OwnerType = "Organization"
	WebhookForkForkee0OwnerTypeUser WebhookForkForkee0OwnerType = "User"
)

// PossibleWebhookForkForkee0OwnerTypeValues returns the possible values for the WebhookForkForkee0OwnerType const type.
func PossibleWebhookForkForkee0OwnerTypeValues() []WebhookForkForkee0OwnerType {
	return []WebhookForkForkee0OwnerType{
		WebhookForkForkee0OwnerTypeBot,
		WebhookForkForkee0OwnerTypeOrganization,
		WebhookForkForkee0OwnerTypeUser,
	}
}

type WebhookForkForkee0Visibility string

const (
	WebhookForkForkee0VisibilityInternal WebhookForkForkee0Visibility = "internal"
	WebhookForkForkee0VisibilityPrivate WebhookForkForkee0Visibility = "private"
	WebhookForkForkee0VisibilityPublic WebhookForkForkee0Visibility = "public"
)

// PossibleWebhookForkForkee0VisibilityValues returns the possible values for the WebhookForkForkee0Visibility const type.
func PossibleWebhookForkForkee0VisibilityValues() []WebhookForkForkee0Visibility {
	return []WebhookForkForkee0Visibility{
		WebhookForkForkee0VisibilityInternal,
		WebhookForkForkee0VisibilityPrivate,
		WebhookForkForkee0VisibilityPublic,
	}
}

type WebhookGithubAppAuthorizationRevokedAction string

const (
	WebhookGithubAppAuthorizationRevokedActionRevoked WebhookGithubAppAuthorizationRevokedAction = "revoked"
)

// PossibleWebhookGithubAppAuthorizationRevokedActionValues returns the possible values for the WebhookGithubAppAuthorizationRevokedAction const type.
func PossibleWebhookGithubAppAuthorizationRevokedActionValues() []WebhookGithubAppAuthorizationRevokedAction {
	return []WebhookGithubAppAuthorizationRevokedAction{
		WebhookGithubAppAuthorizationRevokedActionRevoked,
	}
}

// WebhookGollumPagesItemAction - The action that was performed on the page. Can be created or edited.
type WebhookGollumPagesItemAction string

const (
	WebhookGollumPagesItemActionCreated WebhookGollumPagesItemAction = "created"
	WebhookGollumPagesItemActionEdited WebhookGollumPagesItemAction = "edited"
)

// PossibleWebhookGollumPagesItemActionValues returns the possible values for the WebhookGollumPagesItemAction const type.
func PossibleWebhookGollumPagesItemActionValues() []WebhookGollumPagesItemAction {
	return []WebhookGollumPagesItemAction{
		WebhookGollumPagesItemActionCreated,
		WebhookGollumPagesItemActionEdited,
	}
}

type WebhookInstallationCreatedAction string

const (
	WebhookInstallationCreatedActionCreated WebhookInstallationCreatedAction = "created"
)

// PossibleWebhookInstallationCreatedActionValues returns the possible values for the WebhookInstallationCreatedAction const type.
func PossibleWebhookInstallationCreatedActionValues() []WebhookInstallationCreatedAction {
	return []WebhookInstallationCreatedAction{
		WebhookInstallationCreatedActionCreated,
	}
}

type WebhookInstallationCreatedRequesterType string

const (
	WebhookInstallationCreatedRequesterTypeBot WebhookInstallationCreatedRequesterType = "Bot"
	WebhookInstallationCreatedRequesterTypeOrganization WebhookInstallationCreatedRequesterType = "Organization"
	WebhookInstallationCreatedRequesterTypeUser WebhookInstallationCreatedRequesterType = "User"
)

// PossibleWebhookInstallationCreatedRequesterTypeValues returns the possible values for the WebhookInstallationCreatedRequesterType const type.
func PossibleWebhookInstallationCreatedRequesterTypeValues() []WebhookInstallationCreatedRequesterType {
	return []WebhookInstallationCreatedRequesterType{
		WebhookInstallationCreatedRequesterTypeBot,
		WebhookInstallationCreatedRequesterTypeOrganization,
		WebhookInstallationCreatedRequesterTypeUser,
	}
}

type WebhookInstallationDeletedAction string

const (
	WebhookInstallationDeletedActionDeleted WebhookInstallationDeletedAction = "deleted"
)

// PossibleWebhookInstallationDeletedActionValues returns the possible values for the WebhookInstallationDeletedAction const type.
func PossibleWebhookInstallationDeletedActionValues() []WebhookInstallationDeletedAction {
	return []WebhookInstallationDeletedAction{
		WebhookInstallationDeletedActionDeleted,
	}
}

type WebhookInstallationNewPermissionsAcceptedAction string

const (
	WebhookInstallationNewPermissionsAcceptedActionNewPermissionsAccepted WebhookInstallationNewPermissionsAcceptedAction = "new_permissions_accepted"
)

// PossibleWebhookInstallationNewPermissionsAcceptedActionValues returns the possible values for the WebhookInstallationNewPermissionsAcceptedAction const type.
func PossibleWebhookInstallationNewPermissionsAcceptedActionValues() []WebhookInstallationNewPermissionsAcceptedAction {
	return []WebhookInstallationNewPermissionsAcceptedAction{
		WebhookInstallationNewPermissionsAcceptedActionNewPermissionsAccepted,
	}
}

type WebhookInstallationRepositoriesAddedAction string

const (
	WebhookInstallationRepositoriesAddedActionAdded WebhookInstallationRepositoriesAddedAction = "added"
)

// PossibleWebhookInstallationRepositoriesAddedActionValues returns the possible values for the WebhookInstallationRepositoriesAddedAction const type.
func PossibleWebhookInstallationRepositoriesAddedActionValues() []WebhookInstallationRepositoriesAddedAction {
	return []WebhookInstallationRepositoriesAddedAction{
		WebhookInstallationRepositoriesAddedActionAdded,
	}
}

// WebhookInstallationRepositoriesAddedRepositorySelection - Describe whether all repositories have been selected or there's
// a selection involved
type WebhookInstallationRepositoriesAddedRepositorySelection string

const (
	WebhookInstallationRepositoriesAddedRepositorySelectionAll WebhookInstallationRepositoriesAddedRepositorySelection = "all"
	WebhookInstallationRepositoriesAddedRepositorySelectionSelected WebhookInstallationRepositoriesAddedRepositorySelection = "selected"
)

// PossibleWebhookInstallationRepositoriesAddedRepositorySelectionValues returns the possible values for the WebhookInstallationRepositoriesAddedRepositorySelection const type.
func PossibleWebhookInstallationRepositoriesAddedRepositorySelectionValues() []WebhookInstallationRepositoriesAddedRepositorySelection {
	return []WebhookInstallationRepositoriesAddedRepositorySelection{
		WebhookInstallationRepositoriesAddedRepositorySelectionAll,
		WebhookInstallationRepositoriesAddedRepositorySelectionSelected,
	}
}

type WebhookInstallationRepositoriesAddedRequesterType string

const (
	WebhookInstallationRepositoriesAddedRequesterTypeBot WebhookInstallationRepositoriesAddedRequesterType = "Bot"
	WebhookInstallationRepositoriesAddedRequesterTypeOrganization WebhookInstallationRepositoriesAddedRequesterType = "Organization"
	WebhookInstallationRepositoriesAddedRequesterTypeUser WebhookInstallationRepositoriesAddedRequesterType = "User"
)

// PossibleWebhookInstallationRepositoriesAddedRequesterTypeValues returns the possible values for the WebhookInstallationRepositoriesAddedRequesterType const type.
func PossibleWebhookInstallationRepositoriesAddedRequesterTypeValues() []WebhookInstallationRepositoriesAddedRequesterType {
	return []WebhookInstallationRepositoriesAddedRequesterType{
		WebhookInstallationRepositoriesAddedRequesterTypeBot,
		WebhookInstallationRepositoriesAddedRequesterTypeOrganization,
		WebhookInstallationRepositoriesAddedRequesterTypeUser,
	}
}

type WebhookInstallationRepositoriesRemovedAction string

const (
	WebhookInstallationRepositoriesRemovedActionRemoved WebhookInstallationRepositoriesRemovedAction = "removed"
)

// PossibleWebhookInstallationRepositoriesRemovedActionValues returns the possible values for the WebhookInstallationRepositoriesRemovedAction const type.
func PossibleWebhookInstallationRepositoriesRemovedActionValues() []WebhookInstallationRepositoriesRemovedAction {
	return []WebhookInstallationRepositoriesRemovedAction{
		WebhookInstallationRepositoriesRemovedActionRemoved,
	}
}

// WebhookInstallationRepositoriesRemovedRepositorySelection - Describe whether all repositories have been selected or there's
// a selection involved
type WebhookInstallationRepositoriesRemovedRepositorySelection string

const (
	WebhookInstallationRepositoriesRemovedRepositorySelectionAll WebhookInstallationRepositoriesRemovedRepositorySelection = "all"
	WebhookInstallationRepositoriesRemovedRepositorySelectionSelected WebhookInstallationRepositoriesRemovedRepositorySelection = "selected"
)

// PossibleWebhookInstallationRepositoriesRemovedRepositorySelectionValues returns the possible values for the WebhookInstallationRepositoriesRemovedRepositorySelection const type.
func PossibleWebhookInstallationRepositoriesRemovedRepositorySelectionValues() []WebhookInstallationRepositoriesRemovedRepositorySelection {
	return []WebhookInstallationRepositoriesRemovedRepositorySelection{
		WebhookInstallationRepositoriesRemovedRepositorySelectionAll,
		WebhookInstallationRepositoriesRemovedRepositorySelectionSelected,
	}
}

type WebhookInstallationRepositoriesRemovedRequesterType string

const (
	WebhookInstallationRepositoriesRemovedRequesterTypeBot WebhookInstallationRepositoriesRemovedRequesterType = "Bot"
	WebhookInstallationRepositoriesRemovedRequesterTypeOrganization WebhookInstallationRepositoriesRemovedRequesterType = "Organization"
	WebhookInstallationRepositoriesRemovedRequesterTypeUser WebhookInstallationRepositoriesRemovedRequesterType = "User"
)

// PossibleWebhookInstallationRepositoriesRemovedRequesterTypeValues returns the possible values for the WebhookInstallationRepositoriesRemovedRequesterType const type.
func PossibleWebhookInstallationRepositoriesRemovedRequesterTypeValues() []WebhookInstallationRepositoriesRemovedRequesterType {
	return []WebhookInstallationRepositoriesRemovedRequesterType{
		WebhookInstallationRepositoriesRemovedRequesterTypeBot,
		WebhookInstallationRepositoriesRemovedRequesterTypeOrganization,
		WebhookInstallationRepositoriesRemovedRequesterTypeUser,
	}
}

type WebhookInstallationSuspendAction string

const (
	WebhookInstallationSuspendActionSuspend WebhookInstallationSuspendAction = "suspend"
)

// PossibleWebhookInstallationSuspendActionValues returns the possible values for the WebhookInstallationSuspendAction const type.
func PossibleWebhookInstallationSuspendActionValues() []WebhookInstallationSuspendAction {
	return []WebhookInstallationSuspendAction{
		WebhookInstallationSuspendActionSuspend,
	}
}

type WebhookInstallationUnsuspendAction string

const (
	WebhookInstallationUnsuspendActionUnsuspend WebhookInstallationUnsuspendAction = "unsuspend"
)

// PossibleWebhookInstallationUnsuspendActionValues returns the possible values for the WebhookInstallationUnsuspendAction const type.
func PossibleWebhookInstallationUnsuspendActionValues() []WebhookInstallationUnsuspendAction {
	return []WebhookInstallationUnsuspendAction{
		WebhookInstallationUnsuspendActionUnsuspend,
	}
}

type WebhookIssueCommentCreatedAction string

const (
	WebhookIssueCommentCreatedActionCreated WebhookIssueCommentCreatedAction = "created"
)

// PossibleWebhookIssueCommentCreatedActionValues returns the possible values for the WebhookIssueCommentCreatedAction const type.
func PossibleWebhookIssueCommentCreatedActionValues() []WebhookIssueCommentCreatedAction {
	return []WebhookIssueCommentCreatedAction{
		WebhookIssueCommentCreatedActionCreated,
	}
}

// WebhookIssueCommentCreatedCommentAuthorAssociation - How the author is associated with the repository.
type WebhookIssueCommentCreatedCommentAuthorAssociation string

const (
	WebhookIssueCommentCreatedCommentAuthorAssociationCOLLABORATOR WebhookIssueCommentCreatedCommentAuthorAssociation = "COLLABORATOR"
	WebhookIssueCommentCreatedCommentAuthorAssociationCONTRIBUTOR WebhookIssueCommentCreatedCommentAuthorAssociation = "CONTRIBUTOR"
	WebhookIssueCommentCreatedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssueCommentCreatedCommentAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssueCommentCreatedCommentAuthorAssociationFIRSTTIMER WebhookIssueCommentCreatedCommentAuthorAssociation = "FIRST_TIMER"
	WebhookIssueCommentCreatedCommentAuthorAssociationMANNEQUIN WebhookIssueCommentCreatedCommentAuthorAssociation = "MANNEQUIN"
	WebhookIssueCommentCreatedCommentAuthorAssociationMEMBER WebhookIssueCommentCreatedCommentAuthorAssociation = "MEMBER"
	WebhookIssueCommentCreatedCommentAuthorAssociationNONE WebhookIssueCommentCreatedCommentAuthorAssociation = "NONE"
	WebhookIssueCommentCreatedCommentAuthorAssociationOWNER WebhookIssueCommentCreatedCommentAuthorAssociation = "OWNER"
)

// PossibleWebhookIssueCommentCreatedCommentAuthorAssociationValues returns the possible values for the WebhookIssueCommentCreatedCommentAuthorAssociation const type.
func PossibleWebhookIssueCommentCreatedCommentAuthorAssociationValues() []WebhookIssueCommentCreatedCommentAuthorAssociation {
	return []WebhookIssueCommentCreatedCommentAuthorAssociation{
		WebhookIssueCommentCreatedCommentAuthorAssociationCOLLABORATOR,
		WebhookIssueCommentCreatedCommentAuthorAssociationCONTRIBUTOR,
		WebhookIssueCommentCreatedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssueCommentCreatedCommentAuthorAssociationFIRSTTIMER,
		WebhookIssueCommentCreatedCommentAuthorAssociationMANNEQUIN,
		WebhookIssueCommentCreatedCommentAuthorAssociationMEMBER,
		WebhookIssueCommentCreatedCommentAuthorAssociationNONE,
		WebhookIssueCommentCreatedCommentAuthorAssociationOWNER,
	}
}

type WebhookIssueCommentCreatedCommentUserType string

const (
	WebhookIssueCommentCreatedCommentUserTypeBot WebhookIssueCommentCreatedCommentUserType = "Bot"
	WebhookIssueCommentCreatedCommentUserTypeOrganization WebhookIssueCommentCreatedCommentUserType = "Organization"
	WebhookIssueCommentCreatedCommentUserTypeUser WebhookIssueCommentCreatedCommentUserType = "User"
)

// PossibleWebhookIssueCommentCreatedCommentUserTypeValues returns the possible values for the WebhookIssueCommentCreatedCommentUserType const type.
func PossibleWebhookIssueCommentCreatedCommentUserTypeValues() []WebhookIssueCommentCreatedCommentUserType {
	return []WebhookIssueCommentCreatedCommentUserType{
		WebhookIssueCommentCreatedCommentUserTypeBot,
		WebhookIssueCommentCreatedCommentUserTypeOrganization,
		WebhookIssueCommentCreatedCommentUserTypeUser,
	}
}

type WebhookIssueCommentCreatedIssue0ActiveLockReason string

const (
	WebhookIssueCommentCreatedIssue0ActiveLockReasonNull WebhookIssueCommentCreatedIssue0ActiveLockReason = "null"
	WebhookIssueCommentCreatedIssue0ActiveLockReasonOffTopic WebhookIssueCommentCreatedIssue0ActiveLockReason = "off-topic"
	WebhookIssueCommentCreatedIssue0ActiveLockReasonResolved WebhookIssueCommentCreatedIssue0ActiveLockReason = "resolved"
	WebhookIssueCommentCreatedIssue0ActiveLockReasonSpam WebhookIssueCommentCreatedIssue0ActiveLockReason = "spam"
	WebhookIssueCommentCreatedIssue0ActiveLockReasonTooHeated WebhookIssueCommentCreatedIssue0ActiveLockReason = "too heated"
)

// PossibleWebhookIssueCommentCreatedIssue0ActiveLockReasonValues returns the possible values for the WebhookIssueCommentCreatedIssue0ActiveLockReason const type.
func PossibleWebhookIssueCommentCreatedIssue0ActiveLockReasonValues() []WebhookIssueCommentCreatedIssue0ActiveLockReason {
	return []WebhookIssueCommentCreatedIssue0ActiveLockReason{
		WebhookIssueCommentCreatedIssue0ActiveLockReasonNull,
		WebhookIssueCommentCreatedIssue0ActiveLockReasonOffTopic,
		WebhookIssueCommentCreatedIssue0ActiveLockReasonResolved,
		WebhookIssueCommentCreatedIssue0ActiveLockReasonSpam,
		WebhookIssueCommentCreatedIssue0ActiveLockReasonTooHeated,
	}
}

type WebhookIssueCommentCreatedIssue0AssigneeType string

const (
	WebhookIssueCommentCreatedIssue0AssigneeTypeBot WebhookIssueCommentCreatedIssue0AssigneeType = "Bot"
	WebhookIssueCommentCreatedIssue0AssigneeTypeMannequin WebhookIssueCommentCreatedIssue0AssigneeType = "Mannequin"
	WebhookIssueCommentCreatedIssue0AssigneeTypeOrganization WebhookIssueCommentCreatedIssue0AssigneeType = "Organization"
	WebhookIssueCommentCreatedIssue0AssigneeTypeUser WebhookIssueCommentCreatedIssue0AssigneeType = "User"
)

// PossibleWebhookIssueCommentCreatedIssue0AssigneeTypeValues returns the possible values for the WebhookIssueCommentCreatedIssue0AssigneeType const type.
func PossibleWebhookIssueCommentCreatedIssue0AssigneeTypeValues() []WebhookIssueCommentCreatedIssue0AssigneeType {
	return []WebhookIssueCommentCreatedIssue0AssigneeType{
		WebhookIssueCommentCreatedIssue0AssigneeTypeBot,
		WebhookIssueCommentCreatedIssue0AssigneeTypeMannequin,
		WebhookIssueCommentCreatedIssue0AssigneeTypeOrganization,
		WebhookIssueCommentCreatedIssue0AssigneeTypeUser,
	}
}

// WebhookIssueCommentCreatedIssue0AuthorAssociation - How the author is associated with the repository.
type WebhookIssueCommentCreatedIssue0AuthorAssociation string

const (
	WebhookIssueCommentCreatedIssue0AuthorAssociationCOLLABORATOR WebhookIssueCommentCreatedIssue0AuthorAssociation = "COLLABORATOR"
	WebhookIssueCommentCreatedIssue0AuthorAssociationCONTRIBUTOR WebhookIssueCommentCreatedIssue0AuthorAssociation = "CONTRIBUTOR"
	WebhookIssueCommentCreatedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssueCommentCreatedIssue0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssueCommentCreatedIssue0AuthorAssociationFIRSTTIMER WebhookIssueCommentCreatedIssue0AuthorAssociation = "FIRST_TIMER"
	WebhookIssueCommentCreatedIssue0AuthorAssociationMANNEQUIN WebhookIssueCommentCreatedIssue0AuthorAssociation = "MANNEQUIN"
	WebhookIssueCommentCreatedIssue0AuthorAssociationMEMBER WebhookIssueCommentCreatedIssue0AuthorAssociation = "MEMBER"
	WebhookIssueCommentCreatedIssue0AuthorAssociationNONE WebhookIssueCommentCreatedIssue0AuthorAssociation = "NONE"
	WebhookIssueCommentCreatedIssue0AuthorAssociationOWNER WebhookIssueCommentCreatedIssue0AuthorAssociation = "OWNER"
)

// PossibleWebhookIssueCommentCreatedIssue0AuthorAssociationValues returns the possible values for the WebhookIssueCommentCreatedIssue0AuthorAssociation const type.
func PossibleWebhookIssueCommentCreatedIssue0AuthorAssociationValues() []WebhookIssueCommentCreatedIssue0AuthorAssociation {
	return []WebhookIssueCommentCreatedIssue0AuthorAssociation{
		WebhookIssueCommentCreatedIssue0AuthorAssociationCOLLABORATOR,
		WebhookIssueCommentCreatedIssue0AuthorAssociationCONTRIBUTOR,
		WebhookIssueCommentCreatedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssueCommentCreatedIssue0AuthorAssociationFIRSTTIMER,
		WebhookIssueCommentCreatedIssue0AuthorAssociationMANNEQUIN,
		WebhookIssueCommentCreatedIssue0AuthorAssociationMEMBER,
		WebhookIssueCommentCreatedIssue0AuthorAssociationNONE,
		WebhookIssueCommentCreatedIssue0AuthorAssociationOWNER,
	}
}

type WebhookIssueCommentCreatedIssue0MilestoneCreatorType string

const (
	WebhookIssueCommentCreatedIssue0MilestoneCreatorTypeBot WebhookIssueCommentCreatedIssue0MilestoneCreatorType = "Bot"
	WebhookIssueCommentCreatedIssue0MilestoneCreatorTypeMannequin WebhookIssueCommentCreatedIssue0MilestoneCreatorType = "Mannequin"
	WebhookIssueCommentCreatedIssue0MilestoneCreatorTypeOrganization WebhookIssueCommentCreatedIssue0MilestoneCreatorType = "Organization"
	WebhookIssueCommentCreatedIssue0MilestoneCreatorTypeUser WebhookIssueCommentCreatedIssue0MilestoneCreatorType = "User"
)

// PossibleWebhookIssueCommentCreatedIssue0MilestoneCreatorTypeValues returns the possible values for the WebhookIssueCommentCreatedIssue0MilestoneCreatorType const type.
func PossibleWebhookIssueCommentCreatedIssue0MilestoneCreatorTypeValues() []WebhookIssueCommentCreatedIssue0MilestoneCreatorType {
	return []WebhookIssueCommentCreatedIssue0MilestoneCreatorType{
		WebhookIssueCommentCreatedIssue0MilestoneCreatorTypeBot,
		WebhookIssueCommentCreatedIssue0MilestoneCreatorTypeMannequin,
		WebhookIssueCommentCreatedIssue0MilestoneCreatorTypeOrganization,
		WebhookIssueCommentCreatedIssue0MilestoneCreatorTypeUser,
	}
}

// WebhookIssueCommentCreatedIssue0MilestoneState - The state of the milestone.
type WebhookIssueCommentCreatedIssue0MilestoneState string

const (
	WebhookIssueCommentCreatedIssue0MilestoneStateClosed WebhookIssueCommentCreatedIssue0MilestoneState = "closed"
	WebhookIssueCommentCreatedIssue0MilestoneStateOpen WebhookIssueCommentCreatedIssue0MilestoneState = "open"
)

// PossibleWebhookIssueCommentCreatedIssue0MilestoneStateValues returns the possible values for the WebhookIssueCommentCreatedIssue0MilestoneState const type.
func PossibleWebhookIssueCommentCreatedIssue0MilestoneStateValues() []WebhookIssueCommentCreatedIssue0MilestoneState {
	return []WebhookIssueCommentCreatedIssue0MilestoneState{
		WebhookIssueCommentCreatedIssue0MilestoneStateClosed,
		WebhookIssueCommentCreatedIssue0MilestoneStateOpen,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemCheckRun WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "check_run"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemCheckSuite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemCommitComment WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemContentReference WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemCreate WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "create"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemDelete WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "delete"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemDeployKey WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemDeployment WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "deployment"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemDeploymentReview WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemDeploymentStatus WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemDiscussion WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "discussion"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemDiscussionComment WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemFork WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "fork"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemGollum WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "gollum"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemIssueComment WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemIssues WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "issues"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemLabel WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "label"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemMember WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "member"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemMembership WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "membership"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemMilestone WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "milestone"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemOrgBlock WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "org_block"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemOrganization WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "organization"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemPageBuild WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "page_build"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemProject WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "project"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemProjectCard WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "project_card"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemProjectColumn WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "project_column"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemPublic WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "public"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemPullRequest WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemPullRequestReview WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemPullRequestReviewThread WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "pull_request_review_thread"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemPush WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "push"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemRegistryPackage WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemRelease WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "release"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemReminder WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "reminder"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemRepository WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "repository"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemStar WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "star"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemStatus WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "status"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemTeam WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "team"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemTeamAdd WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "team_add"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemWatch WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "watch"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemWorkflowRun WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItem{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemCheckRun,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemCommitComment,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemContentReference,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemCreate,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemDelete,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemDeployKey,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemDeployment,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemDiscussion,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemFork,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemGollum,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemIssueComment,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemIssues,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemLabel,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemMember,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemMembership,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemMilestone,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemOrganization,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemPageBuild,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemProject,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemProjectCard,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemPublic,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemPullRequest,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemPullRequestReviewThread,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemPush,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemRelease,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemReminder,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemRepository,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemStar,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemStatus,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemTeam,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemWatch,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerType string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerTypeBot WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerType = "Bot"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerTypeOrganization WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerType = "Organization"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerTypeUser WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerTypeValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerType {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerType{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerTypeBot,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsActions string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsActionsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsActions = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsActionsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsActionsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsActions {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsActions{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsActionsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsAdministrationRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsAdministrationWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsAdministration{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsChecksRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsChecksWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsChecksValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsChecks {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsChecks{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsChecksRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentReferencesRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentReferences{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContents string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContents = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContents {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContents{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDeploymentsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDeployments{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDiscussionsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDiscussions{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEmailsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEmailsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEmailsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEmails {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEmails{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEnvironments{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsIssuesRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsIssuesWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsIssuesValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsIssues {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsIssues{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsKeysRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsKeysWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsKeysValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsKeys {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsKeys{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsKeysRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMembersRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMembersWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMembersValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMembers {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMembers{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMembersRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMetadataRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMetadataWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMetadataValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMetadata{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsAdmin WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "admin"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsAdmin,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPackagesRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPackagesWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPackagesValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPackages {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPackages{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPages string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPagesRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPages = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPagesWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPagesValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPages {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPages{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPagesRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPullRequestsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPullRequests{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsAdmin WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "admin"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsAdmin,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecrets{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSingleFileRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSingleFileWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSingleFile{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsStatusesRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsStatusesWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsStatusesValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsStatuses{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsWorkflowsRead WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsWorkflows{
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssueCommentCreatedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssueCommentCreatedIssue0State - State of the issue; either 'open' or 'closed'
type WebhookIssueCommentCreatedIssue0State string

const (
	WebhookIssueCommentCreatedIssue0StateClosed WebhookIssueCommentCreatedIssue0State = "closed"
	WebhookIssueCommentCreatedIssue0StateOpen WebhookIssueCommentCreatedIssue0State = "open"
)

// PossibleWebhookIssueCommentCreatedIssue0StateValues returns the possible values for the WebhookIssueCommentCreatedIssue0State const type.
func PossibleWebhookIssueCommentCreatedIssue0StateValues() []WebhookIssueCommentCreatedIssue0State {
	return []WebhookIssueCommentCreatedIssue0State{
		WebhookIssueCommentCreatedIssue0StateClosed,
		WebhookIssueCommentCreatedIssue0StateOpen,
	}
}

type WebhookIssueCommentCreatedIssue0UserType string

const (
	WebhookIssueCommentCreatedIssue0UserTypeBot WebhookIssueCommentCreatedIssue0UserType = "Bot"
	WebhookIssueCommentCreatedIssue0UserTypeMannequin WebhookIssueCommentCreatedIssue0UserType = "Mannequin"
	WebhookIssueCommentCreatedIssue0UserTypeOrganization WebhookIssueCommentCreatedIssue0UserType = "Organization"
	WebhookIssueCommentCreatedIssue0UserTypeUser WebhookIssueCommentCreatedIssue0UserType = "User"
)

// PossibleWebhookIssueCommentCreatedIssue0UserTypeValues returns the possible values for the WebhookIssueCommentCreatedIssue0UserType const type.
func PossibleWebhookIssueCommentCreatedIssue0UserTypeValues() []WebhookIssueCommentCreatedIssue0UserType {
	return []WebhookIssueCommentCreatedIssue0UserType{
		WebhookIssueCommentCreatedIssue0UserTypeBot,
		WebhookIssueCommentCreatedIssue0UserTypeMannequin,
		WebhookIssueCommentCreatedIssue0UserTypeOrganization,
		WebhookIssueCommentCreatedIssue0UserTypeUser,
	}
}

type WebhookIssueCommentCreatedIssue1AssigneeType string

const (
	WebhookIssueCommentCreatedIssue1AssigneeTypeBot WebhookIssueCommentCreatedIssue1AssigneeType = "Bot"
	WebhookIssueCommentCreatedIssue1AssigneeTypeMannequin WebhookIssueCommentCreatedIssue1AssigneeType = "Mannequin"
	WebhookIssueCommentCreatedIssue1AssigneeTypeOrganization WebhookIssueCommentCreatedIssue1AssigneeType = "Organization"
	WebhookIssueCommentCreatedIssue1AssigneeTypeUser WebhookIssueCommentCreatedIssue1AssigneeType = "User"
)

// PossibleWebhookIssueCommentCreatedIssue1AssigneeTypeValues returns the possible values for the WebhookIssueCommentCreatedIssue1AssigneeType const type.
func PossibleWebhookIssueCommentCreatedIssue1AssigneeTypeValues() []WebhookIssueCommentCreatedIssue1AssigneeType {
	return []WebhookIssueCommentCreatedIssue1AssigneeType{
		WebhookIssueCommentCreatedIssue1AssigneeTypeBot,
		WebhookIssueCommentCreatedIssue1AssigneeTypeMannequin,
		WebhookIssueCommentCreatedIssue1AssigneeTypeOrganization,
		WebhookIssueCommentCreatedIssue1AssigneeTypeUser,
	}
}

// WebhookIssueCommentCreatedIssue1State - State of the issue; either 'open' or 'closed'
type WebhookIssueCommentCreatedIssue1State string

const (
	WebhookIssueCommentCreatedIssue1StateClosed WebhookIssueCommentCreatedIssue1State = "closed"
	WebhookIssueCommentCreatedIssue1StateOpen WebhookIssueCommentCreatedIssue1State = "open"
)

// PossibleWebhookIssueCommentCreatedIssue1StateValues returns the possible values for the WebhookIssueCommentCreatedIssue1State const type.
func PossibleWebhookIssueCommentCreatedIssue1StateValues() []WebhookIssueCommentCreatedIssue1State {
	return []WebhookIssueCommentCreatedIssue1State{
		WebhookIssueCommentCreatedIssue1StateClosed,
		WebhookIssueCommentCreatedIssue1StateOpen,
	}
}

type WebhookIssueCommentCreatedIssueOneOf0AssigneesItemType string

const (
	WebhookIssueCommentCreatedIssueOneOf0AssigneesItemTypeBot WebhookIssueCommentCreatedIssueOneOf0AssigneesItemType = "Bot"
	WebhookIssueCommentCreatedIssueOneOf0AssigneesItemTypeMannequin WebhookIssueCommentCreatedIssueOneOf0AssigneesItemType = "Mannequin"
	WebhookIssueCommentCreatedIssueOneOf0AssigneesItemTypeOrganization WebhookIssueCommentCreatedIssueOneOf0AssigneesItemType = "Organization"
	WebhookIssueCommentCreatedIssueOneOf0AssigneesItemTypeUser WebhookIssueCommentCreatedIssueOneOf0AssigneesItemType = "User"
)

// PossibleWebhookIssueCommentCreatedIssueOneOf0AssigneesItemTypeValues returns the possible values for the WebhookIssueCommentCreatedIssueOneOf0AssigneesItemType const type.
func PossibleWebhookIssueCommentCreatedIssueOneOf0AssigneesItemTypeValues() []WebhookIssueCommentCreatedIssueOneOf0AssigneesItemType {
	return []WebhookIssueCommentCreatedIssueOneOf0AssigneesItemType{
		WebhookIssueCommentCreatedIssueOneOf0AssigneesItemTypeBot,
		WebhookIssueCommentCreatedIssueOneOf0AssigneesItemTypeMannequin,
		WebhookIssueCommentCreatedIssueOneOf0AssigneesItemTypeOrganization,
		WebhookIssueCommentCreatedIssueOneOf0AssigneesItemTypeUser,
	}
}

type WebhookIssueCommentDeletedAction string

const (
	WebhookIssueCommentDeletedActionDeleted WebhookIssueCommentDeletedAction = "deleted"
)

// PossibleWebhookIssueCommentDeletedActionValues returns the possible values for the WebhookIssueCommentDeletedAction const type.
func PossibleWebhookIssueCommentDeletedActionValues() []WebhookIssueCommentDeletedAction {
	return []WebhookIssueCommentDeletedAction{
		WebhookIssueCommentDeletedActionDeleted,
	}
}

// WebhookIssueCommentDeletedCommentAuthorAssociation - How the author is associated with the repository.
type WebhookIssueCommentDeletedCommentAuthorAssociation string

const (
	WebhookIssueCommentDeletedCommentAuthorAssociationCOLLABORATOR WebhookIssueCommentDeletedCommentAuthorAssociation = "COLLABORATOR"
	WebhookIssueCommentDeletedCommentAuthorAssociationCONTRIBUTOR WebhookIssueCommentDeletedCommentAuthorAssociation = "CONTRIBUTOR"
	WebhookIssueCommentDeletedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssueCommentDeletedCommentAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssueCommentDeletedCommentAuthorAssociationFIRSTTIMER WebhookIssueCommentDeletedCommentAuthorAssociation = "FIRST_TIMER"
	WebhookIssueCommentDeletedCommentAuthorAssociationMANNEQUIN WebhookIssueCommentDeletedCommentAuthorAssociation = "MANNEQUIN"
	WebhookIssueCommentDeletedCommentAuthorAssociationMEMBER WebhookIssueCommentDeletedCommentAuthorAssociation = "MEMBER"
	WebhookIssueCommentDeletedCommentAuthorAssociationNONE WebhookIssueCommentDeletedCommentAuthorAssociation = "NONE"
	WebhookIssueCommentDeletedCommentAuthorAssociationOWNER WebhookIssueCommentDeletedCommentAuthorAssociation = "OWNER"
)

// PossibleWebhookIssueCommentDeletedCommentAuthorAssociationValues returns the possible values for the WebhookIssueCommentDeletedCommentAuthorAssociation const type.
func PossibleWebhookIssueCommentDeletedCommentAuthorAssociationValues() []WebhookIssueCommentDeletedCommentAuthorAssociation {
	return []WebhookIssueCommentDeletedCommentAuthorAssociation{
		WebhookIssueCommentDeletedCommentAuthorAssociationCOLLABORATOR,
		WebhookIssueCommentDeletedCommentAuthorAssociationCONTRIBUTOR,
		WebhookIssueCommentDeletedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssueCommentDeletedCommentAuthorAssociationFIRSTTIMER,
		WebhookIssueCommentDeletedCommentAuthorAssociationMANNEQUIN,
		WebhookIssueCommentDeletedCommentAuthorAssociationMEMBER,
		WebhookIssueCommentDeletedCommentAuthorAssociationNONE,
		WebhookIssueCommentDeletedCommentAuthorAssociationOWNER,
	}
}

type WebhookIssueCommentDeletedCommentUserType string

const (
	WebhookIssueCommentDeletedCommentUserTypeBot WebhookIssueCommentDeletedCommentUserType = "Bot"
	WebhookIssueCommentDeletedCommentUserTypeMannequin WebhookIssueCommentDeletedCommentUserType = "Mannequin"
	WebhookIssueCommentDeletedCommentUserTypeOrganization WebhookIssueCommentDeletedCommentUserType = "Organization"
	WebhookIssueCommentDeletedCommentUserTypeUser WebhookIssueCommentDeletedCommentUserType = "User"
)

// PossibleWebhookIssueCommentDeletedCommentUserTypeValues returns the possible values for the WebhookIssueCommentDeletedCommentUserType const type.
func PossibleWebhookIssueCommentDeletedCommentUserTypeValues() []WebhookIssueCommentDeletedCommentUserType {
	return []WebhookIssueCommentDeletedCommentUserType{
		WebhookIssueCommentDeletedCommentUserTypeBot,
		WebhookIssueCommentDeletedCommentUserTypeMannequin,
		WebhookIssueCommentDeletedCommentUserTypeOrganization,
		WebhookIssueCommentDeletedCommentUserTypeUser,
	}
}

type WebhookIssueCommentDeletedIssue0ActiveLockReason string

const (
	WebhookIssueCommentDeletedIssue0ActiveLockReasonNull WebhookIssueCommentDeletedIssue0ActiveLockReason = "null"
	WebhookIssueCommentDeletedIssue0ActiveLockReasonOffTopic WebhookIssueCommentDeletedIssue0ActiveLockReason = "off-topic"
	WebhookIssueCommentDeletedIssue0ActiveLockReasonResolved WebhookIssueCommentDeletedIssue0ActiveLockReason = "resolved"
	WebhookIssueCommentDeletedIssue0ActiveLockReasonSpam WebhookIssueCommentDeletedIssue0ActiveLockReason = "spam"
	WebhookIssueCommentDeletedIssue0ActiveLockReasonTooHeated WebhookIssueCommentDeletedIssue0ActiveLockReason = "too heated"
)

// PossibleWebhookIssueCommentDeletedIssue0ActiveLockReasonValues returns the possible values for the WebhookIssueCommentDeletedIssue0ActiveLockReason const type.
func PossibleWebhookIssueCommentDeletedIssue0ActiveLockReasonValues() []WebhookIssueCommentDeletedIssue0ActiveLockReason {
	return []WebhookIssueCommentDeletedIssue0ActiveLockReason{
		WebhookIssueCommentDeletedIssue0ActiveLockReasonNull,
		WebhookIssueCommentDeletedIssue0ActiveLockReasonOffTopic,
		WebhookIssueCommentDeletedIssue0ActiveLockReasonResolved,
		WebhookIssueCommentDeletedIssue0ActiveLockReasonSpam,
		WebhookIssueCommentDeletedIssue0ActiveLockReasonTooHeated,
	}
}

type WebhookIssueCommentDeletedIssue0AssigneeType string

const (
	WebhookIssueCommentDeletedIssue0AssigneeTypeBot WebhookIssueCommentDeletedIssue0AssigneeType = "Bot"
	WebhookIssueCommentDeletedIssue0AssigneeTypeMannequin WebhookIssueCommentDeletedIssue0AssigneeType = "Mannequin"
	WebhookIssueCommentDeletedIssue0AssigneeTypeOrganization WebhookIssueCommentDeletedIssue0AssigneeType = "Organization"
	WebhookIssueCommentDeletedIssue0AssigneeTypeUser WebhookIssueCommentDeletedIssue0AssigneeType = "User"
)

// PossibleWebhookIssueCommentDeletedIssue0AssigneeTypeValues returns the possible values for the WebhookIssueCommentDeletedIssue0AssigneeType const type.
func PossibleWebhookIssueCommentDeletedIssue0AssigneeTypeValues() []WebhookIssueCommentDeletedIssue0AssigneeType {
	return []WebhookIssueCommentDeletedIssue0AssigneeType{
		WebhookIssueCommentDeletedIssue0AssigneeTypeBot,
		WebhookIssueCommentDeletedIssue0AssigneeTypeMannequin,
		WebhookIssueCommentDeletedIssue0AssigneeTypeOrganization,
		WebhookIssueCommentDeletedIssue0AssigneeTypeUser,
	}
}

// WebhookIssueCommentDeletedIssue0AuthorAssociation - How the author is associated with the repository.
type WebhookIssueCommentDeletedIssue0AuthorAssociation string

const (
	WebhookIssueCommentDeletedIssue0AuthorAssociationCOLLABORATOR WebhookIssueCommentDeletedIssue0AuthorAssociation = "COLLABORATOR"
	WebhookIssueCommentDeletedIssue0AuthorAssociationCONTRIBUTOR WebhookIssueCommentDeletedIssue0AuthorAssociation = "CONTRIBUTOR"
	WebhookIssueCommentDeletedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssueCommentDeletedIssue0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssueCommentDeletedIssue0AuthorAssociationFIRSTTIMER WebhookIssueCommentDeletedIssue0AuthorAssociation = "FIRST_TIMER"
	WebhookIssueCommentDeletedIssue0AuthorAssociationMANNEQUIN WebhookIssueCommentDeletedIssue0AuthorAssociation = "MANNEQUIN"
	WebhookIssueCommentDeletedIssue0AuthorAssociationMEMBER WebhookIssueCommentDeletedIssue0AuthorAssociation = "MEMBER"
	WebhookIssueCommentDeletedIssue0AuthorAssociationNONE WebhookIssueCommentDeletedIssue0AuthorAssociation = "NONE"
	WebhookIssueCommentDeletedIssue0AuthorAssociationOWNER WebhookIssueCommentDeletedIssue0AuthorAssociation = "OWNER"
)

// PossibleWebhookIssueCommentDeletedIssue0AuthorAssociationValues returns the possible values for the WebhookIssueCommentDeletedIssue0AuthorAssociation const type.
func PossibleWebhookIssueCommentDeletedIssue0AuthorAssociationValues() []WebhookIssueCommentDeletedIssue0AuthorAssociation {
	return []WebhookIssueCommentDeletedIssue0AuthorAssociation{
		WebhookIssueCommentDeletedIssue0AuthorAssociationCOLLABORATOR,
		WebhookIssueCommentDeletedIssue0AuthorAssociationCONTRIBUTOR,
		WebhookIssueCommentDeletedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssueCommentDeletedIssue0AuthorAssociationFIRSTTIMER,
		WebhookIssueCommentDeletedIssue0AuthorAssociationMANNEQUIN,
		WebhookIssueCommentDeletedIssue0AuthorAssociationMEMBER,
		WebhookIssueCommentDeletedIssue0AuthorAssociationNONE,
		WebhookIssueCommentDeletedIssue0AuthorAssociationOWNER,
	}
}

type WebhookIssueCommentDeletedIssue0MilestoneCreatorType string

const (
	WebhookIssueCommentDeletedIssue0MilestoneCreatorTypeBot WebhookIssueCommentDeletedIssue0MilestoneCreatorType = "Bot"
	WebhookIssueCommentDeletedIssue0MilestoneCreatorTypeMannequin WebhookIssueCommentDeletedIssue0MilestoneCreatorType = "Mannequin"
	WebhookIssueCommentDeletedIssue0MilestoneCreatorTypeOrganization WebhookIssueCommentDeletedIssue0MilestoneCreatorType = "Organization"
	WebhookIssueCommentDeletedIssue0MilestoneCreatorTypeUser WebhookIssueCommentDeletedIssue0MilestoneCreatorType = "User"
)

// PossibleWebhookIssueCommentDeletedIssue0MilestoneCreatorTypeValues returns the possible values for the WebhookIssueCommentDeletedIssue0MilestoneCreatorType const type.
func PossibleWebhookIssueCommentDeletedIssue0MilestoneCreatorTypeValues() []WebhookIssueCommentDeletedIssue0MilestoneCreatorType {
	return []WebhookIssueCommentDeletedIssue0MilestoneCreatorType{
		WebhookIssueCommentDeletedIssue0MilestoneCreatorTypeBot,
		WebhookIssueCommentDeletedIssue0MilestoneCreatorTypeMannequin,
		WebhookIssueCommentDeletedIssue0MilestoneCreatorTypeOrganization,
		WebhookIssueCommentDeletedIssue0MilestoneCreatorTypeUser,
	}
}

// WebhookIssueCommentDeletedIssue0MilestoneState - The state of the milestone.
type WebhookIssueCommentDeletedIssue0MilestoneState string

const (
	WebhookIssueCommentDeletedIssue0MilestoneStateClosed WebhookIssueCommentDeletedIssue0MilestoneState = "closed"
	WebhookIssueCommentDeletedIssue0MilestoneStateOpen WebhookIssueCommentDeletedIssue0MilestoneState = "open"
)

// PossibleWebhookIssueCommentDeletedIssue0MilestoneStateValues returns the possible values for the WebhookIssueCommentDeletedIssue0MilestoneState const type.
func PossibleWebhookIssueCommentDeletedIssue0MilestoneStateValues() []WebhookIssueCommentDeletedIssue0MilestoneState {
	return []WebhookIssueCommentDeletedIssue0MilestoneState{
		WebhookIssueCommentDeletedIssue0MilestoneStateClosed,
		WebhookIssueCommentDeletedIssue0MilestoneStateOpen,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemCheckRun WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "check_run"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemCheckSuite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemCommitComment WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemContentReference WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemCreate WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "create"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemDelete WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "delete"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemDeployKey WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemDeployment WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "deployment"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemDeploymentReview WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemDeploymentStatus WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemDiscussion WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "discussion"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemDiscussionComment WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemFork WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "fork"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemGollum WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "gollum"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemIssueComment WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemIssues WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "issues"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemLabel WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "label"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemMember WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "member"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemMembership WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "membership"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemMilestone WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "milestone"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemOrgBlock WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "org_block"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemOrganization WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "organization"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemPageBuild WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "page_build"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemProject WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "project"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemProjectCard WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "project_card"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemProjectColumn WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "project_column"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemPublic WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "public"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemPullRequest WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemPullRequestReview WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemPush WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "push"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemRegistryPackage WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemRelease WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "release"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemRepository WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "repository"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemStar WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "star"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemStatus WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "status"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemTeam WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "team"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemTeamAdd WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "team_add"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemWatch WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "watch"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemWorkflowRun WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItem{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemCheckRun,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemCommitComment,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemContentReference,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemCreate,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemDelete,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemDeployKey,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemDeployment,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemDiscussion,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemFork,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemGollum,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemIssueComment,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemIssues,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemLabel,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemMember,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemMembership,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemMilestone,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemOrganization,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemPageBuild,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemProject,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemProjectCard,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemPublic,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemPullRequest,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemPush,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemRelease,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemRepository,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemStar,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemStatus,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemTeam,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemWatch,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerType string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerTypeBot WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerType = "Bot"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerTypeOrganization WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerType = "Organization"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerTypeUser WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerTypeValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerType {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerType{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerTypeBot,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsActions string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsActionsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsActions = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsActionsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsActionsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsActions {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsActions{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsActionsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsAdministrationRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsAdministrationWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsAdministration{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsChecksRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsChecksWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsChecksValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsChecks {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsChecks{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsChecksRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentReferencesRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentReferences{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContents string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContents = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContents {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContents{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDeploymentsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDeployments{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDiscussionsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDiscussions{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEmailsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEmailsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEmailsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEmails {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEmails{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEnvironments{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsIssuesRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsIssuesWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsIssuesValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsIssues {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsIssues{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsKeysRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsKeysWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsKeysValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsKeys {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsKeys{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsKeysRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMembersRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMembersWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMembersValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMembers {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMembers{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMembersRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMetadataRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMetadataWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMetadataValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMetadata{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPackagesRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPackagesWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPackagesValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPackages {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPackages{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPages string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPagesRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPages = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPagesWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPagesValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPages {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPages{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPagesRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPullRequestsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPullRequests{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecrets{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSingleFileRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSingleFileWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSingleFile{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsStatusesRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsStatusesWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsStatusesValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsStatuses{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsWorkflowsRead WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsWorkflows{
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssueCommentDeletedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssueCommentDeletedIssue0State - State of the issue; either 'open' or 'closed'
type WebhookIssueCommentDeletedIssue0State string

const (
	WebhookIssueCommentDeletedIssue0StateClosed WebhookIssueCommentDeletedIssue0State = "closed"
	WebhookIssueCommentDeletedIssue0StateOpen WebhookIssueCommentDeletedIssue0State = "open"
)

// PossibleWebhookIssueCommentDeletedIssue0StateValues returns the possible values for the WebhookIssueCommentDeletedIssue0State const type.
func PossibleWebhookIssueCommentDeletedIssue0StateValues() []WebhookIssueCommentDeletedIssue0State {
	return []WebhookIssueCommentDeletedIssue0State{
		WebhookIssueCommentDeletedIssue0StateClosed,
		WebhookIssueCommentDeletedIssue0StateOpen,
	}
}

type WebhookIssueCommentDeletedIssue0UserType string

const (
	WebhookIssueCommentDeletedIssue0UserTypeBot WebhookIssueCommentDeletedIssue0UserType = "Bot"
	WebhookIssueCommentDeletedIssue0UserTypeMannequin WebhookIssueCommentDeletedIssue0UserType = "Mannequin"
	WebhookIssueCommentDeletedIssue0UserTypeOrganization WebhookIssueCommentDeletedIssue0UserType = "Organization"
	WebhookIssueCommentDeletedIssue0UserTypeUser WebhookIssueCommentDeletedIssue0UserType = "User"
)

// PossibleWebhookIssueCommentDeletedIssue0UserTypeValues returns the possible values for the WebhookIssueCommentDeletedIssue0UserType const type.
func PossibleWebhookIssueCommentDeletedIssue0UserTypeValues() []WebhookIssueCommentDeletedIssue0UserType {
	return []WebhookIssueCommentDeletedIssue0UserType{
		WebhookIssueCommentDeletedIssue0UserTypeBot,
		WebhookIssueCommentDeletedIssue0UserTypeMannequin,
		WebhookIssueCommentDeletedIssue0UserTypeOrganization,
		WebhookIssueCommentDeletedIssue0UserTypeUser,
	}
}

type WebhookIssueCommentDeletedIssue1AssigneeType string

const (
	WebhookIssueCommentDeletedIssue1AssigneeTypeBot WebhookIssueCommentDeletedIssue1AssigneeType = "Bot"
	WebhookIssueCommentDeletedIssue1AssigneeTypeMannequin WebhookIssueCommentDeletedIssue1AssigneeType = "Mannequin"
	WebhookIssueCommentDeletedIssue1AssigneeTypeOrganization WebhookIssueCommentDeletedIssue1AssigneeType = "Organization"
	WebhookIssueCommentDeletedIssue1AssigneeTypeUser WebhookIssueCommentDeletedIssue1AssigneeType = "User"
)

// PossibleWebhookIssueCommentDeletedIssue1AssigneeTypeValues returns the possible values for the WebhookIssueCommentDeletedIssue1AssigneeType const type.
func PossibleWebhookIssueCommentDeletedIssue1AssigneeTypeValues() []WebhookIssueCommentDeletedIssue1AssigneeType {
	return []WebhookIssueCommentDeletedIssue1AssigneeType{
		WebhookIssueCommentDeletedIssue1AssigneeTypeBot,
		WebhookIssueCommentDeletedIssue1AssigneeTypeMannequin,
		WebhookIssueCommentDeletedIssue1AssigneeTypeOrganization,
		WebhookIssueCommentDeletedIssue1AssigneeTypeUser,
	}
}

// WebhookIssueCommentDeletedIssue1State - State of the issue; either 'open' or 'closed'
type WebhookIssueCommentDeletedIssue1State string

const (
	WebhookIssueCommentDeletedIssue1StateClosed WebhookIssueCommentDeletedIssue1State = "closed"
	WebhookIssueCommentDeletedIssue1StateOpen WebhookIssueCommentDeletedIssue1State = "open"
)

// PossibleWebhookIssueCommentDeletedIssue1StateValues returns the possible values for the WebhookIssueCommentDeletedIssue1State const type.
func PossibleWebhookIssueCommentDeletedIssue1StateValues() []WebhookIssueCommentDeletedIssue1State {
	return []WebhookIssueCommentDeletedIssue1State{
		WebhookIssueCommentDeletedIssue1StateClosed,
		WebhookIssueCommentDeletedIssue1StateOpen,
	}
}

type WebhookIssueCommentDeletedIssueOneOf0AssigneesItemType string

const (
	WebhookIssueCommentDeletedIssueOneOf0AssigneesItemTypeBot WebhookIssueCommentDeletedIssueOneOf0AssigneesItemType = "Bot"
	WebhookIssueCommentDeletedIssueOneOf0AssigneesItemTypeMannequin WebhookIssueCommentDeletedIssueOneOf0AssigneesItemType = "Mannequin"
	WebhookIssueCommentDeletedIssueOneOf0AssigneesItemTypeOrganization WebhookIssueCommentDeletedIssueOneOf0AssigneesItemType = "Organization"
	WebhookIssueCommentDeletedIssueOneOf0AssigneesItemTypeUser WebhookIssueCommentDeletedIssueOneOf0AssigneesItemType = "User"
)

// PossibleWebhookIssueCommentDeletedIssueOneOf0AssigneesItemTypeValues returns the possible values for the WebhookIssueCommentDeletedIssueOneOf0AssigneesItemType const type.
func PossibleWebhookIssueCommentDeletedIssueOneOf0AssigneesItemTypeValues() []WebhookIssueCommentDeletedIssueOneOf0AssigneesItemType {
	return []WebhookIssueCommentDeletedIssueOneOf0AssigneesItemType{
		WebhookIssueCommentDeletedIssueOneOf0AssigneesItemTypeBot,
		WebhookIssueCommentDeletedIssueOneOf0AssigneesItemTypeMannequin,
		WebhookIssueCommentDeletedIssueOneOf0AssigneesItemTypeOrganization,
		WebhookIssueCommentDeletedIssueOneOf0AssigneesItemTypeUser,
	}
}

type WebhookIssueCommentEditedAction string

const (
	WebhookIssueCommentEditedActionEdited WebhookIssueCommentEditedAction = "edited"
)

// PossibleWebhookIssueCommentEditedActionValues returns the possible values for the WebhookIssueCommentEditedAction const type.
func PossibleWebhookIssueCommentEditedActionValues() []WebhookIssueCommentEditedAction {
	return []WebhookIssueCommentEditedAction{
		WebhookIssueCommentEditedActionEdited,
	}
}

// WebhookIssueCommentEditedCommentAuthorAssociation - How the author is associated with the repository.
type WebhookIssueCommentEditedCommentAuthorAssociation string

const (
	WebhookIssueCommentEditedCommentAuthorAssociationCOLLABORATOR WebhookIssueCommentEditedCommentAuthorAssociation = "COLLABORATOR"
	WebhookIssueCommentEditedCommentAuthorAssociationCONTRIBUTOR WebhookIssueCommentEditedCommentAuthorAssociation = "CONTRIBUTOR"
	WebhookIssueCommentEditedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssueCommentEditedCommentAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssueCommentEditedCommentAuthorAssociationFIRSTTIMER WebhookIssueCommentEditedCommentAuthorAssociation = "FIRST_TIMER"
	WebhookIssueCommentEditedCommentAuthorAssociationMANNEQUIN WebhookIssueCommentEditedCommentAuthorAssociation = "MANNEQUIN"
	WebhookIssueCommentEditedCommentAuthorAssociationMEMBER WebhookIssueCommentEditedCommentAuthorAssociation = "MEMBER"
	WebhookIssueCommentEditedCommentAuthorAssociationNONE WebhookIssueCommentEditedCommentAuthorAssociation = "NONE"
	WebhookIssueCommentEditedCommentAuthorAssociationOWNER WebhookIssueCommentEditedCommentAuthorAssociation = "OWNER"
)

// PossibleWebhookIssueCommentEditedCommentAuthorAssociationValues returns the possible values for the WebhookIssueCommentEditedCommentAuthorAssociation const type.
func PossibleWebhookIssueCommentEditedCommentAuthorAssociationValues() []WebhookIssueCommentEditedCommentAuthorAssociation {
	return []WebhookIssueCommentEditedCommentAuthorAssociation{
		WebhookIssueCommentEditedCommentAuthorAssociationCOLLABORATOR,
		WebhookIssueCommentEditedCommentAuthorAssociationCONTRIBUTOR,
		WebhookIssueCommentEditedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssueCommentEditedCommentAuthorAssociationFIRSTTIMER,
		WebhookIssueCommentEditedCommentAuthorAssociationMANNEQUIN,
		WebhookIssueCommentEditedCommentAuthorAssociationMEMBER,
		WebhookIssueCommentEditedCommentAuthorAssociationNONE,
		WebhookIssueCommentEditedCommentAuthorAssociationOWNER,
	}
}

type WebhookIssueCommentEditedCommentUserType string

const (
	WebhookIssueCommentEditedCommentUserTypeBot WebhookIssueCommentEditedCommentUserType = "Bot"
	WebhookIssueCommentEditedCommentUserTypeMannequin WebhookIssueCommentEditedCommentUserType = "Mannequin"
	WebhookIssueCommentEditedCommentUserTypeOrganization WebhookIssueCommentEditedCommentUserType = "Organization"
	WebhookIssueCommentEditedCommentUserTypeUser WebhookIssueCommentEditedCommentUserType = "User"
)

// PossibleWebhookIssueCommentEditedCommentUserTypeValues returns the possible values for the WebhookIssueCommentEditedCommentUserType const type.
func PossibleWebhookIssueCommentEditedCommentUserTypeValues() []WebhookIssueCommentEditedCommentUserType {
	return []WebhookIssueCommentEditedCommentUserType{
		WebhookIssueCommentEditedCommentUserTypeBot,
		WebhookIssueCommentEditedCommentUserTypeMannequin,
		WebhookIssueCommentEditedCommentUserTypeOrganization,
		WebhookIssueCommentEditedCommentUserTypeUser,
	}
}

type WebhookIssueCommentEditedIssue0ActiveLockReason string

const (
	WebhookIssueCommentEditedIssue0ActiveLockReasonNull WebhookIssueCommentEditedIssue0ActiveLockReason = "null"
	WebhookIssueCommentEditedIssue0ActiveLockReasonOffTopic WebhookIssueCommentEditedIssue0ActiveLockReason = "off-topic"
	WebhookIssueCommentEditedIssue0ActiveLockReasonResolved WebhookIssueCommentEditedIssue0ActiveLockReason = "resolved"
	WebhookIssueCommentEditedIssue0ActiveLockReasonSpam WebhookIssueCommentEditedIssue0ActiveLockReason = "spam"
	WebhookIssueCommentEditedIssue0ActiveLockReasonTooHeated WebhookIssueCommentEditedIssue0ActiveLockReason = "too heated"
)

// PossibleWebhookIssueCommentEditedIssue0ActiveLockReasonValues returns the possible values for the WebhookIssueCommentEditedIssue0ActiveLockReason const type.
func PossibleWebhookIssueCommentEditedIssue0ActiveLockReasonValues() []WebhookIssueCommentEditedIssue0ActiveLockReason {
	return []WebhookIssueCommentEditedIssue0ActiveLockReason{
		WebhookIssueCommentEditedIssue0ActiveLockReasonNull,
		WebhookIssueCommentEditedIssue0ActiveLockReasonOffTopic,
		WebhookIssueCommentEditedIssue0ActiveLockReasonResolved,
		WebhookIssueCommentEditedIssue0ActiveLockReasonSpam,
		WebhookIssueCommentEditedIssue0ActiveLockReasonTooHeated,
	}
}

type WebhookIssueCommentEditedIssue0AssigneeType string

const (
	WebhookIssueCommentEditedIssue0AssigneeTypeBot WebhookIssueCommentEditedIssue0AssigneeType = "Bot"
	WebhookIssueCommentEditedIssue0AssigneeTypeMannequin WebhookIssueCommentEditedIssue0AssigneeType = "Mannequin"
	WebhookIssueCommentEditedIssue0AssigneeTypeOrganization WebhookIssueCommentEditedIssue0AssigneeType = "Organization"
	WebhookIssueCommentEditedIssue0AssigneeTypeUser WebhookIssueCommentEditedIssue0AssigneeType = "User"
)

// PossibleWebhookIssueCommentEditedIssue0AssigneeTypeValues returns the possible values for the WebhookIssueCommentEditedIssue0AssigneeType const type.
func PossibleWebhookIssueCommentEditedIssue0AssigneeTypeValues() []WebhookIssueCommentEditedIssue0AssigneeType {
	return []WebhookIssueCommentEditedIssue0AssigneeType{
		WebhookIssueCommentEditedIssue0AssigneeTypeBot,
		WebhookIssueCommentEditedIssue0AssigneeTypeMannequin,
		WebhookIssueCommentEditedIssue0AssigneeTypeOrganization,
		WebhookIssueCommentEditedIssue0AssigneeTypeUser,
	}
}

// WebhookIssueCommentEditedIssue0AuthorAssociation - How the author is associated with the repository.
type WebhookIssueCommentEditedIssue0AuthorAssociation string

const (
	WebhookIssueCommentEditedIssue0AuthorAssociationCOLLABORATOR WebhookIssueCommentEditedIssue0AuthorAssociation = "COLLABORATOR"
	WebhookIssueCommentEditedIssue0AuthorAssociationCONTRIBUTOR WebhookIssueCommentEditedIssue0AuthorAssociation = "CONTRIBUTOR"
	WebhookIssueCommentEditedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssueCommentEditedIssue0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssueCommentEditedIssue0AuthorAssociationFIRSTTIMER WebhookIssueCommentEditedIssue0AuthorAssociation = "FIRST_TIMER"
	WebhookIssueCommentEditedIssue0AuthorAssociationMANNEQUIN WebhookIssueCommentEditedIssue0AuthorAssociation = "MANNEQUIN"
	WebhookIssueCommentEditedIssue0AuthorAssociationMEMBER WebhookIssueCommentEditedIssue0AuthorAssociation = "MEMBER"
	WebhookIssueCommentEditedIssue0AuthorAssociationNONE WebhookIssueCommentEditedIssue0AuthorAssociation = "NONE"
	WebhookIssueCommentEditedIssue0AuthorAssociationOWNER WebhookIssueCommentEditedIssue0AuthorAssociation = "OWNER"
)

// PossibleWebhookIssueCommentEditedIssue0AuthorAssociationValues returns the possible values for the WebhookIssueCommentEditedIssue0AuthorAssociation const type.
func PossibleWebhookIssueCommentEditedIssue0AuthorAssociationValues() []WebhookIssueCommentEditedIssue0AuthorAssociation {
	return []WebhookIssueCommentEditedIssue0AuthorAssociation{
		WebhookIssueCommentEditedIssue0AuthorAssociationCOLLABORATOR,
		WebhookIssueCommentEditedIssue0AuthorAssociationCONTRIBUTOR,
		WebhookIssueCommentEditedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssueCommentEditedIssue0AuthorAssociationFIRSTTIMER,
		WebhookIssueCommentEditedIssue0AuthorAssociationMANNEQUIN,
		WebhookIssueCommentEditedIssue0AuthorAssociationMEMBER,
		WebhookIssueCommentEditedIssue0AuthorAssociationNONE,
		WebhookIssueCommentEditedIssue0AuthorAssociationOWNER,
	}
}

type WebhookIssueCommentEditedIssue0MilestoneCreatorType string

const (
	WebhookIssueCommentEditedIssue0MilestoneCreatorTypeBot WebhookIssueCommentEditedIssue0MilestoneCreatorType = "Bot"
	WebhookIssueCommentEditedIssue0MilestoneCreatorTypeMannequin WebhookIssueCommentEditedIssue0MilestoneCreatorType = "Mannequin"
	WebhookIssueCommentEditedIssue0MilestoneCreatorTypeOrganization WebhookIssueCommentEditedIssue0MilestoneCreatorType = "Organization"
	WebhookIssueCommentEditedIssue0MilestoneCreatorTypeUser WebhookIssueCommentEditedIssue0MilestoneCreatorType = "User"
)

// PossibleWebhookIssueCommentEditedIssue0MilestoneCreatorTypeValues returns the possible values for the WebhookIssueCommentEditedIssue0MilestoneCreatorType const type.
func PossibleWebhookIssueCommentEditedIssue0MilestoneCreatorTypeValues() []WebhookIssueCommentEditedIssue0MilestoneCreatorType {
	return []WebhookIssueCommentEditedIssue0MilestoneCreatorType{
		WebhookIssueCommentEditedIssue0MilestoneCreatorTypeBot,
		WebhookIssueCommentEditedIssue0MilestoneCreatorTypeMannequin,
		WebhookIssueCommentEditedIssue0MilestoneCreatorTypeOrganization,
		WebhookIssueCommentEditedIssue0MilestoneCreatorTypeUser,
	}
}

// WebhookIssueCommentEditedIssue0MilestoneState - The state of the milestone.
type WebhookIssueCommentEditedIssue0MilestoneState string

const (
	WebhookIssueCommentEditedIssue0MilestoneStateClosed WebhookIssueCommentEditedIssue0MilestoneState = "closed"
	WebhookIssueCommentEditedIssue0MilestoneStateOpen WebhookIssueCommentEditedIssue0MilestoneState = "open"
)

// PossibleWebhookIssueCommentEditedIssue0MilestoneStateValues returns the possible values for the WebhookIssueCommentEditedIssue0MilestoneState const type.
func PossibleWebhookIssueCommentEditedIssue0MilestoneStateValues() []WebhookIssueCommentEditedIssue0MilestoneState {
	return []WebhookIssueCommentEditedIssue0MilestoneState{
		WebhookIssueCommentEditedIssue0MilestoneStateClosed,
		WebhookIssueCommentEditedIssue0MilestoneStateOpen,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemCheckRun WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "check_run"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemCheckSuite WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemCommitComment WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemContentReference WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemCreate WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "create"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemDelete WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "delete"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemDeployKey WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemDeployment WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "deployment"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemDeploymentReview WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemDeploymentStatus WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemDiscussion WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "discussion"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemDiscussionComment WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemFork WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "fork"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemGollum WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "gollum"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemIssueComment WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemIssues WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "issues"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemLabel WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "label"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemMember WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "member"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemMembership WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "membership"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemMilestone WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "milestone"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemOrgBlock WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "org_block"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemOrganization WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "organization"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemPageBuild WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "page_build"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemProject WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "project"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemProjectCard WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "project_card"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemProjectColumn WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "project_column"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemPublic WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "public"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemPullRequest WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemPullRequestReview WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemPullRequestReviewThread WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "pull_request_review_thread"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemPush WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "push"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemRegistryPackage WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemRelease WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "release"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemReminder WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "reminder"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemRepository WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "repository"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemStar WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "star"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemStatus WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "status"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemTeam WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "team"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemTeamAdd WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "team_add"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemWatch WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "watch"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemWorkflowRun WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItem{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemCheckRun,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemCommitComment,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemContentReference,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemCreate,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemDelete,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemDeployKey,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemDeployment,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemDiscussion,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemFork,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemGollum,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemIssueComment,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemIssues,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemLabel,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemMember,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemMembership,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemMilestone,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemOrganization,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemPageBuild,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemProject,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemProjectCard,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemPublic,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemPullRequest,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemPullRequestReviewThread,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemPush,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemRelease,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemReminder,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemRepository,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemStar,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemStatus,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemTeam,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemWatch,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerType string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerTypeBot WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerType = "Bot"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerTypeOrganization WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerType = "Organization"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerTypeUser WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerTypeValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerType {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerType{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerTypeBot,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsActions string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsActionsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsActions = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsActionsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsActionsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsActions {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsActions{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsActionsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsAdministrationRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsAdministrationWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsAdministration{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsChecksRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsChecksWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsChecksValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsChecks {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsChecks{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsChecksRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentReferencesRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentReferences{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContents string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContents = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContents {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContents{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDeploymentsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDeployments{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDiscussionsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDiscussions{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEmailsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEmailsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEmailsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEmails {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEmails{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEnvironments{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsIssuesRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsIssuesWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsIssuesValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsIssues {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsIssues{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsKeysRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsKeysWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsKeysValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsKeys {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsKeys{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsKeysRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMembersRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMembersWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMembersValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMembers {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMembers{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMembersRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMetadataRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMetadataWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMetadataValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMetadata{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsAdmin WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "admin"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsAdmin,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPackagesRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPackagesWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPackagesValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPackages {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPackages{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPages string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPagesRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPages = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPagesWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPagesValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPages {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPages{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPagesRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPullRequestsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPullRequests{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecrets{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSingleFileRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSingleFileWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSingleFile{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsStatusesRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsStatusesWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsStatusesValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsStatuses{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsWorkflowsRead WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsWorkflows{
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssueCommentEditedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssueCommentEditedIssue0State - State of the issue; either 'open' or 'closed'
type WebhookIssueCommentEditedIssue0State string

const (
	WebhookIssueCommentEditedIssue0StateClosed WebhookIssueCommentEditedIssue0State = "closed"
	WebhookIssueCommentEditedIssue0StateOpen WebhookIssueCommentEditedIssue0State = "open"
)

// PossibleWebhookIssueCommentEditedIssue0StateValues returns the possible values for the WebhookIssueCommentEditedIssue0State const type.
func PossibleWebhookIssueCommentEditedIssue0StateValues() []WebhookIssueCommentEditedIssue0State {
	return []WebhookIssueCommentEditedIssue0State{
		WebhookIssueCommentEditedIssue0StateClosed,
		WebhookIssueCommentEditedIssue0StateOpen,
	}
}

type WebhookIssueCommentEditedIssue0UserType string

const (
	WebhookIssueCommentEditedIssue0UserTypeBot WebhookIssueCommentEditedIssue0UserType = "Bot"
	WebhookIssueCommentEditedIssue0UserTypeMannequin WebhookIssueCommentEditedIssue0UserType = "Mannequin"
	WebhookIssueCommentEditedIssue0UserTypeOrganization WebhookIssueCommentEditedIssue0UserType = "Organization"
	WebhookIssueCommentEditedIssue0UserTypeUser WebhookIssueCommentEditedIssue0UserType = "User"
)

// PossibleWebhookIssueCommentEditedIssue0UserTypeValues returns the possible values for the WebhookIssueCommentEditedIssue0UserType const type.
func PossibleWebhookIssueCommentEditedIssue0UserTypeValues() []WebhookIssueCommentEditedIssue0UserType {
	return []WebhookIssueCommentEditedIssue0UserType{
		WebhookIssueCommentEditedIssue0UserTypeBot,
		WebhookIssueCommentEditedIssue0UserTypeMannequin,
		WebhookIssueCommentEditedIssue0UserTypeOrganization,
		WebhookIssueCommentEditedIssue0UserTypeUser,
	}
}

type WebhookIssueCommentEditedIssue1AssigneeType string

const (
	WebhookIssueCommentEditedIssue1AssigneeTypeBot WebhookIssueCommentEditedIssue1AssigneeType = "Bot"
	WebhookIssueCommentEditedIssue1AssigneeTypeMannequin WebhookIssueCommentEditedIssue1AssigneeType = "Mannequin"
	WebhookIssueCommentEditedIssue1AssigneeTypeOrganization WebhookIssueCommentEditedIssue1AssigneeType = "Organization"
	WebhookIssueCommentEditedIssue1AssigneeTypeUser WebhookIssueCommentEditedIssue1AssigneeType = "User"
)

// PossibleWebhookIssueCommentEditedIssue1AssigneeTypeValues returns the possible values for the WebhookIssueCommentEditedIssue1AssigneeType const type.
func PossibleWebhookIssueCommentEditedIssue1AssigneeTypeValues() []WebhookIssueCommentEditedIssue1AssigneeType {
	return []WebhookIssueCommentEditedIssue1AssigneeType{
		WebhookIssueCommentEditedIssue1AssigneeTypeBot,
		WebhookIssueCommentEditedIssue1AssigneeTypeMannequin,
		WebhookIssueCommentEditedIssue1AssigneeTypeOrganization,
		WebhookIssueCommentEditedIssue1AssigneeTypeUser,
	}
}

// WebhookIssueCommentEditedIssue1State - State of the issue; either 'open' or 'closed'
type WebhookIssueCommentEditedIssue1State string

const (
	WebhookIssueCommentEditedIssue1StateClosed WebhookIssueCommentEditedIssue1State = "closed"
	WebhookIssueCommentEditedIssue1StateOpen WebhookIssueCommentEditedIssue1State = "open"
)

// PossibleWebhookIssueCommentEditedIssue1StateValues returns the possible values for the WebhookIssueCommentEditedIssue1State const type.
func PossibleWebhookIssueCommentEditedIssue1StateValues() []WebhookIssueCommentEditedIssue1State {
	return []WebhookIssueCommentEditedIssue1State{
		WebhookIssueCommentEditedIssue1StateClosed,
		WebhookIssueCommentEditedIssue1StateOpen,
	}
}

type WebhookIssueCommentEditedIssueOneOf0AssigneesItemType string

const (
	WebhookIssueCommentEditedIssueOneOf0AssigneesItemTypeBot WebhookIssueCommentEditedIssueOneOf0AssigneesItemType = "Bot"
	WebhookIssueCommentEditedIssueOneOf0AssigneesItemTypeMannequin WebhookIssueCommentEditedIssueOneOf0AssigneesItemType = "Mannequin"
	WebhookIssueCommentEditedIssueOneOf0AssigneesItemTypeOrganization WebhookIssueCommentEditedIssueOneOf0AssigneesItemType = "Organization"
	WebhookIssueCommentEditedIssueOneOf0AssigneesItemTypeUser WebhookIssueCommentEditedIssueOneOf0AssigneesItemType = "User"
)

// PossibleWebhookIssueCommentEditedIssueOneOf0AssigneesItemTypeValues returns the possible values for the WebhookIssueCommentEditedIssueOneOf0AssigneesItemType const type.
func PossibleWebhookIssueCommentEditedIssueOneOf0AssigneesItemTypeValues() []WebhookIssueCommentEditedIssueOneOf0AssigneesItemType {
	return []WebhookIssueCommentEditedIssueOneOf0AssigneesItemType{
		WebhookIssueCommentEditedIssueOneOf0AssigneesItemTypeBot,
		WebhookIssueCommentEditedIssueOneOf0AssigneesItemTypeMannequin,
		WebhookIssueCommentEditedIssueOneOf0AssigneesItemTypeOrganization,
		WebhookIssueCommentEditedIssueOneOf0AssigneesItemTypeUser,
	}
}

// WebhookIssuesAssignedAction - The action that was performed.
type WebhookIssuesAssignedAction string

const (
	WebhookIssuesAssignedActionAssigned WebhookIssuesAssignedAction = "assigned"
)

// PossibleWebhookIssuesAssignedActionValues returns the possible values for the WebhookIssuesAssignedAction const type.
func PossibleWebhookIssuesAssignedActionValues() []WebhookIssuesAssignedAction {
	return []WebhookIssuesAssignedAction{
		WebhookIssuesAssignedActionAssigned,
	}
}

type WebhookIssuesAssignedAssigneeType string

const (
	WebhookIssuesAssignedAssigneeTypeBot WebhookIssuesAssignedAssigneeType = "Bot"
	WebhookIssuesAssignedAssigneeTypeOrganization WebhookIssuesAssignedAssigneeType = "Organization"
	WebhookIssuesAssignedAssigneeTypeUser WebhookIssuesAssignedAssigneeType = "User"
)

// PossibleWebhookIssuesAssignedAssigneeTypeValues returns the possible values for the WebhookIssuesAssignedAssigneeType const type.
func PossibleWebhookIssuesAssignedAssigneeTypeValues() []WebhookIssuesAssignedAssigneeType {
	return []WebhookIssuesAssignedAssigneeType{
		WebhookIssuesAssignedAssigneeTypeBot,
		WebhookIssuesAssignedAssigneeTypeOrganization,
		WebhookIssuesAssignedAssigneeTypeUser,
	}
}

type WebhookIssuesAssignedIssueActiveLockReason string

const (
	WebhookIssuesAssignedIssueActiveLockReasonNull WebhookIssuesAssignedIssueActiveLockReason = "null"
	WebhookIssuesAssignedIssueActiveLockReasonOffTopic WebhookIssuesAssignedIssueActiveLockReason = "off-topic"
	WebhookIssuesAssignedIssueActiveLockReasonResolved WebhookIssuesAssignedIssueActiveLockReason = "resolved"
	WebhookIssuesAssignedIssueActiveLockReasonSpam WebhookIssuesAssignedIssueActiveLockReason = "spam"
	WebhookIssuesAssignedIssueActiveLockReasonTooHeated WebhookIssuesAssignedIssueActiveLockReason = "too heated"
)

// PossibleWebhookIssuesAssignedIssueActiveLockReasonValues returns the possible values for the WebhookIssuesAssignedIssueActiveLockReason const type.
func PossibleWebhookIssuesAssignedIssueActiveLockReasonValues() []WebhookIssuesAssignedIssueActiveLockReason {
	return []WebhookIssuesAssignedIssueActiveLockReason{
		WebhookIssuesAssignedIssueActiveLockReasonNull,
		WebhookIssuesAssignedIssueActiveLockReasonOffTopic,
		WebhookIssuesAssignedIssueActiveLockReasonResolved,
		WebhookIssuesAssignedIssueActiveLockReasonSpam,
		WebhookIssuesAssignedIssueActiveLockReasonTooHeated,
	}
}

type WebhookIssuesAssignedIssueAssigneeType string

const (
	WebhookIssuesAssignedIssueAssigneeTypeBot WebhookIssuesAssignedIssueAssigneeType = "Bot"
	WebhookIssuesAssignedIssueAssigneeTypeMannequin WebhookIssuesAssignedIssueAssigneeType = "Mannequin"
	WebhookIssuesAssignedIssueAssigneeTypeOrganization WebhookIssuesAssignedIssueAssigneeType = "Organization"
	WebhookIssuesAssignedIssueAssigneeTypeUser WebhookIssuesAssignedIssueAssigneeType = "User"
)

// PossibleWebhookIssuesAssignedIssueAssigneeTypeValues returns the possible values for the WebhookIssuesAssignedIssueAssigneeType const type.
func PossibleWebhookIssuesAssignedIssueAssigneeTypeValues() []WebhookIssuesAssignedIssueAssigneeType {
	return []WebhookIssuesAssignedIssueAssigneeType{
		WebhookIssuesAssignedIssueAssigneeTypeBot,
		WebhookIssuesAssignedIssueAssigneeTypeMannequin,
		WebhookIssuesAssignedIssueAssigneeTypeOrganization,
		WebhookIssuesAssignedIssueAssigneeTypeUser,
	}
}

type WebhookIssuesAssignedIssueAssigneesItemType string

const (
	WebhookIssuesAssignedIssueAssigneesItemTypeBot WebhookIssuesAssignedIssueAssigneesItemType = "Bot"
	WebhookIssuesAssignedIssueAssigneesItemTypeMannequin WebhookIssuesAssignedIssueAssigneesItemType = "Mannequin"
	WebhookIssuesAssignedIssueAssigneesItemTypeOrganization WebhookIssuesAssignedIssueAssigneesItemType = "Organization"
	WebhookIssuesAssignedIssueAssigneesItemTypeUser WebhookIssuesAssignedIssueAssigneesItemType = "User"
)

// PossibleWebhookIssuesAssignedIssueAssigneesItemTypeValues returns the possible values for the WebhookIssuesAssignedIssueAssigneesItemType const type.
func PossibleWebhookIssuesAssignedIssueAssigneesItemTypeValues() []WebhookIssuesAssignedIssueAssigneesItemType {
	return []WebhookIssuesAssignedIssueAssigneesItemType{
		WebhookIssuesAssignedIssueAssigneesItemTypeBot,
		WebhookIssuesAssignedIssueAssigneesItemTypeMannequin,
		WebhookIssuesAssignedIssueAssigneesItemTypeOrganization,
		WebhookIssuesAssignedIssueAssigneesItemTypeUser,
	}
}

// WebhookIssuesAssignedIssueAuthorAssociation - How the author is associated with the repository.
type WebhookIssuesAssignedIssueAuthorAssociation string

const (
	WebhookIssuesAssignedIssueAuthorAssociationCOLLABORATOR WebhookIssuesAssignedIssueAuthorAssociation = "COLLABORATOR"
	WebhookIssuesAssignedIssueAuthorAssociationCONTRIBUTOR WebhookIssuesAssignedIssueAuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesAssignedIssueAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesAssignedIssueAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesAssignedIssueAuthorAssociationFIRSTTIMER WebhookIssuesAssignedIssueAuthorAssociation = "FIRST_TIMER"
	WebhookIssuesAssignedIssueAuthorAssociationMANNEQUIN WebhookIssuesAssignedIssueAuthorAssociation = "MANNEQUIN"
	WebhookIssuesAssignedIssueAuthorAssociationMEMBER WebhookIssuesAssignedIssueAuthorAssociation = "MEMBER"
	WebhookIssuesAssignedIssueAuthorAssociationNONE WebhookIssuesAssignedIssueAuthorAssociation = "NONE"
	WebhookIssuesAssignedIssueAuthorAssociationOWNER WebhookIssuesAssignedIssueAuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesAssignedIssueAuthorAssociationValues returns the possible values for the WebhookIssuesAssignedIssueAuthorAssociation const type.
func PossibleWebhookIssuesAssignedIssueAuthorAssociationValues() []WebhookIssuesAssignedIssueAuthorAssociation {
	return []WebhookIssuesAssignedIssueAuthorAssociation{
		WebhookIssuesAssignedIssueAuthorAssociationCOLLABORATOR,
		WebhookIssuesAssignedIssueAuthorAssociationCONTRIBUTOR,
		WebhookIssuesAssignedIssueAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesAssignedIssueAuthorAssociationFIRSTTIMER,
		WebhookIssuesAssignedIssueAuthorAssociationMANNEQUIN,
		WebhookIssuesAssignedIssueAuthorAssociationMEMBER,
		WebhookIssuesAssignedIssueAuthorAssociationNONE,
		WebhookIssuesAssignedIssueAuthorAssociationOWNER,
	}
}

type WebhookIssuesAssignedIssueMilestoneCreatorType string

const (
	WebhookIssuesAssignedIssueMilestoneCreatorTypeBot WebhookIssuesAssignedIssueMilestoneCreatorType = "Bot"
	WebhookIssuesAssignedIssueMilestoneCreatorTypeMannequin WebhookIssuesAssignedIssueMilestoneCreatorType = "Mannequin"
	WebhookIssuesAssignedIssueMilestoneCreatorTypeOrganization WebhookIssuesAssignedIssueMilestoneCreatorType = "Organization"
	WebhookIssuesAssignedIssueMilestoneCreatorTypeUser WebhookIssuesAssignedIssueMilestoneCreatorType = "User"
)

// PossibleWebhookIssuesAssignedIssueMilestoneCreatorTypeValues returns the possible values for the WebhookIssuesAssignedIssueMilestoneCreatorType const type.
func PossibleWebhookIssuesAssignedIssueMilestoneCreatorTypeValues() []WebhookIssuesAssignedIssueMilestoneCreatorType {
	return []WebhookIssuesAssignedIssueMilestoneCreatorType{
		WebhookIssuesAssignedIssueMilestoneCreatorTypeBot,
		WebhookIssuesAssignedIssueMilestoneCreatorTypeMannequin,
		WebhookIssuesAssignedIssueMilestoneCreatorTypeOrganization,
		WebhookIssuesAssignedIssueMilestoneCreatorTypeUser,
	}
}

// WebhookIssuesAssignedIssueMilestoneState - The state of the milestone.
type WebhookIssuesAssignedIssueMilestoneState string

const (
	WebhookIssuesAssignedIssueMilestoneStateClosed WebhookIssuesAssignedIssueMilestoneState = "closed"
	WebhookIssuesAssignedIssueMilestoneStateOpen WebhookIssuesAssignedIssueMilestoneState = "open"
)

// PossibleWebhookIssuesAssignedIssueMilestoneStateValues returns the possible values for the WebhookIssuesAssignedIssueMilestoneState const type.
func PossibleWebhookIssuesAssignedIssueMilestoneStateValues() []WebhookIssuesAssignedIssueMilestoneState {
	return []WebhookIssuesAssignedIssueMilestoneState{
		WebhookIssuesAssignedIssueMilestoneStateClosed,
		WebhookIssuesAssignedIssueMilestoneStateOpen,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemCheckRun WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemCheckSuite WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemCommitComment WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemContentReference WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemCreate WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "create"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemDelete WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemDeployKey WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemDeployment WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemDiscussion WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemFork WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemGollum WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemIssueComment WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemIssues WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemLabel WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "label"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemMember WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "member"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemMembership WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemMilestone WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemOrgBlock WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemOrganization WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemPageBuild WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemProject WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "project"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemProjectCard WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemProjectColumn WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemPublic WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "public"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemPullRequest WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemPullRequestReviewThread WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "pull_request_review_thread"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemPush WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "push"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemRelease WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "release"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemReminder WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "reminder"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemRepository WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemStar WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "star"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemStatus WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "status"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemTeam WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "team"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemTeamAdd WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemWatch WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItem{
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemCreate,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemDelete,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemFork,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemGollum,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemIssues,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemLabel,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemMember,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemMembership,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemProject,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemPublic,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemPullRequestReviewThread,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemPush,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemRelease,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemReminder,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemRepository,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemStar,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemStatus,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemTeam,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemWatch,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesAssignedIssuePerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppOwnerType string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppOwnerTypeBot WebhookIssuesAssignedIssuePerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesAssignedIssuePerformedViaGithubAppOwnerTypeOrganization WebhookIssuesAssignedIssuePerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesAssignedIssuePerformedViaGithubAppOwnerTypeUser WebhookIssuesAssignedIssuePerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppOwnerTypeValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppOwnerType {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppOwnerType{
		WebhookIssuesAssignedIssuePerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesAssignedIssuePerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesAssignedIssuePerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsActionsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsActionsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsActions{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsChecksRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsChecksWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsChecks{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContents{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEmailsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEmails{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsIssuesRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsIssues{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsKeysRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsKeysWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsKeys{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMembersRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMembersWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMembers{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMetadataRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsAdmin WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "admin"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsAdmin,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPackagesRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPackages{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPagesRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPagesWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPages{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsStatusesRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesAssignedIssuePerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesAssignedIssueState - State of the issue; either 'open' or 'closed'
type WebhookIssuesAssignedIssueState string

const (
	WebhookIssuesAssignedIssueStateClosed WebhookIssuesAssignedIssueState = "closed"
	WebhookIssuesAssignedIssueStateOpen WebhookIssuesAssignedIssueState = "open"
)

// PossibleWebhookIssuesAssignedIssueStateValues returns the possible values for the WebhookIssuesAssignedIssueState const type.
func PossibleWebhookIssuesAssignedIssueStateValues() []WebhookIssuesAssignedIssueState {
	return []WebhookIssuesAssignedIssueState{
		WebhookIssuesAssignedIssueStateClosed,
		WebhookIssuesAssignedIssueStateOpen,
	}
}

type WebhookIssuesAssignedIssueUserType string

const (
	WebhookIssuesAssignedIssueUserTypeBot WebhookIssuesAssignedIssueUserType = "Bot"
	WebhookIssuesAssignedIssueUserTypeMannequin WebhookIssuesAssignedIssueUserType = "Mannequin"
	WebhookIssuesAssignedIssueUserTypeOrganization WebhookIssuesAssignedIssueUserType = "Organization"
	WebhookIssuesAssignedIssueUserTypeUser WebhookIssuesAssignedIssueUserType = "User"
)

// PossibleWebhookIssuesAssignedIssueUserTypeValues returns the possible values for the WebhookIssuesAssignedIssueUserType const type.
func PossibleWebhookIssuesAssignedIssueUserTypeValues() []WebhookIssuesAssignedIssueUserType {
	return []WebhookIssuesAssignedIssueUserType{
		WebhookIssuesAssignedIssueUserTypeBot,
		WebhookIssuesAssignedIssueUserTypeMannequin,
		WebhookIssuesAssignedIssueUserTypeOrganization,
		WebhookIssuesAssignedIssueUserTypeUser,
	}
}

// WebhookIssuesClosedAction - The action that was performed.
type WebhookIssuesClosedAction string

const (
	WebhookIssuesClosedActionClosed WebhookIssuesClosedAction = "closed"
)

// PossibleWebhookIssuesClosedActionValues returns the possible values for the WebhookIssuesClosedAction const type.
func PossibleWebhookIssuesClosedActionValues() []WebhookIssuesClosedAction {
	return []WebhookIssuesClosedAction{
		WebhookIssuesClosedActionClosed,
	}
}

type WebhookIssuesClosedIssue0ActiveLockReason string

const (
	WebhookIssuesClosedIssue0ActiveLockReasonNull WebhookIssuesClosedIssue0ActiveLockReason = "null"
	WebhookIssuesClosedIssue0ActiveLockReasonOffTopic WebhookIssuesClosedIssue0ActiveLockReason = "off-topic"
	WebhookIssuesClosedIssue0ActiveLockReasonResolved WebhookIssuesClosedIssue0ActiveLockReason = "resolved"
	WebhookIssuesClosedIssue0ActiveLockReasonSpam WebhookIssuesClosedIssue0ActiveLockReason = "spam"
	WebhookIssuesClosedIssue0ActiveLockReasonTooHeated WebhookIssuesClosedIssue0ActiveLockReason = "too heated"
)

// PossibleWebhookIssuesClosedIssue0ActiveLockReasonValues returns the possible values for the WebhookIssuesClosedIssue0ActiveLockReason const type.
func PossibleWebhookIssuesClosedIssue0ActiveLockReasonValues() []WebhookIssuesClosedIssue0ActiveLockReason {
	return []WebhookIssuesClosedIssue0ActiveLockReason{
		WebhookIssuesClosedIssue0ActiveLockReasonNull,
		WebhookIssuesClosedIssue0ActiveLockReasonOffTopic,
		WebhookIssuesClosedIssue0ActiveLockReasonResolved,
		WebhookIssuesClosedIssue0ActiveLockReasonSpam,
		WebhookIssuesClosedIssue0ActiveLockReasonTooHeated,
	}
}

type WebhookIssuesClosedIssue0AssigneeType string

const (
	WebhookIssuesClosedIssue0AssigneeTypeBot WebhookIssuesClosedIssue0AssigneeType = "Bot"
	WebhookIssuesClosedIssue0AssigneeTypeMannequin WebhookIssuesClosedIssue0AssigneeType = "Mannequin"
	WebhookIssuesClosedIssue0AssigneeTypeOrganization WebhookIssuesClosedIssue0AssigneeType = "Organization"
	WebhookIssuesClosedIssue0AssigneeTypeUser WebhookIssuesClosedIssue0AssigneeType = "User"
)

// PossibleWebhookIssuesClosedIssue0AssigneeTypeValues returns the possible values for the WebhookIssuesClosedIssue0AssigneeType const type.
func PossibleWebhookIssuesClosedIssue0AssigneeTypeValues() []WebhookIssuesClosedIssue0AssigneeType {
	return []WebhookIssuesClosedIssue0AssigneeType{
		WebhookIssuesClosedIssue0AssigneeTypeBot,
		WebhookIssuesClosedIssue0AssigneeTypeMannequin,
		WebhookIssuesClosedIssue0AssigneeTypeOrganization,
		WebhookIssuesClosedIssue0AssigneeTypeUser,
	}
}

// WebhookIssuesClosedIssue0AuthorAssociation - How the author is associated with the repository.
type WebhookIssuesClosedIssue0AuthorAssociation string

const (
	WebhookIssuesClosedIssue0AuthorAssociationCOLLABORATOR WebhookIssuesClosedIssue0AuthorAssociation = "COLLABORATOR"
	WebhookIssuesClosedIssue0AuthorAssociationCONTRIBUTOR WebhookIssuesClosedIssue0AuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesClosedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesClosedIssue0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesClosedIssue0AuthorAssociationFIRSTTIMER WebhookIssuesClosedIssue0AuthorAssociation = "FIRST_TIMER"
	WebhookIssuesClosedIssue0AuthorAssociationMANNEQUIN WebhookIssuesClosedIssue0AuthorAssociation = "MANNEQUIN"
	WebhookIssuesClosedIssue0AuthorAssociationMEMBER WebhookIssuesClosedIssue0AuthorAssociation = "MEMBER"
	WebhookIssuesClosedIssue0AuthorAssociationNONE WebhookIssuesClosedIssue0AuthorAssociation = "NONE"
	WebhookIssuesClosedIssue0AuthorAssociationOWNER WebhookIssuesClosedIssue0AuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesClosedIssue0AuthorAssociationValues returns the possible values for the WebhookIssuesClosedIssue0AuthorAssociation const type.
func PossibleWebhookIssuesClosedIssue0AuthorAssociationValues() []WebhookIssuesClosedIssue0AuthorAssociation {
	return []WebhookIssuesClosedIssue0AuthorAssociation{
		WebhookIssuesClosedIssue0AuthorAssociationCOLLABORATOR,
		WebhookIssuesClosedIssue0AuthorAssociationCONTRIBUTOR,
		WebhookIssuesClosedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesClosedIssue0AuthorAssociationFIRSTTIMER,
		WebhookIssuesClosedIssue0AuthorAssociationMANNEQUIN,
		WebhookIssuesClosedIssue0AuthorAssociationMEMBER,
		WebhookIssuesClosedIssue0AuthorAssociationNONE,
		WebhookIssuesClosedIssue0AuthorAssociationOWNER,
	}
}

type WebhookIssuesClosedIssue0MilestoneCreatorType string

const (
	WebhookIssuesClosedIssue0MilestoneCreatorTypeBot WebhookIssuesClosedIssue0MilestoneCreatorType = "Bot"
	WebhookIssuesClosedIssue0MilestoneCreatorTypeMannequin WebhookIssuesClosedIssue0MilestoneCreatorType = "Mannequin"
	WebhookIssuesClosedIssue0MilestoneCreatorTypeOrganization WebhookIssuesClosedIssue0MilestoneCreatorType = "Organization"
	WebhookIssuesClosedIssue0MilestoneCreatorTypeUser WebhookIssuesClosedIssue0MilestoneCreatorType = "User"
)

// PossibleWebhookIssuesClosedIssue0MilestoneCreatorTypeValues returns the possible values for the WebhookIssuesClosedIssue0MilestoneCreatorType const type.
func PossibleWebhookIssuesClosedIssue0MilestoneCreatorTypeValues() []WebhookIssuesClosedIssue0MilestoneCreatorType {
	return []WebhookIssuesClosedIssue0MilestoneCreatorType{
		WebhookIssuesClosedIssue0MilestoneCreatorTypeBot,
		WebhookIssuesClosedIssue0MilestoneCreatorTypeMannequin,
		WebhookIssuesClosedIssue0MilestoneCreatorTypeOrganization,
		WebhookIssuesClosedIssue0MilestoneCreatorTypeUser,
	}
}

// WebhookIssuesClosedIssue0MilestoneState - The state of the milestone.
type WebhookIssuesClosedIssue0MilestoneState string

const (
	WebhookIssuesClosedIssue0MilestoneStateClosed WebhookIssuesClosedIssue0MilestoneState = "closed"
	WebhookIssuesClosedIssue0MilestoneStateOpen WebhookIssuesClosedIssue0MilestoneState = "open"
)

// PossibleWebhookIssuesClosedIssue0MilestoneStateValues returns the possible values for the WebhookIssuesClosedIssue0MilestoneState const type.
func PossibleWebhookIssuesClosedIssue0MilestoneStateValues() []WebhookIssuesClosedIssue0MilestoneState {
	return []WebhookIssuesClosedIssue0MilestoneState{
		WebhookIssuesClosedIssue0MilestoneStateClosed,
		WebhookIssuesClosedIssue0MilestoneStateOpen,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemCheckRun WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemCheckSuite WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemCommitComment WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemContentReference WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemCreate WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "create"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemDelete WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemDeployKey WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemDeployment WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemDiscussion WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemFork WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemGollum WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemIssueComment WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemIssues WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemLabel WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "label"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemMember WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "member"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemMembership WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemMilestone WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemOrgBlock WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemOrganization WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemPageBuild WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemProject WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "project"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemProjectCard WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemProjectColumn WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemPublic WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "public"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemPullRequest WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemPullRequestReviewThread WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "pull_request_review_thread"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemPush WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "push"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemRelease WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "release"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemReminder WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "reminder"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemRepository WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemSecurityAndAnalysis WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "security_and_analysis"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemStar WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "star"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemStatus WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "status"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemTeam WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "team"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemTeamAdd WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemWatch WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItem{
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemCreate,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemDelete,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemFork,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemGollum,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemIssues,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemLabel,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemMember,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemMembership,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemProject,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemPublic,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemPullRequestReviewThread,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemPush,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemRelease,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemReminder,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemRepository,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemSecurityAndAnalysis,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemStar,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemStatus,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemTeam,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemWatch,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesClosedIssue0PerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppOwnerType string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppOwnerTypeBot WebhookIssuesClosedIssue0PerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesClosedIssue0PerformedViaGithubAppOwnerTypeOrganization WebhookIssuesClosedIssue0PerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesClosedIssue0PerformedViaGithubAppOwnerTypeUser WebhookIssuesClosedIssue0PerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppOwnerTypeValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppOwnerType {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppOwnerType{
		WebhookIssuesClosedIssue0PerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesClosedIssue0PerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesClosedIssue0PerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsActionsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsActionsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsActions{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsChecksRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsChecksWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsChecks{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContents{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEmailsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEmails{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsIssuesRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsIssues{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsKeysRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsKeysWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsKeys{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMembersRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMembersWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMembers{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMetadataRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsAdmin WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "admin"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsAdmin,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPackagesRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPackages{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPagesRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPagesWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPages{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsStatusesRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesClosedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesClosedIssue0State - State of the issue; either 'open' or 'closed'
type WebhookIssuesClosedIssue0State string

const (
	WebhookIssuesClosedIssue0StateClosed WebhookIssuesClosedIssue0State = "closed"
	WebhookIssuesClosedIssue0StateOpen WebhookIssuesClosedIssue0State = "open"
)

// PossibleWebhookIssuesClosedIssue0StateValues returns the possible values for the WebhookIssuesClosedIssue0State const type.
func PossibleWebhookIssuesClosedIssue0StateValues() []WebhookIssuesClosedIssue0State {
	return []WebhookIssuesClosedIssue0State{
		WebhookIssuesClosedIssue0StateClosed,
		WebhookIssuesClosedIssue0StateOpen,
	}
}

type WebhookIssuesClosedIssue0UserType string

const (
	WebhookIssuesClosedIssue0UserTypeBot WebhookIssuesClosedIssue0UserType = "Bot"
	WebhookIssuesClosedIssue0UserTypeMannequin WebhookIssuesClosedIssue0UserType = "Mannequin"
	WebhookIssuesClosedIssue0UserTypeOrganization WebhookIssuesClosedIssue0UserType = "Organization"
	WebhookIssuesClosedIssue0UserTypeUser WebhookIssuesClosedIssue0UserType = "User"
)

// PossibleWebhookIssuesClosedIssue0UserTypeValues returns the possible values for the WebhookIssuesClosedIssue0UserType const type.
func PossibleWebhookIssuesClosedIssue0UserTypeValues() []WebhookIssuesClosedIssue0UserType {
	return []WebhookIssuesClosedIssue0UserType{
		WebhookIssuesClosedIssue0UserTypeBot,
		WebhookIssuesClosedIssue0UserTypeMannequin,
		WebhookIssuesClosedIssue0UserTypeOrganization,
		WebhookIssuesClosedIssue0UserTypeUser,
	}
}

type WebhookIssuesClosedIssue1State string

const (
	WebhookIssuesClosedIssue1StateClosed WebhookIssuesClosedIssue1State = "closed"
	WebhookIssuesClosedIssue1StateOpen WebhookIssuesClosedIssue1State = "open"
)

// PossibleWebhookIssuesClosedIssue1StateValues returns the possible values for the WebhookIssuesClosedIssue1State const type.
func PossibleWebhookIssuesClosedIssue1StateValues() []WebhookIssuesClosedIssue1State {
	return []WebhookIssuesClosedIssue1State{
		WebhookIssuesClosedIssue1StateClosed,
		WebhookIssuesClosedIssue1StateOpen,
	}
}

type WebhookIssuesClosedIssueOneOf0AssigneesItemType string

const (
	WebhookIssuesClosedIssueOneOf0AssigneesItemTypeBot WebhookIssuesClosedIssueOneOf0AssigneesItemType = "Bot"
	WebhookIssuesClosedIssueOneOf0AssigneesItemTypeMannequin WebhookIssuesClosedIssueOneOf0AssigneesItemType = "Mannequin"
	WebhookIssuesClosedIssueOneOf0AssigneesItemTypeOrganization WebhookIssuesClosedIssueOneOf0AssigneesItemType = "Organization"
	WebhookIssuesClosedIssueOneOf0AssigneesItemTypeUser WebhookIssuesClosedIssueOneOf0AssigneesItemType = "User"
)

// PossibleWebhookIssuesClosedIssueOneOf0AssigneesItemTypeValues returns the possible values for the WebhookIssuesClosedIssueOneOf0AssigneesItemType const type.
func PossibleWebhookIssuesClosedIssueOneOf0AssigneesItemTypeValues() []WebhookIssuesClosedIssueOneOf0AssigneesItemType {
	return []WebhookIssuesClosedIssueOneOf0AssigneesItemType{
		WebhookIssuesClosedIssueOneOf0AssigneesItemTypeBot,
		WebhookIssuesClosedIssueOneOf0AssigneesItemTypeMannequin,
		WebhookIssuesClosedIssueOneOf0AssigneesItemTypeOrganization,
		WebhookIssuesClosedIssueOneOf0AssigneesItemTypeUser,
	}
}

type WebhookIssuesDeletedAction string

const (
	WebhookIssuesDeletedActionDeleted WebhookIssuesDeletedAction = "deleted"
)

// PossibleWebhookIssuesDeletedActionValues returns the possible values for the WebhookIssuesDeletedAction const type.
func PossibleWebhookIssuesDeletedActionValues() []WebhookIssuesDeletedAction {
	return []WebhookIssuesDeletedAction{
		WebhookIssuesDeletedActionDeleted,
	}
}

type WebhookIssuesDeletedIssueActiveLockReason string

const (
	WebhookIssuesDeletedIssueActiveLockReasonNull WebhookIssuesDeletedIssueActiveLockReason = "null"
	WebhookIssuesDeletedIssueActiveLockReasonOffTopic WebhookIssuesDeletedIssueActiveLockReason = "off-topic"
	WebhookIssuesDeletedIssueActiveLockReasonResolved WebhookIssuesDeletedIssueActiveLockReason = "resolved"
	WebhookIssuesDeletedIssueActiveLockReasonSpam WebhookIssuesDeletedIssueActiveLockReason = "spam"
	WebhookIssuesDeletedIssueActiveLockReasonTooHeated WebhookIssuesDeletedIssueActiveLockReason = "too heated"
)

// PossibleWebhookIssuesDeletedIssueActiveLockReasonValues returns the possible values for the WebhookIssuesDeletedIssueActiveLockReason const type.
func PossibleWebhookIssuesDeletedIssueActiveLockReasonValues() []WebhookIssuesDeletedIssueActiveLockReason {
	return []WebhookIssuesDeletedIssueActiveLockReason{
		WebhookIssuesDeletedIssueActiveLockReasonNull,
		WebhookIssuesDeletedIssueActiveLockReasonOffTopic,
		WebhookIssuesDeletedIssueActiveLockReasonResolved,
		WebhookIssuesDeletedIssueActiveLockReasonSpam,
		WebhookIssuesDeletedIssueActiveLockReasonTooHeated,
	}
}

type WebhookIssuesDeletedIssueAssigneeType string

const (
	WebhookIssuesDeletedIssueAssigneeTypeBot WebhookIssuesDeletedIssueAssigneeType = "Bot"
	WebhookIssuesDeletedIssueAssigneeTypeOrganization WebhookIssuesDeletedIssueAssigneeType = "Organization"
	WebhookIssuesDeletedIssueAssigneeTypeUser WebhookIssuesDeletedIssueAssigneeType = "User"
)

// PossibleWebhookIssuesDeletedIssueAssigneeTypeValues returns the possible values for the WebhookIssuesDeletedIssueAssigneeType const type.
func PossibleWebhookIssuesDeletedIssueAssigneeTypeValues() []WebhookIssuesDeletedIssueAssigneeType {
	return []WebhookIssuesDeletedIssueAssigneeType{
		WebhookIssuesDeletedIssueAssigneeTypeBot,
		WebhookIssuesDeletedIssueAssigneeTypeOrganization,
		WebhookIssuesDeletedIssueAssigneeTypeUser,
	}
}

type WebhookIssuesDeletedIssueAssigneesItemType string

const (
	WebhookIssuesDeletedIssueAssigneesItemTypeBot WebhookIssuesDeletedIssueAssigneesItemType = "Bot"
	WebhookIssuesDeletedIssueAssigneesItemTypeOrganization WebhookIssuesDeletedIssueAssigneesItemType = "Organization"
	WebhookIssuesDeletedIssueAssigneesItemTypeUser WebhookIssuesDeletedIssueAssigneesItemType = "User"
)

// PossibleWebhookIssuesDeletedIssueAssigneesItemTypeValues returns the possible values for the WebhookIssuesDeletedIssueAssigneesItemType const type.
func PossibleWebhookIssuesDeletedIssueAssigneesItemTypeValues() []WebhookIssuesDeletedIssueAssigneesItemType {
	return []WebhookIssuesDeletedIssueAssigneesItemType{
		WebhookIssuesDeletedIssueAssigneesItemTypeBot,
		WebhookIssuesDeletedIssueAssigneesItemTypeOrganization,
		WebhookIssuesDeletedIssueAssigneesItemTypeUser,
	}
}

// WebhookIssuesDeletedIssueAuthorAssociation - How the author is associated with the repository.
type WebhookIssuesDeletedIssueAuthorAssociation string

const (
	WebhookIssuesDeletedIssueAuthorAssociationCOLLABORATOR WebhookIssuesDeletedIssueAuthorAssociation = "COLLABORATOR"
	WebhookIssuesDeletedIssueAuthorAssociationCONTRIBUTOR WebhookIssuesDeletedIssueAuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesDeletedIssueAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesDeletedIssueAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesDeletedIssueAuthorAssociationFIRSTTIMER WebhookIssuesDeletedIssueAuthorAssociation = "FIRST_TIMER"
	WebhookIssuesDeletedIssueAuthorAssociationMANNEQUIN WebhookIssuesDeletedIssueAuthorAssociation = "MANNEQUIN"
	WebhookIssuesDeletedIssueAuthorAssociationMEMBER WebhookIssuesDeletedIssueAuthorAssociation = "MEMBER"
	WebhookIssuesDeletedIssueAuthorAssociationNONE WebhookIssuesDeletedIssueAuthorAssociation = "NONE"
	WebhookIssuesDeletedIssueAuthorAssociationOWNER WebhookIssuesDeletedIssueAuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesDeletedIssueAuthorAssociationValues returns the possible values for the WebhookIssuesDeletedIssueAuthorAssociation const type.
func PossibleWebhookIssuesDeletedIssueAuthorAssociationValues() []WebhookIssuesDeletedIssueAuthorAssociation {
	return []WebhookIssuesDeletedIssueAuthorAssociation{
		WebhookIssuesDeletedIssueAuthorAssociationCOLLABORATOR,
		WebhookIssuesDeletedIssueAuthorAssociationCONTRIBUTOR,
		WebhookIssuesDeletedIssueAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesDeletedIssueAuthorAssociationFIRSTTIMER,
		WebhookIssuesDeletedIssueAuthorAssociationMANNEQUIN,
		WebhookIssuesDeletedIssueAuthorAssociationMEMBER,
		WebhookIssuesDeletedIssueAuthorAssociationNONE,
		WebhookIssuesDeletedIssueAuthorAssociationOWNER,
	}
}

type WebhookIssuesDeletedIssueMilestoneCreatorType string

const (
	WebhookIssuesDeletedIssueMilestoneCreatorTypeBot WebhookIssuesDeletedIssueMilestoneCreatorType = "Bot"
	WebhookIssuesDeletedIssueMilestoneCreatorTypeOrganization WebhookIssuesDeletedIssueMilestoneCreatorType = "Organization"
	WebhookIssuesDeletedIssueMilestoneCreatorTypeUser WebhookIssuesDeletedIssueMilestoneCreatorType = "User"
)

// PossibleWebhookIssuesDeletedIssueMilestoneCreatorTypeValues returns the possible values for the WebhookIssuesDeletedIssueMilestoneCreatorType const type.
func PossibleWebhookIssuesDeletedIssueMilestoneCreatorTypeValues() []WebhookIssuesDeletedIssueMilestoneCreatorType {
	return []WebhookIssuesDeletedIssueMilestoneCreatorType{
		WebhookIssuesDeletedIssueMilestoneCreatorTypeBot,
		WebhookIssuesDeletedIssueMilestoneCreatorTypeOrganization,
		WebhookIssuesDeletedIssueMilestoneCreatorTypeUser,
	}
}

// WebhookIssuesDeletedIssueMilestoneState - The state of the milestone.
type WebhookIssuesDeletedIssueMilestoneState string

const (
	WebhookIssuesDeletedIssueMilestoneStateClosed WebhookIssuesDeletedIssueMilestoneState = "closed"
	WebhookIssuesDeletedIssueMilestoneStateOpen WebhookIssuesDeletedIssueMilestoneState = "open"
)

// PossibleWebhookIssuesDeletedIssueMilestoneStateValues returns the possible values for the WebhookIssuesDeletedIssueMilestoneState const type.
func PossibleWebhookIssuesDeletedIssueMilestoneStateValues() []WebhookIssuesDeletedIssueMilestoneState {
	return []WebhookIssuesDeletedIssueMilestoneState{
		WebhookIssuesDeletedIssueMilestoneStateClosed,
		WebhookIssuesDeletedIssueMilestoneStateOpen,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemCheckRun WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemCheckSuite WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemCommitComment WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemContentReference WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemCreate WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "create"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemDelete WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemDeployKey WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemDeployment WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemDiscussion WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemFork WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemGollum WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemIssueComment WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemIssues WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemLabel WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "label"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemMember WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "member"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemMembership WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemMilestone WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemOrgBlock WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemOrganization WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemPageBuild WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemProject WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "project"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemProjectCard WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemProjectColumn WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemPublic WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "public"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemPullRequest WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemPush WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "push"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemRelease WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "release"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemReminder WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "reminder"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemRepository WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemStar WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "star"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemStatus WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "status"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemTeam WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "team"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemTeamAdd WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemWatch WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItem{
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemCreate,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemDelete,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemFork,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemGollum,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemIssues,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemLabel,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemMember,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemMembership,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemProject,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemPublic,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemPush,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemRelease,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemReminder,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemRepository,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemStar,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemStatus,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemTeam,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemWatch,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesDeletedIssuePerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppOwnerType string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppOwnerTypeBot WebhookIssuesDeletedIssuePerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesDeletedIssuePerformedViaGithubAppOwnerTypeOrganization WebhookIssuesDeletedIssuePerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesDeletedIssuePerformedViaGithubAppOwnerTypeUser WebhookIssuesDeletedIssuePerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppOwnerTypeValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppOwnerType {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppOwnerType{
		WebhookIssuesDeletedIssuePerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesDeletedIssuePerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesDeletedIssuePerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsActionsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsActionsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsActions{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsChecksRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsChecksWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsChecks{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContents{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEmailsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEmails{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsIssuesRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsIssues{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsKeysRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsKeysWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsKeys{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMembersRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMembersWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMembers{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMetadataRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPackagesRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPackages{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPagesRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPagesWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPages{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsStatusesRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesDeletedIssuePerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesDeletedIssueState - State of the issue; either 'open' or 'closed'
type WebhookIssuesDeletedIssueState string

const (
	WebhookIssuesDeletedIssueStateClosed WebhookIssuesDeletedIssueState = "closed"
	WebhookIssuesDeletedIssueStateOpen WebhookIssuesDeletedIssueState = "open"
)

// PossibleWebhookIssuesDeletedIssueStateValues returns the possible values for the WebhookIssuesDeletedIssueState const type.
func PossibleWebhookIssuesDeletedIssueStateValues() []WebhookIssuesDeletedIssueState {
	return []WebhookIssuesDeletedIssueState{
		WebhookIssuesDeletedIssueStateClosed,
		WebhookIssuesDeletedIssueStateOpen,
	}
}

type WebhookIssuesDeletedIssueUserType string

const (
	WebhookIssuesDeletedIssueUserTypeBot WebhookIssuesDeletedIssueUserType = "Bot"
	WebhookIssuesDeletedIssueUserTypeOrganization WebhookIssuesDeletedIssueUserType = "Organization"
	WebhookIssuesDeletedIssueUserTypeUser WebhookIssuesDeletedIssueUserType = "User"
)

// PossibleWebhookIssuesDeletedIssueUserTypeValues returns the possible values for the WebhookIssuesDeletedIssueUserType const type.
func PossibleWebhookIssuesDeletedIssueUserTypeValues() []WebhookIssuesDeletedIssueUserType {
	return []WebhookIssuesDeletedIssueUserType{
		WebhookIssuesDeletedIssueUserTypeBot,
		WebhookIssuesDeletedIssueUserTypeOrganization,
		WebhookIssuesDeletedIssueUserTypeUser,
	}
}

type WebhookIssuesDemilestonedAction string

const (
	WebhookIssuesDemilestonedActionDemilestoned WebhookIssuesDemilestonedAction = "demilestoned"
)

// PossibleWebhookIssuesDemilestonedActionValues returns the possible values for the WebhookIssuesDemilestonedAction const type.
func PossibleWebhookIssuesDemilestonedActionValues() []WebhookIssuesDemilestonedAction {
	return []WebhookIssuesDemilestonedAction{
		WebhookIssuesDemilestonedActionDemilestoned,
	}
}

type WebhookIssuesDemilestonedIssue0ActiveLockReason string

const (
	WebhookIssuesDemilestonedIssue0ActiveLockReasonNull WebhookIssuesDemilestonedIssue0ActiveLockReason = "null"
	WebhookIssuesDemilestonedIssue0ActiveLockReasonOffTopic WebhookIssuesDemilestonedIssue0ActiveLockReason = "off-topic"
	WebhookIssuesDemilestonedIssue0ActiveLockReasonResolved WebhookIssuesDemilestonedIssue0ActiveLockReason = "resolved"
	WebhookIssuesDemilestonedIssue0ActiveLockReasonSpam WebhookIssuesDemilestonedIssue0ActiveLockReason = "spam"
	WebhookIssuesDemilestonedIssue0ActiveLockReasonTooHeated WebhookIssuesDemilestonedIssue0ActiveLockReason = "too heated"
)

// PossibleWebhookIssuesDemilestonedIssue0ActiveLockReasonValues returns the possible values for the WebhookIssuesDemilestonedIssue0ActiveLockReason const type.
func PossibleWebhookIssuesDemilestonedIssue0ActiveLockReasonValues() []WebhookIssuesDemilestonedIssue0ActiveLockReason {
	return []WebhookIssuesDemilestonedIssue0ActiveLockReason{
		WebhookIssuesDemilestonedIssue0ActiveLockReasonNull,
		WebhookIssuesDemilestonedIssue0ActiveLockReasonOffTopic,
		WebhookIssuesDemilestonedIssue0ActiveLockReasonResolved,
		WebhookIssuesDemilestonedIssue0ActiveLockReasonSpam,
		WebhookIssuesDemilestonedIssue0ActiveLockReasonTooHeated,
	}
}

type WebhookIssuesDemilestonedIssue0AssigneeType string

const (
	WebhookIssuesDemilestonedIssue0AssigneeTypeBot WebhookIssuesDemilestonedIssue0AssigneeType = "Bot"
	WebhookIssuesDemilestonedIssue0AssigneeTypeMannequin WebhookIssuesDemilestonedIssue0AssigneeType = "Mannequin"
	WebhookIssuesDemilestonedIssue0AssigneeTypeOrganization WebhookIssuesDemilestonedIssue0AssigneeType = "Organization"
	WebhookIssuesDemilestonedIssue0AssigneeTypeUser WebhookIssuesDemilestonedIssue0AssigneeType = "User"
)

// PossibleWebhookIssuesDemilestonedIssue0AssigneeTypeValues returns the possible values for the WebhookIssuesDemilestonedIssue0AssigneeType const type.
func PossibleWebhookIssuesDemilestonedIssue0AssigneeTypeValues() []WebhookIssuesDemilestonedIssue0AssigneeType {
	return []WebhookIssuesDemilestonedIssue0AssigneeType{
		WebhookIssuesDemilestonedIssue0AssigneeTypeBot,
		WebhookIssuesDemilestonedIssue0AssigneeTypeMannequin,
		WebhookIssuesDemilestonedIssue0AssigneeTypeOrganization,
		WebhookIssuesDemilestonedIssue0AssigneeTypeUser,
	}
}

// WebhookIssuesDemilestonedIssue0AuthorAssociation - How the author is associated with the repository.
type WebhookIssuesDemilestonedIssue0AuthorAssociation string

const (
	WebhookIssuesDemilestonedIssue0AuthorAssociationCOLLABORATOR WebhookIssuesDemilestonedIssue0AuthorAssociation = "COLLABORATOR"
	WebhookIssuesDemilestonedIssue0AuthorAssociationCONTRIBUTOR WebhookIssuesDemilestonedIssue0AuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesDemilestonedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesDemilestonedIssue0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesDemilestonedIssue0AuthorAssociationFIRSTTIMER WebhookIssuesDemilestonedIssue0AuthorAssociation = "FIRST_TIMER"
	WebhookIssuesDemilestonedIssue0AuthorAssociationMANNEQUIN WebhookIssuesDemilestonedIssue0AuthorAssociation = "MANNEQUIN"
	WebhookIssuesDemilestonedIssue0AuthorAssociationMEMBER WebhookIssuesDemilestonedIssue0AuthorAssociation = "MEMBER"
	WebhookIssuesDemilestonedIssue0AuthorAssociationNONE WebhookIssuesDemilestonedIssue0AuthorAssociation = "NONE"
	WebhookIssuesDemilestonedIssue0AuthorAssociationOWNER WebhookIssuesDemilestonedIssue0AuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesDemilestonedIssue0AuthorAssociationValues returns the possible values for the WebhookIssuesDemilestonedIssue0AuthorAssociation const type.
func PossibleWebhookIssuesDemilestonedIssue0AuthorAssociationValues() []WebhookIssuesDemilestonedIssue0AuthorAssociation {
	return []WebhookIssuesDemilestonedIssue0AuthorAssociation{
		WebhookIssuesDemilestonedIssue0AuthorAssociationCOLLABORATOR,
		WebhookIssuesDemilestonedIssue0AuthorAssociationCONTRIBUTOR,
		WebhookIssuesDemilestonedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesDemilestonedIssue0AuthorAssociationFIRSTTIMER,
		WebhookIssuesDemilestonedIssue0AuthorAssociationMANNEQUIN,
		WebhookIssuesDemilestonedIssue0AuthorAssociationMEMBER,
		WebhookIssuesDemilestonedIssue0AuthorAssociationNONE,
		WebhookIssuesDemilestonedIssue0AuthorAssociationOWNER,
	}
}

type WebhookIssuesDemilestonedIssue0MilestoneCreatorType string

const (
	WebhookIssuesDemilestonedIssue0MilestoneCreatorTypeBot WebhookIssuesDemilestonedIssue0MilestoneCreatorType = "Bot"
	WebhookIssuesDemilestonedIssue0MilestoneCreatorTypeMannequin WebhookIssuesDemilestonedIssue0MilestoneCreatorType = "Mannequin"
	WebhookIssuesDemilestonedIssue0MilestoneCreatorTypeOrganization WebhookIssuesDemilestonedIssue0MilestoneCreatorType = "Organization"
	WebhookIssuesDemilestonedIssue0MilestoneCreatorTypeUser WebhookIssuesDemilestonedIssue0MilestoneCreatorType = "User"
)

// PossibleWebhookIssuesDemilestonedIssue0MilestoneCreatorTypeValues returns the possible values for the WebhookIssuesDemilestonedIssue0MilestoneCreatorType const type.
func PossibleWebhookIssuesDemilestonedIssue0MilestoneCreatorTypeValues() []WebhookIssuesDemilestonedIssue0MilestoneCreatorType {
	return []WebhookIssuesDemilestonedIssue0MilestoneCreatorType{
		WebhookIssuesDemilestonedIssue0MilestoneCreatorTypeBot,
		WebhookIssuesDemilestonedIssue0MilestoneCreatorTypeMannequin,
		WebhookIssuesDemilestonedIssue0MilestoneCreatorTypeOrganization,
		WebhookIssuesDemilestonedIssue0MilestoneCreatorTypeUser,
	}
}

// WebhookIssuesDemilestonedIssue0MilestoneState - The state of the milestone.
type WebhookIssuesDemilestonedIssue0MilestoneState string

const (
	WebhookIssuesDemilestonedIssue0MilestoneStateClosed WebhookIssuesDemilestonedIssue0MilestoneState = "closed"
	WebhookIssuesDemilestonedIssue0MilestoneStateOpen WebhookIssuesDemilestonedIssue0MilestoneState = "open"
)

// PossibleWebhookIssuesDemilestonedIssue0MilestoneStateValues returns the possible values for the WebhookIssuesDemilestonedIssue0MilestoneState const type.
func PossibleWebhookIssuesDemilestonedIssue0MilestoneStateValues() []WebhookIssuesDemilestonedIssue0MilestoneState {
	return []WebhookIssuesDemilestonedIssue0MilestoneState{
		WebhookIssuesDemilestonedIssue0MilestoneStateClosed,
		WebhookIssuesDemilestonedIssue0MilestoneStateOpen,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemCheckRun WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemCheckSuite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemCommitComment WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemContentReference WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemCreate WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "create"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemDelete WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemDeployKey WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemDeployment WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemDiscussion WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemFork WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemGollum WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemIssueComment WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemIssues WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemLabel WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "label"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemMember WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "member"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemMembership WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemMilestone WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemOrgBlock WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemOrganization WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemPageBuild WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemProject WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "project"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemProjectCard WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemProjectColumn WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemPublic WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "public"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemPullRequest WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemPush WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "push"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemRelease WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "release"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemRepository WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemStar WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "star"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemStatus WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "status"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemTeam WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "team"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemTeamAdd WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemWatch WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItem{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemCreate,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemDelete,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemFork,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemGollum,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemIssues,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemLabel,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemMember,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemMembership,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemProject,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemPublic,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemPush,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemRelease,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemRepository,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemStar,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemStatus,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemTeam,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemWatch,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerType string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerTypeBot WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerTypeOrganization WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerTypeUser WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerTypeValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerType {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerType{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsActionsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsActionsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsActions{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsChecksRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsChecksWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsChecks{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContents{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEmailsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEmails{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsIssuesRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsIssues{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsKeysRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsKeysWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsKeys{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMembersRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMembersWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMembers{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMetadataRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsAdmin WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "admin"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsAdmin,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPackagesRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPackages{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPagesRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPagesWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPages{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsStatusesRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesDemilestonedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesDemilestonedIssue0State - State of the issue; either 'open' or 'closed'
type WebhookIssuesDemilestonedIssue0State string

const (
	WebhookIssuesDemilestonedIssue0StateClosed WebhookIssuesDemilestonedIssue0State = "closed"
	WebhookIssuesDemilestonedIssue0StateOpen WebhookIssuesDemilestonedIssue0State = "open"
)

// PossibleWebhookIssuesDemilestonedIssue0StateValues returns the possible values for the WebhookIssuesDemilestonedIssue0State const type.
func PossibleWebhookIssuesDemilestonedIssue0StateValues() []WebhookIssuesDemilestonedIssue0State {
	return []WebhookIssuesDemilestonedIssue0State{
		WebhookIssuesDemilestonedIssue0StateClosed,
		WebhookIssuesDemilestonedIssue0StateOpen,
	}
}

type WebhookIssuesDemilestonedIssue0UserType string

const (
	WebhookIssuesDemilestonedIssue0UserTypeBot WebhookIssuesDemilestonedIssue0UserType = "Bot"
	WebhookIssuesDemilestonedIssue0UserTypeMannequin WebhookIssuesDemilestonedIssue0UserType = "Mannequin"
	WebhookIssuesDemilestonedIssue0UserTypeOrganization WebhookIssuesDemilestonedIssue0UserType = "Organization"
	WebhookIssuesDemilestonedIssue0UserTypeUser WebhookIssuesDemilestonedIssue0UserType = "User"
)

// PossibleWebhookIssuesDemilestonedIssue0UserTypeValues returns the possible values for the WebhookIssuesDemilestonedIssue0UserType const type.
func PossibleWebhookIssuesDemilestonedIssue0UserTypeValues() []WebhookIssuesDemilestonedIssue0UserType {
	return []WebhookIssuesDemilestonedIssue0UserType{
		WebhookIssuesDemilestonedIssue0UserTypeBot,
		WebhookIssuesDemilestonedIssue0UserTypeMannequin,
		WebhookIssuesDemilestonedIssue0UserTypeOrganization,
		WebhookIssuesDemilestonedIssue0UserTypeUser,
	}
}

type WebhookIssuesDemilestonedIssue1MilestoneCreatorType string

const (
	WebhookIssuesDemilestonedIssue1MilestoneCreatorTypeBot WebhookIssuesDemilestonedIssue1MilestoneCreatorType = "Bot"
	WebhookIssuesDemilestonedIssue1MilestoneCreatorTypeMannequin WebhookIssuesDemilestonedIssue1MilestoneCreatorType = "Mannequin"
	WebhookIssuesDemilestonedIssue1MilestoneCreatorTypeOrganization WebhookIssuesDemilestonedIssue1MilestoneCreatorType = "Organization"
	WebhookIssuesDemilestonedIssue1MilestoneCreatorTypeUser WebhookIssuesDemilestonedIssue1MilestoneCreatorType = "User"
)

// PossibleWebhookIssuesDemilestonedIssue1MilestoneCreatorTypeValues returns the possible values for the WebhookIssuesDemilestonedIssue1MilestoneCreatorType const type.
func PossibleWebhookIssuesDemilestonedIssue1MilestoneCreatorTypeValues() []WebhookIssuesDemilestonedIssue1MilestoneCreatorType {
	return []WebhookIssuesDemilestonedIssue1MilestoneCreatorType{
		WebhookIssuesDemilestonedIssue1MilestoneCreatorTypeBot,
		WebhookIssuesDemilestonedIssue1MilestoneCreatorTypeMannequin,
		WebhookIssuesDemilestonedIssue1MilestoneCreatorTypeOrganization,
		WebhookIssuesDemilestonedIssue1MilestoneCreatorTypeUser,
	}
}

// WebhookIssuesDemilestonedIssue1MilestoneState - The state of the milestone.
type WebhookIssuesDemilestonedIssue1MilestoneState string

const (
	WebhookIssuesDemilestonedIssue1MilestoneStateClosed WebhookIssuesDemilestonedIssue1MilestoneState = "closed"
	WebhookIssuesDemilestonedIssue1MilestoneStateOpen WebhookIssuesDemilestonedIssue1MilestoneState = "open"
)

// PossibleWebhookIssuesDemilestonedIssue1MilestoneStateValues returns the possible values for the WebhookIssuesDemilestonedIssue1MilestoneState const type.
func PossibleWebhookIssuesDemilestonedIssue1MilestoneStateValues() []WebhookIssuesDemilestonedIssue1MilestoneState {
	return []WebhookIssuesDemilestonedIssue1MilestoneState{
		WebhookIssuesDemilestonedIssue1MilestoneStateClosed,
		WebhookIssuesDemilestonedIssue1MilestoneStateOpen,
	}
}

type WebhookIssuesDemilestonedIssueOneOf0AssigneesItemType string

const (
	WebhookIssuesDemilestonedIssueOneOf0AssigneesItemTypeBot WebhookIssuesDemilestonedIssueOneOf0AssigneesItemType = "Bot"
	WebhookIssuesDemilestonedIssueOneOf0AssigneesItemTypeMannequin WebhookIssuesDemilestonedIssueOneOf0AssigneesItemType = "Mannequin"
	WebhookIssuesDemilestonedIssueOneOf0AssigneesItemTypeOrganization WebhookIssuesDemilestonedIssueOneOf0AssigneesItemType = "Organization"
	WebhookIssuesDemilestonedIssueOneOf0AssigneesItemTypeUser WebhookIssuesDemilestonedIssueOneOf0AssigneesItemType = "User"
)

// PossibleWebhookIssuesDemilestonedIssueOneOf0AssigneesItemTypeValues returns the possible values for the WebhookIssuesDemilestonedIssueOneOf0AssigneesItemType const type.
func PossibleWebhookIssuesDemilestonedIssueOneOf0AssigneesItemTypeValues() []WebhookIssuesDemilestonedIssueOneOf0AssigneesItemType {
	return []WebhookIssuesDemilestonedIssueOneOf0AssigneesItemType{
		WebhookIssuesDemilestonedIssueOneOf0AssigneesItemTypeBot,
		WebhookIssuesDemilestonedIssueOneOf0AssigneesItemTypeMannequin,
		WebhookIssuesDemilestonedIssueOneOf0AssigneesItemTypeOrganization,
		WebhookIssuesDemilestonedIssueOneOf0AssigneesItemTypeUser,
	}
}

type WebhookIssuesDemilestonedMilestoneCreatorType string

const (
	WebhookIssuesDemilestonedMilestoneCreatorTypeBot WebhookIssuesDemilestonedMilestoneCreatorType = "Bot"
	WebhookIssuesDemilestonedMilestoneCreatorTypeMannequin WebhookIssuesDemilestonedMilestoneCreatorType = "Mannequin"
	WebhookIssuesDemilestonedMilestoneCreatorTypeOrganization WebhookIssuesDemilestonedMilestoneCreatorType = "Organization"
	WebhookIssuesDemilestonedMilestoneCreatorTypeUser WebhookIssuesDemilestonedMilestoneCreatorType = "User"
)

// PossibleWebhookIssuesDemilestonedMilestoneCreatorTypeValues returns the possible values for the WebhookIssuesDemilestonedMilestoneCreatorType const type.
func PossibleWebhookIssuesDemilestonedMilestoneCreatorTypeValues() []WebhookIssuesDemilestonedMilestoneCreatorType {
	return []WebhookIssuesDemilestonedMilestoneCreatorType{
		WebhookIssuesDemilestonedMilestoneCreatorTypeBot,
		WebhookIssuesDemilestonedMilestoneCreatorTypeMannequin,
		WebhookIssuesDemilestonedMilestoneCreatorTypeOrganization,
		WebhookIssuesDemilestonedMilestoneCreatorTypeUser,
	}
}

// WebhookIssuesDemilestonedMilestoneState - The state of the milestone.
type WebhookIssuesDemilestonedMilestoneState string

const (
	WebhookIssuesDemilestonedMilestoneStateClosed WebhookIssuesDemilestonedMilestoneState = "closed"
	WebhookIssuesDemilestonedMilestoneStateOpen WebhookIssuesDemilestonedMilestoneState = "open"
)

// PossibleWebhookIssuesDemilestonedMilestoneStateValues returns the possible values for the WebhookIssuesDemilestonedMilestoneState const type.
func PossibleWebhookIssuesDemilestonedMilestoneStateValues() []WebhookIssuesDemilestonedMilestoneState {
	return []WebhookIssuesDemilestonedMilestoneState{
		WebhookIssuesDemilestonedMilestoneStateClosed,
		WebhookIssuesDemilestonedMilestoneStateOpen,
	}
}

type WebhookIssuesEditedAction string

const (
	WebhookIssuesEditedActionEdited WebhookIssuesEditedAction = "edited"
)

// PossibleWebhookIssuesEditedActionValues returns the possible values for the WebhookIssuesEditedAction const type.
func PossibleWebhookIssuesEditedActionValues() []WebhookIssuesEditedAction {
	return []WebhookIssuesEditedAction{
		WebhookIssuesEditedActionEdited,
	}
}

type WebhookIssuesEditedIssueActiveLockReason string

const (
	WebhookIssuesEditedIssueActiveLockReasonNull WebhookIssuesEditedIssueActiveLockReason = "null"
	WebhookIssuesEditedIssueActiveLockReasonOffTopic WebhookIssuesEditedIssueActiveLockReason = "off-topic"
	WebhookIssuesEditedIssueActiveLockReasonResolved WebhookIssuesEditedIssueActiveLockReason = "resolved"
	WebhookIssuesEditedIssueActiveLockReasonSpam WebhookIssuesEditedIssueActiveLockReason = "spam"
	WebhookIssuesEditedIssueActiveLockReasonTooHeated WebhookIssuesEditedIssueActiveLockReason = "too heated"
)

// PossibleWebhookIssuesEditedIssueActiveLockReasonValues returns the possible values for the WebhookIssuesEditedIssueActiveLockReason const type.
func PossibleWebhookIssuesEditedIssueActiveLockReasonValues() []WebhookIssuesEditedIssueActiveLockReason {
	return []WebhookIssuesEditedIssueActiveLockReason{
		WebhookIssuesEditedIssueActiveLockReasonNull,
		WebhookIssuesEditedIssueActiveLockReasonOffTopic,
		WebhookIssuesEditedIssueActiveLockReasonResolved,
		WebhookIssuesEditedIssueActiveLockReasonSpam,
		WebhookIssuesEditedIssueActiveLockReasonTooHeated,
	}
}

type WebhookIssuesEditedIssueAssigneeType string

const (
	WebhookIssuesEditedIssueAssigneeTypeBot WebhookIssuesEditedIssueAssigneeType = "Bot"
	WebhookIssuesEditedIssueAssigneeTypeMannequin WebhookIssuesEditedIssueAssigneeType = "Mannequin"
	WebhookIssuesEditedIssueAssigneeTypeOrganization WebhookIssuesEditedIssueAssigneeType = "Organization"
	WebhookIssuesEditedIssueAssigneeTypeUser WebhookIssuesEditedIssueAssigneeType = "User"
)

// PossibleWebhookIssuesEditedIssueAssigneeTypeValues returns the possible values for the WebhookIssuesEditedIssueAssigneeType const type.
func PossibleWebhookIssuesEditedIssueAssigneeTypeValues() []WebhookIssuesEditedIssueAssigneeType {
	return []WebhookIssuesEditedIssueAssigneeType{
		WebhookIssuesEditedIssueAssigneeTypeBot,
		WebhookIssuesEditedIssueAssigneeTypeMannequin,
		WebhookIssuesEditedIssueAssigneeTypeOrganization,
		WebhookIssuesEditedIssueAssigneeTypeUser,
	}
}

type WebhookIssuesEditedIssueAssigneesItemType string

const (
	WebhookIssuesEditedIssueAssigneesItemTypeBot WebhookIssuesEditedIssueAssigneesItemType = "Bot"
	WebhookIssuesEditedIssueAssigneesItemTypeMannequin WebhookIssuesEditedIssueAssigneesItemType = "Mannequin"
	WebhookIssuesEditedIssueAssigneesItemTypeOrganization WebhookIssuesEditedIssueAssigneesItemType = "Organization"
	WebhookIssuesEditedIssueAssigneesItemTypeUser WebhookIssuesEditedIssueAssigneesItemType = "User"
)

// PossibleWebhookIssuesEditedIssueAssigneesItemTypeValues returns the possible values for the WebhookIssuesEditedIssueAssigneesItemType const type.
func PossibleWebhookIssuesEditedIssueAssigneesItemTypeValues() []WebhookIssuesEditedIssueAssigneesItemType {
	return []WebhookIssuesEditedIssueAssigneesItemType{
		WebhookIssuesEditedIssueAssigneesItemTypeBot,
		WebhookIssuesEditedIssueAssigneesItemTypeMannequin,
		WebhookIssuesEditedIssueAssigneesItemTypeOrganization,
		WebhookIssuesEditedIssueAssigneesItemTypeUser,
	}
}

// WebhookIssuesEditedIssueAuthorAssociation - How the author is associated with the repository.
type WebhookIssuesEditedIssueAuthorAssociation string

const (
	WebhookIssuesEditedIssueAuthorAssociationCOLLABORATOR WebhookIssuesEditedIssueAuthorAssociation = "COLLABORATOR"
	WebhookIssuesEditedIssueAuthorAssociationCONTRIBUTOR WebhookIssuesEditedIssueAuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesEditedIssueAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesEditedIssueAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesEditedIssueAuthorAssociationFIRSTTIMER WebhookIssuesEditedIssueAuthorAssociation = "FIRST_TIMER"
	WebhookIssuesEditedIssueAuthorAssociationMANNEQUIN WebhookIssuesEditedIssueAuthorAssociation = "MANNEQUIN"
	WebhookIssuesEditedIssueAuthorAssociationMEMBER WebhookIssuesEditedIssueAuthorAssociation = "MEMBER"
	WebhookIssuesEditedIssueAuthorAssociationNONE WebhookIssuesEditedIssueAuthorAssociation = "NONE"
	WebhookIssuesEditedIssueAuthorAssociationOWNER WebhookIssuesEditedIssueAuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesEditedIssueAuthorAssociationValues returns the possible values for the WebhookIssuesEditedIssueAuthorAssociation const type.
func PossibleWebhookIssuesEditedIssueAuthorAssociationValues() []WebhookIssuesEditedIssueAuthorAssociation {
	return []WebhookIssuesEditedIssueAuthorAssociation{
		WebhookIssuesEditedIssueAuthorAssociationCOLLABORATOR,
		WebhookIssuesEditedIssueAuthorAssociationCONTRIBUTOR,
		WebhookIssuesEditedIssueAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesEditedIssueAuthorAssociationFIRSTTIMER,
		WebhookIssuesEditedIssueAuthorAssociationMANNEQUIN,
		WebhookIssuesEditedIssueAuthorAssociationMEMBER,
		WebhookIssuesEditedIssueAuthorAssociationNONE,
		WebhookIssuesEditedIssueAuthorAssociationOWNER,
	}
}

type WebhookIssuesEditedIssueMilestoneCreatorType string

const (
	WebhookIssuesEditedIssueMilestoneCreatorTypeBot WebhookIssuesEditedIssueMilestoneCreatorType = "Bot"
	WebhookIssuesEditedIssueMilestoneCreatorTypeMannequin WebhookIssuesEditedIssueMilestoneCreatorType = "Mannequin"
	WebhookIssuesEditedIssueMilestoneCreatorTypeOrganization WebhookIssuesEditedIssueMilestoneCreatorType = "Organization"
	WebhookIssuesEditedIssueMilestoneCreatorTypeUser WebhookIssuesEditedIssueMilestoneCreatorType = "User"
)

// PossibleWebhookIssuesEditedIssueMilestoneCreatorTypeValues returns the possible values for the WebhookIssuesEditedIssueMilestoneCreatorType const type.
func PossibleWebhookIssuesEditedIssueMilestoneCreatorTypeValues() []WebhookIssuesEditedIssueMilestoneCreatorType {
	return []WebhookIssuesEditedIssueMilestoneCreatorType{
		WebhookIssuesEditedIssueMilestoneCreatorTypeBot,
		WebhookIssuesEditedIssueMilestoneCreatorTypeMannequin,
		WebhookIssuesEditedIssueMilestoneCreatorTypeOrganization,
		WebhookIssuesEditedIssueMilestoneCreatorTypeUser,
	}
}

// WebhookIssuesEditedIssueMilestoneState - The state of the milestone.
type WebhookIssuesEditedIssueMilestoneState string

const (
	WebhookIssuesEditedIssueMilestoneStateClosed WebhookIssuesEditedIssueMilestoneState = "closed"
	WebhookIssuesEditedIssueMilestoneStateOpen WebhookIssuesEditedIssueMilestoneState = "open"
)

// PossibleWebhookIssuesEditedIssueMilestoneStateValues returns the possible values for the WebhookIssuesEditedIssueMilestoneState const type.
func PossibleWebhookIssuesEditedIssueMilestoneStateValues() []WebhookIssuesEditedIssueMilestoneState {
	return []WebhookIssuesEditedIssueMilestoneState{
		WebhookIssuesEditedIssueMilestoneStateClosed,
		WebhookIssuesEditedIssueMilestoneStateOpen,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemCheckRun WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemCheckSuite WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemCommitComment WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemContentReference WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemCreate WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "create"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemDelete WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemDeployKey WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemDeployment WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemDiscussion WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemFork WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemGollum WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemIssueComment WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemIssues WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemLabel WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "label"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemMember WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "member"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemMembership WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemMilestone WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemOrgBlock WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemOrganization WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemPageBuild WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemProject WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "project"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemProjectCard WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemProjectColumn WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemPublic WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "public"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemPullRequest WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemPullRequestReviewThread WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "pull_request_review_thread"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemPush WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "push"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemRelease WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "release"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemReminder WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "reminder"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemRepository WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemSecurityAndAnalysis WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "security_and_analysis"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemStar WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "star"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemStatus WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "status"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemTeam WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "team"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemTeamAdd WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemWatch WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppEventsItemValues() []WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppEventsItem{
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemCreate,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemDelete,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemFork,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemGollum,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemIssues,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemLabel,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemMember,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemMembership,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemProject,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemPublic,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemPullRequestReviewThread,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemPush,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemRelease,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemReminder,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemRepository,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemSecurityAndAnalysis,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemStar,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemStatus,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemTeam,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemWatch,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesEditedIssuePerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppOwnerType string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppOwnerTypeBot WebhookIssuesEditedIssuePerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesEditedIssuePerformedViaGithubAppOwnerTypeOrganization WebhookIssuesEditedIssuePerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesEditedIssuePerformedViaGithubAppOwnerTypeUser WebhookIssuesEditedIssuePerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppOwnerTypeValues() []WebhookIssuesEditedIssuePerformedViaGithubAppOwnerType {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppOwnerType{
		WebhookIssuesEditedIssuePerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesEditedIssuePerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesEditedIssuePerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsActionsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsActionsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsActions{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsChecksRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsChecksWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsChecks{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContents{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEmailsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEmails{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsIssuesRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsIssues{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsKeysRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsKeysWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsKeys{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMembersRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMembersWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMembers{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMetadataRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjectsAdmin WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "admin"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjectsAdmin,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPackagesRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPackages{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPagesRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPagesWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPages{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsStatusesRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesEditedIssuePerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesEditedIssuePerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesEditedIssueState - State of the issue; either 'open' or 'closed'
type WebhookIssuesEditedIssueState string

const (
	WebhookIssuesEditedIssueStateClosed WebhookIssuesEditedIssueState = "closed"
	WebhookIssuesEditedIssueStateOpen WebhookIssuesEditedIssueState = "open"
)

// PossibleWebhookIssuesEditedIssueStateValues returns the possible values for the WebhookIssuesEditedIssueState const type.
func PossibleWebhookIssuesEditedIssueStateValues() []WebhookIssuesEditedIssueState {
	return []WebhookIssuesEditedIssueState{
		WebhookIssuesEditedIssueStateClosed,
		WebhookIssuesEditedIssueStateOpen,
	}
}

type WebhookIssuesEditedIssueUserType string

const (
	WebhookIssuesEditedIssueUserTypeBot WebhookIssuesEditedIssueUserType = "Bot"
	WebhookIssuesEditedIssueUserTypeMannequin WebhookIssuesEditedIssueUserType = "Mannequin"
	WebhookIssuesEditedIssueUserTypeOrganization WebhookIssuesEditedIssueUserType = "Organization"
	WebhookIssuesEditedIssueUserTypeUser WebhookIssuesEditedIssueUserType = "User"
)

// PossibleWebhookIssuesEditedIssueUserTypeValues returns the possible values for the WebhookIssuesEditedIssueUserType const type.
func PossibleWebhookIssuesEditedIssueUserTypeValues() []WebhookIssuesEditedIssueUserType {
	return []WebhookIssuesEditedIssueUserType{
		WebhookIssuesEditedIssueUserTypeBot,
		WebhookIssuesEditedIssueUserTypeMannequin,
		WebhookIssuesEditedIssueUserTypeOrganization,
		WebhookIssuesEditedIssueUserTypeUser,
	}
}

type WebhookIssuesLabeledAction string

const (
	WebhookIssuesLabeledActionLabeled WebhookIssuesLabeledAction = "labeled"
)

// PossibleWebhookIssuesLabeledActionValues returns the possible values for the WebhookIssuesLabeledAction const type.
func PossibleWebhookIssuesLabeledActionValues() []WebhookIssuesLabeledAction {
	return []WebhookIssuesLabeledAction{
		WebhookIssuesLabeledActionLabeled,
	}
}

type WebhookIssuesLabeledIssueActiveLockReason string

const (
	WebhookIssuesLabeledIssueActiveLockReasonNull WebhookIssuesLabeledIssueActiveLockReason = "null"
	WebhookIssuesLabeledIssueActiveLockReasonOffTopic WebhookIssuesLabeledIssueActiveLockReason = "off-topic"
	WebhookIssuesLabeledIssueActiveLockReasonResolved WebhookIssuesLabeledIssueActiveLockReason = "resolved"
	WebhookIssuesLabeledIssueActiveLockReasonSpam WebhookIssuesLabeledIssueActiveLockReason = "spam"
	WebhookIssuesLabeledIssueActiveLockReasonTooHeated WebhookIssuesLabeledIssueActiveLockReason = "too heated"
)

// PossibleWebhookIssuesLabeledIssueActiveLockReasonValues returns the possible values for the WebhookIssuesLabeledIssueActiveLockReason const type.
func PossibleWebhookIssuesLabeledIssueActiveLockReasonValues() []WebhookIssuesLabeledIssueActiveLockReason {
	return []WebhookIssuesLabeledIssueActiveLockReason{
		WebhookIssuesLabeledIssueActiveLockReasonNull,
		WebhookIssuesLabeledIssueActiveLockReasonOffTopic,
		WebhookIssuesLabeledIssueActiveLockReasonResolved,
		WebhookIssuesLabeledIssueActiveLockReasonSpam,
		WebhookIssuesLabeledIssueActiveLockReasonTooHeated,
	}
}

type WebhookIssuesLabeledIssueAssigneeType string

const (
	WebhookIssuesLabeledIssueAssigneeTypeBot WebhookIssuesLabeledIssueAssigneeType = "Bot"
	WebhookIssuesLabeledIssueAssigneeTypeMannequin WebhookIssuesLabeledIssueAssigneeType = "Mannequin"
	WebhookIssuesLabeledIssueAssigneeTypeOrganization WebhookIssuesLabeledIssueAssigneeType = "Organization"
	WebhookIssuesLabeledIssueAssigneeTypeUser WebhookIssuesLabeledIssueAssigneeType = "User"
)

// PossibleWebhookIssuesLabeledIssueAssigneeTypeValues returns the possible values for the WebhookIssuesLabeledIssueAssigneeType const type.
func PossibleWebhookIssuesLabeledIssueAssigneeTypeValues() []WebhookIssuesLabeledIssueAssigneeType {
	return []WebhookIssuesLabeledIssueAssigneeType{
		WebhookIssuesLabeledIssueAssigneeTypeBot,
		WebhookIssuesLabeledIssueAssigneeTypeMannequin,
		WebhookIssuesLabeledIssueAssigneeTypeOrganization,
		WebhookIssuesLabeledIssueAssigneeTypeUser,
	}
}

type WebhookIssuesLabeledIssueAssigneesItemType string

const (
	WebhookIssuesLabeledIssueAssigneesItemTypeBot WebhookIssuesLabeledIssueAssigneesItemType = "Bot"
	WebhookIssuesLabeledIssueAssigneesItemTypeMannequin WebhookIssuesLabeledIssueAssigneesItemType = "Mannequin"
	WebhookIssuesLabeledIssueAssigneesItemTypeOrganization WebhookIssuesLabeledIssueAssigneesItemType = "Organization"
	WebhookIssuesLabeledIssueAssigneesItemTypeUser WebhookIssuesLabeledIssueAssigneesItemType = "User"
)

// PossibleWebhookIssuesLabeledIssueAssigneesItemTypeValues returns the possible values for the WebhookIssuesLabeledIssueAssigneesItemType const type.
func PossibleWebhookIssuesLabeledIssueAssigneesItemTypeValues() []WebhookIssuesLabeledIssueAssigneesItemType {
	return []WebhookIssuesLabeledIssueAssigneesItemType{
		WebhookIssuesLabeledIssueAssigneesItemTypeBot,
		WebhookIssuesLabeledIssueAssigneesItemTypeMannequin,
		WebhookIssuesLabeledIssueAssigneesItemTypeOrganization,
		WebhookIssuesLabeledIssueAssigneesItemTypeUser,
	}
}

// WebhookIssuesLabeledIssueAuthorAssociation - How the author is associated with the repository.
type WebhookIssuesLabeledIssueAuthorAssociation string

const (
	WebhookIssuesLabeledIssueAuthorAssociationCOLLABORATOR WebhookIssuesLabeledIssueAuthorAssociation = "COLLABORATOR"
	WebhookIssuesLabeledIssueAuthorAssociationCONTRIBUTOR WebhookIssuesLabeledIssueAuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesLabeledIssueAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesLabeledIssueAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesLabeledIssueAuthorAssociationFIRSTTIMER WebhookIssuesLabeledIssueAuthorAssociation = "FIRST_TIMER"
	WebhookIssuesLabeledIssueAuthorAssociationMANNEQUIN WebhookIssuesLabeledIssueAuthorAssociation = "MANNEQUIN"
	WebhookIssuesLabeledIssueAuthorAssociationMEMBER WebhookIssuesLabeledIssueAuthorAssociation = "MEMBER"
	WebhookIssuesLabeledIssueAuthorAssociationNONE WebhookIssuesLabeledIssueAuthorAssociation = "NONE"
	WebhookIssuesLabeledIssueAuthorAssociationOWNER WebhookIssuesLabeledIssueAuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesLabeledIssueAuthorAssociationValues returns the possible values for the WebhookIssuesLabeledIssueAuthorAssociation const type.
func PossibleWebhookIssuesLabeledIssueAuthorAssociationValues() []WebhookIssuesLabeledIssueAuthorAssociation {
	return []WebhookIssuesLabeledIssueAuthorAssociation{
		WebhookIssuesLabeledIssueAuthorAssociationCOLLABORATOR,
		WebhookIssuesLabeledIssueAuthorAssociationCONTRIBUTOR,
		WebhookIssuesLabeledIssueAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesLabeledIssueAuthorAssociationFIRSTTIMER,
		WebhookIssuesLabeledIssueAuthorAssociationMANNEQUIN,
		WebhookIssuesLabeledIssueAuthorAssociationMEMBER,
		WebhookIssuesLabeledIssueAuthorAssociationNONE,
		WebhookIssuesLabeledIssueAuthorAssociationOWNER,
	}
}

type WebhookIssuesLabeledIssueMilestoneCreatorType string

const (
	WebhookIssuesLabeledIssueMilestoneCreatorTypeBot WebhookIssuesLabeledIssueMilestoneCreatorType = "Bot"
	WebhookIssuesLabeledIssueMilestoneCreatorTypeMannequin WebhookIssuesLabeledIssueMilestoneCreatorType = "Mannequin"
	WebhookIssuesLabeledIssueMilestoneCreatorTypeOrganization WebhookIssuesLabeledIssueMilestoneCreatorType = "Organization"
	WebhookIssuesLabeledIssueMilestoneCreatorTypeUser WebhookIssuesLabeledIssueMilestoneCreatorType = "User"
)

// PossibleWebhookIssuesLabeledIssueMilestoneCreatorTypeValues returns the possible values for the WebhookIssuesLabeledIssueMilestoneCreatorType const type.
func PossibleWebhookIssuesLabeledIssueMilestoneCreatorTypeValues() []WebhookIssuesLabeledIssueMilestoneCreatorType {
	return []WebhookIssuesLabeledIssueMilestoneCreatorType{
		WebhookIssuesLabeledIssueMilestoneCreatorTypeBot,
		WebhookIssuesLabeledIssueMilestoneCreatorTypeMannequin,
		WebhookIssuesLabeledIssueMilestoneCreatorTypeOrganization,
		WebhookIssuesLabeledIssueMilestoneCreatorTypeUser,
	}
}

// WebhookIssuesLabeledIssueMilestoneState - The state of the milestone.
type WebhookIssuesLabeledIssueMilestoneState string

const (
	WebhookIssuesLabeledIssueMilestoneStateClosed WebhookIssuesLabeledIssueMilestoneState = "closed"
	WebhookIssuesLabeledIssueMilestoneStateOpen WebhookIssuesLabeledIssueMilestoneState = "open"
)

// PossibleWebhookIssuesLabeledIssueMilestoneStateValues returns the possible values for the WebhookIssuesLabeledIssueMilestoneState const type.
func PossibleWebhookIssuesLabeledIssueMilestoneStateValues() []WebhookIssuesLabeledIssueMilestoneState {
	return []WebhookIssuesLabeledIssueMilestoneState{
		WebhookIssuesLabeledIssueMilestoneStateClosed,
		WebhookIssuesLabeledIssueMilestoneStateOpen,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemCheckRun WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemCheckSuite WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemCommitComment WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemContentReference WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemCreate WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "create"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemDelete WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemDeployKey WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemDeployment WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemDiscussion WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemFork WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemGollum WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemIssueComment WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemIssues WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemLabel WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "label"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemMember WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "member"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemMembership WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemMilestone WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemOrgBlock WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemOrganization WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemPageBuild WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemProject WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "project"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemProjectCard WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemProjectColumn WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemPublic WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "public"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemPullRequest WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemPullRequestReviewThread WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "pull_request_review_thread"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemPush WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "push"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemRelease WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "release"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemReminder WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "reminder"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemRepository WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemStar WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "star"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemStatus WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "status"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemTeam WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "team"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemTeamAdd WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemWatch WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItem{
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemCreate,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemDelete,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemFork,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemGollum,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemIssues,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemLabel,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemMember,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemMembership,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemProject,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemPublic,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemPullRequestReviewThread,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemPush,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemRelease,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemReminder,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemRepository,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemStar,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemStatus,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemTeam,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemWatch,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesLabeledIssuePerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppOwnerType string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppOwnerTypeBot WebhookIssuesLabeledIssuePerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesLabeledIssuePerformedViaGithubAppOwnerTypeOrganization WebhookIssuesLabeledIssuePerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesLabeledIssuePerformedViaGithubAppOwnerTypeUser WebhookIssuesLabeledIssuePerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppOwnerTypeValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppOwnerType {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppOwnerType{
		WebhookIssuesLabeledIssuePerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesLabeledIssuePerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesLabeledIssuePerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsActionsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsActionsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsActions{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsChecksRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsChecksWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsChecks{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContents{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEmailsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEmails{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsIssuesRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsIssues{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsKeysRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsKeysWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsKeys{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMembersRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMembersWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMembers{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMetadataRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsAdmin WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects = "admin"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsAdmin,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPackagesRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPackages{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPagesRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPagesWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPages{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsStatusesRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesLabeledIssuePerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesLabeledIssueState - State of the issue; either 'open' or 'closed'
type WebhookIssuesLabeledIssueState string

const (
	WebhookIssuesLabeledIssueStateClosed WebhookIssuesLabeledIssueState = "closed"
	WebhookIssuesLabeledIssueStateOpen WebhookIssuesLabeledIssueState = "open"
)

// PossibleWebhookIssuesLabeledIssueStateValues returns the possible values for the WebhookIssuesLabeledIssueState const type.
func PossibleWebhookIssuesLabeledIssueStateValues() []WebhookIssuesLabeledIssueState {
	return []WebhookIssuesLabeledIssueState{
		WebhookIssuesLabeledIssueStateClosed,
		WebhookIssuesLabeledIssueStateOpen,
	}
}

type WebhookIssuesLabeledIssueUserType string

const (
	WebhookIssuesLabeledIssueUserTypeBot WebhookIssuesLabeledIssueUserType = "Bot"
	WebhookIssuesLabeledIssueUserTypeMannequin WebhookIssuesLabeledIssueUserType = "Mannequin"
	WebhookIssuesLabeledIssueUserTypeOrganization WebhookIssuesLabeledIssueUserType = "Organization"
	WebhookIssuesLabeledIssueUserTypeUser WebhookIssuesLabeledIssueUserType = "User"
)

// PossibleWebhookIssuesLabeledIssueUserTypeValues returns the possible values for the WebhookIssuesLabeledIssueUserType const type.
func PossibleWebhookIssuesLabeledIssueUserTypeValues() []WebhookIssuesLabeledIssueUserType {
	return []WebhookIssuesLabeledIssueUserType{
		WebhookIssuesLabeledIssueUserTypeBot,
		WebhookIssuesLabeledIssueUserTypeMannequin,
		WebhookIssuesLabeledIssueUserTypeOrganization,
		WebhookIssuesLabeledIssueUserTypeUser,
	}
}

type WebhookIssuesLockedAction string

const (
	WebhookIssuesLockedActionLocked WebhookIssuesLockedAction = "locked"
)

// PossibleWebhookIssuesLockedActionValues returns the possible values for the WebhookIssuesLockedAction const type.
func PossibleWebhookIssuesLockedActionValues() []WebhookIssuesLockedAction {
	return []WebhookIssuesLockedAction{
		WebhookIssuesLockedActionLocked,
	}
}

type WebhookIssuesLockedIssue0ActiveLockReason string

const (
	WebhookIssuesLockedIssue0ActiveLockReasonNull WebhookIssuesLockedIssue0ActiveLockReason = "null"
	WebhookIssuesLockedIssue0ActiveLockReasonOffTopic WebhookIssuesLockedIssue0ActiveLockReason = "off-topic"
	WebhookIssuesLockedIssue0ActiveLockReasonResolved WebhookIssuesLockedIssue0ActiveLockReason = "resolved"
	WebhookIssuesLockedIssue0ActiveLockReasonSpam WebhookIssuesLockedIssue0ActiveLockReason = "spam"
	WebhookIssuesLockedIssue0ActiveLockReasonTooHeated WebhookIssuesLockedIssue0ActiveLockReason = "too heated"
)

// PossibleWebhookIssuesLockedIssue0ActiveLockReasonValues returns the possible values for the WebhookIssuesLockedIssue0ActiveLockReason const type.
func PossibleWebhookIssuesLockedIssue0ActiveLockReasonValues() []WebhookIssuesLockedIssue0ActiveLockReason {
	return []WebhookIssuesLockedIssue0ActiveLockReason{
		WebhookIssuesLockedIssue0ActiveLockReasonNull,
		WebhookIssuesLockedIssue0ActiveLockReasonOffTopic,
		WebhookIssuesLockedIssue0ActiveLockReasonResolved,
		WebhookIssuesLockedIssue0ActiveLockReasonSpam,
		WebhookIssuesLockedIssue0ActiveLockReasonTooHeated,
	}
}

type WebhookIssuesLockedIssue0AssigneeType string

const (
	WebhookIssuesLockedIssue0AssigneeTypeBot WebhookIssuesLockedIssue0AssigneeType = "Bot"
	WebhookIssuesLockedIssue0AssigneeTypeOrganization WebhookIssuesLockedIssue0AssigneeType = "Organization"
	WebhookIssuesLockedIssue0AssigneeTypeUser WebhookIssuesLockedIssue0AssigneeType = "User"
)

// PossibleWebhookIssuesLockedIssue0AssigneeTypeValues returns the possible values for the WebhookIssuesLockedIssue0AssigneeType const type.
func PossibleWebhookIssuesLockedIssue0AssigneeTypeValues() []WebhookIssuesLockedIssue0AssigneeType {
	return []WebhookIssuesLockedIssue0AssigneeType{
		WebhookIssuesLockedIssue0AssigneeTypeBot,
		WebhookIssuesLockedIssue0AssigneeTypeOrganization,
		WebhookIssuesLockedIssue0AssigneeTypeUser,
	}
}

// WebhookIssuesLockedIssue0AuthorAssociation - How the author is associated with the repository.
type WebhookIssuesLockedIssue0AuthorAssociation string

const (
	WebhookIssuesLockedIssue0AuthorAssociationCOLLABORATOR WebhookIssuesLockedIssue0AuthorAssociation = "COLLABORATOR"
	WebhookIssuesLockedIssue0AuthorAssociationCONTRIBUTOR WebhookIssuesLockedIssue0AuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesLockedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesLockedIssue0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesLockedIssue0AuthorAssociationFIRSTTIMER WebhookIssuesLockedIssue0AuthorAssociation = "FIRST_TIMER"
	WebhookIssuesLockedIssue0AuthorAssociationMANNEQUIN WebhookIssuesLockedIssue0AuthorAssociation = "MANNEQUIN"
	WebhookIssuesLockedIssue0AuthorAssociationMEMBER WebhookIssuesLockedIssue0AuthorAssociation = "MEMBER"
	WebhookIssuesLockedIssue0AuthorAssociationNONE WebhookIssuesLockedIssue0AuthorAssociation = "NONE"
	WebhookIssuesLockedIssue0AuthorAssociationOWNER WebhookIssuesLockedIssue0AuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesLockedIssue0AuthorAssociationValues returns the possible values for the WebhookIssuesLockedIssue0AuthorAssociation const type.
func PossibleWebhookIssuesLockedIssue0AuthorAssociationValues() []WebhookIssuesLockedIssue0AuthorAssociation {
	return []WebhookIssuesLockedIssue0AuthorAssociation{
		WebhookIssuesLockedIssue0AuthorAssociationCOLLABORATOR,
		WebhookIssuesLockedIssue0AuthorAssociationCONTRIBUTOR,
		WebhookIssuesLockedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesLockedIssue0AuthorAssociationFIRSTTIMER,
		WebhookIssuesLockedIssue0AuthorAssociationMANNEQUIN,
		WebhookIssuesLockedIssue0AuthorAssociationMEMBER,
		WebhookIssuesLockedIssue0AuthorAssociationNONE,
		WebhookIssuesLockedIssue0AuthorAssociationOWNER,
	}
}

type WebhookIssuesLockedIssue0MilestoneCreatorType string

const (
	WebhookIssuesLockedIssue0MilestoneCreatorTypeBot WebhookIssuesLockedIssue0MilestoneCreatorType = "Bot"
	WebhookIssuesLockedIssue0MilestoneCreatorTypeOrganization WebhookIssuesLockedIssue0MilestoneCreatorType = "Organization"
	WebhookIssuesLockedIssue0MilestoneCreatorTypeUser WebhookIssuesLockedIssue0MilestoneCreatorType = "User"
)

// PossibleWebhookIssuesLockedIssue0MilestoneCreatorTypeValues returns the possible values for the WebhookIssuesLockedIssue0MilestoneCreatorType const type.
func PossibleWebhookIssuesLockedIssue0MilestoneCreatorTypeValues() []WebhookIssuesLockedIssue0MilestoneCreatorType {
	return []WebhookIssuesLockedIssue0MilestoneCreatorType{
		WebhookIssuesLockedIssue0MilestoneCreatorTypeBot,
		WebhookIssuesLockedIssue0MilestoneCreatorTypeOrganization,
		WebhookIssuesLockedIssue0MilestoneCreatorTypeUser,
	}
}

// WebhookIssuesLockedIssue0MilestoneState - The state of the milestone.
type WebhookIssuesLockedIssue0MilestoneState string

const (
	WebhookIssuesLockedIssue0MilestoneStateClosed WebhookIssuesLockedIssue0MilestoneState = "closed"
	WebhookIssuesLockedIssue0MilestoneStateOpen WebhookIssuesLockedIssue0MilestoneState = "open"
)

// PossibleWebhookIssuesLockedIssue0MilestoneStateValues returns the possible values for the WebhookIssuesLockedIssue0MilestoneState const type.
func PossibleWebhookIssuesLockedIssue0MilestoneStateValues() []WebhookIssuesLockedIssue0MilestoneState {
	return []WebhookIssuesLockedIssue0MilestoneState{
		WebhookIssuesLockedIssue0MilestoneStateClosed,
		WebhookIssuesLockedIssue0MilestoneStateOpen,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemCheckRun WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemCheckSuite WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemCommitComment WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemContentReference WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemCreate WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "create"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemDelete WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemDeployKey WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemDeployment WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemDiscussion WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemFork WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemGollum WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemIssueComment WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemIssues WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemLabel WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "label"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemMember WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "member"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemMembership WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemMilestone WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemOrgBlock WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemOrganization WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemPageBuild WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemProject WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "project"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemProjectCard WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemProjectColumn WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemPublic WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "public"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemPullRequest WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemPush WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "push"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemRelease WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "release"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemReminder WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "reminder"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemRepository WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemSecurityAndAnalysis WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "security_and_analysis"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemStar WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "star"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemStatus WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "status"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemTeam WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "team"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemTeamAdd WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemWatch WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItem{
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemCreate,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemDelete,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemFork,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemGollum,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemIssues,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemLabel,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemMember,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemMembership,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemProject,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemPublic,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemPush,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemRelease,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemReminder,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemRepository,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemSecurityAndAnalysis,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemStar,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemStatus,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemTeam,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemWatch,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesLockedIssue0PerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppOwnerType string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppOwnerTypeBot WebhookIssuesLockedIssue0PerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesLockedIssue0PerformedViaGithubAppOwnerTypeOrganization WebhookIssuesLockedIssue0PerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesLockedIssue0PerformedViaGithubAppOwnerTypeUser WebhookIssuesLockedIssue0PerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppOwnerTypeValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppOwnerType {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppOwnerType{
		WebhookIssuesLockedIssue0PerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesLockedIssue0PerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesLockedIssue0PerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsActionsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsActionsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsActions{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsChecksRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsChecksWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsChecks{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContents{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEmailsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEmails{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsIssuesRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsIssues{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsKeysRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsKeysWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsKeys{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMembersRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMembersWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMembers{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMetadataRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPackagesRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPackages{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPagesRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPagesWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPages{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsStatusesRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesLockedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesLockedIssue0State - State of the issue; either 'open' or 'closed'
type WebhookIssuesLockedIssue0State string

const (
	WebhookIssuesLockedIssue0StateClosed WebhookIssuesLockedIssue0State = "closed"
	WebhookIssuesLockedIssue0StateOpen WebhookIssuesLockedIssue0State = "open"
)

// PossibleWebhookIssuesLockedIssue0StateValues returns the possible values for the WebhookIssuesLockedIssue0State const type.
func PossibleWebhookIssuesLockedIssue0StateValues() []WebhookIssuesLockedIssue0State {
	return []WebhookIssuesLockedIssue0State{
		WebhookIssuesLockedIssue0StateClosed,
		WebhookIssuesLockedIssue0StateOpen,
	}
}

type WebhookIssuesLockedIssue0UserType string

const (
	WebhookIssuesLockedIssue0UserTypeBot WebhookIssuesLockedIssue0UserType = "Bot"
	WebhookIssuesLockedIssue0UserTypeOrganization WebhookIssuesLockedIssue0UserType = "Organization"
	WebhookIssuesLockedIssue0UserTypeUser WebhookIssuesLockedIssue0UserType = "User"
)

// PossibleWebhookIssuesLockedIssue0UserTypeValues returns the possible values for the WebhookIssuesLockedIssue0UserType const type.
func PossibleWebhookIssuesLockedIssue0UserTypeValues() []WebhookIssuesLockedIssue0UserType {
	return []WebhookIssuesLockedIssue0UserType{
		WebhookIssuesLockedIssue0UserTypeBot,
		WebhookIssuesLockedIssue0UserTypeOrganization,
		WebhookIssuesLockedIssue0UserTypeUser,
	}
}

type WebhookIssuesLockedIssue1ActiveLockReason string

const (
	WebhookIssuesLockedIssue1ActiveLockReasonNull WebhookIssuesLockedIssue1ActiveLockReason = "null"
	WebhookIssuesLockedIssue1ActiveLockReasonOffTopic WebhookIssuesLockedIssue1ActiveLockReason = "off-topic"
	WebhookIssuesLockedIssue1ActiveLockReasonResolved WebhookIssuesLockedIssue1ActiveLockReason = "resolved"
	WebhookIssuesLockedIssue1ActiveLockReasonSpam WebhookIssuesLockedIssue1ActiveLockReason = "spam"
	WebhookIssuesLockedIssue1ActiveLockReasonTooHeated WebhookIssuesLockedIssue1ActiveLockReason = "too heated"
)

// PossibleWebhookIssuesLockedIssue1ActiveLockReasonValues returns the possible values for the WebhookIssuesLockedIssue1ActiveLockReason const type.
func PossibleWebhookIssuesLockedIssue1ActiveLockReasonValues() []WebhookIssuesLockedIssue1ActiveLockReason {
	return []WebhookIssuesLockedIssue1ActiveLockReason{
		WebhookIssuesLockedIssue1ActiveLockReasonNull,
		WebhookIssuesLockedIssue1ActiveLockReasonOffTopic,
		WebhookIssuesLockedIssue1ActiveLockReasonResolved,
		WebhookIssuesLockedIssue1ActiveLockReasonSpam,
		WebhookIssuesLockedIssue1ActiveLockReasonTooHeated,
	}
}

type WebhookIssuesLockedIssueOneOf0AssigneesItemType string

const (
	WebhookIssuesLockedIssueOneOf0AssigneesItemTypeBot WebhookIssuesLockedIssueOneOf0AssigneesItemType = "Bot"
	WebhookIssuesLockedIssueOneOf0AssigneesItemTypeOrganization WebhookIssuesLockedIssueOneOf0AssigneesItemType = "Organization"
	WebhookIssuesLockedIssueOneOf0AssigneesItemTypeUser WebhookIssuesLockedIssueOneOf0AssigneesItemType = "User"
)

// PossibleWebhookIssuesLockedIssueOneOf0AssigneesItemTypeValues returns the possible values for the WebhookIssuesLockedIssueOneOf0AssigneesItemType const type.
func PossibleWebhookIssuesLockedIssueOneOf0AssigneesItemTypeValues() []WebhookIssuesLockedIssueOneOf0AssigneesItemType {
	return []WebhookIssuesLockedIssueOneOf0AssigneesItemType{
		WebhookIssuesLockedIssueOneOf0AssigneesItemTypeBot,
		WebhookIssuesLockedIssueOneOf0AssigneesItemTypeOrganization,
		WebhookIssuesLockedIssueOneOf0AssigneesItemTypeUser,
	}
}

type WebhookIssuesMilestonedAction string

const (
	WebhookIssuesMilestonedActionMilestoned WebhookIssuesMilestonedAction = "milestoned"
)

// PossibleWebhookIssuesMilestonedActionValues returns the possible values for the WebhookIssuesMilestonedAction const type.
func PossibleWebhookIssuesMilestonedActionValues() []WebhookIssuesMilestonedAction {
	return []WebhookIssuesMilestonedAction{
		WebhookIssuesMilestonedActionMilestoned,
	}
}

type WebhookIssuesMilestonedIssue0ActiveLockReason string

const (
	WebhookIssuesMilestonedIssue0ActiveLockReasonNull WebhookIssuesMilestonedIssue0ActiveLockReason = "null"
	WebhookIssuesMilestonedIssue0ActiveLockReasonOffTopic WebhookIssuesMilestonedIssue0ActiveLockReason = "off-topic"
	WebhookIssuesMilestonedIssue0ActiveLockReasonResolved WebhookIssuesMilestonedIssue0ActiveLockReason = "resolved"
	WebhookIssuesMilestonedIssue0ActiveLockReasonSpam WebhookIssuesMilestonedIssue0ActiveLockReason = "spam"
	WebhookIssuesMilestonedIssue0ActiveLockReasonTooHeated WebhookIssuesMilestonedIssue0ActiveLockReason = "too heated"
)

// PossibleWebhookIssuesMilestonedIssue0ActiveLockReasonValues returns the possible values for the WebhookIssuesMilestonedIssue0ActiveLockReason const type.
func PossibleWebhookIssuesMilestonedIssue0ActiveLockReasonValues() []WebhookIssuesMilestonedIssue0ActiveLockReason {
	return []WebhookIssuesMilestonedIssue0ActiveLockReason{
		WebhookIssuesMilestonedIssue0ActiveLockReasonNull,
		WebhookIssuesMilestonedIssue0ActiveLockReasonOffTopic,
		WebhookIssuesMilestonedIssue0ActiveLockReasonResolved,
		WebhookIssuesMilestonedIssue0ActiveLockReasonSpam,
		WebhookIssuesMilestonedIssue0ActiveLockReasonTooHeated,
	}
}

type WebhookIssuesMilestonedIssue0AssigneeType string

const (
	WebhookIssuesMilestonedIssue0AssigneeTypeBot WebhookIssuesMilestonedIssue0AssigneeType = "Bot"
	WebhookIssuesMilestonedIssue0AssigneeTypeOrganization WebhookIssuesMilestonedIssue0AssigneeType = "Organization"
	WebhookIssuesMilestonedIssue0AssigneeTypeUser WebhookIssuesMilestonedIssue0AssigneeType = "User"
)

// PossibleWebhookIssuesMilestonedIssue0AssigneeTypeValues returns the possible values for the WebhookIssuesMilestonedIssue0AssigneeType const type.
func PossibleWebhookIssuesMilestonedIssue0AssigneeTypeValues() []WebhookIssuesMilestonedIssue0AssigneeType {
	return []WebhookIssuesMilestonedIssue0AssigneeType{
		WebhookIssuesMilestonedIssue0AssigneeTypeBot,
		WebhookIssuesMilestonedIssue0AssigneeTypeOrganization,
		WebhookIssuesMilestonedIssue0AssigneeTypeUser,
	}
}

// WebhookIssuesMilestonedIssue0AuthorAssociation - How the author is associated with the repository.
type WebhookIssuesMilestonedIssue0AuthorAssociation string

const (
	WebhookIssuesMilestonedIssue0AuthorAssociationCOLLABORATOR WebhookIssuesMilestonedIssue0AuthorAssociation = "COLLABORATOR"
	WebhookIssuesMilestonedIssue0AuthorAssociationCONTRIBUTOR WebhookIssuesMilestonedIssue0AuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesMilestonedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesMilestonedIssue0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesMilestonedIssue0AuthorAssociationFIRSTTIMER WebhookIssuesMilestonedIssue0AuthorAssociation = "FIRST_TIMER"
	WebhookIssuesMilestonedIssue0AuthorAssociationMANNEQUIN WebhookIssuesMilestonedIssue0AuthorAssociation = "MANNEQUIN"
	WebhookIssuesMilestonedIssue0AuthorAssociationMEMBER WebhookIssuesMilestonedIssue0AuthorAssociation = "MEMBER"
	WebhookIssuesMilestonedIssue0AuthorAssociationNONE WebhookIssuesMilestonedIssue0AuthorAssociation = "NONE"
	WebhookIssuesMilestonedIssue0AuthorAssociationOWNER WebhookIssuesMilestonedIssue0AuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesMilestonedIssue0AuthorAssociationValues returns the possible values for the WebhookIssuesMilestonedIssue0AuthorAssociation const type.
func PossibleWebhookIssuesMilestonedIssue0AuthorAssociationValues() []WebhookIssuesMilestonedIssue0AuthorAssociation {
	return []WebhookIssuesMilestonedIssue0AuthorAssociation{
		WebhookIssuesMilestonedIssue0AuthorAssociationCOLLABORATOR,
		WebhookIssuesMilestonedIssue0AuthorAssociationCONTRIBUTOR,
		WebhookIssuesMilestonedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesMilestonedIssue0AuthorAssociationFIRSTTIMER,
		WebhookIssuesMilestonedIssue0AuthorAssociationMANNEQUIN,
		WebhookIssuesMilestonedIssue0AuthorAssociationMEMBER,
		WebhookIssuesMilestonedIssue0AuthorAssociationNONE,
		WebhookIssuesMilestonedIssue0AuthorAssociationOWNER,
	}
}

type WebhookIssuesMilestonedIssue0MilestoneCreatorType string

const (
	WebhookIssuesMilestonedIssue0MilestoneCreatorTypeBot WebhookIssuesMilestonedIssue0MilestoneCreatorType = "Bot"
	WebhookIssuesMilestonedIssue0MilestoneCreatorTypeMannequin WebhookIssuesMilestonedIssue0MilestoneCreatorType = "Mannequin"
	WebhookIssuesMilestonedIssue0MilestoneCreatorTypeOrganization WebhookIssuesMilestonedIssue0MilestoneCreatorType = "Organization"
	WebhookIssuesMilestonedIssue0MilestoneCreatorTypeUser WebhookIssuesMilestonedIssue0MilestoneCreatorType = "User"
)

// PossibleWebhookIssuesMilestonedIssue0MilestoneCreatorTypeValues returns the possible values for the WebhookIssuesMilestonedIssue0MilestoneCreatorType const type.
func PossibleWebhookIssuesMilestonedIssue0MilestoneCreatorTypeValues() []WebhookIssuesMilestonedIssue0MilestoneCreatorType {
	return []WebhookIssuesMilestonedIssue0MilestoneCreatorType{
		WebhookIssuesMilestonedIssue0MilestoneCreatorTypeBot,
		WebhookIssuesMilestonedIssue0MilestoneCreatorTypeMannequin,
		WebhookIssuesMilestonedIssue0MilestoneCreatorTypeOrganization,
		WebhookIssuesMilestonedIssue0MilestoneCreatorTypeUser,
	}
}

// WebhookIssuesMilestonedIssue0MilestoneState - The state of the milestone.
type WebhookIssuesMilestonedIssue0MilestoneState string

const (
	WebhookIssuesMilestonedIssue0MilestoneStateClosed WebhookIssuesMilestonedIssue0MilestoneState = "closed"
	WebhookIssuesMilestonedIssue0MilestoneStateOpen WebhookIssuesMilestonedIssue0MilestoneState = "open"
)

// PossibleWebhookIssuesMilestonedIssue0MilestoneStateValues returns the possible values for the WebhookIssuesMilestonedIssue0MilestoneState const type.
func PossibleWebhookIssuesMilestonedIssue0MilestoneStateValues() []WebhookIssuesMilestonedIssue0MilestoneState {
	return []WebhookIssuesMilestonedIssue0MilestoneState{
		WebhookIssuesMilestonedIssue0MilestoneStateClosed,
		WebhookIssuesMilestonedIssue0MilestoneStateOpen,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemCheckRun WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemCheckSuite WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemCommitComment WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemContentReference WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemCreate WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "create"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemDelete WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemDeployKey WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemDeployment WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemDiscussion WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemFork WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemGollum WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemIssueComment WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemIssues WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemLabel WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "label"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemMember WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "member"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemMembership WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemMilestone WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemOrgBlock WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemOrganization WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemPageBuild WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemProject WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "project"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemProjectCard WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemProjectColumn WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemPublic WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "public"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemPullRequest WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemPush WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "push"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemRelease WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "release"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemReminder WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "reminder"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemRepository WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemStar WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "star"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemStatus WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "status"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemTeam WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "team"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemTeamAdd WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemWatch WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItem{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemCreate,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemDelete,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemFork,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemGollum,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemIssues,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemLabel,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemMember,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemMembership,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemProject,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemPublic,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemPush,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemRelease,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemReminder,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemRepository,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemStar,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemStatus,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemTeam,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemWatch,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerType string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerTypeBot WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerTypeOrganization WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerTypeUser WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerTypeValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerType {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerType{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsActionsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsActionsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsActions{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsChecksRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsChecksWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsChecks{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContents{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEmailsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEmails{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsIssuesRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsIssues{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsKeysRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsKeysWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsKeys{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMembersRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMembersWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMembers{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMetadataRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsAdmin WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "admin"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsAdmin,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPackagesRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPackages{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPagesRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPagesWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPages{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsStatusesRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesMilestonedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesMilestonedIssue0State - State of the issue; either 'open' or 'closed'
type WebhookIssuesMilestonedIssue0State string

const (
	WebhookIssuesMilestonedIssue0StateClosed WebhookIssuesMilestonedIssue0State = "closed"
	WebhookIssuesMilestonedIssue0StateOpen WebhookIssuesMilestonedIssue0State = "open"
)

// PossibleWebhookIssuesMilestonedIssue0StateValues returns the possible values for the WebhookIssuesMilestonedIssue0State const type.
func PossibleWebhookIssuesMilestonedIssue0StateValues() []WebhookIssuesMilestonedIssue0State {
	return []WebhookIssuesMilestonedIssue0State{
		WebhookIssuesMilestonedIssue0StateClosed,
		WebhookIssuesMilestonedIssue0StateOpen,
	}
}

type WebhookIssuesMilestonedIssue0UserType string

const (
	WebhookIssuesMilestonedIssue0UserTypeBot WebhookIssuesMilestonedIssue0UserType = "Bot"
	WebhookIssuesMilestonedIssue0UserTypeOrganization WebhookIssuesMilestonedIssue0UserType = "Organization"
	WebhookIssuesMilestonedIssue0UserTypeUser WebhookIssuesMilestonedIssue0UserType = "User"
)

// PossibleWebhookIssuesMilestonedIssue0UserTypeValues returns the possible values for the WebhookIssuesMilestonedIssue0UserType const type.
func PossibleWebhookIssuesMilestonedIssue0UserTypeValues() []WebhookIssuesMilestonedIssue0UserType {
	return []WebhookIssuesMilestonedIssue0UserType{
		WebhookIssuesMilestonedIssue0UserTypeBot,
		WebhookIssuesMilestonedIssue0UserTypeOrganization,
		WebhookIssuesMilestonedIssue0UserTypeUser,
	}
}

type WebhookIssuesMilestonedIssue1MilestoneCreatorType string

const (
	WebhookIssuesMilestonedIssue1MilestoneCreatorTypeBot WebhookIssuesMilestonedIssue1MilestoneCreatorType = "Bot"
	WebhookIssuesMilestonedIssue1MilestoneCreatorTypeMannequin WebhookIssuesMilestonedIssue1MilestoneCreatorType = "Mannequin"
	WebhookIssuesMilestonedIssue1MilestoneCreatorTypeOrganization WebhookIssuesMilestonedIssue1MilestoneCreatorType = "Organization"
	WebhookIssuesMilestonedIssue1MilestoneCreatorTypeUser WebhookIssuesMilestonedIssue1MilestoneCreatorType = "User"
)

// PossibleWebhookIssuesMilestonedIssue1MilestoneCreatorTypeValues returns the possible values for the WebhookIssuesMilestonedIssue1MilestoneCreatorType const type.
func PossibleWebhookIssuesMilestonedIssue1MilestoneCreatorTypeValues() []WebhookIssuesMilestonedIssue1MilestoneCreatorType {
	return []WebhookIssuesMilestonedIssue1MilestoneCreatorType{
		WebhookIssuesMilestonedIssue1MilestoneCreatorTypeBot,
		WebhookIssuesMilestonedIssue1MilestoneCreatorTypeMannequin,
		WebhookIssuesMilestonedIssue1MilestoneCreatorTypeOrganization,
		WebhookIssuesMilestonedIssue1MilestoneCreatorTypeUser,
	}
}

// WebhookIssuesMilestonedIssue1MilestoneState - The state of the milestone.
type WebhookIssuesMilestonedIssue1MilestoneState string

const (
	WebhookIssuesMilestonedIssue1MilestoneStateClosed WebhookIssuesMilestonedIssue1MilestoneState = "closed"
	WebhookIssuesMilestonedIssue1MilestoneStateOpen WebhookIssuesMilestonedIssue1MilestoneState = "open"
)

// PossibleWebhookIssuesMilestonedIssue1MilestoneStateValues returns the possible values for the WebhookIssuesMilestonedIssue1MilestoneState const type.
func PossibleWebhookIssuesMilestonedIssue1MilestoneStateValues() []WebhookIssuesMilestonedIssue1MilestoneState {
	return []WebhookIssuesMilestonedIssue1MilestoneState{
		WebhookIssuesMilestonedIssue1MilestoneStateClosed,
		WebhookIssuesMilestonedIssue1MilestoneStateOpen,
	}
}

type WebhookIssuesMilestonedIssueOneOf0AssigneesItemType string

const (
	WebhookIssuesMilestonedIssueOneOf0AssigneesItemTypeBot WebhookIssuesMilestonedIssueOneOf0AssigneesItemType = "Bot"
	WebhookIssuesMilestonedIssueOneOf0AssigneesItemTypeOrganization WebhookIssuesMilestonedIssueOneOf0AssigneesItemType = "Organization"
	WebhookIssuesMilestonedIssueOneOf0AssigneesItemTypeUser WebhookIssuesMilestonedIssueOneOf0AssigneesItemType = "User"
)

// PossibleWebhookIssuesMilestonedIssueOneOf0AssigneesItemTypeValues returns the possible values for the WebhookIssuesMilestonedIssueOneOf0AssigneesItemType const type.
func PossibleWebhookIssuesMilestonedIssueOneOf0AssigneesItemTypeValues() []WebhookIssuesMilestonedIssueOneOf0AssigneesItemType {
	return []WebhookIssuesMilestonedIssueOneOf0AssigneesItemType{
		WebhookIssuesMilestonedIssueOneOf0AssigneesItemTypeBot,
		WebhookIssuesMilestonedIssueOneOf0AssigneesItemTypeOrganization,
		WebhookIssuesMilestonedIssueOneOf0AssigneesItemTypeUser,
	}
}

type WebhookIssuesMilestonedMilestoneCreatorType string

const (
	WebhookIssuesMilestonedMilestoneCreatorTypeBot WebhookIssuesMilestonedMilestoneCreatorType = "Bot"
	WebhookIssuesMilestonedMilestoneCreatorTypeMannequin WebhookIssuesMilestonedMilestoneCreatorType = "Mannequin"
	WebhookIssuesMilestonedMilestoneCreatorTypeOrganization WebhookIssuesMilestonedMilestoneCreatorType = "Organization"
	WebhookIssuesMilestonedMilestoneCreatorTypeUser WebhookIssuesMilestonedMilestoneCreatorType = "User"
)

// PossibleWebhookIssuesMilestonedMilestoneCreatorTypeValues returns the possible values for the WebhookIssuesMilestonedMilestoneCreatorType const type.
func PossibleWebhookIssuesMilestonedMilestoneCreatorTypeValues() []WebhookIssuesMilestonedMilestoneCreatorType {
	return []WebhookIssuesMilestonedMilestoneCreatorType{
		WebhookIssuesMilestonedMilestoneCreatorTypeBot,
		WebhookIssuesMilestonedMilestoneCreatorTypeMannequin,
		WebhookIssuesMilestonedMilestoneCreatorTypeOrganization,
		WebhookIssuesMilestonedMilestoneCreatorTypeUser,
	}
}

// WebhookIssuesMilestonedMilestoneState - The state of the milestone.
type WebhookIssuesMilestonedMilestoneState string

const (
	WebhookIssuesMilestonedMilestoneStateClosed WebhookIssuesMilestonedMilestoneState = "closed"
	WebhookIssuesMilestonedMilestoneStateOpen WebhookIssuesMilestonedMilestoneState = "open"
)

// PossibleWebhookIssuesMilestonedMilestoneStateValues returns the possible values for the WebhookIssuesMilestonedMilestoneState const type.
func PossibleWebhookIssuesMilestonedMilestoneStateValues() []WebhookIssuesMilestonedMilestoneState {
	return []WebhookIssuesMilestonedMilestoneState{
		WebhookIssuesMilestonedMilestoneStateClosed,
		WebhookIssuesMilestonedMilestoneStateOpen,
	}
}

type WebhookIssuesOpenedAction string

const (
	WebhookIssuesOpenedActionOpened WebhookIssuesOpenedAction = "opened"
)

// PossibleWebhookIssuesOpenedActionValues returns the possible values for the WebhookIssuesOpenedAction const type.
func PossibleWebhookIssuesOpenedActionValues() []WebhookIssuesOpenedAction {
	return []WebhookIssuesOpenedAction{
		WebhookIssuesOpenedActionOpened,
	}
}

type WebhookIssuesOpenedChangesOldIssueActiveLockReason string

const (
	WebhookIssuesOpenedChangesOldIssueActiveLockReasonNull WebhookIssuesOpenedChangesOldIssueActiveLockReason = "null"
	WebhookIssuesOpenedChangesOldIssueActiveLockReasonOffTopic WebhookIssuesOpenedChangesOldIssueActiveLockReason = "off-topic"
	WebhookIssuesOpenedChangesOldIssueActiveLockReasonResolved WebhookIssuesOpenedChangesOldIssueActiveLockReason = "resolved"
	WebhookIssuesOpenedChangesOldIssueActiveLockReasonSpam WebhookIssuesOpenedChangesOldIssueActiveLockReason = "spam"
	WebhookIssuesOpenedChangesOldIssueActiveLockReasonTooHeated WebhookIssuesOpenedChangesOldIssueActiveLockReason = "too heated"
)

// PossibleWebhookIssuesOpenedChangesOldIssueActiveLockReasonValues returns the possible values for the WebhookIssuesOpenedChangesOldIssueActiveLockReason const type.
func PossibleWebhookIssuesOpenedChangesOldIssueActiveLockReasonValues() []WebhookIssuesOpenedChangesOldIssueActiveLockReason {
	return []WebhookIssuesOpenedChangesOldIssueActiveLockReason{
		WebhookIssuesOpenedChangesOldIssueActiveLockReasonNull,
		WebhookIssuesOpenedChangesOldIssueActiveLockReasonOffTopic,
		WebhookIssuesOpenedChangesOldIssueActiveLockReasonResolved,
		WebhookIssuesOpenedChangesOldIssueActiveLockReasonSpam,
		WebhookIssuesOpenedChangesOldIssueActiveLockReasonTooHeated,
	}
}

type WebhookIssuesOpenedChangesOldIssueAssigneeType string

const (
	WebhookIssuesOpenedChangesOldIssueAssigneeTypeBot WebhookIssuesOpenedChangesOldIssueAssigneeType = "Bot"
	WebhookIssuesOpenedChangesOldIssueAssigneeTypeOrganization WebhookIssuesOpenedChangesOldIssueAssigneeType = "Organization"
	WebhookIssuesOpenedChangesOldIssueAssigneeTypeUser WebhookIssuesOpenedChangesOldIssueAssigneeType = "User"
)

// PossibleWebhookIssuesOpenedChangesOldIssueAssigneeTypeValues returns the possible values for the WebhookIssuesOpenedChangesOldIssueAssigneeType const type.
func PossibleWebhookIssuesOpenedChangesOldIssueAssigneeTypeValues() []WebhookIssuesOpenedChangesOldIssueAssigneeType {
	return []WebhookIssuesOpenedChangesOldIssueAssigneeType{
		WebhookIssuesOpenedChangesOldIssueAssigneeTypeBot,
		WebhookIssuesOpenedChangesOldIssueAssigneeTypeOrganization,
		WebhookIssuesOpenedChangesOldIssueAssigneeTypeUser,
	}
}

type WebhookIssuesOpenedChangesOldIssueAssigneesItemType string

const (
	WebhookIssuesOpenedChangesOldIssueAssigneesItemTypeBot WebhookIssuesOpenedChangesOldIssueAssigneesItemType = "Bot"
	WebhookIssuesOpenedChangesOldIssueAssigneesItemTypeOrganization WebhookIssuesOpenedChangesOldIssueAssigneesItemType = "Organization"
	WebhookIssuesOpenedChangesOldIssueAssigneesItemTypeUser WebhookIssuesOpenedChangesOldIssueAssigneesItemType = "User"
)

// PossibleWebhookIssuesOpenedChangesOldIssueAssigneesItemTypeValues returns the possible values for the WebhookIssuesOpenedChangesOldIssueAssigneesItemType const type.
func PossibleWebhookIssuesOpenedChangesOldIssueAssigneesItemTypeValues() []WebhookIssuesOpenedChangesOldIssueAssigneesItemType {
	return []WebhookIssuesOpenedChangesOldIssueAssigneesItemType{
		WebhookIssuesOpenedChangesOldIssueAssigneesItemTypeBot,
		WebhookIssuesOpenedChangesOldIssueAssigneesItemTypeOrganization,
		WebhookIssuesOpenedChangesOldIssueAssigneesItemTypeUser,
	}
}

// WebhookIssuesOpenedChangesOldIssueAuthorAssociation - How the author is associated with the repository.
type WebhookIssuesOpenedChangesOldIssueAuthorAssociation string

const (
	WebhookIssuesOpenedChangesOldIssueAuthorAssociationCOLLABORATOR WebhookIssuesOpenedChangesOldIssueAuthorAssociation = "COLLABORATOR"
	WebhookIssuesOpenedChangesOldIssueAuthorAssociationCONTRIBUTOR WebhookIssuesOpenedChangesOldIssueAuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesOpenedChangesOldIssueAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesOpenedChangesOldIssueAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesOpenedChangesOldIssueAuthorAssociationFIRSTTIMER WebhookIssuesOpenedChangesOldIssueAuthorAssociation = "FIRST_TIMER"
	WebhookIssuesOpenedChangesOldIssueAuthorAssociationMANNEQUIN WebhookIssuesOpenedChangesOldIssueAuthorAssociation = "MANNEQUIN"
	WebhookIssuesOpenedChangesOldIssueAuthorAssociationMEMBER WebhookIssuesOpenedChangesOldIssueAuthorAssociation = "MEMBER"
	WebhookIssuesOpenedChangesOldIssueAuthorAssociationNONE WebhookIssuesOpenedChangesOldIssueAuthorAssociation = "NONE"
	WebhookIssuesOpenedChangesOldIssueAuthorAssociationOWNER WebhookIssuesOpenedChangesOldIssueAuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesOpenedChangesOldIssueAuthorAssociationValues returns the possible values for the WebhookIssuesOpenedChangesOldIssueAuthorAssociation const type.
func PossibleWebhookIssuesOpenedChangesOldIssueAuthorAssociationValues() []WebhookIssuesOpenedChangesOldIssueAuthorAssociation {
	return []WebhookIssuesOpenedChangesOldIssueAuthorAssociation{
		WebhookIssuesOpenedChangesOldIssueAuthorAssociationCOLLABORATOR,
		WebhookIssuesOpenedChangesOldIssueAuthorAssociationCONTRIBUTOR,
		WebhookIssuesOpenedChangesOldIssueAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesOpenedChangesOldIssueAuthorAssociationFIRSTTIMER,
		WebhookIssuesOpenedChangesOldIssueAuthorAssociationMANNEQUIN,
		WebhookIssuesOpenedChangesOldIssueAuthorAssociationMEMBER,
		WebhookIssuesOpenedChangesOldIssueAuthorAssociationNONE,
		WebhookIssuesOpenedChangesOldIssueAuthorAssociationOWNER,
	}
}

type WebhookIssuesOpenedChangesOldIssueMilestoneCreatorType string

const (
	WebhookIssuesOpenedChangesOldIssueMilestoneCreatorTypeBot WebhookIssuesOpenedChangesOldIssueMilestoneCreatorType = "Bot"
	WebhookIssuesOpenedChangesOldIssueMilestoneCreatorTypeOrganization WebhookIssuesOpenedChangesOldIssueMilestoneCreatorType = "Organization"
	WebhookIssuesOpenedChangesOldIssueMilestoneCreatorTypeUser WebhookIssuesOpenedChangesOldIssueMilestoneCreatorType = "User"
)

// PossibleWebhookIssuesOpenedChangesOldIssueMilestoneCreatorTypeValues returns the possible values for the WebhookIssuesOpenedChangesOldIssueMilestoneCreatorType const type.
func PossibleWebhookIssuesOpenedChangesOldIssueMilestoneCreatorTypeValues() []WebhookIssuesOpenedChangesOldIssueMilestoneCreatorType {
	return []WebhookIssuesOpenedChangesOldIssueMilestoneCreatorType{
		WebhookIssuesOpenedChangesOldIssueMilestoneCreatorTypeBot,
		WebhookIssuesOpenedChangesOldIssueMilestoneCreatorTypeOrganization,
		WebhookIssuesOpenedChangesOldIssueMilestoneCreatorTypeUser,
	}
}

// WebhookIssuesOpenedChangesOldIssueMilestoneState - The state of the milestone.
type WebhookIssuesOpenedChangesOldIssueMilestoneState string

const (
	WebhookIssuesOpenedChangesOldIssueMilestoneStateClosed WebhookIssuesOpenedChangesOldIssueMilestoneState = "closed"
	WebhookIssuesOpenedChangesOldIssueMilestoneStateOpen WebhookIssuesOpenedChangesOldIssueMilestoneState = "open"
)

// PossibleWebhookIssuesOpenedChangesOldIssueMilestoneStateValues returns the possible values for the WebhookIssuesOpenedChangesOldIssueMilestoneState const type.
func PossibleWebhookIssuesOpenedChangesOldIssueMilestoneStateValues() []WebhookIssuesOpenedChangesOldIssueMilestoneState {
	return []WebhookIssuesOpenedChangesOldIssueMilestoneState{
		WebhookIssuesOpenedChangesOldIssueMilestoneStateClosed,
		WebhookIssuesOpenedChangesOldIssueMilestoneStateOpen,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemCheckRun WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemCheckSuite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemCommitComment WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemContentReference WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemCreate WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "create"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemDelete WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemDeployKey WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemDeployment WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemDiscussion WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemFork WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemGollum WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemIssueComment WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemIssues WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemLabel WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "label"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemMember WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "member"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemMembership WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemMilestone WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemOrgBlock WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemOrganization WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemPageBuild WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemProject WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "project"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemProjectCard WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemProjectColumn WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemPublic WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "public"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemPullRequest WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemPush WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "push"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemRelease WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "release"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemRepository WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemStar WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "star"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemStatus WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "status"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemTeam WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "team"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemTeamAdd WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemWatch WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItem{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemCreate,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemDelete,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemFork,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemGollum,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemIssues,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemLabel,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemMember,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemMembership,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemProject,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemPublic,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemPush,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemRelease,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemRepository,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemStar,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemStatus,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemTeam,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemWatch,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerType string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerTypeBot WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerTypeOrganization WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerTypeUser WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerTypeValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerType {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerType{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsActionsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsActionsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsActions{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsChecksRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsChecksWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsChecks{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContents{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEmailsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEmails{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsIssuesRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsIssues{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsKeysRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsKeysWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsKeys{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMembersRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMembersWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMembers{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMetadataRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPackagesRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPackages{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPagesRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPagesWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPages{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsStatusesRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesOpenedChangesOldIssuePerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesOpenedChangesOldIssueState - State of the issue; either 'open' or 'closed'
type WebhookIssuesOpenedChangesOldIssueState string

const (
	WebhookIssuesOpenedChangesOldIssueStateClosed WebhookIssuesOpenedChangesOldIssueState = "closed"
	WebhookIssuesOpenedChangesOldIssueStateOpen WebhookIssuesOpenedChangesOldIssueState = "open"
)

// PossibleWebhookIssuesOpenedChangesOldIssueStateValues returns the possible values for the WebhookIssuesOpenedChangesOldIssueState const type.
func PossibleWebhookIssuesOpenedChangesOldIssueStateValues() []WebhookIssuesOpenedChangesOldIssueState {
	return []WebhookIssuesOpenedChangesOldIssueState{
		WebhookIssuesOpenedChangesOldIssueStateClosed,
		WebhookIssuesOpenedChangesOldIssueStateOpen,
	}
}

type WebhookIssuesOpenedChangesOldIssueUserType string

const (
	WebhookIssuesOpenedChangesOldIssueUserTypeBot WebhookIssuesOpenedChangesOldIssueUserType = "Bot"
	WebhookIssuesOpenedChangesOldIssueUserTypeOrganization WebhookIssuesOpenedChangesOldIssueUserType = "Organization"
	WebhookIssuesOpenedChangesOldIssueUserTypeUser WebhookIssuesOpenedChangesOldIssueUserType = "User"
)

// PossibleWebhookIssuesOpenedChangesOldIssueUserTypeValues returns the possible values for the WebhookIssuesOpenedChangesOldIssueUserType const type.
func PossibleWebhookIssuesOpenedChangesOldIssueUserTypeValues() []WebhookIssuesOpenedChangesOldIssueUserType {
	return []WebhookIssuesOpenedChangesOldIssueUserType{
		WebhookIssuesOpenedChangesOldIssueUserTypeBot,
		WebhookIssuesOpenedChangesOldIssueUserTypeOrganization,
		WebhookIssuesOpenedChangesOldIssueUserTypeUser,
	}
}

type WebhookIssuesOpenedChangesOldRepositoryOwnerType string

const (
	WebhookIssuesOpenedChangesOldRepositoryOwnerTypeBot WebhookIssuesOpenedChangesOldRepositoryOwnerType = "Bot"
	WebhookIssuesOpenedChangesOldRepositoryOwnerTypeOrganization WebhookIssuesOpenedChangesOldRepositoryOwnerType = "Organization"
	WebhookIssuesOpenedChangesOldRepositoryOwnerTypeUser WebhookIssuesOpenedChangesOldRepositoryOwnerType = "User"
)

// PossibleWebhookIssuesOpenedChangesOldRepositoryOwnerTypeValues returns the possible values for the WebhookIssuesOpenedChangesOldRepositoryOwnerType const type.
func PossibleWebhookIssuesOpenedChangesOldRepositoryOwnerTypeValues() []WebhookIssuesOpenedChangesOldRepositoryOwnerType {
	return []WebhookIssuesOpenedChangesOldRepositoryOwnerType{
		WebhookIssuesOpenedChangesOldRepositoryOwnerTypeBot,
		WebhookIssuesOpenedChangesOldRepositoryOwnerTypeOrganization,
		WebhookIssuesOpenedChangesOldRepositoryOwnerTypeUser,
	}
}

type WebhookIssuesOpenedChangesOldRepositoryVisibility string

const (
	WebhookIssuesOpenedChangesOldRepositoryVisibilityInternal WebhookIssuesOpenedChangesOldRepositoryVisibility = "internal"
	WebhookIssuesOpenedChangesOldRepositoryVisibilityPrivate WebhookIssuesOpenedChangesOldRepositoryVisibility = "private"
	WebhookIssuesOpenedChangesOldRepositoryVisibilityPublic WebhookIssuesOpenedChangesOldRepositoryVisibility = "public"
)

// PossibleWebhookIssuesOpenedChangesOldRepositoryVisibilityValues returns the possible values for the WebhookIssuesOpenedChangesOldRepositoryVisibility const type.
func PossibleWebhookIssuesOpenedChangesOldRepositoryVisibilityValues() []WebhookIssuesOpenedChangesOldRepositoryVisibility {
	return []WebhookIssuesOpenedChangesOldRepositoryVisibility{
		WebhookIssuesOpenedChangesOldRepositoryVisibilityInternal,
		WebhookIssuesOpenedChangesOldRepositoryVisibilityPrivate,
		WebhookIssuesOpenedChangesOldRepositoryVisibilityPublic,
	}
}

type WebhookIssuesOpenedIssueActiveLockReason string

const (
	WebhookIssuesOpenedIssueActiveLockReasonNull WebhookIssuesOpenedIssueActiveLockReason = "null"
	WebhookIssuesOpenedIssueActiveLockReasonOffTopic WebhookIssuesOpenedIssueActiveLockReason = "off-topic"
	WebhookIssuesOpenedIssueActiveLockReasonResolved WebhookIssuesOpenedIssueActiveLockReason = "resolved"
	WebhookIssuesOpenedIssueActiveLockReasonSpam WebhookIssuesOpenedIssueActiveLockReason = "spam"
	WebhookIssuesOpenedIssueActiveLockReasonTooHeated WebhookIssuesOpenedIssueActiveLockReason = "too heated"
)

// PossibleWebhookIssuesOpenedIssueActiveLockReasonValues returns the possible values for the WebhookIssuesOpenedIssueActiveLockReason const type.
func PossibleWebhookIssuesOpenedIssueActiveLockReasonValues() []WebhookIssuesOpenedIssueActiveLockReason {
	return []WebhookIssuesOpenedIssueActiveLockReason{
		WebhookIssuesOpenedIssueActiveLockReasonNull,
		WebhookIssuesOpenedIssueActiveLockReasonOffTopic,
		WebhookIssuesOpenedIssueActiveLockReasonResolved,
		WebhookIssuesOpenedIssueActiveLockReasonSpam,
		WebhookIssuesOpenedIssueActiveLockReasonTooHeated,
	}
}

type WebhookIssuesOpenedIssueAssigneeType string

const (
	WebhookIssuesOpenedIssueAssigneeTypeBot WebhookIssuesOpenedIssueAssigneeType = "Bot"
	WebhookIssuesOpenedIssueAssigneeTypeOrganization WebhookIssuesOpenedIssueAssigneeType = "Organization"
	WebhookIssuesOpenedIssueAssigneeTypeUser WebhookIssuesOpenedIssueAssigneeType = "User"
)

// PossibleWebhookIssuesOpenedIssueAssigneeTypeValues returns the possible values for the WebhookIssuesOpenedIssueAssigneeType const type.
func PossibleWebhookIssuesOpenedIssueAssigneeTypeValues() []WebhookIssuesOpenedIssueAssigneeType {
	return []WebhookIssuesOpenedIssueAssigneeType{
		WebhookIssuesOpenedIssueAssigneeTypeBot,
		WebhookIssuesOpenedIssueAssigneeTypeOrganization,
		WebhookIssuesOpenedIssueAssigneeTypeUser,
	}
}

type WebhookIssuesOpenedIssueAssigneesItemType string

const (
	WebhookIssuesOpenedIssueAssigneesItemTypeBot WebhookIssuesOpenedIssueAssigneesItemType = "Bot"
	WebhookIssuesOpenedIssueAssigneesItemTypeOrganization WebhookIssuesOpenedIssueAssigneesItemType = "Organization"
	WebhookIssuesOpenedIssueAssigneesItemTypeUser WebhookIssuesOpenedIssueAssigneesItemType = "User"
)

// PossibleWebhookIssuesOpenedIssueAssigneesItemTypeValues returns the possible values for the WebhookIssuesOpenedIssueAssigneesItemType const type.
func PossibleWebhookIssuesOpenedIssueAssigneesItemTypeValues() []WebhookIssuesOpenedIssueAssigneesItemType {
	return []WebhookIssuesOpenedIssueAssigneesItemType{
		WebhookIssuesOpenedIssueAssigneesItemTypeBot,
		WebhookIssuesOpenedIssueAssigneesItemTypeOrganization,
		WebhookIssuesOpenedIssueAssigneesItemTypeUser,
	}
}

// WebhookIssuesOpenedIssueAuthorAssociation - How the author is associated with the repository.
type WebhookIssuesOpenedIssueAuthorAssociation string

const (
	WebhookIssuesOpenedIssueAuthorAssociationCOLLABORATOR WebhookIssuesOpenedIssueAuthorAssociation = "COLLABORATOR"
	WebhookIssuesOpenedIssueAuthorAssociationCONTRIBUTOR WebhookIssuesOpenedIssueAuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesOpenedIssueAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesOpenedIssueAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesOpenedIssueAuthorAssociationFIRSTTIMER WebhookIssuesOpenedIssueAuthorAssociation = "FIRST_TIMER"
	WebhookIssuesOpenedIssueAuthorAssociationMANNEQUIN WebhookIssuesOpenedIssueAuthorAssociation = "MANNEQUIN"
	WebhookIssuesOpenedIssueAuthorAssociationMEMBER WebhookIssuesOpenedIssueAuthorAssociation = "MEMBER"
	WebhookIssuesOpenedIssueAuthorAssociationNONE WebhookIssuesOpenedIssueAuthorAssociation = "NONE"
	WebhookIssuesOpenedIssueAuthorAssociationOWNER WebhookIssuesOpenedIssueAuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesOpenedIssueAuthorAssociationValues returns the possible values for the WebhookIssuesOpenedIssueAuthorAssociation const type.
func PossibleWebhookIssuesOpenedIssueAuthorAssociationValues() []WebhookIssuesOpenedIssueAuthorAssociation {
	return []WebhookIssuesOpenedIssueAuthorAssociation{
		WebhookIssuesOpenedIssueAuthorAssociationCOLLABORATOR,
		WebhookIssuesOpenedIssueAuthorAssociationCONTRIBUTOR,
		WebhookIssuesOpenedIssueAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesOpenedIssueAuthorAssociationFIRSTTIMER,
		WebhookIssuesOpenedIssueAuthorAssociationMANNEQUIN,
		WebhookIssuesOpenedIssueAuthorAssociationMEMBER,
		WebhookIssuesOpenedIssueAuthorAssociationNONE,
		WebhookIssuesOpenedIssueAuthorAssociationOWNER,
	}
}

type WebhookIssuesOpenedIssueMilestoneCreatorType string

const (
	WebhookIssuesOpenedIssueMilestoneCreatorTypeBot WebhookIssuesOpenedIssueMilestoneCreatorType = "Bot"
	WebhookIssuesOpenedIssueMilestoneCreatorTypeMannequin WebhookIssuesOpenedIssueMilestoneCreatorType = "Mannequin"
	WebhookIssuesOpenedIssueMilestoneCreatorTypeOrganization WebhookIssuesOpenedIssueMilestoneCreatorType = "Organization"
	WebhookIssuesOpenedIssueMilestoneCreatorTypeUser WebhookIssuesOpenedIssueMilestoneCreatorType = "User"
)

// PossibleWebhookIssuesOpenedIssueMilestoneCreatorTypeValues returns the possible values for the WebhookIssuesOpenedIssueMilestoneCreatorType const type.
func PossibleWebhookIssuesOpenedIssueMilestoneCreatorTypeValues() []WebhookIssuesOpenedIssueMilestoneCreatorType {
	return []WebhookIssuesOpenedIssueMilestoneCreatorType{
		WebhookIssuesOpenedIssueMilestoneCreatorTypeBot,
		WebhookIssuesOpenedIssueMilestoneCreatorTypeMannequin,
		WebhookIssuesOpenedIssueMilestoneCreatorTypeOrganization,
		WebhookIssuesOpenedIssueMilestoneCreatorTypeUser,
	}
}

// WebhookIssuesOpenedIssueMilestoneState - The state of the milestone.
type WebhookIssuesOpenedIssueMilestoneState string

const (
	WebhookIssuesOpenedIssueMilestoneStateClosed WebhookIssuesOpenedIssueMilestoneState = "closed"
	WebhookIssuesOpenedIssueMilestoneStateOpen WebhookIssuesOpenedIssueMilestoneState = "open"
)

// PossibleWebhookIssuesOpenedIssueMilestoneStateValues returns the possible values for the WebhookIssuesOpenedIssueMilestoneState const type.
func PossibleWebhookIssuesOpenedIssueMilestoneStateValues() []WebhookIssuesOpenedIssueMilestoneState {
	return []WebhookIssuesOpenedIssueMilestoneState{
		WebhookIssuesOpenedIssueMilestoneStateClosed,
		WebhookIssuesOpenedIssueMilestoneStateOpen,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemCheckRun WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemCheckSuite WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemCommitComment WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemContentReference WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemCreate WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "create"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemDelete WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemDeployKey WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemDeployment WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemDiscussion WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemFork WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemGollum WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemIssueComment WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemIssues WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemLabel WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "label"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemMember WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "member"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemMembership WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemMilestone WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemOrgBlock WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemOrganization WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemPageBuild WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemProject WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "project"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemProjectCard WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemProjectColumn WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemPublic WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "public"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemPullRequest WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemPullRequestReviewThread WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "pull_request_review_thread"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemPush WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "push"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemRelease WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "release"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemReminder WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "reminder"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemRepository WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemSecurityAndAnalysis WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "security_and_analysis"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemStar WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "star"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemStatus WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "status"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemTeam WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "team"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemTeamAdd WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemWatch WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItem{
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemCreate,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemDelete,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemFork,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemGollum,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemIssues,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemLabel,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemMember,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemMembership,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemProject,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemPublic,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemPullRequestReviewThread,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemPush,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemRelease,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemReminder,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemRepository,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemSecurityAndAnalysis,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemStar,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemStatus,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemTeam,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemWatch,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesOpenedIssuePerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppOwnerType string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppOwnerTypeBot WebhookIssuesOpenedIssuePerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesOpenedIssuePerformedViaGithubAppOwnerTypeOrganization WebhookIssuesOpenedIssuePerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesOpenedIssuePerformedViaGithubAppOwnerTypeUser WebhookIssuesOpenedIssuePerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppOwnerTypeValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppOwnerType {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppOwnerType{
		WebhookIssuesOpenedIssuePerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesOpenedIssuePerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesOpenedIssuePerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsActionsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsActionsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsActions{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsChecksRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsChecksWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsChecks{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContents{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEmailsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEmails{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsIssuesRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsIssues{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsKeysRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsKeysWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsKeys{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMembersRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMembersWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMembers{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMetadataRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjectsAdmin WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "admin"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjectsAdmin,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPackagesRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPackages{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPagesRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPagesWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPages{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsStatusesRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesOpenedIssuePerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesOpenedIssueState - State of the issue; either 'open' or 'closed'
type WebhookIssuesOpenedIssueState string

const (
	WebhookIssuesOpenedIssueStateClosed WebhookIssuesOpenedIssueState = "closed"
	WebhookIssuesOpenedIssueStateOpen WebhookIssuesOpenedIssueState = "open"
)

// PossibleWebhookIssuesOpenedIssueStateValues returns the possible values for the WebhookIssuesOpenedIssueState const type.
func PossibleWebhookIssuesOpenedIssueStateValues() []WebhookIssuesOpenedIssueState {
	return []WebhookIssuesOpenedIssueState{
		WebhookIssuesOpenedIssueStateClosed,
		WebhookIssuesOpenedIssueStateOpen,
	}
}

type WebhookIssuesOpenedIssueUserType string

const (
	WebhookIssuesOpenedIssueUserTypeBot WebhookIssuesOpenedIssueUserType = "Bot"
	WebhookIssuesOpenedIssueUserTypeOrganization WebhookIssuesOpenedIssueUserType = "Organization"
	WebhookIssuesOpenedIssueUserTypeUser WebhookIssuesOpenedIssueUserType = "User"
)

// PossibleWebhookIssuesOpenedIssueUserTypeValues returns the possible values for the WebhookIssuesOpenedIssueUserType const type.
func PossibleWebhookIssuesOpenedIssueUserTypeValues() []WebhookIssuesOpenedIssueUserType {
	return []WebhookIssuesOpenedIssueUserType{
		WebhookIssuesOpenedIssueUserTypeBot,
		WebhookIssuesOpenedIssueUserTypeOrganization,
		WebhookIssuesOpenedIssueUserTypeUser,
	}
}

type WebhookIssuesPinnedAction string

const (
	WebhookIssuesPinnedActionPinned WebhookIssuesPinnedAction = "pinned"
)

// PossibleWebhookIssuesPinnedActionValues returns the possible values for the WebhookIssuesPinnedAction const type.
func PossibleWebhookIssuesPinnedActionValues() []WebhookIssuesPinnedAction {
	return []WebhookIssuesPinnedAction{
		WebhookIssuesPinnedActionPinned,
	}
}

type WebhookIssuesPinnedIssueActiveLockReason string

const (
	WebhookIssuesPinnedIssueActiveLockReasonNull WebhookIssuesPinnedIssueActiveLockReason = "null"
	WebhookIssuesPinnedIssueActiveLockReasonOffTopic WebhookIssuesPinnedIssueActiveLockReason = "off-topic"
	WebhookIssuesPinnedIssueActiveLockReasonResolved WebhookIssuesPinnedIssueActiveLockReason = "resolved"
	WebhookIssuesPinnedIssueActiveLockReasonSpam WebhookIssuesPinnedIssueActiveLockReason = "spam"
	WebhookIssuesPinnedIssueActiveLockReasonTooHeated WebhookIssuesPinnedIssueActiveLockReason = "too heated"
)

// PossibleWebhookIssuesPinnedIssueActiveLockReasonValues returns the possible values for the WebhookIssuesPinnedIssueActiveLockReason const type.
func PossibleWebhookIssuesPinnedIssueActiveLockReasonValues() []WebhookIssuesPinnedIssueActiveLockReason {
	return []WebhookIssuesPinnedIssueActiveLockReason{
		WebhookIssuesPinnedIssueActiveLockReasonNull,
		WebhookIssuesPinnedIssueActiveLockReasonOffTopic,
		WebhookIssuesPinnedIssueActiveLockReasonResolved,
		WebhookIssuesPinnedIssueActiveLockReasonSpam,
		WebhookIssuesPinnedIssueActiveLockReasonTooHeated,
	}
}

type WebhookIssuesPinnedIssueAssigneeType string

const (
	WebhookIssuesPinnedIssueAssigneeTypeBot WebhookIssuesPinnedIssueAssigneeType = "Bot"
	WebhookIssuesPinnedIssueAssigneeTypeOrganization WebhookIssuesPinnedIssueAssigneeType = "Organization"
	WebhookIssuesPinnedIssueAssigneeTypeUser WebhookIssuesPinnedIssueAssigneeType = "User"
)

// PossibleWebhookIssuesPinnedIssueAssigneeTypeValues returns the possible values for the WebhookIssuesPinnedIssueAssigneeType const type.
func PossibleWebhookIssuesPinnedIssueAssigneeTypeValues() []WebhookIssuesPinnedIssueAssigneeType {
	return []WebhookIssuesPinnedIssueAssigneeType{
		WebhookIssuesPinnedIssueAssigneeTypeBot,
		WebhookIssuesPinnedIssueAssigneeTypeOrganization,
		WebhookIssuesPinnedIssueAssigneeTypeUser,
	}
}

type WebhookIssuesPinnedIssueAssigneesItemType string

const (
	WebhookIssuesPinnedIssueAssigneesItemTypeBot WebhookIssuesPinnedIssueAssigneesItemType = "Bot"
	WebhookIssuesPinnedIssueAssigneesItemTypeOrganization WebhookIssuesPinnedIssueAssigneesItemType = "Organization"
	WebhookIssuesPinnedIssueAssigneesItemTypeUser WebhookIssuesPinnedIssueAssigneesItemType = "User"
)

// PossibleWebhookIssuesPinnedIssueAssigneesItemTypeValues returns the possible values for the WebhookIssuesPinnedIssueAssigneesItemType const type.
func PossibleWebhookIssuesPinnedIssueAssigneesItemTypeValues() []WebhookIssuesPinnedIssueAssigneesItemType {
	return []WebhookIssuesPinnedIssueAssigneesItemType{
		WebhookIssuesPinnedIssueAssigneesItemTypeBot,
		WebhookIssuesPinnedIssueAssigneesItemTypeOrganization,
		WebhookIssuesPinnedIssueAssigneesItemTypeUser,
	}
}

// WebhookIssuesPinnedIssueAuthorAssociation - How the author is associated with the repository.
type WebhookIssuesPinnedIssueAuthorAssociation string

const (
	WebhookIssuesPinnedIssueAuthorAssociationCOLLABORATOR WebhookIssuesPinnedIssueAuthorAssociation = "COLLABORATOR"
	WebhookIssuesPinnedIssueAuthorAssociationCONTRIBUTOR WebhookIssuesPinnedIssueAuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesPinnedIssueAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesPinnedIssueAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesPinnedIssueAuthorAssociationFIRSTTIMER WebhookIssuesPinnedIssueAuthorAssociation = "FIRST_TIMER"
	WebhookIssuesPinnedIssueAuthorAssociationMANNEQUIN WebhookIssuesPinnedIssueAuthorAssociation = "MANNEQUIN"
	WebhookIssuesPinnedIssueAuthorAssociationMEMBER WebhookIssuesPinnedIssueAuthorAssociation = "MEMBER"
	WebhookIssuesPinnedIssueAuthorAssociationNONE WebhookIssuesPinnedIssueAuthorAssociation = "NONE"
	WebhookIssuesPinnedIssueAuthorAssociationOWNER WebhookIssuesPinnedIssueAuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesPinnedIssueAuthorAssociationValues returns the possible values for the WebhookIssuesPinnedIssueAuthorAssociation const type.
func PossibleWebhookIssuesPinnedIssueAuthorAssociationValues() []WebhookIssuesPinnedIssueAuthorAssociation {
	return []WebhookIssuesPinnedIssueAuthorAssociation{
		WebhookIssuesPinnedIssueAuthorAssociationCOLLABORATOR,
		WebhookIssuesPinnedIssueAuthorAssociationCONTRIBUTOR,
		WebhookIssuesPinnedIssueAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesPinnedIssueAuthorAssociationFIRSTTIMER,
		WebhookIssuesPinnedIssueAuthorAssociationMANNEQUIN,
		WebhookIssuesPinnedIssueAuthorAssociationMEMBER,
		WebhookIssuesPinnedIssueAuthorAssociationNONE,
		WebhookIssuesPinnedIssueAuthorAssociationOWNER,
	}
}

type WebhookIssuesPinnedIssueMilestoneCreatorType string

const (
	WebhookIssuesPinnedIssueMilestoneCreatorTypeBot WebhookIssuesPinnedIssueMilestoneCreatorType = "Bot"
	WebhookIssuesPinnedIssueMilestoneCreatorTypeOrganization WebhookIssuesPinnedIssueMilestoneCreatorType = "Organization"
	WebhookIssuesPinnedIssueMilestoneCreatorTypeUser WebhookIssuesPinnedIssueMilestoneCreatorType = "User"
)

// PossibleWebhookIssuesPinnedIssueMilestoneCreatorTypeValues returns the possible values for the WebhookIssuesPinnedIssueMilestoneCreatorType const type.
func PossibleWebhookIssuesPinnedIssueMilestoneCreatorTypeValues() []WebhookIssuesPinnedIssueMilestoneCreatorType {
	return []WebhookIssuesPinnedIssueMilestoneCreatorType{
		WebhookIssuesPinnedIssueMilestoneCreatorTypeBot,
		WebhookIssuesPinnedIssueMilestoneCreatorTypeOrganization,
		WebhookIssuesPinnedIssueMilestoneCreatorTypeUser,
	}
}

// WebhookIssuesPinnedIssueMilestoneState - The state of the milestone.
type WebhookIssuesPinnedIssueMilestoneState string

const (
	WebhookIssuesPinnedIssueMilestoneStateClosed WebhookIssuesPinnedIssueMilestoneState = "closed"
	WebhookIssuesPinnedIssueMilestoneStateOpen WebhookIssuesPinnedIssueMilestoneState = "open"
)

// PossibleWebhookIssuesPinnedIssueMilestoneStateValues returns the possible values for the WebhookIssuesPinnedIssueMilestoneState const type.
func PossibleWebhookIssuesPinnedIssueMilestoneStateValues() []WebhookIssuesPinnedIssueMilestoneState {
	return []WebhookIssuesPinnedIssueMilestoneState{
		WebhookIssuesPinnedIssueMilestoneStateClosed,
		WebhookIssuesPinnedIssueMilestoneStateOpen,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemCheckRun WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemCheckSuite WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemCommitComment WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemContentReference WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemCreate WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "create"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemDelete WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemDeployKey WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemDeployment WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemDiscussion WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemFork WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemGollum WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemIssueComment WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemIssues WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemLabel WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "label"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemMember WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "member"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemMembership WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemMilestone WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemOrgBlock WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemOrganization WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemPageBuild WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemProject WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "project"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemProjectCard WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemProjectColumn WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemPublic WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "public"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemPullRequest WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemPush WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "push"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemRelease WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "release"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemRepository WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemStar WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "star"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemStatus WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "status"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemTeam WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "team"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemTeamAdd WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemWatch WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItem{
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemCreate,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemDelete,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemFork,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemGollum,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemIssues,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemLabel,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemMember,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemMembership,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemProject,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemPublic,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemPush,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemRelease,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemRepository,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemStar,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemStatus,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemTeam,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemWatch,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesPinnedIssuePerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppOwnerType string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppOwnerTypeBot WebhookIssuesPinnedIssuePerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesPinnedIssuePerformedViaGithubAppOwnerTypeOrganization WebhookIssuesPinnedIssuePerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesPinnedIssuePerformedViaGithubAppOwnerTypeUser WebhookIssuesPinnedIssuePerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppOwnerTypeValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppOwnerType {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppOwnerType{
		WebhookIssuesPinnedIssuePerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesPinnedIssuePerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesPinnedIssuePerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsActionsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsActionsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsActions{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsChecksRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsChecksWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsChecks{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContents{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEmailsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEmails{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsIssuesRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsIssues{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsKeysRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsKeysWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsKeys{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMembersRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMembersWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMembers{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMetadataRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPackagesRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPackages{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPagesRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPagesWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPages{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsStatusesRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesPinnedIssuePerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesPinnedIssueState - State of the issue; either 'open' or 'closed'
type WebhookIssuesPinnedIssueState string

const (
	WebhookIssuesPinnedIssueStateClosed WebhookIssuesPinnedIssueState = "closed"
	WebhookIssuesPinnedIssueStateOpen WebhookIssuesPinnedIssueState = "open"
)

// PossibleWebhookIssuesPinnedIssueStateValues returns the possible values for the WebhookIssuesPinnedIssueState const type.
func PossibleWebhookIssuesPinnedIssueStateValues() []WebhookIssuesPinnedIssueState {
	return []WebhookIssuesPinnedIssueState{
		WebhookIssuesPinnedIssueStateClosed,
		WebhookIssuesPinnedIssueStateOpen,
	}
}

type WebhookIssuesPinnedIssueUserType string

const (
	WebhookIssuesPinnedIssueUserTypeBot WebhookIssuesPinnedIssueUserType = "Bot"
	WebhookIssuesPinnedIssueUserTypeOrganization WebhookIssuesPinnedIssueUserType = "Organization"
	WebhookIssuesPinnedIssueUserTypeUser WebhookIssuesPinnedIssueUserType = "User"
)

// PossibleWebhookIssuesPinnedIssueUserTypeValues returns the possible values for the WebhookIssuesPinnedIssueUserType const type.
func PossibleWebhookIssuesPinnedIssueUserTypeValues() []WebhookIssuesPinnedIssueUserType {
	return []WebhookIssuesPinnedIssueUserType{
		WebhookIssuesPinnedIssueUserTypeBot,
		WebhookIssuesPinnedIssueUserTypeOrganization,
		WebhookIssuesPinnedIssueUserTypeUser,
	}
}

type WebhookIssuesReopenedAction string

const (
	WebhookIssuesReopenedActionReopened WebhookIssuesReopenedAction = "reopened"
)

// PossibleWebhookIssuesReopenedActionValues returns the possible values for the WebhookIssuesReopenedAction const type.
func PossibleWebhookIssuesReopenedActionValues() []WebhookIssuesReopenedAction {
	return []WebhookIssuesReopenedAction{
		WebhookIssuesReopenedActionReopened,
	}
}

type WebhookIssuesReopenedIssue0ActiveLockReason string

const (
	WebhookIssuesReopenedIssue0ActiveLockReasonNull WebhookIssuesReopenedIssue0ActiveLockReason = "null"
	WebhookIssuesReopenedIssue0ActiveLockReasonOffTopic WebhookIssuesReopenedIssue0ActiveLockReason = "off-topic"
	WebhookIssuesReopenedIssue0ActiveLockReasonResolved WebhookIssuesReopenedIssue0ActiveLockReason = "resolved"
	WebhookIssuesReopenedIssue0ActiveLockReasonSpam WebhookIssuesReopenedIssue0ActiveLockReason = "spam"
	WebhookIssuesReopenedIssue0ActiveLockReasonTooHeated WebhookIssuesReopenedIssue0ActiveLockReason = "too heated"
)

// PossibleWebhookIssuesReopenedIssue0ActiveLockReasonValues returns the possible values for the WebhookIssuesReopenedIssue0ActiveLockReason const type.
func PossibleWebhookIssuesReopenedIssue0ActiveLockReasonValues() []WebhookIssuesReopenedIssue0ActiveLockReason {
	return []WebhookIssuesReopenedIssue0ActiveLockReason{
		WebhookIssuesReopenedIssue0ActiveLockReasonNull,
		WebhookIssuesReopenedIssue0ActiveLockReasonOffTopic,
		WebhookIssuesReopenedIssue0ActiveLockReasonResolved,
		WebhookIssuesReopenedIssue0ActiveLockReasonSpam,
		WebhookIssuesReopenedIssue0ActiveLockReasonTooHeated,
	}
}

type WebhookIssuesReopenedIssue0AssigneeType string

const (
	WebhookIssuesReopenedIssue0AssigneeTypeBot WebhookIssuesReopenedIssue0AssigneeType = "Bot"
	WebhookIssuesReopenedIssue0AssigneeTypeOrganization WebhookIssuesReopenedIssue0AssigneeType = "Organization"
	WebhookIssuesReopenedIssue0AssigneeTypeUser WebhookIssuesReopenedIssue0AssigneeType = "User"
)

// PossibleWebhookIssuesReopenedIssue0AssigneeTypeValues returns the possible values for the WebhookIssuesReopenedIssue0AssigneeType const type.
func PossibleWebhookIssuesReopenedIssue0AssigneeTypeValues() []WebhookIssuesReopenedIssue0AssigneeType {
	return []WebhookIssuesReopenedIssue0AssigneeType{
		WebhookIssuesReopenedIssue0AssigneeTypeBot,
		WebhookIssuesReopenedIssue0AssigneeTypeOrganization,
		WebhookIssuesReopenedIssue0AssigneeTypeUser,
	}
}

// WebhookIssuesReopenedIssue0AuthorAssociation - How the author is associated with the repository.
type WebhookIssuesReopenedIssue0AuthorAssociation string

const (
	WebhookIssuesReopenedIssue0AuthorAssociationCOLLABORATOR WebhookIssuesReopenedIssue0AuthorAssociation = "COLLABORATOR"
	WebhookIssuesReopenedIssue0AuthorAssociationCONTRIBUTOR WebhookIssuesReopenedIssue0AuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesReopenedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesReopenedIssue0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesReopenedIssue0AuthorAssociationFIRSTTIMER WebhookIssuesReopenedIssue0AuthorAssociation = "FIRST_TIMER"
	WebhookIssuesReopenedIssue0AuthorAssociationMANNEQUIN WebhookIssuesReopenedIssue0AuthorAssociation = "MANNEQUIN"
	WebhookIssuesReopenedIssue0AuthorAssociationMEMBER WebhookIssuesReopenedIssue0AuthorAssociation = "MEMBER"
	WebhookIssuesReopenedIssue0AuthorAssociationNONE WebhookIssuesReopenedIssue0AuthorAssociation = "NONE"
	WebhookIssuesReopenedIssue0AuthorAssociationOWNER WebhookIssuesReopenedIssue0AuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesReopenedIssue0AuthorAssociationValues returns the possible values for the WebhookIssuesReopenedIssue0AuthorAssociation const type.
func PossibleWebhookIssuesReopenedIssue0AuthorAssociationValues() []WebhookIssuesReopenedIssue0AuthorAssociation {
	return []WebhookIssuesReopenedIssue0AuthorAssociation{
		WebhookIssuesReopenedIssue0AuthorAssociationCOLLABORATOR,
		WebhookIssuesReopenedIssue0AuthorAssociationCONTRIBUTOR,
		WebhookIssuesReopenedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesReopenedIssue0AuthorAssociationFIRSTTIMER,
		WebhookIssuesReopenedIssue0AuthorAssociationMANNEQUIN,
		WebhookIssuesReopenedIssue0AuthorAssociationMEMBER,
		WebhookIssuesReopenedIssue0AuthorAssociationNONE,
		WebhookIssuesReopenedIssue0AuthorAssociationOWNER,
	}
}

type WebhookIssuesReopenedIssue0MilestoneCreatorType string

const (
	WebhookIssuesReopenedIssue0MilestoneCreatorTypeBot WebhookIssuesReopenedIssue0MilestoneCreatorType = "Bot"
	WebhookIssuesReopenedIssue0MilestoneCreatorTypeMannequin WebhookIssuesReopenedIssue0MilestoneCreatorType = "Mannequin"
	WebhookIssuesReopenedIssue0MilestoneCreatorTypeOrganization WebhookIssuesReopenedIssue0MilestoneCreatorType = "Organization"
	WebhookIssuesReopenedIssue0MilestoneCreatorTypeUser WebhookIssuesReopenedIssue0MilestoneCreatorType = "User"
)

// PossibleWebhookIssuesReopenedIssue0MilestoneCreatorTypeValues returns the possible values for the WebhookIssuesReopenedIssue0MilestoneCreatorType const type.
func PossibleWebhookIssuesReopenedIssue0MilestoneCreatorTypeValues() []WebhookIssuesReopenedIssue0MilestoneCreatorType {
	return []WebhookIssuesReopenedIssue0MilestoneCreatorType{
		WebhookIssuesReopenedIssue0MilestoneCreatorTypeBot,
		WebhookIssuesReopenedIssue0MilestoneCreatorTypeMannequin,
		WebhookIssuesReopenedIssue0MilestoneCreatorTypeOrganization,
		WebhookIssuesReopenedIssue0MilestoneCreatorTypeUser,
	}
}

// WebhookIssuesReopenedIssue0MilestoneState - The state of the milestone.
type WebhookIssuesReopenedIssue0MilestoneState string

const (
	WebhookIssuesReopenedIssue0MilestoneStateClosed WebhookIssuesReopenedIssue0MilestoneState = "closed"
	WebhookIssuesReopenedIssue0MilestoneStateOpen WebhookIssuesReopenedIssue0MilestoneState = "open"
)

// PossibleWebhookIssuesReopenedIssue0MilestoneStateValues returns the possible values for the WebhookIssuesReopenedIssue0MilestoneState const type.
func PossibleWebhookIssuesReopenedIssue0MilestoneStateValues() []WebhookIssuesReopenedIssue0MilestoneState {
	return []WebhookIssuesReopenedIssue0MilestoneState{
		WebhookIssuesReopenedIssue0MilestoneStateClosed,
		WebhookIssuesReopenedIssue0MilestoneStateOpen,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemCheckRun WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemCheckSuite WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemCommitComment WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemContentReference WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemCreate WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "create"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemDelete WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemDeployKey WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemDeployment WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemDiscussion WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemFork WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemGollum WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemIssueComment WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemIssues WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemLabel WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "label"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemMember WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "member"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemMembership WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemMilestone WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemOrgBlock WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemOrganization WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemPageBuild WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemProject WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "project"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemProjectCard WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemProjectColumn WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemPublic WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "public"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemPullRequest WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemPullRequestReviewThread WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "pull_request_review_thread"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemPush WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "push"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemRelease WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "release"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemReminder WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "reminder"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemRepository WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemStar WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "star"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemStatus WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "status"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemTeam WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "team"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemTeamAdd WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemWatch WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItem{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemCreate,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemDelete,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemFork,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemGollum,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemIssues,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemLabel,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemMember,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemMembership,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemProject,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemPublic,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemPullRequestReviewThread,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemPush,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemRelease,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemReminder,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemRepository,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemStar,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemStatus,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemTeam,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemWatch,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerType string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerTypeBot WebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerTypeOrganization WebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerTypeUser WebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerTypeValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerType {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerType{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsActionsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsActionsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsActions{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsChecksRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsChecksWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsChecks{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContents{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEmailsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEmails{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsIssuesRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsIssues{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsKeysRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsKeysWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsKeys{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMembersRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMembersWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMembers{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMetadataRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsAdmin WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "admin"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsAdmin,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPackagesRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPackages{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPagesRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPagesWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPages{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsAdmin WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "admin"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsAdmin,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsStatusesRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesReopenedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesReopenedIssue0State - State of the issue; either 'open' or 'closed'
type WebhookIssuesReopenedIssue0State string

const (
	WebhookIssuesReopenedIssue0StateClosed WebhookIssuesReopenedIssue0State = "closed"
	WebhookIssuesReopenedIssue0StateOpen WebhookIssuesReopenedIssue0State = "open"
)

// PossibleWebhookIssuesReopenedIssue0StateValues returns the possible values for the WebhookIssuesReopenedIssue0State const type.
func PossibleWebhookIssuesReopenedIssue0StateValues() []WebhookIssuesReopenedIssue0State {
	return []WebhookIssuesReopenedIssue0State{
		WebhookIssuesReopenedIssue0StateClosed,
		WebhookIssuesReopenedIssue0StateOpen,
	}
}

type WebhookIssuesReopenedIssue0UserType string

const (
	WebhookIssuesReopenedIssue0UserTypeBot WebhookIssuesReopenedIssue0UserType = "Bot"
	WebhookIssuesReopenedIssue0UserTypeMannequin WebhookIssuesReopenedIssue0UserType = "Mannequin"
	WebhookIssuesReopenedIssue0UserTypeOrganization WebhookIssuesReopenedIssue0UserType = "Organization"
	WebhookIssuesReopenedIssue0UserTypeUser WebhookIssuesReopenedIssue0UserType = "User"
)

// PossibleWebhookIssuesReopenedIssue0UserTypeValues returns the possible values for the WebhookIssuesReopenedIssue0UserType const type.
func PossibleWebhookIssuesReopenedIssue0UserTypeValues() []WebhookIssuesReopenedIssue0UserType {
	return []WebhookIssuesReopenedIssue0UserType{
		WebhookIssuesReopenedIssue0UserTypeBot,
		WebhookIssuesReopenedIssue0UserTypeMannequin,
		WebhookIssuesReopenedIssue0UserTypeOrganization,
		WebhookIssuesReopenedIssue0UserTypeUser,
	}
}

type WebhookIssuesReopenedIssue1State string

const (
	WebhookIssuesReopenedIssue1StateClosed WebhookIssuesReopenedIssue1State = "closed"
	WebhookIssuesReopenedIssue1StateOpen WebhookIssuesReopenedIssue1State = "open"
)

// PossibleWebhookIssuesReopenedIssue1StateValues returns the possible values for the WebhookIssuesReopenedIssue1State const type.
func PossibleWebhookIssuesReopenedIssue1StateValues() []WebhookIssuesReopenedIssue1State {
	return []WebhookIssuesReopenedIssue1State{
		WebhookIssuesReopenedIssue1StateClosed,
		WebhookIssuesReopenedIssue1StateOpen,
	}
}

type WebhookIssuesReopenedIssueOneOf0AssigneesItemType string

const (
	WebhookIssuesReopenedIssueOneOf0AssigneesItemTypeBot WebhookIssuesReopenedIssueOneOf0AssigneesItemType = "Bot"
	WebhookIssuesReopenedIssueOneOf0AssigneesItemTypeMannequin WebhookIssuesReopenedIssueOneOf0AssigneesItemType = "Mannequin"
	WebhookIssuesReopenedIssueOneOf0AssigneesItemTypeOrganization WebhookIssuesReopenedIssueOneOf0AssigneesItemType = "Organization"
	WebhookIssuesReopenedIssueOneOf0AssigneesItemTypeUser WebhookIssuesReopenedIssueOneOf0AssigneesItemType = "User"
)

// PossibleWebhookIssuesReopenedIssueOneOf0AssigneesItemTypeValues returns the possible values for the WebhookIssuesReopenedIssueOneOf0AssigneesItemType const type.
func PossibleWebhookIssuesReopenedIssueOneOf0AssigneesItemTypeValues() []WebhookIssuesReopenedIssueOneOf0AssigneesItemType {
	return []WebhookIssuesReopenedIssueOneOf0AssigneesItemType{
		WebhookIssuesReopenedIssueOneOf0AssigneesItemTypeBot,
		WebhookIssuesReopenedIssueOneOf0AssigneesItemTypeMannequin,
		WebhookIssuesReopenedIssueOneOf0AssigneesItemTypeOrganization,
		WebhookIssuesReopenedIssueOneOf0AssigneesItemTypeUser,
	}
}

type WebhookIssuesTransferredAction string

const (
	WebhookIssuesTransferredActionTransferred WebhookIssuesTransferredAction = "transferred"
)

// PossibleWebhookIssuesTransferredActionValues returns the possible values for the WebhookIssuesTransferredAction const type.
func PossibleWebhookIssuesTransferredActionValues() []WebhookIssuesTransferredAction {
	return []WebhookIssuesTransferredAction{
		WebhookIssuesTransferredActionTransferred,
	}
}

type WebhookIssuesTransferredChangesNewIssueActiveLockReason string

const (
	WebhookIssuesTransferredChangesNewIssueActiveLockReasonNull WebhookIssuesTransferredChangesNewIssueActiveLockReason = "null"
	WebhookIssuesTransferredChangesNewIssueActiveLockReasonOffTopic WebhookIssuesTransferredChangesNewIssueActiveLockReason = "off-topic"
	WebhookIssuesTransferredChangesNewIssueActiveLockReasonResolved WebhookIssuesTransferredChangesNewIssueActiveLockReason = "resolved"
	WebhookIssuesTransferredChangesNewIssueActiveLockReasonSpam WebhookIssuesTransferredChangesNewIssueActiveLockReason = "spam"
	WebhookIssuesTransferredChangesNewIssueActiveLockReasonTooHeated WebhookIssuesTransferredChangesNewIssueActiveLockReason = "too heated"
)

// PossibleWebhookIssuesTransferredChangesNewIssueActiveLockReasonValues returns the possible values for the WebhookIssuesTransferredChangesNewIssueActiveLockReason const type.
func PossibleWebhookIssuesTransferredChangesNewIssueActiveLockReasonValues() []WebhookIssuesTransferredChangesNewIssueActiveLockReason {
	return []WebhookIssuesTransferredChangesNewIssueActiveLockReason{
		WebhookIssuesTransferredChangesNewIssueActiveLockReasonNull,
		WebhookIssuesTransferredChangesNewIssueActiveLockReasonOffTopic,
		WebhookIssuesTransferredChangesNewIssueActiveLockReasonResolved,
		WebhookIssuesTransferredChangesNewIssueActiveLockReasonSpam,
		WebhookIssuesTransferredChangesNewIssueActiveLockReasonTooHeated,
	}
}

type WebhookIssuesTransferredChangesNewIssueAssigneeType string

const (
	WebhookIssuesTransferredChangesNewIssueAssigneeTypeBot WebhookIssuesTransferredChangesNewIssueAssigneeType = "Bot"
	WebhookIssuesTransferredChangesNewIssueAssigneeTypeOrganization WebhookIssuesTransferredChangesNewIssueAssigneeType = "Organization"
	WebhookIssuesTransferredChangesNewIssueAssigneeTypeUser WebhookIssuesTransferredChangesNewIssueAssigneeType = "User"
)

// PossibleWebhookIssuesTransferredChangesNewIssueAssigneeTypeValues returns the possible values for the WebhookIssuesTransferredChangesNewIssueAssigneeType const type.
func PossibleWebhookIssuesTransferredChangesNewIssueAssigneeTypeValues() []WebhookIssuesTransferredChangesNewIssueAssigneeType {
	return []WebhookIssuesTransferredChangesNewIssueAssigneeType{
		WebhookIssuesTransferredChangesNewIssueAssigneeTypeBot,
		WebhookIssuesTransferredChangesNewIssueAssigneeTypeOrganization,
		WebhookIssuesTransferredChangesNewIssueAssigneeTypeUser,
	}
}

type WebhookIssuesTransferredChangesNewIssueAssigneesItemType string

const (
	WebhookIssuesTransferredChangesNewIssueAssigneesItemTypeBot WebhookIssuesTransferredChangesNewIssueAssigneesItemType = "Bot"
	WebhookIssuesTransferredChangesNewIssueAssigneesItemTypeOrganization WebhookIssuesTransferredChangesNewIssueAssigneesItemType = "Organization"
	WebhookIssuesTransferredChangesNewIssueAssigneesItemTypeUser WebhookIssuesTransferredChangesNewIssueAssigneesItemType = "User"
)

// PossibleWebhookIssuesTransferredChangesNewIssueAssigneesItemTypeValues returns the possible values for the WebhookIssuesTransferredChangesNewIssueAssigneesItemType const type.
func PossibleWebhookIssuesTransferredChangesNewIssueAssigneesItemTypeValues() []WebhookIssuesTransferredChangesNewIssueAssigneesItemType {
	return []WebhookIssuesTransferredChangesNewIssueAssigneesItemType{
		WebhookIssuesTransferredChangesNewIssueAssigneesItemTypeBot,
		WebhookIssuesTransferredChangesNewIssueAssigneesItemTypeOrganization,
		WebhookIssuesTransferredChangesNewIssueAssigneesItemTypeUser,
	}
}

// WebhookIssuesTransferredChangesNewIssueAuthorAssociation - How the author is associated with the repository.
type WebhookIssuesTransferredChangesNewIssueAuthorAssociation string

const (
	WebhookIssuesTransferredChangesNewIssueAuthorAssociationCOLLABORATOR WebhookIssuesTransferredChangesNewIssueAuthorAssociation = "COLLABORATOR"
	WebhookIssuesTransferredChangesNewIssueAuthorAssociationCONTRIBUTOR WebhookIssuesTransferredChangesNewIssueAuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesTransferredChangesNewIssueAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesTransferredChangesNewIssueAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesTransferredChangesNewIssueAuthorAssociationFIRSTTIMER WebhookIssuesTransferredChangesNewIssueAuthorAssociation = "FIRST_TIMER"
	WebhookIssuesTransferredChangesNewIssueAuthorAssociationMANNEQUIN WebhookIssuesTransferredChangesNewIssueAuthorAssociation = "MANNEQUIN"
	WebhookIssuesTransferredChangesNewIssueAuthorAssociationMEMBER WebhookIssuesTransferredChangesNewIssueAuthorAssociation = "MEMBER"
	WebhookIssuesTransferredChangesNewIssueAuthorAssociationNONE WebhookIssuesTransferredChangesNewIssueAuthorAssociation = "NONE"
	WebhookIssuesTransferredChangesNewIssueAuthorAssociationOWNER WebhookIssuesTransferredChangesNewIssueAuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesTransferredChangesNewIssueAuthorAssociationValues returns the possible values for the WebhookIssuesTransferredChangesNewIssueAuthorAssociation const type.
func PossibleWebhookIssuesTransferredChangesNewIssueAuthorAssociationValues() []WebhookIssuesTransferredChangesNewIssueAuthorAssociation {
	return []WebhookIssuesTransferredChangesNewIssueAuthorAssociation{
		WebhookIssuesTransferredChangesNewIssueAuthorAssociationCOLLABORATOR,
		WebhookIssuesTransferredChangesNewIssueAuthorAssociationCONTRIBUTOR,
		WebhookIssuesTransferredChangesNewIssueAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesTransferredChangesNewIssueAuthorAssociationFIRSTTIMER,
		WebhookIssuesTransferredChangesNewIssueAuthorAssociationMANNEQUIN,
		WebhookIssuesTransferredChangesNewIssueAuthorAssociationMEMBER,
		WebhookIssuesTransferredChangesNewIssueAuthorAssociationNONE,
		WebhookIssuesTransferredChangesNewIssueAuthorAssociationOWNER,
	}
}

type WebhookIssuesTransferredChangesNewIssueMilestoneCreatorType string

const (
	WebhookIssuesTransferredChangesNewIssueMilestoneCreatorTypeBot WebhookIssuesTransferredChangesNewIssueMilestoneCreatorType = "Bot"
	WebhookIssuesTransferredChangesNewIssueMilestoneCreatorTypeOrganization WebhookIssuesTransferredChangesNewIssueMilestoneCreatorType = "Organization"
	WebhookIssuesTransferredChangesNewIssueMilestoneCreatorTypeUser WebhookIssuesTransferredChangesNewIssueMilestoneCreatorType = "User"
)

// PossibleWebhookIssuesTransferredChangesNewIssueMilestoneCreatorTypeValues returns the possible values for the WebhookIssuesTransferredChangesNewIssueMilestoneCreatorType const type.
func PossibleWebhookIssuesTransferredChangesNewIssueMilestoneCreatorTypeValues() []WebhookIssuesTransferredChangesNewIssueMilestoneCreatorType {
	return []WebhookIssuesTransferredChangesNewIssueMilestoneCreatorType{
		WebhookIssuesTransferredChangesNewIssueMilestoneCreatorTypeBot,
		WebhookIssuesTransferredChangesNewIssueMilestoneCreatorTypeOrganization,
		WebhookIssuesTransferredChangesNewIssueMilestoneCreatorTypeUser,
	}
}

// WebhookIssuesTransferredChangesNewIssueMilestoneState - The state of the milestone.
type WebhookIssuesTransferredChangesNewIssueMilestoneState string

const (
	WebhookIssuesTransferredChangesNewIssueMilestoneStateClosed WebhookIssuesTransferredChangesNewIssueMilestoneState = "closed"
	WebhookIssuesTransferredChangesNewIssueMilestoneStateOpen WebhookIssuesTransferredChangesNewIssueMilestoneState = "open"
)

// PossibleWebhookIssuesTransferredChangesNewIssueMilestoneStateValues returns the possible values for the WebhookIssuesTransferredChangesNewIssueMilestoneState const type.
func PossibleWebhookIssuesTransferredChangesNewIssueMilestoneStateValues() []WebhookIssuesTransferredChangesNewIssueMilestoneState {
	return []WebhookIssuesTransferredChangesNewIssueMilestoneState{
		WebhookIssuesTransferredChangesNewIssueMilestoneStateClosed,
		WebhookIssuesTransferredChangesNewIssueMilestoneStateOpen,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemCheckRun WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemCheckSuite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemCommitComment WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemContentReference WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemCreate WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "create"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemDelete WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemDeployKey WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemDeployment WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemDiscussion WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemFork WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemGollum WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemIssueComment WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemIssues WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemLabel WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "label"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemMember WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "member"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemMembership WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemMilestone WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemOrgBlock WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemOrganization WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemPageBuild WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemProject WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "project"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemProjectCard WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemProjectColumn WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemPublic WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "public"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemPullRequest WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemPush WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "push"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemRelease WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "release"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemRepository WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemStar WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "star"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemStatus WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "status"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemTeam WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "team"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemTeamAdd WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemWatch WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItem{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemCreate,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemDelete,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemFork,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemGollum,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemIssues,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemLabel,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemMember,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemMembership,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemProject,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemPublic,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemPush,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemRelease,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemRepository,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemStar,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemStatus,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemTeam,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemWatch,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerType string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerTypeBot WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerTypeOrganization WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerTypeUser WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerTypeValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerType {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerType{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsActionsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsActionsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsActions{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsChecksRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsChecksWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsChecks{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContents{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEmailsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEmails{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsIssuesRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsIssues{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsKeysRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsKeysWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsKeys{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMembersRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMembersWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMembers{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMetadataRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPackagesRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPackages{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPagesRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPagesWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPages{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsStatusesRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesTransferredChangesNewIssuePerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesTransferredChangesNewIssueState - State of the issue; either 'open' or 'closed'
type WebhookIssuesTransferredChangesNewIssueState string

const (
	WebhookIssuesTransferredChangesNewIssueStateClosed WebhookIssuesTransferredChangesNewIssueState = "closed"
	WebhookIssuesTransferredChangesNewIssueStateOpen WebhookIssuesTransferredChangesNewIssueState = "open"
)

// PossibleWebhookIssuesTransferredChangesNewIssueStateValues returns the possible values for the WebhookIssuesTransferredChangesNewIssueState const type.
func PossibleWebhookIssuesTransferredChangesNewIssueStateValues() []WebhookIssuesTransferredChangesNewIssueState {
	return []WebhookIssuesTransferredChangesNewIssueState{
		WebhookIssuesTransferredChangesNewIssueStateClosed,
		WebhookIssuesTransferredChangesNewIssueStateOpen,
	}
}

type WebhookIssuesTransferredChangesNewIssueUserType string

const (
	WebhookIssuesTransferredChangesNewIssueUserTypeBot WebhookIssuesTransferredChangesNewIssueUserType = "Bot"
	WebhookIssuesTransferredChangesNewIssueUserTypeOrganization WebhookIssuesTransferredChangesNewIssueUserType = "Organization"
	WebhookIssuesTransferredChangesNewIssueUserTypeUser WebhookIssuesTransferredChangesNewIssueUserType = "User"
)

// PossibleWebhookIssuesTransferredChangesNewIssueUserTypeValues returns the possible values for the WebhookIssuesTransferredChangesNewIssueUserType const type.
func PossibleWebhookIssuesTransferredChangesNewIssueUserTypeValues() []WebhookIssuesTransferredChangesNewIssueUserType {
	return []WebhookIssuesTransferredChangesNewIssueUserType{
		WebhookIssuesTransferredChangesNewIssueUserTypeBot,
		WebhookIssuesTransferredChangesNewIssueUserTypeOrganization,
		WebhookIssuesTransferredChangesNewIssueUserTypeUser,
	}
}

type WebhookIssuesTransferredChangesNewRepositoryOwnerType string

const (
	WebhookIssuesTransferredChangesNewRepositoryOwnerTypeBot WebhookIssuesTransferredChangesNewRepositoryOwnerType = "Bot"
	WebhookIssuesTransferredChangesNewRepositoryOwnerTypeOrganization WebhookIssuesTransferredChangesNewRepositoryOwnerType = "Organization"
	WebhookIssuesTransferredChangesNewRepositoryOwnerTypeUser WebhookIssuesTransferredChangesNewRepositoryOwnerType = "User"
)

// PossibleWebhookIssuesTransferredChangesNewRepositoryOwnerTypeValues returns the possible values for the WebhookIssuesTransferredChangesNewRepositoryOwnerType const type.
func PossibleWebhookIssuesTransferredChangesNewRepositoryOwnerTypeValues() []WebhookIssuesTransferredChangesNewRepositoryOwnerType {
	return []WebhookIssuesTransferredChangesNewRepositoryOwnerType{
		WebhookIssuesTransferredChangesNewRepositoryOwnerTypeBot,
		WebhookIssuesTransferredChangesNewRepositoryOwnerTypeOrganization,
		WebhookIssuesTransferredChangesNewRepositoryOwnerTypeUser,
	}
}

type WebhookIssuesTransferredChangesNewRepositoryVisibility string

const (
	WebhookIssuesTransferredChangesNewRepositoryVisibilityInternal WebhookIssuesTransferredChangesNewRepositoryVisibility = "internal"
	WebhookIssuesTransferredChangesNewRepositoryVisibilityPrivate WebhookIssuesTransferredChangesNewRepositoryVisibility = "private"
	WebhookIssuesTransferredChangesNewRepositoryVisibilityPublic WebhookIssuesTransferredChangesNewRepositoryVisibility = "public"
)

// PossibleWebhookIssuesTransferredChangesNewRepositoryVisibilityValues returns the possible values for the WebhookIssuesTransferredChangesNewRepositoryVisibility const type.
func PossibleWebhookIssuesTransferredChangesNewRepositoryVisibilityValues() []WebhookIssuesTransferredChangesNewRepositoryVisibility {
	return []WebhookIssuesTransferredChangesNewRepositoryVisibility{
		WebhookIssuesTransferredChangesNewRepositoryVisibilityInternal,
		WebhookIssuesTransferredChangesNewRepositoryVisibilityPrivate,
		WebhookIssuesTransferredChangesNewRepositoryVisibilityPublic,
	}
}

type WebhookIssuesTransferredIssueActiveLockReason string

const (
	WebhookIssuesTransferredIssueActiveLockReasonNull WebhookIssuesTransferredIssueActiveLockReason = "null"
	WebhookIssuesTransferredIssueActiveLockReasonOffTopic WebhookIssuesTransferredIssueActiveLockReason = "off-topic"
	WebhookIssuesTransferredIssueActiveLockReasonResolved WebhookIssuesTransferredIssueActiveLockReason = "resolved"
	WebhookIssuesTransferredIssueActiveLockReasonSpam WebhookIssuesTransferredIssueActiveLockReason = "spam"
	WebhookIssuesTransferredIssueActiveLockReasonTooHeated WebhookIssuesTransferredIssueActiveLockReason = "too heated"
)

// PossibleWebhookIssuesTransferredIssueActiveLockReasonValues returns the possible values for the WebhookIssuesTransferredIssueActiveLockReason const type.
func PossibleWebhookIssuesTransferredIssueActiveLockReasonValues() []WebhookIssuesTransferredIssueActiveLockReason {
	return []WebhookIssuesTransferredIssueActiveLockReason{
		WebhookIssuesTransferredIssueActiveLockReasonNull,
		WebhookIssuesTransferredIssueActiveLockReasonOffTopic,
		WebhookIssuesTransferredIssueActiveLockReasonResolved,
		WebhookIssuesTransferredIssueActiveLockReasonSpam,
		WebhookIssuesTransferredIssueActiveLockReasonTooHeated,
	}
}

type WebhookIssuesTransferredIssueAssigneeType string

const (
	WebhookIssuesTransferredIssueAssigneeTypeBot WebhookIssuesTransferredIssueAssigneeType = "Bot"
	WebhookIssuesTransferredIssueAssigneeTypeOrganization WebhookIssuesTransferredIssueAssigneeType = "Organization"
	WebhookIssuesTransferredIssueAssigneeTypeUser WebhookIssuesTransferredIssueAssigneeType = "User"
)

// PossibleWebhookIssuesTransferredIssueAssigneeTypeValues returns the possible values for the WebhookIssuesTransferredIssueAssigneeType const type.
func PossibleWebhookIssuesTransferredIssueAssigneeTypeValues() []WebhookIssuesTransferredIssueAssigneeType {
	return []WebhookIssuesTransferredIssueAssigneeType{
		WebhookIssuesTransferredIssueAssigneeTypeBot,
		WebhookIssuesTransferredIssueAssigneeTypeOrganization,
		WebhookIssuesTransferredIssueAssigneeTypeUser,
	}
}

type WebhookIssuesTransferredIssueAssigneesItemType string

const (
	WebhookIssuesTransferredIssueAssigneesItemTypeBot WebhookIssuesTransferredIssueAssigneesItemType = "Bot"
	WebhookIssuesTransferredIssueAssigneesItemTypeOrganization WebhookIssuesTransferredIssueAssigneesItemType = "Organization"
	WebhookIssuesTransferredIssueAssigneesItemTypeUser WebhookIssuesTransferredIssueAssigneesItemType = "User"
)

// PossibleWebhookIssuesTransferredIssueAssigneesItemTypeValues returns the possible values for the WebhookIssuesTransferredIssueAssigneesItemType const type.
func PossibleWebhookIssuesTransferredIssueAssigneesItemTypeValues() []WebhookIssuesTransferredIssueAssigneesItemType {
	return []WebhookIssuesTransferredIssueAssigneesItemType{
		WebhookIssuesTransferredIssueAssigneesItemTypeBot,
		WebhookIssuesTransferredIssueAssigneesItemTypeOrganization,
		WebhookIssuesTransferredIssueAssigneesItemTypeUser,
	}
}

// WebhookIssuesTransferredIssueAuthorAssociation - How the author is associated with the repository.
type WebhookIssuesTransferredIssueAuthorAssociation string

const (
	WebhookIssuesTransferredIssueAuthorAssociationCOLLABORATOR WebhookIssuesTransferredIssueAuthorAssociation = "COLLABORATOR"
	WebhookIssuesTransferredIssueAuthorAssociationCONTRIBUTOR WebhookIssuesTransferredIssueAuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesTransferredIssueAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesTransferredIssueAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesTransferredIssueAuthorAssociationFIRSTTIMER WebhookIssuesTransferredIssueAuthorAssociation = "FIRST_TIMER"
	WebhookIssuesTransferredIssueAuthorAssociationMANNEQUIN WebhookIssuesTransferredIssueAuthorAssociation = "MANNEQUIN"
	WebhookIssuesTransferredIssueAuthorAssociationMEMBER WebhookIssuesTransferredIssueAuthorAssociation = "MEMBER"
	WebhookIssuesTransferredIssueAuthorAssociationNONE WebhookIssuesTransferredIssueAuthorAssociation = "NONE"
	WebhookIssuesTransferredIssueAuthorAssociationOWNER WebhookIssuesTransferredIssueAuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesTransferredIssueAuthorAssociationValues returns the possible values for the WebhookIssuesTransferredIssueAuthorAssociation const type.
func PossibleWebhookIssuesTransferredIssueAuthorAssociationValues() []WebhookIssuesTransferredIssueAuthorAssociation {
	return []WebhookIssuesTransferredIssueAuthorAssociation{
		WebhookIssuesTransferredIssueAuthorAssociationCOLLABORATOR,
		WebhookIssuesTransferredIssueAuthorAssociationCONTRIBUTOR,
		WebhookIssuesTransferredIssueAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesTransferredIssueAuthorAssociationFIRSTTIMER,
		WebhookIssuesTransferredIssueAuthorAssociationMANNEQUIN,
		WebhookIssuesTransferredIssueAuthorAssociationMEMBER,
		WebhookIssuesTransferredIssueAuthorAssociationNONE,
		WebhookIssuesTransferredIssueAuthorAssociationOWNER,
	}
}

type WebhookIssuesTransferredIssueMilestoneCreatorType string

const (
	WebhookIssuesTransferredIssueMilestoneCreatorTypeBot WebhookIssuesTransferredIssueMilestoneCreatorType = "Bot"
	WebhookIssuesTransferredIssueMilestoneCreatorTypeOrganization WebhookIssuesTransferredIssueMilestoneCreatorType = "Organization"
	WebhookIssuesTransferredIssueMilestoneCreatorTypeUser WebhookIssuesTransferredIssueMilestoneCreatorType = "User"
)

// PossibleWebhookIssuesTransferredIssueMilestoneCreatorTypeValues returns the possible values for the WebhookIssuesTransferredIssueMilestoneCreatorType const type.
func PossibleWebhookIssuesTransferredIssueMilestoneCreatorTypeValues() []WebhookIssuesTransferredIssueMilestoneCreatorType {
	return []WebhookIssuesTransferredIssueMilestoneCreatorType{
		WebhookIssuesTransferredIssueMilestoneCreatorTypeBot,
		WebhookIssuesTransferredIssueMilestoneCreatorTypeOrganization,
		WebhookIssuesTransferredIssueMilestoneCreatorTypeUser,
	}
}

// WebhookIssuesTransferredIssueMilestoneState - The state of the milestone.
type WebhookIssuesTransferredIssueMilestoneState string

const (
	WebhookIssuesTransferredIssueMilestoneStateClosed WebhookIssuesTransferredIssueMilestoneState = "closed"
	WebhookIssuesTransferredIssueMilestoneStateOpen WebhookIssuesTransferredIssueMilestoneState = "open"
)

// PossibleWebhookIssuesTransferredIssueMilestoneStateValues returns the possible values for the WebhookIssuesTransferredIssueMilestoneState const type.
func PossibleWebhookIssuesTransferredIssueMilestoneStateValues() []WebhookIssuesTransferredIssueMilestoneState {
	return []WebhookIssuesTransferredIssueMilestoneState{
		WebhookIssuesTransferredIssueMilestoneStateClosed,
		WebhookIssuesTransferredIssueMilestoneStateOpen,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemCheckRun WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemCheckSuite WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemCommitComment WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemContentReference WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemCreate WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "create"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemDelete WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemDeployKey WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemDeployment WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemDiscussion WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemFork WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemGollum WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemIssueComment WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemIssues WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemLabel WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "label"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemMember WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "member"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemMembership WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemMilestone WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemOrgBlock WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemOrganization WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemPageBuild WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemProject WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "project"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemProjectCard WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemProjectColumn WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemPublic WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "public"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemPullRequest WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemPush WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "push"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemRelease WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "release"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemRepository WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemStar WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "star"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemStatus WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "status"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemTeam WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "team"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemTeamAdd WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemWatch WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItem{
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemCreate,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemDelete,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemFork,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemGollum,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemIssues,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemLabel,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemMember,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemMembership,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemProject,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemPublic,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemPush,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemRelease,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemRepository,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemStar,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemStatus,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemTeam,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemWatch,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesTransferredIssuePerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppOwnerType string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppOwnerTypeBot WebhookIssuesTransferredIssuePerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesTransferredIssuePerformedViaGithubAppOwnerTypeOrganization WebhookIssuesTransferredIssuePerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesTransferredIssuePerformedViaGithubAppOwnerTypeUser WebhookIssuesTransferredIssuePerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppOwnerTypeValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppOwnerType {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppOwnerType{
		WebhookIssuesTransferredIssuePerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesTransferredIssuePerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesTransferredIssuePerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsActionsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsActionsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsActions{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsChecksRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsChecksWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsChecks{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContents{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEmailsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEmails{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsIssuesRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsIssues{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsKeysRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsKeysWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsKeys{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMembersRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMembersWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMembers{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMetadataRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPackagesRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPackages{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPagesRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPagesWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPages{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsStatusesRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesTransferredIssuePerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesTransferredIssueState - State of the issue; either 'open' or 'closed'
type WebhookIssuesTransferredIssueState string

const (
	WebhookIssuesTransferredIssueStateClosed WebhookIssuesTransferredIssueState = "closed"
	WebhookIssuesTransferredIssueStateOpen WebhookIssuesTransferredIssueState = "open"
)

// PossibleWebhookIssuesTransferredIssueStateValues returns the possible values for the WebhookIssuesTransferredIssueState const type.
func PossibleWebhookIssuesTransferredIssueStateValues() []WebhookIssuesTransferredIssueState {
	return []WebhookIssuesTransferredIssueState{
		WebhookIssuesTransferredIssueStateClosed,
		WebhookIssuesTransferredIssueStateOpen,
	}
}

type WebhookIssuesTransferredIssueUserType string

const (
	WebhookIssuesTransferredIssueUserTypeBot WebhookIssuesTransferredIssueUserType = "Bot"
	WebhookIssuesTransferredIssueUserTypeOrganization WebhookIssuesTransferredIssueUserType = "Organization"
	WebhookIssuesTransferredIssueUserTypeUser WebhookIssuesTransferredIssueUserType = "User"
)

// PossibleWebhookIssuesTransferredIssueUserTypeValues returns the possible values for the WebhookIssuesTransferredIssueUserType const type.
func PossibleWebhookIssuesTransferredIssueUserTypeValues() []WebhookIssuesTransferredIssueUserType {
	return []WebhookIssuesTransferredIssueUserType{
		WebhookIssuesTransferredIssueUserTypeBot,
		WebhookIssuesTransferredIssueUserTypeOrganization,
		WebhookIssuesTransferredIssueUserTypeUser,
	}
}

// WebhookIssuesUnassignedAction - The action that was performed.
type WebhookIssuesUnassignedAction string

const (
	WebhookIssuesUnassignedActionUnassigned WebhookIssuesUnassignedAction = "unassigned"
)

// PossibleWebhookIssuesUnassignedActionValues returns the possible values for the WebhookIssuesUnassignedAction const type.
func PossibleWebhookIssuesUnassignedActionValues() []WebhookIssuesUnassignedAction {
	return []WebhookIssuesUnassignedAction{
		WebhookIssuesUnassignedActionUnassigned,
	}
}

type WebhookIssuesUnassignedAssigneeType string

const (
	WebhookIssuesUnassignedAssigneeTypeBot WebhookIssuesUnassignedAssigneeType = "Bot"
	WebhookIssuesUnassignedAssigneeTypeMannequin WebhookIssuesUnassignedAssigneeType = "Mannequin"
	WebhookIssuesUnassignedAssigneeTypeOrganization WebhookIssuesUnassignedAssigneeType = "Organization"
	WebhookIssuesUnassignedAssigneeTypeUser WebhookIssuesUnassignedAssigneeType = "User"
)

// PossibleWebhookIssuesUnassignedAssigneeTypeValues returns the possible values for the WebhookIssuesUnassignedAssigneeType const type.
func PossibleWebhookIssuesUnassignedAssigneeTypeValues() []WebhookIssuesUnassignedAssigneeType {
	return []WebhookIssuesUnassignedAssigneeType{
		WebhookIssuesUnassignedAssigneeTypeBot,
		WebhookIssuesUnassignedAssigneeTypeMannequin,
		WebhookIssuesUnassignedAssigneeTypeOrganization,
		WebhookIssuesUnassignedAssigneeTypeUser,
	}
}

type WebhookIssuesUnassignedIssueActiveLockReason string

const (
	WebhookIssuesUnassignedIssueActiveLockReasonNull WebhookIssuesUnassignedIssueActiveLockReason = "null"
	WebhookIssuesUnassignedIssueActiveLockReasonOffTopic WebhookIssuesUnassignedIssueActiveLockReason = "off-topic"
	WebhookIssuesUnassignedIssueActiveLockReasonResolved WebhookIssuesUnassignedIssueActiveLockReason = "resolved"
	WebhookIssuesUnassignedIssueActiveLockReasonSpam WebhookIssuesUnassignedIssueActiveLockReason = "spam"
	WebhookIssuesUnassignedIssueActiveLockReasonTooHeated WebhookIssuesUnassignedIssueActiveLockReason = "too heated"
)

// PossibleWebhookIssuesUnassignedIssueActiveLockReasonValues returns the possible values for the WebhookIssuesUnassignedIssueActiveLockReason const type.
func PossibleWebhookIssuesUnassignedIssueActiveLockReasonValues() []WebhookIssuesUnassignedIssueActiveLockReason {
	return []WebhookIssuesUnassignedIssueActiveLockReason{
		WebhookIssuesUnassignedIssueActiveLockReasonNull,
		WebhookIssuesUnassignedIssueActiveLockReasonOffTopic,
		WebhookIssuesUnassignedIssueActiveLockReasonResolved,
		WebhookIssuesUnassignedIssueActiveLockReasonSpam,
		WebhookIssuesUnassignedIssueActiveLockReasonTooHeated,
	}
}

type WebhookIssuesUnassignedIssueAssigneeType string

const (
	WebhookIssuesUnassignedIssueAssigneeTypeBot WebhookIssuesUnassignedIssueAssigneeType = "Bot"
	WebhookIssuesUnassignedIssueAssigneeTypeMannequin WebhookIssuesUnassignedIssueAssigneeType = "Mannequin"
	WebhookIssuesUnassignedIssueAssigneeTypeOrganization WebhookIssuesUnassignedIssueAssigneeType = "Organization"
	WebhookIssuesUnassignedIssueAssigneeTypeUser WebhookIssuesUnassignedIssueAssigneeType = "User"
)

// PossibleWebhookIssuesUnassignedIssueAssigneeTypeValues returns the possible values for the WebhookIssuesUnassignedIssueAssigneeType const type.
func PossibleWebhookIssuesUnassignedIssueAssigneeTypeValues() []WebhookIssuesUnassignedIssueAssigneeType {
	return []WebhookIssuesUnassignedIssueAssigneeType{
		WebhookIssuesUnassignedIssueAssigneeTypeBot,
		WebhookIssuesUnassignedIssueAssigneeTypeMannequin,
		WebhookIssuesUnassignedIssueAssigneeTypeOrganization,
		WebhookIssuesUnassignedIssueAssigneeTypeUser,
	}
}

type WebhookIssuesUnassignedIssueAssigneesItemType string

const (
	WebhookIssuesUnassignedIssueAssigneesItemTypeBot WebhookIssuesUnassignedIssueAssigneesItemType = "Bot"
	WebhookIssuesUnassignedIssueAssigneesItemTypeMannequin WebhookIssuesUnassignedIssueAssigneesItemType = "Mannequin"
	WebhookIssuesUnassignedIssueAssigneesItemTypeOrganization WebhookIssuesUnassignedIssueAssigneesItemType = "Organization"
	WebhookIssuesUnassignedIssueAssigneesItemTypeUser WebhookIssuesUnassignedIssueAssigneesItemType = "User"
)

// PossibleWebhookIssuesUnassignedIssueAssigneesItemTypeValues returns the possible values for the WebhookIssuesUnassignedIssueAssigneesItemType const type.
func PossibleWebhookIssuesUnassignedIssueAssigneesItemTypeValues() []WebhookIssuesUnassignedIssueAssigneesItemType {
	return []WebhookIssuesUnassignedIssueAssigneesItemType{
		WebhookIssuesUnassignedIssueAssigneesItemTypeBot,
		WebhookIssuesUnassignedIssueAssigneesItemTypeMannequin,
		WebhookIssuesUnassignedIssueAssigneesItemTypeOrganization,
		WebhookIssuesUnassignedIssueAssigneesItemTypeUser,
	}
}

// WebhookIssuesUnassignedIssueAuthorAssociation - How the author is associated with the repository.
type WebhookIssuesUnassignedIssueAuthorAssociation string

const (
	WebhookIssuesUnassignedIssueAuthorAssociationCOLLABORATOR WebhookIssuesUnassignedIssueAuthorAssociation = "COLLABORATOR"
	WebhookIssuesUnassignedIssueAuthorAssociationCONTRIBUTOR WebhookIssuesUnassignedIssueAuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesUnassignedIssueAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesUnassignedIssueAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesUnassignedIssueAuthorAssociationFIRSTTIMER WebhookIssuesUnassignedIssueAuthorAssociation = "FIRST_TIMER"
	WebhookIssuesUnassignedIssueAuthorAssociationMANNEQUIN WebhookIssuesUnassignedIssueAuthorAssociation = "MANNEQUIN"
	WebhookIssuesUnassignedIssueAuthorAssociationMEMBER WebhookIssuesUnassignedIssueAuthorAssociation = "MEMBER"
	WebhookIssuesUnassignedIssueAuthorAssociationNONE WebhookIssuesUnassignedIssueAuthorAssociation = "NONE"
	WebhookIssuesUnassignedIssueAuthorAssociationOWNER WebhookIssuesUnassignedIssueAuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesUnassignedIssueAuthorAssociationValues returns the possible values for the WebhookIssuesUnassignedIssueAuthorAssociation const type.
func PossibleWebhookIssuesUnassignedIssueAuthorAssociationValues() []WebhookIssuesUnassignedIssueAuthorAssociation {
	return []WebhookIssuesUnassignedIssueAuthorAssociation{
		WebhookIssuesUnassignedIssueAuthorAssociationCOLLABORATOR,
		WebhookIssuesUnassignedIssueAuthorAssociationCONTRIBUTOR,
		WebhookIssuesUnassignedIssueAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesUnassignedIssueAuthorAssociationFIRSTTIMER,
		WebhookIssuesUnassignedIssueAuthorAssociationMANNEQUIN,
		WebhookIssuesUnassignedIssueAuthorAssociationMEMBER,
		WebhookIssuesUnassignedIssueAuthorAssociationNONE,
		WebhookIssuesUnassignedIssueAuthorAssociationOWNER,
	}
}

type WebhookIssuesUnassignedIssueMilestoneCreatorType string

const (
	WebhookIssuesUnassignedIssueMilestoneCreatorTypeBot WebhookIssuesUnassignedIssueMilestoneCreatorType = "Bot"
	WebhookIssuesUnassignedIssueMilestoneCreatorTypeMannequin WebhookIssuesUnassignedIssueMilestoneCreatorType = "Mannequin"
	WebhookIssuesUnassignedIssueMilestoneCreatorTypeOrganization WebhookIssuesUnassignedIssueMilestoneCreatorType = "Organization"
	WebhookIssuesUnassignedIssueMilestoneCreatorTypeUser WebhookIssuesUnassignedIssueMilestoneCreatorType = "User"
)

// PossibleWebhookIssuesUnassignedIssueMilestoneCreatorTypeValues returns the possible values for the WebhookIssuesUnassignedIssueMilestoneCreatorType const type.
func PossibleWebhookIssuesUnassignedIssueMilestoneCreatorTypeValues() []WebhookIssuesUnassignedIssueMilestoneCreatorType {
	return []WebhookIssuesUnassignedIssueMilestoneCreatorType{
		WebhookIssuesUnassignedIssueMilestoneCreatorTypeBot,
		WebhookIssuesUnassignedIssueMilestoneCreatorTypeMannequin,
		WebhookIssuesUnassignedIssueMilestoneCreatorTypeOrganization,
		WebhookIssuesUnassignedIssueMilestoneCreatorTypeUser,
	}
}

// WebhookIssuesUnassignedIssueMilestoneState - The state of the milestone.
type WebhookIssuesUnassignedIssueMilestoneState string

const (
	WebhookIssuesUnassignedIssueMilestoneStateClosed WebhookIssuesUnassignedIssueMilestoneState = "closed"
	WebhookIssuesUnassignedIssueMilestoneStateOpen WebhookIssuesUnassignedIssueMilestoneState = "open"
)

// PossibleWebhookIssuesUnassignedIssueMilestoneStateValues returns the possible values for the WebhookIssuesUnassignedIssueMilestoneState const type.
func PossibleWebhookIssuesUnassignedIssueMilestoneStateValues() []WebhookIssuesUnassignedIssueMilestoneState {
	return []WebhookIssuesUnassignedIssueMilestoneState{
		WebhookIssuesUnassignedIssueMilestoneStateClosed,
		WebhookIssuesUnassignedIssueMilestoneStateOpen,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemCheckRun WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemCheckSuite WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemCommitComment WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemContentReference WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemCreate WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "create"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemDelete WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemDeployKey WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemDeployment WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemDiscussion WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemFork WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemGollum WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemIssueComment WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemIssues WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemLabel WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "label"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemMember WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "member"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemMembership WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemMilestone WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemOrgBlock WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemOrganization WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemPageBuild WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemProject WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "project"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemProjectCard WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemProjectColumn WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemPublic WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "public"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemPullRequest WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemPullRequestReviewThread WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "pull_request_review_thread"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemPush WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "push"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemRelease WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "release"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemReminder WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "reminder"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemRepository WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemStar WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "star"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemStatus WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "status"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemTeam WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "team"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemTeamAdd WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemWatch WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItem{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemCreate,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemDelete,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemFork,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemGollum,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemIssues,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemLabel,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemMember,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemMembership,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemProject,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemPublic,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemPullRequestReviewThread,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemPush,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemRelease,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemReminder,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemRepository,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemStar,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemStatus,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemTeam,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemWatch,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerType string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerTypeBot WebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerTypeOrganization WebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerTypeUser WebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerTypeValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerType {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerType{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsActionsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsActionsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsActions{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsChecksRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsChecksWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsChecks{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContents{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEmailsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEmails{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsIssuesRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsIssues{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsKeysRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsKeysWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsKeys{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMembersRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMembersWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMembers{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMetadataRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsAdmin WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "admin"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsAdmin,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPackagesRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPackages{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPagesRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPagesWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPages{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsStatusesRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesUnassignedIssuePerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesUnassignedIssueState - State of the issue; either 'open' or 'closed'
type WebhookIssuesUnassignedIssueState string

const (
	WebhookIssuesUnassignedIssueStateClosed WebhookIssuesUnassignedIssueState = "closed"
	WebhookIssuesUnassignedIssueStateOpen WebhookIssuesUnassignedIssueState = "open"
)

// PossibleWebhookIssuesUnassignedIssueStateValues returns the possible values for the WebhookIssuesUnassignedIssueState const type.
func PossibleWebhookIssuesUnassignedIssueStateValues() []WebhookIssuesUnassignedIssueState {
	return []WebhookIssuesUnassignedIssueState{
		WebhookIssuesUnassignedIssueStateClosed,
		WebhookIssuesUnassignedIssueStateOpen,
	}
}

type WebhookIssuesUnassignedIssueUserType string

const (
	WebhookIssuesUnassignedIssueUserTypeBot WebhookIssuesUnassignedIssueUserType = "Bot"
	WebhookIssuesUnassignedIssueUserTypeMannequin WebhookIssuesUnassignedIssueUserType = "Mannequin"
	WebhookIssuesUnassignedIssueUserTypeOrganization WebhookIssuesUnassignedIssueUserType = "Organization"
	WebhookIssuesUnassignedIssueUserTypeUser WebhookIssuesUnassignedIssueUserType = "User"
)

// PossibleWebhookIssuesUnassignedIssueUserTypeValues returns the possible values for the WebhookIssuesUnassignedIssueUserType const type.
func PossibleWebhookIssuesUnassignedIssueUserTypeValues() []WebhookIssuesUnassignedIssueUserType {
	return []WebhookIssuesUnassignedIssueUserType{
		WebhookIssuesUnassignedIssueUserTypeBot,
		WebhookIssuesUnassignedIssueUserTypeMannequin,
		WebhookIssuesUnassignedIssueUserTypeOrganization,
		WebhookIssuesUnassignedIssueUserTypeUser,
	}
}

type WebhookIssuesUnlabeledAction string

const (
	WebhookIssuesUnlabeledActionUnlabeled WebhookIssuesUnlabeledAction = "unlabeled"
)

// PossibleWebhookIssuesUnlabeledActionValues returns the possible values for the WebhookIssuesUnlabeledAction const type.
func PossibleWebhookIssuesUnlabeledActionValues() []WebhookIssuesUnlabeledAction {
	return []WebhookIssuesUnlabeledAction{
		WebhookIssuesUnlabeledActionUnlabeled,
	}
}

type WebhookIssuesUnlabeledIssueActiveLockReason string

const (
	WebhookIssuesUnlabeledIssueActiveLockReasonNull WebhookIssuesUnlabeledIssueActiveLockReason = "null"
	WebhookIssuesUnlabeledIssueActiveLockReasonOffTopic WebhookIssuesUnlabeledIssueActiveLockReason = "off-topic"
	WebhookIssuesUnlabeledIssueActiveLockReasonResolved WebhookIssuesUnlabeledIssueActiveLockReason = "resolved"
	WebhookIssuesUnlabeledIssueActiveLockReasonSpam WebhookIssuesUnlabeledIssueActiveLockReason = "spam"
	WebhookIssuesUnlabeledIssueActiveLockReasonTooHeated WebhookIssuesUnlabeledIssueActiveLockReason = "too heated"
)

// PossibleWebhookIssuesUnlabeledIssueActiveLockReasonValues returns the possible values for the WebhookIssuesUnlabeledIssueActiveLockReason const type.
func PossibleWebhookIssuesUnlabeledIssueActiveLockReasonValues() []WebhookIssuesUnlabeledIssueActiveLockReason {
	return []WebhookIssuesUnlabeledIssueActiveLockReason{
		WebhookIssuesUnlabeledIssueActiveLockReasonNull,
		WebhookIssuesUnlabeledIssueActiveLockReasonOffTopic,
		WebhookIssuesUnlabeledIssueActiveLockReasonResolved,
		WebhookIssuesUnlabeledIssueActiveLockReasonSpam,
		WebhookIssuesUnlabeledIssueActiveLockReasonTooHeated,
	}
}

type WebhookIssuesUnlabeledIssueAssigneeType string

const (
	WebhookIssuesUnlabeledIssueAssigneeTypeBot WebhookIssuesUnlabeledIssueAssigneeType = "Bot"
	WebhookIssuesUnlabeledIssueAssigneeTypeMannequin WebhookIssuesUnlabeledIssueAssigneeType = "Mannequin"
	WebhookIssuesUnlabeledIssueAssigneeTypeOrganization WebhookIssuesUnlabeledIssueAssigneeType = "Organization"
	WebhookIssuesUnlabeledIssueAssigneeTypeUser WebhookIssuesUnlabeledIssueAssigneeType = "User"
)

// PossibleWebhookIssuesUnlabeledIssueAssigneeTypeValues returns the possible values for the WebhookIssuesUnlabeledIssueAssigneeType const type.
func PossibleWebhookIssuesUnlabeledIssueAssigneeTypeValues() []WebhookIssuesUnlabeledIssueAssigneeType {
	return []WebhookIssuesUnlabeledIssueAssigneeType{
		WebhookIssuesUnlabeledIssueAssigneeTypeBot,
		WebhookIssuesUnlabeledIssueAssigneeTypeMannequin,
		WebhookIssuesUnlabeledIssueAssigneeTypeOrganization,
		WebhookIssuesUnlabeledIssueAssigneeTypeUser,
	}
}

type WebhookIssuesUnlabeledIssueAssigneesItemType string

const (
	WebhookIssuesUnlabeledIssueAssigneesItemTypeBot WebhookIssuesUnlabeledIssueAssigneesItemType = "Bot"
	WebhookIssuesUnlabeledIssueAssigneesItemTypeMannequin WebhookIssuesUnlabeledIssueAssigneesItemType = "Mannequin"
	WebhookIssuesUnlabeledIssueAssigneesItemTypeOrganization WebhookIssuesUnlabeledIssueAssigneesItemType = "Organization"
	WebhookIssuesUnlabeledIssueAssigneesItemTypeUser WebhookIssuesUnlabeledIssueAssigneesItemType = "User"
)

// PossibleWebhookIssuesUnlabeledIssueAssigneesItemTypeValues returns the possible values for the WebhookIssuesUnlabeledIssueAssigneesItemType const type.
func PossibleWebhookIssuesUnlabeledIssueAssigneesItemTypeValues() []WebhookIssuesUnlabeledIssueAssigneesItemType {
	return []WebhookIssuesUnlabeledIssueAssigneesItemType{
		WebhookIssuesUnlabeledIssueAssigneesItemTypeBot,
		WebhookIssuesUnlabeledIssueAssigneesItemTypeMannequin,
		WebhookIssuesUnlabeledIssueAssigneesItemTypeOrganization,
		WebhookIssuesUnlabeledIssueAssigneesItemTypeUser,
	}
}

// WebhookIssuesUnlabeledIssueAuthorAssociation - How the author is associated with the repository.
type WebhookIssuesUnlabeledIssueAuthorAssociation string

const (
	WebhookIssuesUnlabeledIssueAuthorAssociationCOLLABORATOR WebhookIssuesUnlabeledIssueAuthorAssociation = "COLLABORATOR"
	WebhookIssuesUnlabeledIssueAuthorAssociationCONTRIBUTOR WebhookIssuesUnlabeledIssueAuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesUnlabeledIssueAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesUnlabeledIssueAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesUnlabeledIssueAuthorAssociationFIRSTTIMER WebhookIssuesUnlabeledIssueAuthorAssociation = "FIRST_TIMER"
	WebhookIssuesUnlabeledIssueAuthorAssociationMANNEQUIN WebhookIssuesUnlabeledIssueAuthorAssociation = "MANNEQUIN"
	WebhookIssuesUnlabeledIssueAuthorAssociationMEMBER WebhookIssuesUnlabeledIssueAuthorAssociation = "MEMBER"
	WebhookIssuesUnlabeledIssueAuthorAssociationNONE WebhookIssuesUnlabeledIssueAuthorAssociation = "NONE"
	WebhookIssuesUnlabeledIssueAuthorAssociationOWNER WebhookIssuesUnlabeledIssueAuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesUnlabeledIssueAuthorAssociationValues returns the possible values for the WebhookIssuesUnlabeledIssueAuthorAssociation const type.
func PossibleWebhookIssuesUnlabeledIssueAuthorAssociationValues() []WebhookIssuesUnlabeledIssueAuthorAssociation {
	return []WebhookIssuesUnlabeledIssueAuthorAssociation{
		WebhookIssuesUnlabeledIssueAuthorAssociationCOLLABORATOR,
		WebhookIssuesUnlabeledIssueAuthorAssociationCONTRIBUTOR,
		WebhookIssuesUnlabeledIssueAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesUnlabeledIssueAuthorAssociationFIRSTTIMER,
		WebhookIssuesUnlabeledIssueAuthorAssociationMANNEQUIN,
		WebhookIssuesUnlabeledIssueAuthorAssociationMEMBER,
		WebhookIssuesUnlabeledIssueAuthorAssociationNONE,
		WebhookIssuesUnlabeledIssueAuthorAssociationOWNER,
	}
}

type WebhookIssuesUnlabeledIssueMilestoneCreatorType string

const (
	WebhookIssuesUnlabeledIssueMilestoneCreatorTypeBot WebhookIssuesUnlabeledIssueMilestoneCreatorType = "Bot"
	WebhookIssuesUnlabeledIssueMilestoneCreatorTypeMannequin WebhookIssuesUnlabeledIssueMilestoneCreatorType = "Mannequin"
	WebhookIssuesUnlabeledIssueMilestoneCreatorTypeOrganization WebhookIssuesUnlabeledIssueMilestoneCreatorType = "Organization"
	WebhookIssuesUnlabeledIssueMilestoneCreatorTypeUser WebhookIssuesUnlabeledIssueMilestoneCreatorType = "User"
)

// PossibleWebhookIssuesUnlabeledIssueMilestoneCreatorTypeValues returns the possible values for the WebhookIssuesUnlabeledIssueMilestoneCreatorType const type.
func PossibleWebhookIssuesUnlabeledIssueMilestoneCreatorTypeValues() []WebhookIssuesUnlabeledIssueMilestoneCreatorType {
	return []WebhookIssuesUnlabeledIssueMilestoneCreatorType{
		WebhookIssuesUnlabeledIssueMilestoneCreatorTypeBot,
		WebhookIssuesUnlabeledIssueMilestoneCreatorTypeMannequin,
		WebhookIssuesUnlabeledIssueMilestoneCreatorTypeOrganization,
		WebhookIssuesUnlabeledIssueMilestoneCreatorTypeUser,
	}
}

// WebhookIssuesUnlabeledIssueMilestoneState - The state of the milestone.
type WebhookIssuesUnlabeledIssueMilestoneState string

const (
	WebhookIssuesUnlabeledIssueMilestoneStateClosed WebhookIssuesUnlabeledIssueMilestoneState = "closed"
	WebhookIssuesUnlabeledIssueMilestoneStateOpen WebhookIssuesUnlabeledIssueMilestoneState = "open"
)

// PossibleWebhookIssuesUnlabeledIssueMilestoneStateValues returns the possible values for the WebhookIssuesUnlabeledIssueMilestoneState const type.
func PossibleWebhookIssuesUnlabeledIssueMilestoneStateValues() []WebhookIssuesUnlabeledIssueMilestoneState {
	return []WebhookIssuesUnlabeledIssueMilestoneState{
		WebhookIssuesUnlabeledIssueMilestoneStateClosed,
		WebhookIssuesUnlabeledIssueMilestoneStateOpen,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemCheckRun WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemCheckSuite WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemCommitComment WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemContentReference WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemCreate WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "create"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemDelete WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemDeployKey WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemDeployment WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemDiscussion WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemFork WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemGollum WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemIssueComment WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemIssues WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemLabel WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "label"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemMember WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "member"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemMembership WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemMilestone WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemOrgBlock WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemOrganization WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemPageBuild WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemProject WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "project"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemProjectCard WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemProjectColumn WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemPublic WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "public"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemPullRequest WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemPullRequestReviewThread WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "pull_request_review_thread"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemPush WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "push"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemRelease WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "release"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemReminder WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "reminder"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemRepository WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemStar WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "star"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemStatus WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "status"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemTeam WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "team"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemTeamAdd WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemWatch WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItem{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemCreate,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemDelete,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemFork,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemGollum,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemIssues,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemLabel,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemMember,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemMembership,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemProject,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemPublic,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemPullRequestReviewThread,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemPush,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemRelease,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemReminder,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemRepository,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemStar,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemStatus,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemTeam,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemWatch,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerType string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerTypeBot WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerTypeOrganization WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerTypeUser WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerTypeValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerType {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerType{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsActionsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsActionsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsActions{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsChecksRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsChecksWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsChecks{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContents{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEmailsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEmails{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsIssuesRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsIssues{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsKeysRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsKeysWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsKeys{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMembersRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMembersWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMembers{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMetadataRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsAdmin WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects = "admin"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsAdmin,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPackagesRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPackages{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPagesRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPagesWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPages{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsStatusesRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesUnlabeledIssuePerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesUnlabeledIssueState - State of the issue; either 'open' or 'closed'
type WebhookIssuesUnlabeledIssueState string

const (
	WebhookIssuesUnlabeledIssueStateClosed WebhookIssuesUnlabeledIssueState = "closed"
	WebhookIssuesUnlabeledIssueStateOpen WebhookIssuesUnlabeledIssueState = "open"
)

// PossibleWebhookIssuesUnlabeledIssueStateValues returns the possible values for the WebhookIssuesUnlabeledIssueState const type.
func PossibleWebhookIssuesUnlabeledIssueStateValues() []WebhookIssuesUnlabeledIssueState {
	return []WebhookIssuesUnlabeledIssueState{
		WebhookIssuesUnlabeledIssueStateClosed,
		WebhookIssuesUnlabeledIssueStateOpen,
	}
}

type WebhookIssuesUnlabeledIssueUserType string

const (
	WebhookIssuesUnlabeledIssueUserTypeBot WebhookIssuesUnlabeledIssueUserType = "Bot"
	WebhookIssuesUnlabeledIssueUserTypeMannequin WebhookIssuesUnlabeledIssueUserType = "Mannequin"
	WebhookIssuesUnlabeledIssueUserTypeOrganization WebhookIssuesUnlabeledIssueUserType = "Organization"
	WebhookIssuesUnlabeledIssueUserTypeUser WebhookIssuesUnlabeledIssueUserType = "User"
)

// PossibleWebhookIssuesUnlabeledIssueUserTypeValues returns the possible values for the WebhookIssuesUnlabeledIssueUserType const type.
func PossibleWebhookIssuesUnlabeledIssueUserTypeValues() []WebhookIssuesUnlabeledIssueUserType {
	return []WebhookIssuesUnlabeledIssueUserType{
		WebhookIssuesUnlabeledIssueUserTypeBot,
		WebhookIssuesUnlabeledIssueUserTypeMannequin,
		WebhookIssuesUnlabeledIssueUserTypeOrganization,
		WebhookIssuesUnlabeledIssueUserTypeUser,
	}
}

type WebhookIssuesUnlockedAction string

const (
	WebhookIssuesUnlockedActionUnlocked WebhookIssuesUnlockedAction = "unlocked"
)

// PossibleWebhookIssuesUnlockedActionValues returns the possible values for the WebhookIssuesUnlockedAction const type.
func PossibleWebhookIssuesUnlockedActionValues() []WebhookIssuesUnlockedAction {
	return []WebhookIssuesUnlockedAction{
		WebhookIssuesUnlockedActionUnlocked,
	}
}

type WebhookIssuesUnlockedIssue0ActiveLockReason string

const (
	WebhookIssuesUnlockedIssue0ActiveLockReasonNull WebhookIssuesUnlockedIssue0ActiveLockReason = "null"
	WebhookIssuesUnlockedIssue0ActiveLockReasonOffTopic WebhookIssuesUnlockedIssue0ActiveLockReason = "off-topic"
	WebhookIssuesUnlockedIssue0ActiveLockReasonResolved WebhookIssuesUnlockedIssue0ActiveLockReason = "resolved"
	WebhookIssuesUnlockedIssue0ActiveLockReasonSpam WebhookIssuesUnlockedIssue0ActiveLockReason = "spam"
	WebhookIssuesUnlockedIssue0ActiveLockReasonTooHeated WebhookIssuesUnlockedIssue0ActiveLockReason = "too heated"
)

// PossibleWebhookIssuesUnlockedIssue0ActiveLockReasonValues returns the possible values for the WebhookIssuesUnlockedIssue0ActiveLockReason const type.
func PossibleWebhookIssuesUnlockedIssue0ActiveLockReasonValues() []WebhookIssuesUnlockedIssue0ActiveLockReason {
	return []WebhookIssuesUnlockedIssue0ActiveLockReason{
		WebhookIssuesUnlockedIssue0ActiveLockReasonNull,
		WebhookIssuesUnlockedIssue0ActiveLockReasonOffTopic,
		WebhookIssuesUnlockedIssue0ActiveLockReasonResolved,
		WebhookIssuesUnlockedIssue0ActiveLockReasonSpam,
		WebhookIssuesUnlockedIssue0ActiveLockReasonTooHeated,
	}
}

type WebhookIssuesUnlockedIssue0AssigneeType string

const (
	WebhookIssuesUnlockedIssue0AssigneeTypeBot WebhookIssuesUnlockedIssue0AssigneeType = "Bot"
	WebhookIssuesUnlockedIssue0AssigneeTypeOrganization WebhookIssuesUnlockedIssue0AssigneeType = "Organization"
	WebhookIssuesUnlockedIssue0AssigneeTypeUser WebhookIssuesUnlockedIssue0AssigneeType = "User"
)

// PossibleWebhookIssuesUnlockedIssue0AssigneeTypeValues returns the possible values for the WebhookIssuesUnlockedIssue0AssigneeType const type.
func PossibleWebhookIssuesUnlockedIssue0AssigneeTypeValues() []WebhookIssuesUnlockedIssue0AssigneeType {
	return []WebhookIssuesUnlockedIssue0AssigneeType{
		WebhookIssuesUnlockedIssue0AssigneeTypeBot,
		WebhookIssuesUnlockedIssue0AssigneeTypeOrganization,
		WebhookIssuesUnlockedIssue0AssigneeTypeUser,
	}
}

// WebhookIssuesUnlockedIssue0AuthorAssociation - How the author is associated with the repository.
type WebhookIssuesUnlockedIssue0AuthorAssociation string

const (
	WebhookIssuesUnlockedIssue0AuthorAssociationCOLLABORATOR WebhookIssuesUnlockedIssue0AuthorAssociation = "COLLABORATOR"
	WebhookIssuesUnlockedIssue0AuthorAssociationCONTRIBUTOR WebhookIssuesUnlockedIssue0AuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesUnlockedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesUnlockedIssue0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesUnlockedIssue0AuthorAssociationFIRSTTIMER WebhookIssuesUnlockedIssue0AuthorAssociation = "FIRST_TIMER"
	WebhookIssuesUnlockedIssue0AuthorAssociationMANNEQUIN WebhookIssuesUnlockedIssue0AuthorAssociation = "MANNEQUIN"
	WebhookIssuesUnlockedIssue0AuthorAssociationMEMBER WebhookIssuesUnlockedIssue0AuthorAssociation = "MEMBER"
	WebhookIssuesUnlockedIssue0AuthorAssociationNONE WebhookIssuesUnlockedIssue0AuthorAssociation = "NONE"
	WebhookIssuesUnlockedIssue0AuthorAssociationOWNER WebhookIssuesUnlockedIssue0AuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesUnlockedIssue0AuthorAssociationValues returns the possible values for the WebhookIssuesUnlockedIssue0AuthorAssociation const type.
func PossibleWebhookIssuesUnlockedIssue0AuthorAssociationValues() []WebhookIssuesUnlockedIssue0AuthorAssociation {
	return []WebhookIssuesUnlockedIssue0AuthorAssociation{
		WebhookIssuesUnlockedIssue0AuthorAssociationCOLLABORATOR,
		WebhookIssuesUnlockedIssue0AuthorAssociationCONTRIBUTOR,
		WebhookIssuesUnlockedIssue0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesUnlockedIssue0AuthorAssociationFIRSTTIMER,
		WebhookIssuesUnlockedIssue0AuthorAssociationMANNEQUIN,
		WebhookIssuesUnlockedIssue0AuthorAssociationMEMBER,
		WebhookIssuesUnlockedIssue0AuthorAssociationNONE,
		WebhookIssuesUnlockedIssue0AuthorAssociationOWNER,
	}
}

type WebhookIssuesUnlockedIssue0MilestoneCreatorType string

const (
	WebhookIssuesUnlockedIssue0MilestoneCreatorTypeBot WebhookIssuesUnlockedIssue0MilestoneCreatorType = "Bot"
	WebhookIssuesUnlockedIssue0MilestoneCreatorTypeOrganization WebhookIssuesUnlockedIssue0MilestoneCreatorType = "Organization"
	WebhookIssuesUnlockedIssue0MilestoneCreatorTypeUser WebhookIssuesUnlockedIssue0MilestoneCreatorType = "User"
)

// PossibleWebhookIssuesUnlockedIssue0MilestoneCreatorTypeValues returns the possible values for the WebhookIssuesUnlockedIssue0MilestoneCreatorType const type.
func PossibleWebhookIssuesUnlockedIssue0MilestoneCreatorTypeValues() []WebhookIssuesUnlockedIssue0MilestoneCreatorType {
	return []WebhookIssuesUnlockedIssue0MilestoneCreatorType{
		WebhookIssuesUnlockedIssue0MilestoneCreatorTypeBot,
		WebhookIssuesUnlockedIssue0MilestoneCreatorTypeOrganization,
		WebhookIssuesUnlockedIssue0MilestoneCreatorTypeUser,
	}
}

// WebhookIssuesUnlockedIssue0MilestoneState - The state of the milestone.
type WebhookIssuesUnlockedIssue0MilestoneState string

const (
	WebhookIssuesUnlockedIssue0MilestoneStateClosed WebhookIssuesUnlockedIssue0MilestoneState = "closed"
	WebhookIssuesUnlockedIssue0MilestoneStateOpen WebhookIssuesUnlockedIssue0MilestoneState = "open"
)

// PossibleWebhookIssuesUnlockedIssue0MilestoneStateValues returns the possible values for the WebhookIssuesUnlockedIssue0MilestoneState const type.
func PossibleWebhookIssuesUnlockedIssue0MilestoneStateValues() []WebhookIssuesUnlockedIssue0MilestoneState {
	return []WebhookIssuesUnlockedIssue0MilestoneState{
		WebhookIssuesUnlockedIssue0MilestoneStateClosed,
		WebhookIssuesUnlockedIssue0MilestoneStateOpen,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemCheckRun WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemCheckSuite WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemCommitComment WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemContentReference WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemCreate WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "create"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemDelete WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemDeployKey WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemDeployment WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemDiscussion WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemFork WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemGollum WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemIssueComment WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemIssues WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemLabel WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "label"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemMember WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "member"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemMembership WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemMilestone WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemOrgBlock WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemOrganization WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemPageBuild WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemProject WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "project"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemProjectCard WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemProjectColumn WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemPublic WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "public"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemPullRequest WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemPush WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "push"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemRelease WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "release"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemRepository WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemStar WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "star"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemStatus WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "status"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemTeam WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "team"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemTeamAdd WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemWatch WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItem{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemCreate,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemDelete,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemFork,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemGollum,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemIssues,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemLabel,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemMember,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemMembership,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemProject,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemPublic,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemPush,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemRelease,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemRepository,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemStar,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemStatus,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemTeam,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemWatch,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerType string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerTypeBot WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerTypeOrganization WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerTypeUser WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerTypeValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerType {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerType{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsActionsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsActionsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsActions{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsChecksRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsChecksWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsChecks{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContents{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEmailsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEmails{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsIssuesRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsIssues{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsKeysRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsKeysWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsKeys{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMembersRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMembersWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMembers{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMetadataRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPackagesRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPackages{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPagesRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPagesWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPages{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsStatusesRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesUnlockedIssue0PerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesUnlockedIssue0State - State of the issue; either 'open' or 'closed'
type WebhookIssuesUnlockedIssue0State string

const (
	WebhookIssuesUnlockedIssue0StateClosed WebhookIssuesUnlockedIssue0State = "closed"
	WebhookIssuesUnlockedIssue0StateOpen WebhookIssuesUnlockedIssue0State = "open"
)

// PossibleWebhookIssuesUnlockedIssue0StateValues returns the possible values for the WebhookIssuesUnlockedIssue0State const type.
func PossibleWebhookIssuesUnlockedIssue0StateValues() []WebhookIssuesUnlockedIssue0State {
	return []WebhookIssuesUnlockedIssue0State{
		WebhookIssuesUnlockedIssue0StateClosed,
		WebhookIssuesUnlockedIssue0StateOpen,
	}
}

type WebhookIssuesUnlockedIssue0UserType string

const (
	WebhookIssuesUnlockedIssue0UserTypeBot WebhookIssuesUnlockedIssue0UserType = "Bot"
	WebhookIssuesUnlockedIssue0UserTypeOrganization WebhookIssuesUnlockedIssue0UserType = "Organization"
	WebhookIssuesUnlockedIssue0UserTypeUser WebhookIssuesUnlockedIssue0UserType = "User"
)

// PossibleWebhookIssuesUnlockedIssue0UserTypeValues returns the possible values for the WebhookIssuesUnlockedIssue0UserType const type.
func PossibleWebhookIssuesUnlockedIssue0UserTypeValues() []WebhookIssuesUnlockedIssue0UserType {
	return []WebhookIssuesUnlockedIssue0UserType{
		WebhookIssuesUnlockedIssue0UserTypeBot,
		WebhookIssuesUnlockedIssue0UserTypeOrganization,
		WebhookIssuesUnlockedIssue0UserTypeUser,
	}
}

type WebhookIssuesUnlockedIssueOneOf0AssigneesItemType string

const (
	WebhookIssuesUnlockedIssueOneOf0AssigneesItemTypeBot WebhookIssuesUnlockedIssueOneOf0AssigneesItemType = "Bot"
	WebhookIssuesUnlockedIssueOneOf0AssigneesItemTypeOrganization WebhookIssuesUnlockedIssueOneOf0AssigneesItemType = "Organization"
	WebhookIssuesUnlockedIssueOneOf0AssigneesItemTypeUser WebhookIssuesUnlockedIssueOneOf0AssigneesItemType = "User"
)

// PossibleWebhookIssuesUnlockedIssueOneOf0AssigneesItemTypeValues returns the possible values for the WebhookIssuesUnlockedIssueOneOf0AssigneesItemType const type.
func PossibleWebhookIssuesUnlockedIssueOneOf0AssigneesItemTypeValues() []WebhookIssuesUnlockedIssueOneOf0AssigneesItemType {
	return []WebhookIssuesUnlockedIssueOneOf0AssigneesItemType{
		WebhookIssuesUnlockedIssueOneOf0AssigneesItemTypeBot,
		WebhookIssuesUnlockedIssueOneOf0AssigneesItemTypeOrganization,
		WebhookIssuesUnlockedIssueOneOf0AssigneesItemTypeUser,
	}
}

type WebhookIssuesUnpinnedAction string

const (
	WebhookIssuesUnpinnedActionUnpinned WebhookIssuesUnpinnedAction = "unpinned"
)

// PossibleWebhookIssuesUnpinnedActionValues returns the possible values for the WebhookIssuesUnpinnedAction const type.
func PossibleWebhookIssuesUnpinnedActionValues() []WebhookIssuesUnpinnedAction {
	return []WebhookIssuesUnpinnedAction{
		WebhookIssuesUnpinnedActionUnpinned,
	}
}

type WebhookIssuesUnpinnedIssueActiveLockReason string

const (
	WebhookIssuesUnpinnedIssueActiveLockReasonNull WebhookIssuesUnpinnedIssueActiveLockReason = "null"
	WebhookIssuesUnpinnedIssueActiveLockReasonOffTopic WebhookIssuesUnpinnedIssueActiveLockReason = "off-topic"
	WebhookIssuesUnpinnedIssueActiveLockReasonResolved WebhookIssuesUnpinnedIssueActiveLockReason = "resolved"
	WebhookIssuesUnpinnedIssueActiveLockReasonSpam WebhookIssuesUnpinnedIssueActiveLockReason = "spam"
	WebhookIssuesUnpinnedIssueActiveLockReasonTooHeated WebhookIssuesUnpinnedIssueActiveLockReason = "too heated"
)

// PossibleWebhookIssuesUnpinnedIssueActiveLockReasonValues returns the possible values for the WebhookIssuesUnpinnedIssueActiveLockReason const type.
func PossibleWebhookIssuesUnpinnedIssueActiveLockReasonValues() []WebhookIssuesUnpinnedIssueActiveLockReason {
	return []WebhookIssuesUnpinnedIssueActiveLockReason{
		WebhookIssuesUnpinnedIssueActiveLockReasonNull,
		WebhookIssuesUnpinnedIssueActiveLockReasonOffTopic,
		WebhookIssuesUnpinnedIssueActiveLockReasonResolved,
		WebhookIssuesUnpinnedIssueActiveLockReasonSpam,
		WebhookIssuesUnpinnedIssueActiveLockReasonTooHeated,
	}
}

type WebhookIssuesUnpinnedIssueAssigneeType string

const (
	WebhookIssuesUnpinnedIssueAssigneeTypeBot WebhookIssuesUnpinnedIssueAssigneeType = "Bot"
	WebhookIssuesUnpinnedIssueAssigneeTypeOrganization WebhookIssuesUnpinnedIssueAssigneeType = "Organization"
	WebhookIssuesUnpinnedIssueAssigneeTypeUser WebhookIssuesUnpinnedIssueAssigneeType = "User"
)

// PossibleWebhookIssuesUnpinnedIssueAssigneeTypeValues returns the possible values for the WebhookIssuesUnpinnedIssueAssigneeType const type.
func PossibleWebhookIssuesUnpinnedIssueAssigneeTypeValues() []WebhookIssuesUnpinnedIssueAssigneeType {
	return []WebhookIssuesUnpinnedIssueAssigneeType{
		WebhookIssuesUnpinnedIssueAssigneeTypeBot,
		WebhookIssuesUnpinnedIssueAssigneeTypeOrganization,
		WebhookIssuesUnpinnedIssueAssigneeTypeUser,
	}
}

type WebhookIssuesUnpinnedIssueAssigneesItemType string

const (
	WebhookIssuesUnpinnedIssueAssigneesItemTypeBot WebhookIssuesUnpinnedIssueAssigneesItemType = "Bot"
	WebhookIssuesUnpinnedIssueAssigneesItemTypeOrganization WebhookIssuesUnpinnedIssueAssigneesItemType = "Organization"
	WebhookIssuesUnpinnedIssueAssigneesItemTypeUser WebhookIssuesUnpinnedIssueAssigneesItemType = "User"
)

// PossibleWebhookIssuesUnpinnedIssueAssigneesItemTypeValues returns the possible values for the WebhookIssuesUnpinnedIssueAssigneesItemType const type.
func PossibleWebhookIssuesUnpinnedIssueAssigneesItemTypeValues() []WebhookIssuesUnpinnedIssueAssigneesItemType {
	return []WebhookIssuesUnpinnedIssueAssigneesItemType{
		WebhookIssuesUnpinnedIssueAssigneesItemTypeBot,
		WebhookIssuesUnpinnedIssueAssigneesItemTypeOrganization,
		WebhookIssuesUnpinnedIssueAssigneesItemTypeUser,
	}
}

// WebhookIssuesUnpinnedIssueAuthorAssociation - How the author is associated with the repository.
type WebhookIssuesUnpinnedIssueAuthorAssociation string

const (
	WebhookIssuesUnpinnedIssueAuthorAssociationCOLLABORATOR WebhookIssuesUnpinnedIssueAuthorAssociation = "COLLABORATOR"
	WebhookIssuesUnpinnedIssueAuthorAssociationCONTRIBUTOR WebhookIssuesUnpinnedIssueAuthorAssociation = "CONTRIBUTOR"
	WebhookIssuesUnpinnedIssueAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookIssuesUnpinnedIssueAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookIssuesUnpinnedIssueAuthorAssociationFIRSTTIMER WebhookIssuesUnpinnedIssueAuthorAssociation = "FIRST_TIMER"
	WebhookIssuesUnpinnedIssueAuthorAssociationMANNEQUIN WebhookIssuesUnpinnedIssueAuthorAssociation = "MANNEQUIN"
	WebhookIssuesUnpinnedIssueAuthorAssociationMEMBER WebhookIssuesUnpinnedIssueAuthorAssociation = "MEMBER"
	WebhookIssuesUnpinnedIssueAuthorAssociationNONE WebhookIssuesUnpinnedIssueAuthorAssociation = "NONE"
	WebhookIssuesUnpinnedIssueAuthorAssociationOWNER WebhookIssuesUnpinnedIssueAuthorAssociation = "OWNER"
)

// PossibleWebhookIssuesUnpinnedIssueAuthorAssociationValues returns the possible values for the WebhookIssuesUnpinnedIssueAuthorAssociation const type.
func PossibleWebhookIssuesUnpinnedIssueAuthorAssociationValues() []WebhookIssuesUnpinnedIssueAuthorAssociation {
	return []WebhookIssuesUnpinnedIssueAuthorAssociation{
		WebhookIssuesUnpinnedIssueAuthorAssociationCOLLABORATOR,
		WebhookIssuesUnpinnedIssueAuthorAssociationCONTRIBUTOR,
		WebhookIssuesUnpinnedIssueAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookIssuesUnpinnedIssueAuthorAssociationFIRSTTIMER,
		WebhookIssuesUnpinnedIssueAuthorAssociationMANNEQUIN,
		WebhookIssuesUnpinnedIssueAuthorAssociationMEMBER,
		WebhookIssuesUnpinnedIssueAuthorAssociationNONE,
		WebhookIssuesUnpinnedIssueAuthorAssociationOWNER,
	}
}

type WebhookIssuesUnpinnedIssueMilestoneCreatorType string

const (
	WebhookIssuesUnpinnedIssueMilestoneCreatorTypeBot WebhookIssuesUnpinnedIssueMilestoneCreatorType = "Bot"
	WebhookIssuesUnpinnedIssueMilestoneCreatorTypeOrganization WebhookIssuesUnpinnedIssueMilestoneCreatorType = "Organization"
	WebhookIssuesUnpinnedIssueMilestoneCreatorTypeUser WebhookIssuesUnpinnedIssueMilestoneCreatorType = "User"
)

// PossibleWebhookIssuesUnpinnedIssueMilestoneCreatorTypeValues returns the possible values for the WebhookIssuesUnpinnedIssueMilestoneCreatorType const type.
func PossibleWebhookIssuesUnpinnedIssueMilestoneCreatorTypeValues() []WebhookIssuesUnpinnedIssueMilestoneCreatorType {
	return []WebhookIssuesUnpinnedIssueMilestoneCreatorType{
		WebhookIssuesUnpinnedIssueMilestoneCreatorTypeBot,
		WebhookIssuesUnpinnedIssueMilestoneCreatorTypeOrganization,
		WebhookIssuesUnpinnedIssueMilestoneCreatorTypeUser,
	}
}

// WebhookIssuesUnpinnedIssueMilestoneState - The state of the milestone.
type WebhookIssuesUnpinnedIssueMilestoneState string

const (
	WebhookIssuesUnpinnedIssueMilestoneStateClosed WebhookIssuesUnpinnedIssueMilestoneState = "closed"
	WebhookIssuesUnpinnedIssueMilestoneStateOpen WebhookIssuesUnpinnedIssueMilestoneState = "open"
)

// PossibleWebhookIssuesUnpinnedIssueMilestoneStateValues returns the possible values for the WebhookIssuesUnpinnedIssueMilestoneState const type.
func PossibleWebhookIssuesUnpinnedIssueMilestoneStateValues() []WebhookIssuesUnpinnedIssueMilestoneState {
	return []WebhookIssuesUnpinnedIssueMilestoneState{
		WebhookIssuesUnpinnedIssueMilestoneStateClosed,
		WebhookIssuesUnpinnedIssueMilestoneStateOpen,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemBranchProtectionRule WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "branch_protection_rule"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemCheckRun WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "check_run"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemCheckSuite WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "check_suite"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemCodeScanningAlert WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "code_scanning_alert"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemCommitComment WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "commit_comment"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemContentReference WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "content_reference"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemCreate WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "create"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemDelete WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "delete"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemDeployKey WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "deploy_key"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemDeployment WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "deployment"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemDeploymentReview WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "deployment_review"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemDeploymentStatus WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "deployment_status"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemDiscussion WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "discussion"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemDiscussionComment WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "discussion_comment"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemFork WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "fork"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemGollum WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "gollum"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemIssueComment WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "issue_comment"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemIssues WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "issues"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemLabel WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "label"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemMember WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "member"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemMembership WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "membership"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemMilestone WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "milestone"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemOrgBlock WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "org_block"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemOrganization WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "organization"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemPageBuild WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "page_build"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemProject WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "project"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemProjectCard WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "project_card"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemProjectColumn WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "project_column"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemPublic WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "public"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemPullRequest WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "pull_request"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemPullRequestReview WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "pull_request_review"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemPullRequestReviewComment WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "pull_request_review_comment"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemPush WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "push"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemRegistryPackage WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "registry_package"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemRelease WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "release"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemRepository WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "repository"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemRepositoryDispatch WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "repository_dispatch"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemSecretScanningAlert WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "secret_scanning_alert"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemStar WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "star"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemStatus WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "status"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemTeam WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "team"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemTeamAdd WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "team_add"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemWatch WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "watch"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemWorkflowDispatch WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "workflow_dispatch"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemWorkflowRun WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem = "workflow_run"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItem{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemBranchProtectionRule,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemCheckRun,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemCheckSuite,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemCodeScanningAlert,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemCommitComment,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemContentReference,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemCreate,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemDelete,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemDeployKey,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemDeployment,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemDeploymentReview,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemDeploymentStatus,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemDiscussion,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemDiscussionComment,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemFork,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemGollum,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemIssueComment,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemIssues,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemLabel,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemMember,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemMembership,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemMilestone,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemOrgBlock,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemOrganization,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemPageBuild,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemProject,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemProjectCard,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemProjectColumn,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemPublic,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemPullRequest,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemPullRequestReview,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemPullRequestReviewComment,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemPush,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemRegistryPackage,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemRelease,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemRepository,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemRepositoryDispatch,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemSecretScanningAlert,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemStar,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemStatus,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemTeam,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemTeamAdd,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemWatch,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemWorkflowDispatch,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppEventsItemWorkflowRun,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerType string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerTypeBot WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerType = "Bot"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerTypeOrganization WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerType = "Organization"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerTypeUser WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerType = "User"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerTypeValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerType const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerTypeValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerType {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerType{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerTypeBot,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerTypeOrganization,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppOwnerTypeUser,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsActions string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsActionsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsActions = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsActionsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsActions = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsActionsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsActions const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsActionsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsActions {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsActions{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsActionsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsActionsWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsAdministration string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsAdministrationRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsAdministration = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsAdministrationWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsAdministration = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsAdministrationValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsAdministration const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsAdministrationValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsAdministration {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsAdministration{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsAdministrationRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsAdministrationWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsChecks string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsChecksRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsChecks = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsChecksWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsChecks = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsChecksValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsChecks const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsChecksValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsChecks {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsChecks{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsChecksRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsChecksWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentReferences string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentReferencesRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentReferences = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentReferencesWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentReferences = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentReferencesValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentReferences const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentReferencesValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentReferences {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentReferences{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentReferencesRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentReferencesWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContents string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContents = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContents = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContents const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContents {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContents{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsContentsWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDeployments string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDeploymentsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDeployments = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDeploymentsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDeployments = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDeploymentsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDeployments const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDeploymentsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDeployments {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDeployments{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDeploymentsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDeploymentsWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDiscussions string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDiscussionsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDiscussions = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDiscussionsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDiscussions = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDiscussionsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDiscussions const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDiscussionsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDiscussions {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDiscussions{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDiscussionsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsDiscussionsWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEmails string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEmailsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEmails = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEmailsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEmails = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEmailsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEmails const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEmailsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEmails {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEmails{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEmailsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEmailsWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEnvironments string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEnvironmentsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEnvironments = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEnvironmentsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEnvironments = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEnvironmentsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEnvironments const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEnvironmentsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEnvironments {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEnvironments{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEnvironmentsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsEnvironmentsWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsIssues string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsIssuesRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsIssues = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsIssuesWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsIssues = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsIssuesValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsIssues const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsIssuesValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsIssues {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsIssues{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsIssuesRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsIssuesWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsKeys string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsKeysRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsKeys = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsKeysWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsKeys = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsKeysValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsKeys const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsKeysValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsKeys {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsKeys{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsKeysRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsKeysWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMembers string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMembersRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMembers = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMembersWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMembers = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMembersValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMembers const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMembersValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMembers {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMembers{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMembersRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMembersWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMetadata string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMetadataRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMetadata = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMetadataWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMetadata = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMetadataValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMetadata const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMetadataValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMetadata {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMetadata{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMetadataRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsMetadataWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministration string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministration = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministration const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministration {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministration{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationAdministrationWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationHooks string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationHooksRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationHooks = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationHooks = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationHooksValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationHooks const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationHooksValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationHooks {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationHooks{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationHooksRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationHooksWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPackages string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPackages = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPackages = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPackages const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPackagesValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPackages {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPackages{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPackagesRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPackagesWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPlan string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPlanRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPlan = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPlan = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPlanValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPlan const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPlanValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPlan {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPlan{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPlanRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationPlanWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationProjects string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationProjects = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationProjects const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationProjectsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationProjects {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationProjects{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationProjectsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationProjectsWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSecrets string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSecrets = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSecrets const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSecretsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSecrets {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSecrets{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSecretsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSecretsWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunners{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationSelfHostedRunnersWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlocking{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsOrganizationUserBlockingWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPackages string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPackagesRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPackages = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPackagesWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPackages = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPackagesValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPackages const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPackagesValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPackages {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPackages{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPackagesRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPackagesWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPages string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPagesRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPages = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPagesWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPages = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPagesValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPages const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPagesValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPages {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPages{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPagesRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPagesWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPullRequests string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPullRequestsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPullRequests = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPullRequestsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPullRequests = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPullRequestsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPullRequests const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPullRequestsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPullRequests {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPullRequests{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPullRequestsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsPullRequestsWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryHooks string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryHooksRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryHooks = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryHooks = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryHooksValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryHooks const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryHooksValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryHooks {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryHooks{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryHooksRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryHooksWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryProjects string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryProjects = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryProjects = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryProjects const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryProjectsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryProjects {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryProjects{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryProjectsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsRepositoryProjectsWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlerts{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretScanningAlertsWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecrets string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecrets = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecrets = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecrets const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecrets {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecrets{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecretsWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityEvents string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityEventsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityEvents = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityEventsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityEvents = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityEventsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityEvents const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityEventsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityEvents {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityEvents{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityEventsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityEventsWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlert{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSecurityScanningAlertWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSingleFile string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSingleFileRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSingleFile = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSingleFileWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSingleFile = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSingleFileValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSingleFile const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSingleFileValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSingleFile {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSingleFile{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSingleFileRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsSingleFileWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsStatuses string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsStatusesRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsStatuses = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsStatusesWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsStatuses = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsStatusesValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsStatuses const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsStatusesValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsStatuses {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsStatuses{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsStatusesRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsStatusesWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsTeamDiscussions string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsTeamDiscussions = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsTeamDiscussions = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsTeamDiscussions const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsTeamDiscussionsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsTeamDiscussions {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsTeamDiscussions{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsTeamDiscussionsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsTeamDiscussionsWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlerts{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsVulnerabilityAlertsWrite,
	}
}

type WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsWorkflows string

const (
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsWorkflowsRead WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsWorkflows = "read"
	WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsWorkflowsWrite WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsWorkflows = "write"
)

// PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsWorkflowsValues returns the possible values for the WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsWorkflows const type.
func PossibleWebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsWorkflowsValues() []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsWorkflows {
	return []WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsWorkflows{
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsWorkflowsRead,
		WebhookIssuesUnpinnedIssuePerformedViaGithubAppPermissionsWorkflowsWrite,
	}
}

// WebhookIssuesUnpinnedIssueState - State of the issue; either 'open' or 'closed'
type WebhookIssuesUnpinnedIssueState string

const (
	WebhookIssuesUnpinnedIssueStateClosed WebhookIssuesUnpinnedIssueState = "closed"
	WebhookIssuesUnpinnedIssueStateOpen WebhookIssuesUnpinnedIssueState = "open"
)

// PossibleWebhookIssuesUnpinnedIssueStateValues returns the possible values for the WebhookIssuesUnpinnedIssueState const type.
func PossibleWebhookIssuesUnpinnedIssueStateValues() []WebhookIssuesUnpinnedIssueState {
	return []WebhookIssuesUnpinnedIssueState{
		WebhookIssuesUnpinnedIssueStateClosed,
		WebhookIssuesUnpinnedIssueStateOpen,
	}
}

type WebhookIssuesUnpinnedIssueUserType string

const (
	WebhookIssuesUnpinnedIssueUserTypeBot WebhookIssuesUnpinnedIssueUserType = "Bot"
	WebhookIssuesUnpinnedIssueUserTypeOrganization WebhookIssuesUnpinnedIssueUserType = "Organization"
	WebhookIssuesUnpinnedIssueUserTypeUser WebhookIssuesUnpinnedIssueUserType = "User"
)

// PossibleWebhookIssuesUnpinnedIssueUserTypeValues returns the possible values for the WebhookIssuesUnpinnedIssueUserType const type.
func PossibleWebhookIssuesUnpinnedIssueUserTypeValues() []WebhookIssuesUnpinnedIssueUserType {
	return []WebhookIssuesUnpinnedIssueUserType{
		WebhookIssuesUnpinnedIssueUserTypeBot,
		WebhookIssuesUnpinnedIssueUserTypeOrganization,
		WebhookIssuesUnpinnedIssueUserTypeUser,
	}
}

type WebhookLabelCreatedAction string

const (
	WebhookLabelCreatedActionCreated WebhookLabelCreatedAction = "created"
)

// PossibleWebhookLabelCreatedActionValues returns the possible values for the WebhookLabelCreatedAction const type.
func PossibleWebhookLabelCreatedActionValues() []WebhookLabelCreatedAction {
	return []WebhookLabelCreatedAction{
		WebhookLabelCreatedActionCreated,
	}
}

type WebhookLabelDeletedAction string

const (
	WebhookLabelDeletedActionDeleted WebhookLabelDeletedAction = "deleted"
)

// PossibleWebhookLabelDeletedActionValues returns the possible values for the WebhookLabelDeletedAction const type.
func PossibleWebhookLabelDeletedActionValues() []WebhookLabelDeletedAction {
	return []WebhookLabelDeletedAction{
		WebhookLabelDeletedActionDeleted,
	}
}

type WebhookLabelEditedAction string

const (
	WebhookLabelEditedActionEdited WebhookLabelEditedAction = "edited"
)

// PossibleWebhookLabelEditedActionValues returns the possible values for the WebhookLabelEditedAction const type.
func PossibleWebhookLabelEditedActionValues() []WebhookLabelEditedAction {
	return []WebhookLabelEditedAction{
		WebhookLabelEditedActionEdited,
	}
}

type WebhookMarketplacePurchaseCancelledAction string

const (
	WebhookMarketplacePurchaseCancelledActionCancelled WebhookMarketplacePurchaseCancelledAction = "cancelled"
)

// PossibleWebhookMarketplacePurchaseCancelledActionValues returns the possible values for the WebhookMarketplacePurchaseCancelledAction const type.
func PossibleWebhookMarketplacePurchaseCancelledActionValues() []WebhookMarketplacePurchaseCancelledAction {
	return []WebhookMarketplacePurchaseCancelledAction{
		WebhookMarketplacePurchaseCancelledActionCancelled,
	}
}

type WebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModel string

const (
	WebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModelFLATRATE WebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModel = "FLAT_RATE"
	WebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModelFREE WebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModel = "FREE"
	WebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModelPERUNIT WebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModel = "PER_UNIT"
)

// PossibleWebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModelValues returns the possible values for the WebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModel const type.
func PossibleWebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModelValues() []WebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModel {
	return []WebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModel{
		WebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModelFLATRATE,
		WebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModelFREE,
		WebhookMarketplacePurchaseCancelledMarketplacePurchase0PlanPriceModelPERUNIT,
	}
}

type WebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModel string

const (
	WebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModelFLATRATE WebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModel = "FLAT_RATE"
	WebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModelFREE WebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModel = "FREE"
	WebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModelPERUNIT WebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModel = "PER_UNIT"
)

// PossibleWebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModelValues returns the possible values for the WebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModel const type.
func PossibleWebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModelValues() []WebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModel {
	return []WebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModel{
		WebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModelFLATRATE,
		WebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModelFREE,
		WebhookMarketplacePurchaseCancelledMarketplacePurchase1PlanPriceModelPERUNIT,
	}
}

type WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModel string

const (
	WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModelFLATRATE WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModel = "FLAT_RATE"
	WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModelFREE WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModel = "FREE"
	WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModelPERUNIT WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModel = "PER_UNIT"
)

// PossibleWebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModelValues returns the possible values for the WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModel const type.
func PossibleWebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModelValues() []WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModel {
	return []WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModel{
		WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModelFLATRATE,
		WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModelFREE,
		WebhookMarketplacePurchaseCancelledPreviousMarketplacePurchasePlanPriceModelPERUNIT,
	}
}

type WebhookMarketplacePurchaseChangedAction string

const (
	WebhookMarketplacePurchaseChangedActionChanged WebhookMarketplacePurchaseChangedAction = "changed"
)

// PossibleWebhookMarketplacePurchaseChangedActionValues returns the possible values for the WebhookMarketplacePurchaseChangedAction const type.
func PossibleWebhookMarketplacePurchaseChangedActionValues() []WebhookMarketplacePurchaseChangedAction {
	return []WebhookMarketplacePurchaseChangedAction{
		WebhookMarketplacePurchaseChangedActionChanged,
	}
}

type WebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModel string

const (
	WebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModelFLATRATE WebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModel = "FLAT_RATE"
	WebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModelFREE WebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModel = "FREE"
	WebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModelPERUNIT WebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModel = "PER_UNIT"
)

// PossibleWebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModelValues returns the possible values for the WebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModel const type.
func PossibleWebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModelValues() []WebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModel {
	return []WebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModel{
		WebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModelFLATRATE,
		WebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModelFREE,
		WebhookMarketplacePurchaseChangedMarketplacePurchase0PlanPriceModelPERUNIT,
	}
}

type WebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModel string

const (
	WebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModelFLATRATE WebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModel = "FLAT_RATE"
	WebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModelFREE WebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModel = "FREE"
	WebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModelPERUNIT WebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModel = "PER_UNIT"
)

// PossibleWebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModelValues returns the possible values for the WebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModel const type.
func PossibleWebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModelValues() []WebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModel {
	return []WebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModel{
		WebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModelFLATRATE,
		WebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModelFREE,
		WebhookMarketplacePurchaseChangedMarketplacePurchase1PlanPriceModelPERUNIT,
	}
}

type WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModel string

const (
	WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModelFLATRATE WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModel = "FLAT_RATE"
	WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModelFREE WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModel = "FREE"
	WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModelPERUNIT WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModel = "PER_UNIT"
)

// PossibleWebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModelValues returns the possible values for the WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModel const type.
func PossibleWebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModelValues() []WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModel {
	return []WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModel{
		WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModelFLATRATE,
		WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModelFREE,
		WebhookMarketplacePurchaseChangedPreviousMarketplacePurchasePlanPriceModelPERUNIT,
	}
}

type WebhookMarketplacePurchasePendingChangeAction string

const (
	WebhookMarketplacePurchasePendingChangeActionPendingChange WebhookMarketplacePurchasePendingChangeAction = "pending_change"
)

// PossibleWebhookMarketplacePurchasePendingChangeActionValues returns the possible values for the WebhookMarketplacePurchasePendingChangeAction const type.
func PossibleWebhookMarketplacePurchasePendingChangeActionValues() []WebhookMarketplacePurchasePendingChangeAction {
	return []WebhookMarketplacePurchasePendingChangeAction{
		WebhookMarketplacePurchasePendingChangeActionPendingChange,
	}
}

type WebhookMarketplacePurchasePendingChangeCancelledAction string

const (
	WebhookMarketplacePurchasePendingChangeCancelledActionPendingChangeCancelled WebhookMarketplacePurchasePendingChangeCancelledAction = "pending_change_cancelled"
)

// PossibleWebhookMarketplacePurchasePendingChangeCancelledActionValues returns the possible values for the WebhookMarketplacePurchasePendingChangeCancelledAction const type.
func PossibleWebhookMarketplacePurchasePendingChangeCancelledActionValues() []WebhookMarketplacePurchasePendingChangeCancelledAction {
	return []WebhookMarketplacePurchasePendingChangeCancelledAction{
		WebhookMarketplacePurchasePendingChangeCancelledActionPendingChangeCancelled,
	}
}

type WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModel string

const (
	WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModelFLATRATE WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModel = "FLAT_RATE"
	WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModelFREE WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModel = "FREE"
	WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModelPERUNIT WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModel = "PER_UNIT"
)

// PossibleWebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModelValues returns the possible values for the WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModel const type.
func PossibleWebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModelValues() []WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModel {
	return []WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModel{
		WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModelFLATRATE,
		WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModelFREE,
		WebhookMarketplacePurchasePendingChangeCancelledMarketplacePurchase0PlanPriceModelPERUNIT,
	}
}

type WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModel string

const (
	WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModelFLATRATE WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModel = "FLAT_RATE"
	WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModelFREE WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModel = "FREE"
	WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModelPERUNIT WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModel = "PER_UNIT"
)

// PossibleWebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModelValues returns the possible values for the WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModel const type.
func PossibleWebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModelValues() []WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModel {
	return []WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModel{
		WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModelFLATRATE,
		WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModelFREE,
		WebhookMarketplacePurchasePendingChangeCancelledPreviousMarketplacePurchasePlanPriceModelPERUNIT,
	}
}

type WebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModel string

const (
	WebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModelFLATRATE WebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModel = "FLAT_RATE"
	WebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModelFREE WebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModel = "FREE"
	WebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModelPERUNIT WebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModel = "PER_UNIT"
)

// PossibleWebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModelValues returns the possible values for the WebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModel const type.
func PossibleWebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModelValues() []WebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModel {
	return []WebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModel{
		WebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModelFLATRATE,
		WebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModelFREE,
		WebhookMarketplacePurchasePendingChangeMarketplacePurchase0PlanPriceModelPERUNIT,
	}
}

type WebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModel string

const (
	WebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModelFLATRATE WebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModel = "FLAT_RATE"
	WebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModelFREE WebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModel = "FREE"
	WebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModelPERUNIT WebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModel = "PER_UNIT"
)

// PossibleWebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModelValues returns the possible values for the WebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModel const type.
func PossibleWebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModelValues() []WebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModel {
	return []WebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModel{
		WebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModelFLATRATE,
		WebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModelFREE,
		WebhookMarketplacePurchasePendingChangeMarketplacePurchase1PlanPriceModelPERUNIT,
	}
}

type WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModel string

const (
	WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModelFLATRATE WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModel = "FLAT_RATE"
	WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModelFREE WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModel = "FREE"
	WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModelPERUNIT WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModel = "PER_UNIT"
)

// PossibleWebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModelValues returns the possible values for the WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModel const type.
func PossibleWebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModelValues() []WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModel {
	return []WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModel{
		WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModelFLATRATE,
		WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModelFREE,
		WebhookMarketplacePurchasePendingChangePreviousMarketplacePurchasePlanPriceModelPERUNIT,
	}
}

type WebhookMarketplacePurchasePurchasedAction string

const (
	WebhookMarketplacePurchasePurchasedActionPurchased WebhookMarketplacePurchasePurchasedAction = "purchased"
)

// PossibleWebhookMarketplacePurchasePurchasedActionValues returns the possible values for the WebhookMarketplacePurchasePurchasedAction const type.
func PossibleWebhookMarketplacePurchasePurchasedActionValues() []WebhookMarketplacePurchasePurchasedAction {
	return []WebhookMarketplacePurchasePurchasedAction{
		WebhookMarketplacePurchasePurchasedActionPurchased,
	}
}

type WebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModel string

const (
	WebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModelFLATRATE WebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModel = "FLAT_RATE"
	WebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModelFREE WebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModel = "FREE"
	WebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModelPERUNIT WebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModel = "PER_UNIT"
)

// PossibleWebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModelValues returns the possible values for the WebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModel const type.
func PossibleWebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModelValues() []WebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModel {
	return []WebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModel{
		WebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModelFLATRATE,
		WebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModelFREE,
		WebhookMarketplacePurchasePurchasedMarketplacePurchase0PlanPriceModelPERUNIT,
	}
}

type WebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModel string

const (
	WebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModelFLATRATE WebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModel = "FLAT_RATE"
	WebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModelFREE WebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModel = "FREE"
	WebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModelPERUNIT WebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModel = "PER_UNIT"
)

// PossibleWebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModelValues returns the possible values for the WebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModel const type.
func PossibleWebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModelValues() []WebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModel {
	return []WebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModel{
		WebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModelFLATRATE,
		WebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModelFREE,
		WebhookMarketplacePurchasePurchasedMarketplacePurchase1PlanPriceModelPERUNIT,
	}
}

type WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModel string

const (
	WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModelFLATRATE WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModel = "FLAT_RATE"
	WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModelFREE WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModel = "FREE"
	WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModelPERUNIT WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModel = "PER_UNIT"
)

// PossibleWebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModelValues returns the possible values for the WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModel const type.
func PossibleWebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModelValues() []WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModel {
	return []WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModel{
		WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModelFLATRATE,
		WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModelFREE,
		WebhookMarketplacePurchasePurchasedPreviousMarketplacePurchasePlanPriceModelPERUNIT,
	}
}

type WebhookMemberAddedAction string

const (
	WebhookMemberAddedActionAdded WebhookMemberAddedAction = "added"
)

// PossibleWebhookMemberAddedActionValues returns the possible values for the WebhookMemberAddedAction const type.
func PossibleWebhookMemberAddedActionValues() []WebhookMemberAddedAction {
	return []WebhookMemberAddedAction{
		WebhookMemberAddedActionAdded,
	}
}

type WebhookMemberAddedChangesPermissionTo string

const (
	WebhookMemberAddedChangesPermissionToAdmin WebhookMemberAddedChangesPermissionTo = "admin"
	WebhookMemberAddedChangesPermissionToRead WebhookMemberAddedChangesPermissionTo = "read"
	WebhookMemberAddedChangesPermissionToWrite WebhookMemberAddedChangesPermissionTo = "write"
)

// PossibleWebhookMemberAddedChangesPermissionToValues returns the possible values for the WebhookMemberAddedChangesPermissionTo const type.
func PossibleWebhookMemberAddedChangesPermissionToValues() []WebhookMemberAddedChangesPermissionTo {
	return []WebhookMemberAddedChangesPermissionTo{
		WebhookMemberAddedChangesPermissionToAdmin,
		WebhookMemberAddedChangesPermissionToRead,
		WebhookMemberAddedChangesPermissionToWrite,
	}
}

type WebhookMemberAddedMemberType string

const (
	WebhookMemberAddedMemberTypeBot WebhookMemberAddedMemberType = "Bot"
	WebhookMemberAddedMemberTypeOrganization WebhookMemberAddedMemberType = "Organization"
	WebhookMemberAddedMemberTypeUser WebhookMemberAddedMemberType = "User"
)

// PossibleWebhookMemberAddedMemberTypeValues returns the possible values for the WebhookMemberAddedMemberType const type.
func PossibleWebhookMemberAddedMemberTypeValues() []WebhookMemberAddedMemberType {
	return []WebhookMemberAddedMemberType{
		WebhookMemberAddedMemberTypeBot,
		WebhookMemberAddedMemberTypeOrganization,
		WebhookMemberAddedMemberTypeUser,
	}
}

type WebhookMemberEditedAction string

const (
	WebhookMemberEditedActionEdited WebhookMemberEditedAction = "edited"
)

// PossibleWebhookMemberEditedActionValues returns the possible values for the WebhookMemberEditedAction const type.
func PossibleWebhookMemberEditedActionValues() []WebhookMemberEditedAction {
	return []WebhookMemberEditedAction{
		WebhookMemberEditedActionEdited,
	}
}

type WebhookMemberEditedMemberType string

const (
	WebhookMemberEditedMemberTypeBot WebhookMemberEditedMemberType = "Bot"
	WebhookMemberEditedMemberTypeOrganization WebhookMemberEditedMemberType = "Organization"
	WebhookMemberEditedMemberTypeUser WebhookMemberEditedMemberType = "User"
)

// PossibleWebhookMemberEditedMemberTypeValues returns the possible values for the WebhookMemberEditedMemberType const type.
func PossibleWebhookMemberEditedMemberTypeValues() []WebhookMemberEditedMemberType {
	return []WebhookMemberEditedMemberType{
		WebhookMemberEditedMemberTypeBot,
		WebhookMemberEditedMemberTypeOrganization,
		WebhookMemberEditedMemberTypeUser,
	}
}

type WebhookMemberRemovedAction string

const (
	WebhookMemberRemovedActionRemoved WebhookMemberRemovedAction = "removed"
)

// PossibleWebhookMemberRemovedActionValues returns the possible values for the WebhookMemberRemovedAction const type.
func PossibleWebhookMemberRemovedActionValues() []WebhookMemberRemovedAction {
	return []WebhookMemberRemovedAction{
		WebhookMemberRemovedActionRemoved,
	}
}

type WebhookMemberRemovedMemberType string

const (
	WebhookMemberRemovedMemberTypeBot WebhookMemberRemovedMemberType = "Bot"
	WebhookMemberRemovedMemberTypeOrganization WebhookMemberRemovedMemberType = "Organization"
	WebhookMemberRemovedMemberTypeUser WebhookMemberRemovedMemberType = "User"
)

// PossibleWebhookMemberRemovedMemberTypeValues returns the possible values for the WebhookMemberRemovedMemberType const type.
func PossibleWebhookMemberRemovedMemberTypeValues() []WebhookMemberRemovedMemberType {
	return []WebhookMemberRemovedMemberType{
		WebhookMemberRemovedMemberTypeBot,
		WebhookMemberRemovedMemberTypeOrganization,
		WebhookMemberRemovedMemberTypeUser,
	}
}

type WebhookMembershipAddedAction string

const (
	WebhookMembershipAddedActionAdded WebhookMembershipAddedAction = "added"
)

// PossibleWebhookMembershipAddedActionValues returns the possible values for the WebhookMembershipAddedAction const type.
func PossibleWebhookMembershipAddedActionValues() []WebhookMembershipAddedAction {
	return []WebhookMembershipAddedAction{
		WebhookMembershipAddedActionAdded,
	}
}

type WebhookMembershipAddedMemberType string

const (
	WebhookMembershipAddedMemberTypeBot WebhookMembershipAddedMemberType = "Bot"
	WebhookMembershipAddedMemberTypeOrganization WebhookMembershipAddedMemberType = "Organization"
	WebhookMembershipAddedMemberTypeUser WebhookMembershipAddedMemberType = "User"
)

// PossibleWebhookMembershipAddedMemberTypeValues returns the possible values for the WebhookMembershipAddedMemberType const type.
func PossibleWebhookMembershipAddedMemberTypeValues() []WebhookMembershipAddedMemberType {
	return []WebhookMembershipAddedMemberType{
		WebhookMembershipAddedMemberTypeBot,
		WebhookMembershipAddedMemberTypeOrganization,
		WebhookMembershipAddedMemberTypeUser,
	}
}

// WebhookMembershipAddedScope - The scope of the membership. Currently, can only be team.
type WebhookMembershipAddedScope string

const (
	WebhookMembershipAddedScopeTeam WebhookMembershipAddedScope = "team"
)

// PossibleWebhookMembershipAddedScopeValues returns the possible values for the WebhookMembershipAddedScope const type.
func PossibleWebhookMembershipAddedScopeValues() []WebhookMembershipAddedScope {
	return []WebhookMembershipAddedScope{
		WebhookMembershipAddedScopeTeam,
	}
}

type WebhookMembershipAddedSenderType string

const (
	WebhookMembershipAddedSenderTypeBot WebhookMembershipAddedSenderType = "Bot"
	WebhookMembershipAddedSenderTypeOrganization WebhookMembershipAddedSenderType = "Organization"
	WebhookMembershipAddedSenderTypeUser WebhookMembershipAddedSenderType = "User"
)

// PossibleWebhookMembershipAddedSenderTypeValues returns the possible values for the WebhookMembershipAddedSenderType const type.
func PossibleWebhookMembershipAddedSenderTypeValues() []WebhookMembershipAddedSenderType {
	return []WebhookMembershipAddedSenderType{
		WebhookMembershipAddedSenderTypeBot,
		WebhookMembershipAddedSenderTypeOrganization,
		WebhookMembershipAddedSenderTypeUser,
	}
}

type WebhookMembershipAddedTeamParentPrivacy string

const (
	WebhookMembershipAddedTeamParentPrivacyClosed WebhookMembershipAddedTeamParentPrivacy = "closed"
	WebhookMembershipAddedTeamParentPrivacyOpen WebhookMembershipAddedTeamParentPrivacy = "open"
	WebhookMembershipAddedTeamParentPrivacySecret WebhookMembershipAddedTeamParentPrivacy = "secret"
)

// PossibleWebhookMembershipAddedTeamParentPrivacyValues returns the possible values for the WebhookMembershipAddedTeamParentPrivacy const type.
func PossibleWebhookMembershipAddedTeamParentPrivacyValues() []WebhookMembershipAddedTeamParentPrivacy {
	return []WebhookMembershipAddedTeamParentPrivacy{
		WebhookMembershipAddedTeamParentPrivacyClosed,
		WebhookMembershipAddedTeamParentPrivacyOpen,
		WebhookMembershipAddedTeamParentPrivacySecret,
	}
}

type WebhookMembershipAddedTeamPrivacy string

const (
	WebhookMembershipAddedTeamPrivacyClosed WebhookMembershipAddedTeamPrivacy = "closed"
	WebhookMembershipAddedTeamPrivacyOpen WebhookMembershipAddedTeamPrivacy = "open"
	WebhookMembershipAddedTeamPrivacySecret WebhookMembershipAddedTeamPrivacy = "secret"
)

// PossibleWebhookMembershipAddedTeamPrivacyValues returns the possible values for the WebhookMembershipAddedTeamPrivacy const type.
func PossibleWebhookMembershipAddedTeamPrivacyValues() []WebhookMembershipAddedTeamPrivacy {
	return []WebhookMembershipAddedTeamPrivacy{
		WebhookMembershipAddedTeamPrivacyClosed,
		WebhookMembershipAddedTeamPrivacyOpen,
		WebhookMembershipAddedTeamPrivacySecret,
	}
}

type WebhookMembershipRemovedAction string

const (
	WebhookMembershipRemovedActionRemoved WebhookMembershipRemovedAction = "removed"
)

// PossibleWebhookMembershipRemovedActionValues returns the possible values for the WebhookMembershipRemovedAction const type.
func PossibleWebhookMembershipRemovedActionValues() []WebhookMembershipRemovedAction {
	return []WebhookMembershipRemovedAction{
		WebhookMembershipRemovedActionRemoved,
	}
}

type WebhookMembershipRemovedMemberType string

const (
	WebhookMembershipRemovedMemberTypeBot WebhookMembershipRemovedMemberType = "Bot"
	WebhookMembershipRemovedMemberTypeOrganization WebhookMembershipRemovedMemberType = "Organization"
	WebhookMembershipRemovedMemberTypeUser WebhookMembershipRemovedMemberType = "User"
)

// PossibleWebhookMembershipRemovedMemberTypeValues returns the possible values for the WebhookMembershipRemovedMemberType const type.
func PossibleWebhookMembershipRemovedMemberTypeValues() []WebhookMembershipRemovedMemberType {
	return []WebhookMembershipRemovedMemberType{
		WebhookMembershipRemovedMemberTypeBot,
		WebhookMembershipRemovedMemberTypeOrganization,
		WebhookMembershipRemovedMemberTypeUser,
	}
}

// WebhookMembershipRemovedScope - The scope of the membership. Currently, can only be team.
type WebhookMembershipRemovedScope string

const (
	WebhookMembershipRemovedScopeOrganization WebhookMembershipRemovedScope = "organization"
	WebhookMembershipRemovedScopeTeam WebhookMembershipRemovedScope = "team"
)

// PossibleWebhookMembershipRemovedScopeValues returns the possible values for the WebhookMembershipRemovedScope const type.
func PossibleWebhookMembershipRemovedScopeValues() []WebhookMembershipRemovedScope {
	return []WebhookMembershipRemovedScope{
		WebhookMembershipRemovedScopeOrganization,
		WebhookMembershipRemovedScopeTeam,
	}
}

type WebhookMembershipRemovedSenderType string

const (
	WebhookMembershipRemovedSenderTypeBot WebhookMembershipRemovedSenderType = "Bot"
	WebhookMembershipRemovedSenderTypeOrganization WebhookMembershipRemovedSenderType = "Organization"
	WebhookMembershipRemovedSenderTypeUser WebhookMembershipRemovedSenderType = "User"
)

// PossibleWebhookMembershipRemovedSenderTypeValues returns the possible values for the WebhookMembershipRemovedSenderType const type.
func PossibleWebhookMembershipRemovedSenderTypeValues() []WebhookMembershipRemovedSenderType {
	return []WebhookMembershipRemovedSenderType{
		WebhookMembershipRemovedSenderTypeBot,
		WebhookMembershipRemovedSenderTypeOrganization,
		WebhookMembershipRemovedSenderTypeUser,
	}
}

type WebhookMembershipRemovedTeamParentPrivacy string

const (
	WebhookMembershipRemovedTeamParentPrivacyClosed WebhookMembershipRemovedTeamParentPrivacy = "closed"
	WebhookMembershipRemovedTeamParentPrivacyOpen WebhookMembershipRemovedTeamParentPrivacy = "open"
	WebhookMembershipRemovedTeamParentPrivacySecret WebhookMembershipRemovedTeamParentPrivacy = "secret"
)

// PossibleWebhookMembershipRemovedTeamParentPrivacyValues returns the possible values for the WebhookMembershipRemovedTeamParentPrivacy const type.
func PossibleWebhookMembershipRemovedTeamParentPrivacyValues() []WebhookMembershipRemovedTeamParentPrivacy {
	return []WebhookMembershipRemovedTeamParentPrivacy{
		WebhookMembershipRemovedTeamParentPrivacyClosed,
		WebhookMembershipRemovedTeamParentPrivacyOpen,
		WebhookMembershipRemovedTeamParentPrivacySecret,
	}
}

type WebhookMembershipRemovedTeamPrivacy string

const (
	WebhookMembershipRemovedTeamPrivacyClosed WebhookMembershipRemovedTeamPrivacy = "closed"
	WebhookMembershipRemovedTeamPrivacyOpen WebhookMembershipRemovedTeamPrivacy = "open"
	WebhookMembershipRemovedTeamPrivacySecret WebhookMembershipRemovedTeamPrivacy = "secret"
)

// PossibleWebhookMembershipRemovedTeamPrivacyValues returns the possible values for the WebhookMembershipRemovedTeamPrivacy const type.
func PossibleWebhookMembershipRemovedTeamPrivacyValues() []WebhookMembershipRemovedTeamPrivacy {
	return []WebhookMembershipRemovedTeamPrivacy{
		WebhookMembershipRemovedTeamPrivacyClosed,
		WebhookMembershipRemovedTeamPrivacyOpen,
		WebhookMembershipRemovedTeamPrivacySecret,
	}
}

type WebhookMetaDeletedAction string

const (
	WebhookMetaDeletedActionDeleted WebhookMetaDeletedAction = "deleted"
)

// PossibleWebhookMetaDeletedActionValues returns the possible values for the WebhookMetaDeletedAction const type.
func PossibleWebhookMetaDeletedActionValues() []WebhookMetaDeletedAction {
	return []WebhookMetaDeletedAction{
		WebhookMetaDeletedActionDeleted,
	}
}

type WebhookMetaDeletedHookConfigContentType string

const (
	WebhookMetaDeletedHookConfigContentTypeForm WebhookMetaDeletedHookConfigContentType = "form"
	WebhookMetaDeletedHookConfigContentTypeJSON WebhookMetaDeletedHookConfigContentType = "json"
)

// PossibleWebhookMetaDeletedHookConfigContentTypeValues returns the possible values for the WebhookMetaDeletedHookConfigContentType const type.
func PossibleWebhookMetaDeletedHookConfigContentTypeValues() []WebhookMetaDeletedHookConfigContentType {
	return []WebhookMetaDeletedHookConfigContentType{
		WebhookMetaDeletedHookConfigContentTypeForm,
		WebhookMetaDeletedHookConfigContentTypeJSON,
	}
}

type WebhookMetaDeletedHookEventsItem string

const (
	WebhookMetaDeletedHookEventsItemAsterisk WebhookMetaDeletedHookEventsItem = "*"
	WebhookMetaDeletedHookEventsItemBranchProtectionRule WebhookMetaDeletedHookEventsItem = "branch_protection_rule"
	WebhookMetaDeletedHookEventsItemCheckRun WebhookMetaDeletedHookEventsItem = "check_run"
	WebhookMetaDeletedHookEventsItemCheckSuite WebhookMetaDeletedHookEventsItem = "check_suite"
	WebhookMetaDeletedHookEventsItemCodeScanningAlert WebhookMetaDeletedHookEventsItem = "code_scanning_alert"
	WebhookMetaDeletedHookEventsItemCommitComment WebhookMetaDeletedHookEventsItem = "commit_comment"
	WebhookMetaDeletedHookEventsItemCreate WebhookMetaDeletedHookEventsItem = "create"
	WebhookMetaDeletedHookEventsItemDelete WebhookMetaDeletedHookEventsItem = "delete"
	WebhookMetaDeletedHookEventsItemDeployKey WebhookMetaDeletedHookEventsItem = "deploy_key"
	WebhookMetaDeletedHookEventsItemDeployment WebhookMetaDeletedHookEventsItem = "deployment"
	WebhookMetaDeletedHookEventsItemDeploymentStatus WebhookMetaDeletedHookEventsItem = "deployment_status"
	WebhookMetaDeletedHookEventsItemDiscussion WebhookMetaDeletedHookEventsItem = "discussion"
	WebhookMetaDeletedHookEventsItemDiscussionComment WebhookMetaDeletedHookEventsItem = "discussion_comment"
	WebhookMetaDeletedHookEventsItemFork WebhookMetaDeletedHookEventsItem = "fork"
	WebhookMetaDeletedHookEventsItemGollum WebhookMetaDeletedHookEventsItem = "gollum"
	WebhookMetaDeletedHookEventsItemIssueComment WebhookMetaDeletedHookEventsItem = "issue_comment"
	WebhookMetaDeletedHookEventsItemIssues WebhookMetaDeletedHookEventsItem = "issues"
	WebhookMetaDeletedHookEventsItemLabel WebhookMetaDeletedHookEventsItem = "label"
	WebhookMetaDeletedHookEventsItemMember WebhookMetaDeletedHookEventsItem = "member"
	WebhookMetaDeletedHookEventsItemMembership WebhookMetaDeletedHookEventsItem = "membership"
	WebhookMetaDeletedHookEventsItemMeta WebhookMetaDeletedHookEventsItem = "meta"
	WebhookMetaDeletedHookEventsItemMilestone WebhookMetaDeletedHookEventsItem = "milestone"
	WebhookMetaDeletedHookEventsItemOrgBlock WebhookMetaDeletedHookEventsItem = "org_block"
	WebhookMetaDeletedHookEventsItemOrganization WebhookMetaDeletedHookEventsItem = "organization"
	WebhookMetaDeletedHookEventsItemPackage WebhookMetaDeletedHookEventsItem = "package"
	WebhookMetaDeletedHookEventsItemPageBuild WebhookMetaDeletedHookEventsItem = "page_build"
	WebhookMetaDeletedHookEventsItemProject WebhookMetaDeletedHookEventsItem = "project"
	WebhookMetaDeletedHookEventsItemProjectCard WebhookMetaDeletedHookEventsItem = "project_card"
	WebhookMetaDeletedHookEventsItemProjectColumn WebhookMetaDeletedHookEventsItem = "project_column"
	WebhookMetaDeletedHookEventsItemProjectsV2Item WebhookMetaDeletedHookEventsItem = "projects_v2_item"
	WebhookMetaDeletedHookEventsItemPublic WebhookMetaDeletedHookEventsItem = "public"
	WebhookMetaDeletedHookEventsItemPullRequest WebhookMetaDeletedHookEventsItem = "pull_request"
	WebhookMetaDeletedHookEventsItemPullRequestReview WebhookMetaDeletedHookEventsItem = "pull_request_review"
	WebhookMetaDeletedHookEventsItemPullRequestReviewComment WebhookMetaDeletedHookEventsItem = "pull_request_review_comment"
	WebhookMetaDeletedHookEventsItemPullRequestReviewThread WebhookMetaDeletedHookEventsItem = "pull_request_review_thread"
	WebhookMetaDeletedHookEventsItemPush WebhookMetaDeletedHookEventsItem = "push"
	WebhookMetaDeletedHookEventsItemRegistryPackage WebhookMetaDeletedHookEventsItem = "registry_package"
	WebhookMetaDeletedHookEventsItemRelease WebhookMetaDeletedHookEventsItem = "release"
	WebhookMetaDeletedHookEventsItemRepository WebhookMetaDeletedHookEventsItem = "repository"
	WebhookMetaDeletedHookEventsItemRepositoryDispatch WebhookMetaDeletedHookEventsItem = "repository_dispatch"
	WebhookMetaDeletedHookEventsItemRepositoryImport WebhookMetaDeletedHookEventsItem = "repository_import"
	WebhookMetaDeletedHookEventsItemRepositoryVulnerabilityAlert WebhookMetaDeletedHookEventsItem = "repository_vulnerability_alert"
	WebhookMetaDeletedHookEventsItemSecretScanningAlert WebhookMetaDeletedHookEventsItem = "secret_scanning_alert"
	WebhookMetaDeletedHookEventsItemSecretScanningAlertLocation WebhookMetaDeletedHookEventsItem = "secret_scanning_alert_location"
	WebhookMetaDeletedHookEventsItemSecurityAndAnalysis WebhookMetaDeletedHookEventsItem = "security_and_analysis"
	WebhookMetaDeletedHookEventsItemStar WebhookMetaDeletedHookEventsItem = "star"
	WebhookMetaDeletedHookEventsItemStatus WebhookMetaDeletedHookEventsItem = "status"
	WebhookMetaDeletedHookEventsItemTeam WebhookMetaDeletedHookEventsItem = "team"
	WebhookMetaDeletedHookEventsItemTeamAdd WebhookMetaDeletedHookEventsItem = "team_add"
	WebhookMetaDeletedHookEventsItemWatch WebhookMetaDeletedHookEventsItem = "watch"
	WebhookMetaDeletedHookEventsItemWorkflowJob WebhookMetaDeletedHookEventsItem = "workflow_job"
	WebhookMetaDeletedHookEventsItemWorkflowRun WebhookMetaDeletedHookEventsItem = "workflow_run"
)

// PossibleWebhookMetaDeletedHookEventsItemValues returns the possible values for the WebhookMetaDeletedHookEventsItem const type.
func PossibleWebhookMetaDeletedHookEventsItemValues() []WebhookMetaDeletedHookEventsItem {
	return []WebhookMetaDeletedHookEventsItem{
		WebhookMetaDeletedHookEventsItemAsterisk,
		WebhookMetaDeletedHookEventsItemBranchProtectionRule,
		WebhookMetaDeletedHookEventsItemCheckRun,
		WebhookMetaDeletedHookEventsItemCheckSuite,
		WebhookMetaDeletedHookEventsItemCodeScanningAlert,
		WebhookMetaDeletedHookEventsItemCommitComment,
		WebhookMetaDeletedHookEventsItemCreate,
		WebhookMetaDeletedHookEventsItemDelete,
		WebhookMetaDeletedHookEventsItemDeployKey,
		WebhookMetaDeletedHookEventsItemDeployment,
		WebhookMetaDeletedHookEventsItemDeploymentStatus,
		WebhookMetaDeletedHookEventsItemDiscussion,
		WebhookMetaDeletedHookEventsItemDiscussionComment,
		WebhookMetaDeletedHookEventsItemFork,
		WebhookMetaDeletedHookEventsItemGollum,
		WebhookMetaDeletedHookEventsItemIssueComment,
		WebhookMetaDeletedHookEventsItemIssues,
		WebhookMetaDeletedHookEventsItemLabel,
		WebhookMetaDeletedHookEventsItemMember,
		WebhookMetaDeletedHookEventsItemMembership,
		WebhookMetaDeletedHookEventsItemMeta,
		WebhookMetaDeletedHookEventsItemMilestone,
		WebhookMetaDeletedHookEventsItemOrgBlock,
		WebhookMetaDeletedHookEventsItemOrganization,
		WebhookMetaDeletedHookEventsItemPackage,
		WebhookMetaDeletedHookEventsItemPageBuild,
		WebhookMetaDeletedHookEventsItemProject,
		WebhookMetaDeletedHookEventsItemProjectCard,
		WebhookMetaDeletedHookEventsItemProjectColumn,
		WebhookMetaDeletedHookEventsItemProjectsV2Item,
		WebhookMetaDeletedHookEventsItemPublic,
		WebhookMetaDeletedHookEventsItemPullRequest,
		WebhookMetaDeletedHookEventsItemPullRequestReview,
		WebhookMetaDeletedHookEventsItemPullRequestReviewComment,
		WebhookMetaDeletedHookEventsItemPullRequestReviewThread,
		WebhookMetaDeletedHookEventsItemPush,
		WebhookMetaDeletedHookEventsItemRegistryPackage,
		WebhookMetaDeletedHookEventsItemRelease,
		WebhookMetaDeletedHookEventsItemRepository,
		WebhookMetaDeletedHookEventsItemRepositoryDispatch,
		WebhookMetaDeletedHookEventsItemRepositoryImport,
		WebhookMetaDeletedHookEventsItemRepositoryVulnerabilityAlert,
		WebhookMetaDeletedHookEventsItemSecretScanningAlert,
		WebhookMetaDeletedHookEventsItemSecretScanningAlertLocation,
		WebhookMetaDeletedHookEventsItemSecurityAndAnalysis,
		WebhookMetaDeletedHookEventsItemStar,
		WebhookMetaDeletedHookEventsItemStatus,
		WebhookMetaDeletedHookEventsItemTeam,
		WebhookMetaDeletedHookEventsItemTeamAdd,
		WebhookMetaDeletedHookEventsItemWatch,
		WebhookMetaDeletedHookEventsItemWorkflowJob,
		WebhookMetaDeletedHookEventsItemWorkflowRun,
	}
}

type WebhookMilestoneClosedAction string

const (
	WebhookMilestoneClosedActionClosed WebhookMilestoneClosedAction = "closed"
)

// PossibleWebhookMilestoneClosedActionValues returns the possible values for the WebhookMilestoneClosedAction const type.
func PossibleWebhookMilestoneClosedActionValues() []WebhookMilestoneClosedAction {
	return []WebhookMilestoneClosedAction{
		WebhookMilestoneClosedActionClosed,
	}
}

type WebhookMilestoneClosedMilestoneCreatorType string

const (
	WebhookMilestoneClosedMilestoneCreatorTypeBot WebhookMilestoneClosedMilestoneCreatorType = "Bot"
	WebhookMilestoneClosedMilestoneCreatorTypeMannequin WebhookMilestoneClosedMilestoneCreatorType = "Mannequin"
	WebhookMilestoneClosedMilestoneCreatorTypeOrganization WebhookMilestoneClosedMilestoneCreatorType = "Organization"
	WebhookMilestoneClosedMilestoneCreatorTypeUser WebhookMilestoneClosedMilestoneCreatorType = "User"
)

// PossibleWebhookMilestoneClosedMilestoneCreatorTypeValues returns the possible values for the WebhookMilestoneClosedMilestoneCreatorType const type.
func PossibleWebhookMilestoneClosedMilestoneCreatorTypeValues() []WebhookMilestoneClosedMilestoneCreatorType {
	return []WebhookMilestoneClosedMilestoneCreatorType{
		WebhookMilestoneClosedMilestoneCreatorTypeBot,
		WebhookMilestoneClosedMilestoneCreatorTypeMannequin,
		WebhookMilestoneClosedMilestoneCreatorTypeOrganization,
		WebhookMilestoneClosedMilestoneCreatorTypeUser,
	}
}

// WebhookMilestoneClosedMilestoneState - The state of the milestone.
type WebhookMilestoneClosedMilestoneState string

const (
	WebhookMilestoneClosedMilestoneStateClosed WebhookMilestoneClosedMilestoneState = "closed"
	WebhookMilestoneClosedMilestoneStateOpen WebhookMilestoneClosedMilestoneState = "open"
)

// PossibleWebhookMilestoneClosedMilestoneStateValues returns the possible values for the WebhookMilestoneClosedMilestoneState const type.
func PossibleWebhookMilestoneClosedMilestoneStateValues() []WebhookMilestoneClosedMilestoneState {
	return []WebhookMilestoneClosedMilestoneState{
		WebhookMilestoneClosedMilestoneStateClosed,
		WebhookMilestoneClosedMilestoneStateOpen,
	}
}

type WebhookMilestoneCreatedAction string

const (
	WebhookMilestoneCreatedActionCreated WebhookMilestoneCreatedAction = "created"
)

// PossibleWebhookMilestoneCreatedActionValues returns the possible values for the WebhookMilestoneCreatedAction const type.
func PossibleWebhookMilestoneCreatedActionValues() []WebhookMilestoneCreatedAction {
	return []WebhookMilestoneCreatedAction{
		WebhookMilestoneCreatedActionCreated,
	}
}

type WebhookMilestoneCreatedMilestoneCreatorType string

const (
	WebhookMilestoneCreatedMilestoneCreatorTypeBot WebhookMilestoneCreatedMilestoneCreatorType = "Bot"
	WebhookMilestoneCreatedMilestoneCreatorTypeOrganization WebhookMilestoneCreatedMilestoneCreatorType = "Organization"
	WebhookMilestoneCreatedMilestoneCreatorTypeUser WebhookMilestoneCreatedMilestoneCreatorType = "User"
)

// PossibleWebhookMilestoneCreatedMilestoneCreatorTypeValues returns the possible values for the WebhookMilestoneCreatedMilestoneCreatorType const type.
func PossibleWebhookMilestoneCreatedMilestoneCreatorTypeValues() []WebhookMilestoneCreatedMilestoneCreatorType {
	return []WebhookMilestoneCreatedMilestoneCreatorType{
		WebhookMilestoneCreatedMilestoneCreatorTypeBot,
		WebhookMilestoneCreatedMilestoneCreatorTypeOrganization,
		WebhookMilestoneCreatedMilestoneCreatorTypeUser,
	}
}

// WebhookMilestoneCreatedMilestoneState - The state of the milestone.
type WebhookMilestoneCreatedMilestoneState string

const (
	WebhookMilestoneCreatedMilestoneStateClosed WebhookMilestoneCreatedMilestoneState = "closed"
	WebhookMilestoneCreatedMilestoneStateOpen WebhookMilestoneCreatedMilestoneState = "open"
)

// PossibleWebhookMilestoneCreatedMilestoneStateValues returns the possible values for the WebhookMilestoneCreatedMilestoneState const type.
func PossibleWebhookMilestoneCreatedMilestoneStateValues() []WebhookMilestoneCreatedMilestoneState {
	return []WebhookMilestoneCreatedMilestoneState{
		WebhookMilestoneCreatedMilestoneStateClosed,
		WebhookMilestoneCreatedMilestoneStateOpen,
	}
}

type WebhookMilestoneDeletedAction string

const (
	WebhookMilestoneDeletedActionDeleted WebhookMilestoneDeletedAction = "deleted"
)

// PossibleWebhookMilestoneDeletedActionValues returns the possible values for the WebhookMilestoneDeletedAction const type.
func PossibleWebhookMilestoneDeletedActionValues() []WebhookMilestoneDeletedAction {
	return []WebhookMilestoneDeletedAction{
		WebhookMilestoneDeletedActionDeleted,
	}
}

type WebhookMilestoneDeletedMilestoneCreatorType string

const (
	WebhookMilestoneDeletedMilestoneCreatorTypeBot WebhookMilestoneDeletedMilestoneCreatorType = "Bot"
	WebhookMilestoneDeletedMilestoneCreatorTypeMannequin WebhookMilestoneDeletedMilestoneCreatorType = "Mannequin"
	WebhookMilestoneDeletedMilestoneCreatorTypeOrganization WebhookMilestoneDeletedMilestoneCreatorType = "Organization"
	WebhookMilestoneDeletedMilestoneCreatorTypeUser WebhookMilestoneDeletedMilestoneCreatorType = "User"
)

// PossibleWebhookMilestoneDeletedMilestoneCreatorTypeValues returns the possible values for the WebhookMilestoneDeletedMilestoneCreatorType const type.
func PossibleWebhookMilestoneDeletedMilestoneCreatorTypeValues() []WebhookMilestoneDeletedMilestoneCreatorType {
	return []WebhookMilestoneDeletedMilestoneCreatorType{
		WebhookMilestoneDeletedMilestoneCreatorTypeBot,
		WebhookMilestoneDeletedMilestoneCreatorTypeMannequin,
		WebhookMilestoneDeletedMilestoneCreatorTypeOrganization,
		WebhookMilestoneDeletedMilestoneCreatorTypeUser,
	}
}

// WebhookMilestoneDeletedMilestoneState - The state of the milestone.
type WebhookMilestoneDeletedMilestoneState string

const (
	WebhookMilestoneDeletedMilestoneStateClosed WebhookMilestoneDeletedMilestoneState = "closed"
	WebhookMilestoneDeletedMilestoneStateOpen WebhookMilestoneDeletedMilestoneState = "open"
)

// PossibleWebhookMilestoneDeletedMilestoneStateValues returns the possible values for the WebhookMilestoneDeletedMilestoneState const type.
func PossibleWebhookMilestoneDeletedMilestoneStateValues() []WebhookMilestoneDeletedMilestoneState {
	return []WebhookMilestoneDeletedMilestoneState{
		WebhookMilestoneDeletedMilestoneStateClosed,
		WebhookMilestoneDeletedMilestoneStateOpen,
	}
}

type WebhookMilestoneEditedAction string

const (
	WebhookMilestoneEditedActionEdited WebhookMilestoneEditedAction = "edited"
)

// PossibleWebhookMilestoneEditedActionValues returns the possible values for the WebhookMilestoneEditedAction const type.
func PossibleWebhookMilestoneEditedActionValues() []WebhookMilestoneEditedAction {
	return []WebhookMilestoneEditedAction{
		WebhookMilestoneEditedActionEdited,
	}
}

type WebhookMilestoneEditedMilestoneCreatorType string

const (
	WebhookMilestoneEditedMilestoneCreatorTypeBot WebhookMilestoneEditedMilestoneCreatorType = "Bot"
	WebhookMilestoneEditedMilestoneCreatorTypeMannequin WebhookMilestoneEditedMilestoneCreatorType = "Mannequin"
	WebhookMilestoneEditedMilestoneCreatorTypeOrganization WebhookMilestoneEditedMilestoneCreatorType = "Organization"
	WebhookMilestoneEditedMilestoneCreatorTypeUser WebhookMilestoneEditedMilestoneCreatorType = "User"
)

// PossibleWebhookMilestoneEditedMilestoneCreatorTypeValues returns the possible values for the WebhookMilestoneEditedMilestoneCreatorType const type.
func PossibleWebhookMilestoneEditedMilestoneCreatorTypeValues() []WebhookMilestoneEditedMilestoneCreatorType {
	return []WebhookMilestoneEditedMilestoneCreatorType{
		WebhookMilestoneEditedMilestoneCreatorTypeBot,
		WebhookMilestoneEditedMilestoneCreatorTypeMannequin,
		WebhookMilestoneEditedMilestoneCreatorTypeOrganization,
		WebhookMilestoneEditedMilestoneCreatorTypeUser,
	}
}

// WebhookMilestoneEditedMilestoneState - The state of the milestone.
type WebhookMilestoneEditedMilestoneState string

const (
	WebhookMilestoneEditedMilestoneStateClosed WebhookMilestoneEditedMilestoneState = "closed"
	WebhookMilestoneEditedMilestoneStateOpen WebhookMilestoneEditedMilestoneState = "open"
)

// PossibleWebhookMilestoneEditedMilestoneStateValues returns the possible values for the WebhookMilestoneEditedMilestoneState const type.
func PossibleWebhookMilestoneEditedMilestoneStateValues() []WebhookMilestoneEditedMilestoneState {
	return []WebhookMilestoneEditedMilestoneState{
		WebhookMilestoneEditedMilestoneStateClosed,
		WebhookMilestoneEditedMilestoneStateOpen,
	}
}

type WebhookMilestoneOpenedAction string

const (
	WebhookMilestoneOpenedActionOpened WebhookMilestoneOpenedAction = "opened"
)

// PossibleWebhookMilestoneOpenedActionValues returns the possible values for the WebhookMilestoneOpenedAction const type.
func PossibleWebhookMilestoneOpenedActionValues() []WebhookMilestoneOpenedAction {
	return []WebhookMilestoneOpenedAction{
		WebhookMilestoneOpenedActionOpened,
	}
}

type WebhookMilestoneOpenedMilestoneCreatorType string

const (
	WebhookMilestoneOpenedMilestoneCreatorTypeBot WebhookMilestoneOpenedMilestoneCreatorType = "Bot"
	WebhookMilestoneOpenedMilestoneCreatorTypeOrganization WebhookMilestoneOpenedMilestoneCreatorType = "Organization"
	WebhookMilestoneOpenedMilestoneCreatorTypeUser WebhookMilestoneOpenedMilestoneCreatorType = "User"
)

// PossibleWebhookMilestoneOpenedMilestoneCreatorTypeValues returns the possible values for the WebhookMilestoneOpenedMilestoneCreatorType const type.
func PossibleWebhookMilestoneOpenedMilestoneCreatorTypeValues() []WebhookMilestoneOpenedMilestoneCreatorType {
	return []WebhookMilestoneOpenedMilestoneCreatorType{
		WebhookMilestoneOpenedMilestoneCreatorTypeBot,
		WebhookMilestoneOpenedMilestoneCreatorTypeOrganization,
		WebhookMilestoneOpenedMilestoneCreatorTypeUser,
	}
}

// WebhookMilestoneOpenedMilestoneState - The state of the milestone.
type WebhookMilestoneOpenedMilestoneState string

const (
	WebhookMilestoneOpenedMilestoneStateClosed WebhookMilestoneOpenedMilestoneState = "closed"
	WebhookMilestoneOpenedMilestoneStateOpen WebhookMilestoneOpenedMilestoneState = "open"
)

// PossibleWebhookMilestoneOpenedMilestoneStateValues returns the possible values for the WebhookMilestoneOpenedMilestoneState const type.
func PossibleWebhookMilestoneOpenedMilestoneStateValues() []WebhookMilestoneOpenedMilestoneState {
	return []WebhookMilestoneOpenedMilestoneState{
		WebhookMilestoneOpenedMilestoneStateClosed,
		WebhookMilestoneOpenedMilestoneStateOpen,
	}
}

type WebhookOrgBlockBlockedAction string

const (
	WebhookOrgBlockBlockedActionBlocked WebhookOrgBlockBlockedAction = "blocked"
)

// PossibleWebhookOrgBlockBlockedActionValues returns the possible values for the WebhookOrgBlockBlockedAction const type.
func PossibleWebhookOrgBlockBlockedActionValues() []WebhookOrgBlockBlockedAction {
	return []WebhookOrgBlockBlockedAction{
		WebhookOrgBlockBlockedActionBlocked,
	}
}

type WebhookOrgBlockBlockedUserType string

const (
	WebhookOrgBlockBlockedUserTypeBot WebhookOrgBlockBlockedUserType = "Bot"
	WebhookOrgBlockBlockedUserTypeOrganization WebhookOrgBlockBlockedUserType = "Organization"
	WebhookOrgBlockBlockedUserTypeUser WebhookOrgBlockBlockedUserType = "User"
)

// PossibleWebhookOrgBlockBlockedUserTypeValues returns the possible values for the WebhookOrgBlockBlockedUserType const type.
func PossibleWebhookOrgBlockBlockedUserTypeValues() []WebhookOrgBlockBlockedUserType {
	return []WebhookOrgBlockBlockedUserType{
		WebhookOrgBlockBlockedUserTypeBot,
		WebhookOrgBlockBlockedUserTypeOrganization,
		WebhookOrgBlockBlockedUserTypeUser,
	}
}

type WebhookOrgBlockUnblockedAction string

const (
	WebhookOrgBlockUnblockedActionUnblocked WebhookOrgBlockUnblockedAction = "unblocked"
)

// PossibleWebhookOrgBlockUnblockedActionValues returns the possible values for the WebhookOrgBlockUnblockedAction const type.
func PossibleWebhookOrgBlockUnblockedActionValues() []WebhookOrgBlockUnblockedAction {
	return []WebhookOrgBlockUnblockedAction{
		WebhookOrgBlockUnblockedActionUnblocked,
	}
}

type WebhookOrgBlockUnblockedBlockedUserType string

const (
	WebhookOrgBlockUnblockedBlockedUserTypeBot WebhookOrgBlockUnblockedBlockedUserType = "Bot"
	WebhookOrgBlockUnblockedBlockedUserTypeOrganization WebhookOrgBlockUnblockedBlockedUserType = "Organization"
	WebhookOrgBlockUnblockedBlockedUserTypeUser WebhookOrgBlockUnblockedBlockedUserType = "User"
)

// PossibleWebhookOrgBlockUnblockedBlockedUserTypeValues returns the possible values for the WebhookOrgBlockUnblockedBlockedUserType const type.
func PossibleWebhookOrgBlockUnblockedBlockedUserTypeValues() []WebhookOrgBlockUnblockedBlockedUserType {
	return []WebhookOrgBlockUnblockedBlockedUserType{
		WebhookOrgBlockUnblockedBlockedUserTypeBot,
		WebhookOrgBlockUnblockedBlockedUserTypeOrganization,
		WebhookOrgBlockUnblockedBlockedUserTypeUser,
	}
}

type WebhookOrganizationDeletedAction string

const (
	WebhookOrganizationDeletedActionDeleted WebhookOrganizationDeletedAction = "deleted"
)

// PossibleWebhookOrganizationDeletedActionValues returns the possible values for the WebhookOrganizationDeletedAction const type.
func PossibleWebhookOrganizationDeletedActionValues() []WebhookOrganizationDeletedAction {
	return []WebhookOrganizationDeletedAction{
		WebhookOrganizationDeletedActionDeleted,
	}
}

type WebhookOrganizationDeletedMembershipUserType string

const (
	WebhookOrganizationDeletedMembershipUserTypeBot WebhookOrganizationDeletedMembershipUserType = "Bot"
	WebhookOrganizationDeletedMembershipUserTypeOrganization WebhookOrganizationDeletedMembershipUserType = "Organization"
	WebhookOrganizationDeletedMembershipUserTypeUser WebhookOrganizationDeletedMembershipUserType = "User"
)

// PossibleWebhookOrganizationDeletedMembershipUserTypeValues returns the possible values for the WebhookOrganizationDeletedMembershipUserType const type.
func PossibleWebhookOrganizationDeletedMembershipUserTypeValues() []WebhookOrganizationDeletedMembershipUserType {
	return []WebhookOrganizationDeletedMembershipUserType{
		WebhookOrganizationDeletedMembershipUserTypeBot,
		WebhookOrganizationDeletedMembershipUserTypeOrganization,
		WebhookOrganizationDeletedMembershipUserTypeUser,
	}
}

type WebhookOrganizationMemberAddedAction string

const (
	WebhookOrganizationMemberAddedActionMemberAdded WebhookOrganizationMemberAddedAction = "member_added"
)

// PossibleWebhookOrganizationMemberAddedActionValues returns the possible values for the WebhookOrganizationMemberAddedAction const type.
func PossibleWebhookOrganizationMemberAddedActionValues() []WebhookOrganizationMemberAddedAction {
	return []WebhookOrganizationMemberAddedAction{
		WebhookOrganizationMemberAddedActionMemberAdded,
	}
}

type WebhookOrganizationMemberAddedMembershipUserType string

const (
	WebhookOrganizationMemberAddedMembershipUserTypeBot WebhookOrganizationMemberAddedMembershipUserType = "Bot"
	WebhookOrganizationMemberAddedMembershipUserTypeOrganization WebhookOrganizationMemberAddedMembershipUserType = "Organization"
	WebhookOrganizationMemberAddedMembershipUserTypeUser WebhookOrganizationMemberAddedMembershipUserType = "User"
)

// PossibleWebhookOrganizationMemberAddedMembershipUserTypeValues returns the possible values for the WebhookOrganizationMemberAddedMembershipUserType const type.
func PossibleWebhookOrganizationMemberAddedMembershipUserTypeValues() []WebhookOrganizationMemberAddedMembershipUserType {
	return []WebhookOrganizationMemberAddedMembershipUserType{
		WebhookOrganizationMemberAddedMembershipUserTypeBot,
		WebhookOrganizationMemberAddedMembershipUserTypeOrganization,
		WebhookOrganizationMemberAddedMembershipUserTypeUser,
	}
}

type WebhookOrganizationMemberInvitedAction string

const (
	WebhookOrganizationMemberInvitedActionMemberInvited WebhookOrganizationMemberInvitedAction = "member_invited"
)

// PossibleWebhookOrganizationMemberInvitedActionValues returns the possible values for the WebhookOrganizationMemberInvitedAction const type.
func PossibleWebhookOrganizationMemberInvitedActionValues() []WebhookOrganizationMemberInvitedAction {
	return []WebhookOrganizationMemberInvitedAction{
		WebhookOrganizationMemberInvitedActionMemberInvited,
	}
}

type WebhookOrganizationMemberInvitedInvitationInviterType string

const (
	WebhookOrganizationMemberInvitedInvitationInviterTypeBot WebhookOrganizationMemberInvitedInvitationInviterType = "Bot"
	WebhookOrganizationMemberInvitedInvitationInviterTypeOrganization WebhookOrganizationMemberInvitedInvitationInviterType = "Organization"
	WebhookOrganizationMemberInvitedInvitationInviterTypeUser WebhookOrganizationMemberInvitedInvitationInviterType = "User"
)

// PossibleWebhookOrganizationMemberInvitedInvitationInviterTypeValues returns the possible values for the WebhookOrganizationMemberInvitedInvitationInviterType const type.
func PossibleWebhookOrganizationMemberInvitedInvitationInviterTypeValues() []WebhookOrganizationMemberInvitedInvitationInviterType {
	return []WebhookOrganizationMemberInvitedInvitationInviterType{
		WebhookOrganizationMemberInvitedInvitationInviterTypeBot,
		WebhookOrganizationMemberInvitedInvitationInviterTypeOrganization,
		WebhookOrganizationMemberInvitedInvitationInviterTypeUser,
	}
}

type WebhookOrganizationMemberInvitedUserType string

const (
	WebhookOrganizationMemberInvitedUserTypeBot WebhookOrganizationMemberInvitedUserType = "Bot"
	WebhookOrganizationMemberInvitedUserTypeOrganization WebhookOrganizationMemberInvitedUserType = "Organization"
	WebhookOrganizationMemberInvitedUserTypeUser WebhookOrganizationMemberInvitedUserType = "User"
)

// PossibleWebhookOrganizationMemberInvitedUserTypeValues returns the possible values for the WebhookOrganizationMemberInvitedUserType const type.
func PossibleWebhookOrganizationMemberInvitedUserTypeValues() []WebhookOrganizationMemberInvitedUserType {
	return []WebhookOrganizationMemberInvitedUserType{
		WebhookOrganizationMemberInvitedUserTypeBot,
		WebhookOrganizationMemberInvitedUserTypeOrganization,
		WebhookOrganizationMemberInvitedUserTypeUser,
	}
}

type WebhookOrganizationMemberRemovedAction string

const (
	WebhookOrganizationMemberRemovedActionMemberRemoved WebhookOrganizationMemberRemovedAction = "member_removed"
)

// PossibleWebhookOrganizationMemberRemovedActionValues returns the possible values for the WebhookOrganizationMemberRemovedAction const type.
func PossibleWebhookOrganizationMemberRemovedActionValues() []WebhookOrganizationMemberRemovedAction {
	return []WebhookOrganizationMemberRemovedAction{
		WebhookOrganizationMemberRemovedActionMemberRemoved,
	}
}

type WebhookOrganizationMemberRemovedMembershipUserType string

const (
	WebhookOrganizationMemberRemovedMembershipUserTypeBot WebhookOrganizationMemberRemovedMembershipUserType = "Bot"
	WebhookOrganizationMemberRemovedMembershipUserTypeOrganization WebhookOrganizationMemberRemovedMembershipUserType = "Organization"
	WebhookOrganizationMemberRemovedMembershipUserTypeUser WebhookOrganizationMemberRemovedMembershipUserType = "User"
)

// PossibleWebhookOrganizationMemberRemovedMembershipUserTypeValues returns the possible values for the WebhookOrganizationMemberRemovedMembershipUserType const type.
func PossibleWebhookOrganizationMemberRemovedMembershipUserTypeValues() []WebhookOrganizationMemberRemovedMembershipUserType {
	return []WebhookOrganizationMemberRemovedMembershipUserType{
		WebhookOrganizationMemberRemovedMembershipUserTypeBot,
		WebhookOrganizationMemberRemovedMembershipUserTypeOrganization,
		WebhookOrganizationMemberRemovedMembershipUserTypeUser,
	}
}

type WebhookOrganizationRenamedAction string

const (
	WebhookOrganizationRenamedActionRenamed WebhookOrganizationRenamedAction = "renamed"
)

// PossibleWebhookOrganizationRenamedActionValues returns the possible values for the WebhookOrganizationRenamedAction const type.
func PossibleWebhookOrganizationRenamedActionValues() []WebhookOrganizationRenamedAction {
	return []WebhookOrganizationRenamedAction{
		WebhookOrganizationRenamedActionRenamed,
	}
}

type WebhookOrganizationRenamedMembershipUserType string

const (
	WebhookOrganizationRenamedMembershipUserTypeBot WebhookOrganizationRenamedMembershipUserType = "Bot"
	WebhookOrganizationRenamedMembershipUserTypeOrganization WebhookOrganizationRenamedMembershipUserType = "Organization"
	WebhookOrganizationRenamedMembershipUserTypeUser WebhookOrganizationRenamedMembershipUserType = "User"
)

// PossibleWebhookOrganizationRenamedMembershipUserTypeValues returns the possible values for the WebhookOrganizationRenamedMembershipUserType const type.
func PossibleWebhookOrganizationRenamedMembershipUserTypeValues() []WebhookOrganizationRenamedMembershipUserType {
	return []WebhookOrganizationRenamedMembershipUserType{
		WebhookOrganizationRenamedMembershipUserTypeBot,
		WebhookOrganizationRenamedMembershipUserTypeOrganization,
		WebhookOrganizationRenamedMembershipUserTypeUser,
	}
}

type WebhookPackagePublishedAction string

const (
	WebhookPackagePublishedActionPublished WebhookPackagePublishedAction = "published"
)

// PossibleWebhookPackagePublishedActionValues returns the possible values for the WebhookPackagePublishedAction const type.
func PossibleWebhookPackagePublishedActionValues() []WebhookPackagePublishedAction {
	return []WebhookPackagePublishedAction{
		WebhookPackagePublishedActionPublished,
	}
}

type WebhookPackagePublishedPackageOwnerType string

const (
	WebhookPackagePublishedPackageOwnerTypeBot WebhookPackagePublishedPackageOwnerType = "Bot"
	WebhookPackagePublishedPackageOwnerTypeOrganization WebhookPackagePublishedPackageOwnerType = "Organization"
	WebhookPackagePublishedPackageOwnerTypeUser WebhookPackagePublishedPackageOwnerType = "User"
)

// PossibleWebhookPackagePublishedPackageOwnerTypeValues returns the possible values for the WebhookPackagePublishedPackageOwnerType const type.
func PossibleWebhookPackagePublishedPackageOwnerTypeValues() []WebhookPackagePublishedPackageOwnerType {
	return []WebhookPackagePublishedPackageOwnerType{
		WebhookPackagePublishedPackageOwnerTypeBot,
		WebhookPackagePublishedPackageOwnerTypeOrganization,
		WebhookPackagePublishedPackageOwnerTypeUser,
	}
}

type WebhookPackagePublishedPackageVersionAuthorType string

const (
	WebhookPackagePublishedPackageVersionAuthorTypeBot WebhookPackagePublishedPackageVersionAuthorType = "Bot"
	WebhookPackagePublishedPackageVersionAuthorTypeOrganization WebhookPackagePublishedPackageVersionAuthorType = "Organization"
	WebhookPackagePublishedPackageVersionAuthorTypeUser WebhookPackagePublishedPackageVersionAuthorType = "User"
)

// PossibleWebhookPackagePublishedPackageVersionAuthorTypeValues returns the possible values for the WebhookPackagePublishedPackageVersionAuthorType const type.
func PossibleWebhookPackagePublishedPackageVersionAuthorTypeValues() []WebhookPackagePublishedPackageVersionAuthorType {
	return []WebhookPackagePublishedPackageVersionAuthorType{
		WebhookPackagePublishedPackageVersionAuthorTypeBot,
		WebhookPackagePublishedPackageVersionAuthorTypeOrganization,
		WebhookPackagePublishedPackageVersionAuthorTypeUser,
	}
}

type WebhookPackagePublishedPackageVersionReleaseAuthorType string

const (
	WebhookPackagePublishedPackageVersionReleaseAuthorTypeBot WebhookPackagePublishedPackageVersionReleaseAuthorType = "Bot"
	WebhookPackagePublishedPackageVersionReleaseAuthorTypeOrganization WebhookPackagePublishedPackageVersionReleaseAuthorType = "Organization"
	WebhookPackagePublishedPackageVersionReleaseAuthorTypeUser WebhookPackagePublishedPackageVersionReleaseAuthorType = "User"
)

// PossibleWebhookPackagePublishedPackageVersionReleaseAuthorTypeValues returns the possible values for the WebhookPackagePublishedPackageVersionReleaseAuthorType const type.
func PossibleWebhookPackagePublishedPackageVersionReleaseAuthorTypeValues() []WebhookPackagePublishedPackageVersionReleaseAuthorType {
	return []WebhookPackagePublishedPackageVersionReleaseAuthorType{
		WebhookPackagePublishedPackageVersionReleaseAuthorTypeBot,
		WebhookPackagePublishedPackageVersionReleaseAuthorTypeOrganization,
		WebhookPackagePublishedPackageVersionReleaseAuthorTypeUser,
	}
}

type WebhookPackageUpdatedAction string

const (
	WebhookPackageUpdatedActionUpdated WebhookPackageUpdatedAction = "updated"
)

// PossibleWebhookPackageUpdatedActionValues returns the possible values for the WebhookPackageUpdatedAction const type.
func PossibleWebhookPackageUpdatedActionValues() []WebhookPackageUpdatedAction {
	return []WebhookPackageUpdatedAction{
		WebhookPackageUpdatedActionUpdated,
	}
}

type WebhookPackageUpdatedPackageOwnerType string

const (
	WebhookPackageUpdatedPackageOwnerTypeBot WebhookPackageUpdatedPackageOwnerType = "Bot"
	WebhookPackageUpdatedPackageOwnerTypeOrganization WebhookPackageUpdatedPackageOwnerType = "Organization"
	WebhookPackageUpdatedPackageOwnerTypeUser WebhookPackageUpdatedPackageOwnerType = "User"
)

// PossibleWebhookPackageUpdatedPackageOwnerTypeValues returns the possible values for the WebhookPackageUpdatedPackageOwnerType const type.
func PossibleWebhookPackageUpdatedPackageOwnerTypeValues() []WebhookPackageUpdatedPackageOwnerType {
	return []WebhookPackageUpdatedPackageOwnerType{
		WebhookPackageUpdatedPackageOwnerTypeBot,
		WebhookPackageUpdatedPackageOwnerTypeOrganization,
		WebhookPackageUpdatedPackageOwnerTypeUser,
	}
}

type WebhookPackageUpdatedPackageVersionAuthorType string

const (
	WebhookPackageUpdatedPackageVersionAuthorTypeBot WebhookPackageUpdatedPackageVersionAuthorType = "Bot"
	WebhookPackageUpdatedPackageVersionAuthorTypeOrganization WebhookPackageUpdatedPackageVersionAuthorType = "Organization"
	WebhookPackageUpdatedPackageVersionAuthorTypeUser WebhookPackageUpdatedPackageVersionAuthorType = "User"
)

// PossibleWebhookPackageUpdatedPackageVersionAuthorTypeValues returns the possible values for the WebhookPackageUpdatedPackageVersionAuthorType const type.
func PossibleWebhookPackageUpdatedPackageVersionAuthorTypeValues() []WebhookPackageUpdatedPackageVersionAuthorType {
	return []WebhookPackageUpdatedPackageVersionAuthorType{
		WebhookPackageUpdatedPackageVersionAuthorTypeBot,
		WebhookPackageUpdatedPackageVersionAuthorTypeOrganization,
		WebhookPackageUpdatedPackageVersionAuthorTypeUser,
	}
}

type WebhookPackageUpdatedPackageVersionReleaseAuthorType string

const (
	WebhookPackageUpdatedPackageVersionReleaseAuthorTypeBot WebhookPackageUpdatedPackageVersionReleaseAuthorType = "Bot"
	WebhookPackageUpdatedPackageVersionReleaseAuthorTypeOrganization WebhookPackageUpdatedPackageVersionReleaseAuthorType = "Organization"
	WebhookPackageUpdatedPackageVersionReleaseAuthorTypeUser WebhookPackageUpdatedPackageVersionReleaseAuthorType = "User"
)

// PossibleWebhookPackageUpdatedPackageVersionReleaseAuthorTypeValues returns the possible values for the WebhookPackageUpdatedPackageVersionReleaseAuthorType const type.
func PossibleWebhookPackageUpdatedPackageVersionReleaseAuthorTypeValues() []WebhookPackageUpdatedPackageVersionReleaseAuthorType {
	return []WebhookPackageUpdatedPackageVersionReleaseAuthorType{
		WebhookPackageUpdatedPackageVersionReleaseAuthorTypeBot,
		WebhookPackageUpdatedPackageVersionReleaseAuthorTypeOrganization,
		WebhookPackageUpdatedPackageVersionReleaseAuthorTypeUser,
	}
}

type WebhookPageBuildPusherType string

const (
	WebhookPageBuildPusherTypeBot WebhookPageBuildPusherType = "Bot"
	WebhookPageBuildPusherTypeOrganization WebhookPageBuildPusherType = "Organization"
	WebhookPageBuildPusherTypeUser WebhookPageBuildPusherType = "User"
)

// PossibleWebhookPageBuildPusherTypeValues returns the possible values for the WebhookPageBuildPusherType const type.
func PossibleWebhookPageBuildPusherTypeValues() []WebhookPageBuildPusherType {
	return []WebhookPageBuildPusherType{
		WebhookPageBuildPusherTypeBot,
		WebhookPageBuildPusherTypeOrganization,
		WebhookPageBuildPusherTypeUser,
	}
}

// WebhookPingHookName - The type of webhook. The only valid value is 'web'.
type WebhookPingHookName string

const (
	WebhookPingHookNameWeb WebhookPingHookName = "web"
)

// PossibleWebhookPingHookNameValues returns the possible values for the WebhookPingHookName const type.
func PossibleWebhookPingHookNameValues() []WebhookPingHookName {
	return []WebhookPingHookName{
		WebhookPingHookNameWeb,
	}
}

type WebhookProjectCardConvertedAction string

const (
	WebhookProjectCardConvertedActionConverted WebhookProjectCardConvertedAction = "converted"
)

// PossibleWebhookProjectCardConvertedActionValues returns the possible values for the WebhookProjectCardConvertedAction const type.
func PossibleWebhookProjectCardConvertedActionValues() []WebhookProjectCardConvertedAction {
	return []WebhookProjectCardConvertedAction{
		WebhookProjectCardConvertedActionConverted,
	}
}

type WebhookProjectCardConvertedProjectCardCreatorType string

const (
	WebhookProjectCardConvertedProjectCardCreatorTypeBot WebhookProjectCardConvertedProjectCardCreatorType = "Bot"
	WebhookProjectCardConvertedProjectCardCreatorTypeOrganization WebhookProjectCardConvertedProjectCardCreatorType = "Organization"
	WebhookProjectCardConvertedProjectCardCreatorTypeUser WebhookProjectCardConvertedProjectCardCreatorType = "User"
)

// PossibleWebhookProjectCardConvertedProjectCardCreatorTypeValues returns the possible values for the WebhookProjectCardConvertedProjectCardCreatorType const type.
func PossibleWebhookProjectCardConvertedProjectCardCreatorTypeValues() []WebhookProjectCardConvertedProjectCardCreatorType {
	return []WebhookProjectCardConvertedProjectCardCreatorType{
		WebhookProjectCardConvertedProjectCardCreatorTypeBot,
		WebhookProjectCardConvertedProjectCardCreatorTypeOrganization,
		WebhookProjectCardConvertedProjectCardCreatorTypeUser,
	}
}

type WebhookProjectCardCreatedAction string

const (
	WebhookProjectCardCreatedActionCreated WebhookProjectCardCreatedAction = "created"
)

// PossibleWebhookProjectCardCreatedActionValues returns the possible values for the WebhookProjectCardCreatedAction const type.
func PossibleWebhookProjectCardCreatedActionValues() []WebhookProjectCardCreatedAction {
	return []WebhookProjectCardCreatedAction{
		WebhookProjectCardCreatedActionCreated,
	}
}

type WebhookProjectCardCreatedProjectCardCreatorType string

const (
	WebhookProjectCardCreatedProjectCardCreatorTypeBot WebhookProjectCardCreatedProjectCardCreatorType = "Bot"
	WebhookProjectCardCreatedProjectCardCreatorTypeOrganization WebhookProjectCardCreatedProjectCardCreatorType = "Organization"
	WebhookProjectCardCreatedProjectCardCreatorTypeUser WebhookProjectCardCreatedProjectCardCreatorType = "User"
)

// PossibleWebhookProjectCardCreatedProjectCardCreatorTypeValues returns the possible values for the WebhookProjectCardCreatedProjectCardCreatorType const type.
func PossibleWebhookProjectCardCreatedProjectCardCreatorTypeValues() []WebhookProjectCardCreatedProjectCardCreatorType {
	return []WebhookProjectCardCreatedProjectCardCreatorType{
		WebhookProjectCardCreatedProjectCardCreatorTypeBot,
		WebhookProjectCardCreatedProjectCardCreatorTypeOrganization,
		WebhookProjectCardCreatedProjectCardCreatorTypeUser,
	}
}

type WebhookProjectCardDeletedAction string

const (
	WebhookProjectCardDeletedActionDeleted WebhookProjectCardDeletedAction = "deleted"
)

// PossibleWebhookProjectCardDeletedActionValues returns the possible values for the WebhookProjectCardDeletedAction const type.
func PossibleWebhookProjectCardDeletedActionValues() []WebhookProjectCardDeletedAction {
	return []WebhookProjectCardDeletedAction{
		WebhookProjectCardDeletedActionDeleted,
	}
}

type WebhookProjectCardDeletedProjectCardCreatorType string

const (
	WebhookProjectCardDeletedProjectCardCreatorTypeBot WebhookProjectCardDeletedProjectCardCreatorType = "Bot"
	WebhookProjectCardDeletedProjectCardCreatorTypeMannequin WebhookProjectCardDeletedProjectCardCreatorType = "Mannequin"
	WebhookProjectCardDeletedProjectCardCreatorTypeOrganization WebhookProjectCardDeletedProjectCardCreatorType = "Organization"
	WebhookProjectCardDeletedProjectCardCreatorTypeUser WebhookProjectCardDeletedProjectCardCreatorType = "User"
)

// PossibleWebhookProjectCardDeletedProjectCardCreatorTypeValues returns the possible values for the WebhookProjectCardDeletedProjectCardCreatorType const type.
func PossibleWebhookProjectCardDeletedProjectCardCreatorTypeValues() []WebhookProjectCardDeletedProjectCardCreatorType {
	return []WebhookProjectCardDeletedProjectCardCreatorType{
		WebhookProjectCardDeletedProjectCardCreatorTypeBot,
		WebhookProjectCardDeletedProjectCardCreatorTypeMannequin,
		WebhookProjectCardDeletedProjectCardCreatorTypeOrganization,
		WebhookProjectCardDeletedProjectCardCreatorTypeUser,
	}
}

type WebhookProjectCardEditedAction string

const (
	WebhookProjectCardEditedActionEdited WebhookProjectCardEditedAction = "edited"
)

// PossibleWebhookProjectCardEditedActionValues returns the possible values for the WebhookProjectCardEditedAction const type.
func PossibleWebhookProjectCardEditedActionValues() []WebhookProjectCardEditedAction {
	return []WebhookProjectCardEditedAction{
		WebhookProjectCardEditedActionEdited,
	}
}

type WebhookProjectCardEditedProjectCardCreatorType string

const (
	WebhookProjectCardEditedProjectCardCreatorTypeBot WebhookProjectCardEditedProjectCardCreatorType = "Bot"
	WebhookProjectCardEditedProjectCardCreatorTypeOrganization WebhookProjectCardEditedProjectCardCreatorType = "Organization"
	WebhookProjectCardEditedProjectCardCreatorTypeUser WebhookProjectCardEditedProjectCardCreatorType = "User"
)

// PossibleWebhookProjectCardEditedProjectCardCreatorTypeValues returns the possible values for the WebhookProjectCardEditedProjectCardCreatorType const type.
func PossibleWebhookProjectCardEditedProjectCardCreatorTypeValues() []WebhookProjectCardEditedProjectCardCreatorType {
	return []WebhookProjectCardEditedProjectCardCreatorType{
		WebhookProjectCardEditedProjectCardCreatorTypeBot,
		WebhookProjectCardEditedProjectCardCreatorTypeOrganization,
		WebhookProjectCardEditedProjectCardCreatorTypeUser,
	}
}

type WebhookProjectCardMovedAction string

const (
	WebhookProjectCardMovedActionMoved WebhookProjectCardMovedAction = "moved"
)

// PossibleWebhookProjectCardMovedActionValues returns the possible values for the WebhookProjectCardMovedAction const type.
func PossibleWebhookProjectCardMovedActionValues() []WebhookProjectCardMovedAction {
	return []WebhookProjectCardMovedAction{
		WebhookProjectCardMovedActionMoved,
	}
}

type WebhookProjectCardMovedProjectCard0CreatorType string

const (
	WebhookProjectCardMovedProjectCard0CreatorTypeBot WebhookProjectCardMovedProjectCard0CreatorType = "Bot"
	WebhookProjectCardMovedProjectCard0CreatorTypeMannequin WebhookProjectCardMovedProjectCard0CreatorType = "Mannequin"
	WebhookProjectCardMovedProjectCard0CreatorTypeOrganization WebhookProjectCardMovedProjectCard0CreatorType = "Organization"
	WebhookProjectCardMovedProjectCard0CreatorTypeUser WebhookProjectCardMovedProjectCard0CreatorType = "User"
)

// PossibleWebhookProjectCardMovedProjectCard0CreatorTypeValues returns the possible values for the WebhookProjectCardMovedProjectCard0CreatorType const type.
func PossibleWebhookProjectCardMovedProjectCard0CreatorTypeValues() []WebhookProjectCardMovedProjectCard0CreatorType {
	return []WebhookProjectCardMovedProjectCard0CreatorType{
		WebhookProjectCardMovedProjectCard0CreatorTypeBot,
		WebhookProjectCardMovedProjectCard0CreatorTypeMannequin,
		WebhookProjectCardMovedProjectCard0CreatorTypeOrganization,
		WebhookProjectCardMovedProjectCard0CreatorTypeUser,
	}
}

type WebhookProjectClosedAction string

const (
	WebhookProjectClosedActionClosed WebhookProjectClosedAction = "closed"
)

// PossibleWebhookProjectClosedActionValues returns the possible values for the WebhookProjectClosedAction const type.
func PossibleWebhookProjectClosedActionValues() []WebhookProjectClosedAction {
	return []WebhookProjectClosedAction{
		WebhookProjectClosedActionClosed,
	}
}

type WebhookProjectClosedProjectCreatorType string

const (
	WebhookProjectClosedProjectCreatorTypeBot WebhookProjectClosedProjectCreatorType = "Bot"
	WebhookProjectClosedProjectCreatorTypeOrganization WebhookProjectClosedProjectCreatorType = "Organization"
	WebhookProjectClosedProjectCreatorTypeUser WebhookProjectClosedProjectCreatorType = "User"
)

// PossibleWebhookProjectClosedProjectCreatorTypeValues returns the possible values for the WebhookProjectClosedProjectCreatorType const type.
func PossibleWebhookProjectClosedProjectCreatorTypeValues() []WebhookProjectClosedProjectCreatorType {
	return []WebhookProjectClosedProjectCreatorType{
		WebhookProjectClosedProjectCreatorTypeBot,
		WebhookProjectClosedProjectCreatorTypeOrganization,
		WebhookProjectClosedProjectCreatorTypeUser,
	}
}

// WebhookProjectClosedProjectState - State of the project; either 'open' or 'closed'
type WebhookProjectClosedProjectState string

const (
	WebhookProjectClosedProjectStateClosed WebhookProjectClosedProjectState = "closed"
	WebhookProjectClosedProjectStateOpen WebhookProjectClosedProjectState = "open"
)

// PossibleWebhookProjectClosedProjectStateValues returns the possible values for the WebhookProjectClosedProjectState const type.
func PossibleWebhookProjectClosedProjectStateValues() []WebhookProjectClosedProjectState {
	return []WebhookProjectClosedProjectState{
		WebhookProjectClosedProjectStateClosed,
		WebhookProjectClosedProjectStateOpen,
	}
}

type WebhookProjectColumnCreatedAction string

const (
	WebhookProjectColumnCreatedActionCreated WebhookProjectColumnCreatedAction = "created"
)

// PossibleWebhookProjectColumnCreatedActionValues returns the possible values for the WebhookProjectColumnCreatedAction const type.
func PossibleWebhookProjectColumnCreatedActionValues() []WebhookProjectColumnCreatedAction {
	return []WebhookProjectColumnCreatedAction{
		WebhookProjectColumnCreatedActionCreated,
	}
}

type WebhookProjectColumnDeletedAction string

const (
	WebhookProjectColumnDeletedActionDeleted WebhookProjectColumnDeletedAction = "deleted"
)

// PossibleWebhookProjectColumnDeletedActionValues returns the possible values for the WebhookProjectColumnDeletedAction const type.
func PossibleWebhookProjectColumnDeletedActionValues() []WebhookProjectColumnDeletedAction {
	return []WebhookProjectColumnDeletedAction{
		WebhookProjectColumnDeletedActionDeleted,
	}
}

type WebhookProjectColumnEditedAction string

const (
	WebhookProjectColumnEditedActionEdited WebhookProjectColumnEditedAction = "edited"
)

// PossibleWebhookProjectColumnEditedActionValues returns the possible values for the WebhookProjectColumnEditedAction const type.
func PossibleWebhookProjectColumnEditedActionValues() []WebhookProjectColumnEditedAction {
	return []WebhookProjectColumnEditedAction{
		WebhookProjectColumnEditedActionEdited,
	}
}

type WebhookProjectColumnMovedAction string

const (
	WebhookProjectColumnMovedActionMoved WebhookProjectColumnMovedAction = "moved"
)

// PossibleWebhookProjectColumnMovedActionValues returns the possible values for the WebhookProjectColumnMovedAction const type.
func PossibleWebhookProjectColumnMovedActionValues() []WebhookProjectColumnMovedAction {
	return []WebhookProjectColumnMovedAction{
		WebhookProjectColumnMovedActionMoved,
	}
}

type WebhookProjectCreatedAction string

const (
	WebhookProjectCreatedActionCreated WebhookProjectCreatedAction = "created"
)

// PossibleWebhookProjectCreatedActionValues returns the possible values for the WebhookProjectCreatedAction const type.
func PossibleWebhookProjectCreatedActionValues() []WebhookProjectCreatedAction {
	return []WebhookProjectCreatedAction{
		WebhookProjectCreatedActionCreated,
	}
}

type WebhookProjectCreatedProjectCreatorType string

const (
	WebhookProjectCreatedProjectCreatorTypeBot WebhookProjectCreatedProjectCreatorType = "Bot"
	WebhookProjectCreatedProjectCreatorTypeOrganization WebhookProjectCreatedProjectCreatorType = "Organization"
	WebhookProjectCreatedProjectCreatorTypeUser WebhookProjectCreatedProjectCreatorType = "User"
)

// PossibleWebhookProjectCreatedProjectCreatorTypeValues returns the possible values for the WebhookProjectCreatedProjectCreatorType const type.
func PossibleWebhookProjectCreatedProjectCreatorTypeValues() []WebhookProjectCreatedProjectCreatorType {
	return []WebhookProjectCreatedProjectCreatorType{
		WebhookProjectCreatedProjectCreatorTypeBot,
		WebhookProjectCreatedProjectCreatorTypeOrganization,
		WebhookProjectCreatedProjectCreatorTypeUser,
	}
}

// WebhookProjectCreatedProjectState - State of the project; either 'open' or 'closed'
type WebhookProjectCreatedProjectState string

const (
	WebhookProjectCreatedProjectStateClosed WebhookProjectCreatedProjectState = "closed"
	WebhookProjectCreatedProjectStateOpen WebhookProjectCreatedProjectState = "open"
)

// PossibleWebhookProjectCreatedProjectStateValues returns the possible values for the WebhookProjectCreatedProjectState const type.
func PossibleWebhookProjectCreatedProjectStateValues() []WebhookProjectCreatedProjectState {
	return []WebhookProjectCreatedProjectState{
		WebhookProjectCreatedProjectStateClosed,
		WebhookProjectCreatedProjectStateOpen,
	}
}

type WebhookProjectDeletedAction string

const (
	WebhookProjectDeletedActionDeleted WebhookProjectDeletedAction = "deleted"
)

// PossibleWebhookProjectDeletedActionValues returns the possible values for the WebhookProjectDeletedAction const type.
func PossibleWebhookProjectDeletedActionValues() []WebhookProjectDeletedAction {
	return []WebhookProjectDeletedAction{
		WebhookProjectDeletedActionDeleted,
	}
}

type WebhookProjectDeletedProjectCreatorType string

const (
	WebhookProjectDeletedProjectCreatorTypeBot WebhookProjectDeletedProjectCreatorType = "Bot"
	WebhookProjectDeletedProjectCreatorTypeOrganization WebhookProjectDeletedProjectCreatorType = "Organization"
	WebhookProjectDeletedProjectCreatorTypeUser WebhookProjectDeletedProjectCreatorType = "User"
)

// PossibleWebhookProjectDeletedProjectCreatorTypeValues returns the possible values for the WebhookProjectDeletedProjectCreatorType const type.
func PossibleWebhookProjectDeletedProjectCreatorTypeValues() []WebhookProjectDeletedProjectCreatorType {
	return []WebhookProjectDeletedProjectCreatorType{
		WebhookProjectDeletedProjectCreatorTypeBot,
		WebhookProjectDeletedProjectCreatorTypeOrganization,
		WebhookProjectDeletedProjectCreatorTypeUser,
	}
}

// WebhookProjectDeletedProjectState - State of the project; either 'open' or 'closed'
type WebhookProjectDeletedProjectState string

const (
	WebhookProjectDeletedProjectStateClosed WebhookProjectDeletedProjectState = "closed"
	WebhookProjectDeletedProjectStateOpen WebhookProjectDeletedProjectState = "open"
)

// PossibleWebhookProjectDeletedProjectStateValues returns the possible values for the WebhookProjectDeletedProjectState const type.
func PossibleWebhookProjectDeletedProjectStateValues() []WebhookProjectDeletedProjectState {
	return []WebhookProjectDeletedProjectState{
		WebhookProjectDeletedProjectStateClosed,
		WebhookProjectDeletedProjectStateOpen,
	}
}

type WebhookProjectEditedAction string

const (
	WebhookProjectEditedActionEdited WebhookProjectEditedAction = "edited"
)

// PossibleWebhookProjectEditedActionValues returns the possible values for the WebhookProjectEditedAction const type.
func PossibleWebhookProjectEditedActionValues() []WebhookProjectEditedAction {
	return []WebhookProjectEditedAction{
		WebhookProjectEditedActionEdited,
	}
}

type WebhookProjectEditedProjectCreatorType string

const (
	WebhookProjectEditedProjectCreatorTypeBot WebhookProjectEditedProjectCreatorType = "Bot"
	WebhookProjectEditedProjectCreatorTypeOrganization WebhookProjectEditedProjectCreatorType = "Organization"
	WebhookProjectEditedProjectCreatorTypeUser WebhookProjectEditedProjectCreatorType = "User"
)

// PossibleWebhookProjectEditedProjectCreatorTypeValues returns the possible values for the WebhookProjectEditedProjectCreatorType const type.
func PossibleWebhookProjectEditedProjectCreatorTypeValues() []WebhookProjectEditedProjectCreatorType {
	return []WebhookProjectEditedProjectCreatorType{
		WebhookProjectEditedProjectCreatorTypeBot,
		WebhookProjectEditedProjectCreatorTypeOrganization,
		WebhookProjectEditedProjectCreatorTypeUser,
	}
}

// WebhookProjectEditedProjectState - State of the project; either 'open' or 'closed'
type WebhookProjectEditedProjectState string

const (
	WebhookProjectEditedProjectStateClosed WebhookProjectEditedProjectState = "closed"
	WebhookProjectEditedProjectStateOpen WebhookProjectEditedProjectState = "open"
)

// PossibleWebhookProjectEditedProjectStateValues returns the possible values for the WebhookProjectEditedProjectState const type.
func PossibleWebhookProjectEditedProjectStateValues() []WebhookProjectEditedProjectState {
	return []WebhookProjectEditedProjectState{
		WebhookProjectEditedProjectStateClosed,
		WebhookProjectEditedProjectStateOpen,
	}
}

type WebhookProjectReopenedAction string

const (
	WebhookProjectReopenedActionReopened WebhookProjectReopenedAction = "reopened"
)

// PossibleWebhookProjectReopenedActionValues returns the possible values for the WebhookProjectReopenedAction const type.
func PossibleWebhookProjectReopenedActionValues() []WebhookProjectReopenedAction {
	return []WebhookProjectReopenedAction{
		WebhookProjectReopenedActionReopened,
	}
}

type WebhookProjectReopenedProjectCreatorType string

const (
	WebhookProjectReopenedProjectCreatorTypeBot WebhookProjectReopenedProjectCreatorType = "Bot"
	WebhookProjectReopenedProjectCreatorTypeOrganization WebhookProjectReopenedProjectCreatorType = "Organization"
	WebhookProjectReopenedProjectCreatorTypeUser WebhookProjectReopenedProjectCreatorType = "User"
)

// PossibleWebhookProjectReopenedProjectCreatorTypeValues returns the possible values for the WebhookProjectReopenedProjectCreatorType const type.
func PossibleWebhookProjectReopenedProjectCreatorTypeValues() []WebhookProjectReopenedProjectCreatorType {
	return []WebhookProjectReopenedProjectCreatorType{
		WebhookProjectReopenedProjectCreatorTypeBot,
		WebhookProjectReopenedProjectCreatorTypeOrganization,
		WebhookProjectReopenedProjectCreatorTypeUser,
	}
}

// WebhookProjectReopenedProjectState - State of the project; either 'open' or 'closed'
type WebhookProjectReopenedProjectState string

const (
	WebhookProjectReopenedProjectStateClosed WebhookProjectReopenedProjectState = "closed"
	WebhookProjectReopenedProjectStateOpen WebhookProjectReopenedProjectState = "open"
)

// PossibleWebhookProjectReopenedProjectStateValues returns the possible values for the WebhookProjectReopenedProjectState const type.
func PossibleWebhookProjectReopenedProjectStateValues() []WebhookProjectReopenedProjectState {
	return []WebhookProjectReopenedProjectState{
		WebhookProjectReopenedProjectStateClosed,
		WebhookProjectReopenedProjectStateOpen,
	}
}

type WebhookProjectsV2ItemArchivedAction string

const (
	WebhookProjectsV2ItemArchivedActionArchived WebhookProjectsV2ItemArchivedAction = "archived"
)

// PossibleWebhookProjectsV2ItemArchivedActionValues returns the possible values for the WebhookProjectsV2ItemArchivedAction const type.
func PossibleWebhookProjectsV2ItemArchivedActionValues() []WebhookProjectsV2ItemArchivedAction {
	return []WebhookProjectsV2ItemArchivedAction{
		WebhookProjectsV2ItemArchivedActionArchived,
	}
}

type WebhookProjectsV2ItemConvertedAction string

const (
	WebhookProjectsV2ItemConvertedActionConverted WebhookProjectsV2ItemConvertedAction = "converted"
)

// PossibleWebhookProjectsV2ItemConvertedActionValues returns the possible values for the WebhookProjectsV2ItemConvertedAction const type.
func PossibleWebhookProjectsV2ItemConvertedActionValues() []WebhookProjectsV2ItemConvertedAction {
	return []WebhookProjectsV2ItemConvertedAction{
		WebhookProjectsV2ItemConvertedActionConverted,
	}
}

type WebhookProjectsV2ItemCreatedAction string

const (
	WebhookProjectsV2ItemCreatedActionCreated WebhookProjectsV2ItemCreatedAction = "created"
)

// PossibleWebhookProjectsV2ItemCreatedActionValues returns the possible values for the WebhookProjectsV2ItemCreatedAction const type.
func PossibleWebhookProjectsV2ItemCreatedActionValues() []WebhookProjectsV2ItemCreatedAction {
	return []WebhookProjectsV2ItemCreatedAction{
		WebhookProjectsV2ItemCreatedActionCreated,
	}
}

type WebhookProjectsV2ItemDeletedAction string

const (
	WebhookProjectsV2ItemDeletedActionDeleted WebhookProjectsV2ItemDeletedAction = "deleted"
)

// PossibleWebhookProjectsV2ItemDeletedActionValues returns the possible values for the WebhookProjectsV2ItemDeletedAction const type.
func PossibleWebhookProjectsV2ItemDeletedActionValues() []WebhookProjectsV2ItemDeletedAction {
	return []WebhookProjectsV2ItemDeletedAction{
		WebhookProjectsV2ItemDeletedActionDeleted,
	}
}

type WebhookProjectsV2ItemEditedAction string

const (
	WebhookProjectsV2ItemEditedActionEdited WebhookProjectsV2ItemEditedAction = "edited"
)

// PossibleWebhookProjectsV2ItemEditedActionValues returns the possible values for the WebhookProjectsV2ItemEditedAction const type.
func PossibleWebhookProjectsV2ItemEditedActionValues() []WebhookProjectsV2ItemEditedAction {
	return []WebhookProjectsV2ItemEditedAction{
		WebhookProjectsV2ItemEditedActionEdited,
	}
}

type WebhookProjectsV2ItemReorderedAction string

const (
	WebhookProjectsV2ItemReorderedActionReordered WebhookProjectsV2ItemReorderedAction = "reordered"
)

// PossibleWebhookProjectsV2ItemReorderedActionValues returns the possible values for the WebhookProjectsV2ItemReorderedAction const type.
func PossibleWebhookProjectsV2ItemReorderedActionValues() []WebhookProjectsV2ItemReorderedAction {
	return []WebhookProjectsV2ItemReorderedAction{
		WebhookProjectsV2ItemReorderedActionReordered,
	}
}

type WebhookProjectsV2ItemRestoredAction string

const (
	WebhookProjectsV2ItemRestoredActionRestored WebhookProjectsV2ItemRestoredAction = "restored"
)

// PossibleWebhookProjectsV2ItemRestoredActionValues returns the possible values for the WebhookProjectsV2ItemRestoredAction const type.
func PossibleWebhookProjectsV2ItemRestoredActionValues() []WebhookProjectsV2ItemRestoredAction {
	return []WebhookProjectsV2ItemRestoredAction{
		WebhookProjectsV2ItemRestoredActionRestored,
	}
}

type WebhookProjectsV2ProjectClosedAction string

const (
	WebhookProjectsV2ProjectClosedActionClosed WebhookProjectsV2ProjectClosedAction = "closed"
)

// PossibleWebhookProjectsV2ProjectClosedActionValues returns the possible values for the WebhookProjectsV2ProjectClosedAction const type.
func PossibleWebhookProjectsV2ProjectClosedActionValues() []WebhookProjectsV2ProjectClosedAction {
	return []WebhookProjectsV2ProjectClosedAction{
		WebhookProjectsV2ProjectClosedActionClosed,
	}
}

type WebhookProjectsV2ProjectCreatedAction string

const (
	WebhookProjectsV2ProjectCreatedActionCreated WebhookProjectsV2ProjectCreatedAction = "created"
)

// PossibleWebhookProjectsV2ProjectCreatedActionValues returns the possible values for the WebhookProjectsV2ProjectCreatedAction const type.
func PossibleWebhookProjectsV2ProjectCreatedActionValues() []WebhookProjectsV2ProjectCreatedAction {
	return []WebhookProjectsV2ProjectCreatedAction{
		WebhookProjectsV2ProjectCreatedActionCreated,
	}
}

type WebhookProjectsV2ProjectEditedAction string

const (
	WebhookProjectsV2ProjectEditedActionEdited WebhookProjectsV2ProjectEditedAction = "edited"
)

// PossibleWebhookProjectsV2ProjectEditedActionValues returns the possible values for the WebhookProjectsV2ProjectEditedAction const type.
func PossibleWebhookProjectsV2ProjectEditedActionValues() []WebhookProjectsV2ProjectEditedAction {
	return []WebhookProjectsV2ProjectEditedAction{
		WebhookProjectsV2ProjectEditedActionEdited,
	}
}

type WebhookProjectsV2ProjectReopenedAction string

const (
	WebhookProjectsV2ProjectReopenedActionReopened WebhookProjectsV2ProjectReopenedAction = "reopened"
)

// PossibleWebhookProjectsV2ProjectReopenedActionValues returns the possible values for the WebhookProjectsV2ProjectReopenedAction const type.
func PossibleWebhookProjectsV2ProjectReopenedActionValues() []WebhookProjectsV2ProjectReopenedAction {
	return []WebhookProjectsV2ProjectReopenedAction{
		WebhookProjectsV2ProjectReopenedActionReopened,
	}
}

type WebhookPullRequestAssignedAction string

const (
	WebhookPullRequestAssignedActionAssigned WebhookPullRequestAssignedAction = "assigned"
)

// PossibleWebhookPullRequestAssignedActionValues returns the possible values for the WebhookPullRequestAssignedAction const type.
func PossibleWebhookPullRequestAssignedActionValues() []WebhookPullRequestAssignedAction {
	return []WebhookPullRequestAssignedAction{
		WebhookPullRequestAssignedActionAssigned,
	}
}

type WebhookPullRequestAssignedAssigneeType string

const (
	WebhookPullRequestAssignedAssigneeTypeBot WebhookPullRequestAssignedAssigneeType = "Bot"
	WebhookPullRequestAssignedAssigneeTypeOrganization WebhookPullRequestAssignedAssigneeType = "Organization"
	WebhookPullRequestAssignedAssigneeTypeUser WebhookPullRequestAssignedAssigneeType = "User"
)

// PossibleWebhookPullRequestAssignedAssigneeTypeValues returns the possible values for the WebhookPullRequestAssignedAssigneeType const type.
func PossibleWebhookPullRequestAssignedAssigneeTypeValues() []WebhookPullRequestAssignedAssigneeType {
	return []WebhookPullRequestAssignedAssigneeType{
		WebhookPullRequestAssignedAssigneeTypeBot,
		WebhookPullRequestAssignedAssigneeTypeOrganization,
		WebhookPullRequestAssignedAssigneeTypeUser,
	}
}

type WebhookPullRequestAssignedPullRequestActiveLockReason string

const (
	WebhookPullRequestAssignedPullRequestActiveLockReasonNull WebhookPullRequestAssignedPullRequestActiveLockReason = "null"
	WebhookPullRequestAssignedPullRequestActiveLockReasonOffTopic WebhookPullRequestAssignedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestAssignedPullRequestActiveLockReasonResolved WebhookPullRequestAssignedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestAssignedPullRequestActiveLockReasonSpam WebhookPullRequestAssignedPullRequestActiveLockReason = "spam"
	WebhookPullRequestAssignedPullRequestActiveLockReasonTooHeated WebhookPullRequestAssignedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestAssignedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestAssignedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestAssignedPullRequestActiveLockReasonValues() []WebhookPullRequestAssignedPullRequestActiveLockReason {
	return []WebhookPullRequestAssignedPullRequestActiveLockReason{
		WebhookPullRequestAssignedPullRequestActiveLockReasonNull,
		WebhookPullRequestAssignedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestAssignedPullRequestActiveLockReasonResolved,
		WebhookPullRequestAssignedPullRequestActiveLockReasonSpam,
		WebhookPullRequestAssignedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestAssignedPullRequestAssigneeType string

const (
	WebhookPullRequestAssignedPullRequestAssigneeTypeBot WebhookPullRequestAssignedPullRequestAssigneeType = "Bot"
	WebhookPullRequestAssignedPullRequestAssigneeTypeMannequin WebhookPullRequestAssignedPullRequestAssigneeType = "Mannequin"
	WebhookPullRequestAssignedPullRequestAssigneeTypeOrganization WebhookPullRequestAssignedPullRequestAssigneeType = "Organization"
	WebhookPullRequestAssignedPullRequestAssigneeTypeUser WebhookPullRequestAssignedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestAssignedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestAssignedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestAssignedPullRequestAssigneeTypeValues() []WebhookPullRequestAssignedPullRequestAssigneeType {
	return []WebhookPullRequestAssignedPullRequestAssigneeType{
		WebhookPullRequestAssignedPullRequestAssigneeTypeBot,
		WebhookPullRequestAssignedPullRequestAssigneeTypeMannequin,
		WebhookPullRequestAssignedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestAssignedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestAssignedPullRequestAssigneesItemType string

const (
	WebhookPullRequestAssignedPullRequestAssigneesItemTypeBot WebhookPullRequestAssignedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestAssignedPullRequestAssigneesItemTypeMannequin WebhookPullRequestAssignedPullRequestAssigneesItemType = "Mannequin"
	WebhookPullRequestAssignedPullRequestAssigneesItemTypeOrganization WebhookPullRequestAssignedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestAssignedPullRequestAssigneesItemTypeUser WebhookPullRequestAssignedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestAssignedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestAssignedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestAssignedPullRequestAssigneesItemTypeValues() []WebhookPullRequestAssignedPullRequestAssigneesItemType {
	return []WebhookPullRequestAssignedPullRequestAssigneesItemType{
		WebhookPullRequestAssignedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestAssignedPullRequestAssigneesItemTypeMannequin,
		WebhookPullRequestAssignedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestAssignedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestAssignedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestAssignedPullRequestAuthorAssociation string

const (
	WebhookPullRequestAssignedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestAssignedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestAssignedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestAssignedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestAssignedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestAssignedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestAssignedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestAssignedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestAssignedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestAssignedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestAssignedPullRequestAuthorAssociationMEMBER WebhookPullRequestAssignedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestAssignedPullRequestAuthorAssociationNONE WebhookPullRequestAssignedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestAssignedPullRequestAuthorAssociationOWNER WebhookPullRequestAssignedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestAssignedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestAssignedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestAssignedPullRequestAuthorAssociationValues() []WebhookPullRequestAssignedPullRequestAuthorAssociation {
	return []WebhookPullRequestAssignedPullRequestAuthorAssociation{
		WebhookPullRequestAssignedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestAssignedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestAssignedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestAssignedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestAssignedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestAssignedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestAssignedPullRequestAuthorAssociationNONE,
		WebhookPullRequestAssignedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestAssignedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestAssignedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestAssignedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestAssignedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestAssignedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestAssignedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestAssignedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestAssignedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestAssignedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestAssignedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestAssignedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestAssignedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestAssignedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestAssignedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestAssignedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestAssignedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestAssignedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestAssignedPullRequestAutoMergeMethodMerge WebhookPullRequestAssignedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestAssignedPullRequestAutoMergeMethodRebase WebhookPullRequestAssignedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestAssignedPullRequestAutoMergeMethodSquash WebhookPullRequestAssignedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestAssignedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestAssignedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestAssignedPullRequestAutoMergeMethodValues() []WebhookPullRequestAssignedPullRequestAutoMergeMethod {
	return []WebhookPullRequestAssignedPullRequestAutoMergeMethod{
		WebhookPullRequestAssignedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestAssignedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestAssignedPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestAssignedPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestAssignedPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestAssignedPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestAssignedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestAssignedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestAssignedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestAssignedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestAssignedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestAssignedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestAssignedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestAssignedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestAssignedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestAssignedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestAssignedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestAssignedPullRequestBaseRepoOwnerType{
		WebhookPullRequestAssignedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestAssignedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestAssignedPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestAssignedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestAssignedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestAssignedPullRequestBaseRepoVisibilityInternal WebhookPullRequestAssignedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestAssignedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestAssignedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestAssignedPullRequestBaseRepoVisibilityPublic WebhookPullRequestAssignedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestAssignedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestAssignedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestAssignedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestAssignedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestAssignedPullRequestBaseRepoVisibility{
		WebhookPullRequestAssignedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestAssignedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestAssignedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestAssignedPullRequestBaseUserType string

const (
	WebhookPullRequestAssignedPullRequestBaseUserTypeBot WebhookPullRequestAssignedPullRequestBaseUserType = "Bot"
	WebhookPullRequestAssignedPullRequestBaseUserTypeOrganization WebhookPullRequestAssignedPullRequestBaseUserType = "Organization"
	WebhookPullRequestAssignedPullRequestBaseUserTypeUser WebhookPullRequestAssignedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestAssignedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestAssignedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestAssignedPullRequestBaseUserTypeValues() []WebhookPullRequestAssignedPullRequestBaseUserType {
	return []WebhookPullRequestAssignedPullRequestBaseUserType{
		WebhookPullRequestAssignedPullRequestBaseUserTypeBot,
		WebhookPullRequestAssignedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestAssignedPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestAssignedPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestAssignedPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestAssignedPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestAssignedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestAssignedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestAssignedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestAssignedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestAssignedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestAssignedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestAssignedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestAssignedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestAssignedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestAssignedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestAssignedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestAssignedPullRequestHeadRepoOwnerType{
		WebhookPullRequestAssignedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestAssignedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestAssignedPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestAssignedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestAssignedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestAssignedPullRequestHeadRepoVisibilityInternal WebhookPullRequestAssignedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestAssignedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestAssignedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestAssignedPullRequestHeadRepoVisibilityPublic WebhookPullRequestAssignedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestAssignedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestAssignedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestAssignedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestAssignedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestAssignedPullRequestHeadRepoVisibility{
		WebhookPullRequestAssignedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestAssignedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestAssignedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestAssignedPullRequestHeadUserType string

const (
	WebhookPullRequestAssignedPullRequestHeadUserTypeBot WebhookPullRequestAssignedPullRequestHeadUserType = "Bot"
	WebhookPullRequestAssignedPullRequestHeadUserTypeOrganization WebhookPullRequestAssignedPullRequestHeadUserType = "Organization"
	WebhookPullRequestAssignedPullRequestHeadUserTypeUser WebhookPullRequestAssignedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestAssignedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestAssignedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestAssignedPullRequestHeadUserTypeValues() []WebhookPullRequestAssignedPullRequestHeadUserType {
	return []WebhookPullRequestAssignedPullRequestHeadUserType{
		WebhookPullRequestAssignedPullRequestHeadUserTypeBot,
		WebhookPullRequestAssignedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestAssignedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestAssignedPullRequestMergedByType string

const (
	WebhookPullRequestAssignedPullRequestMergedByTypeBot WebhookPullRequestAssignedPullRequestMergedByType = "Bot"
	WebhookPullRequestAssignedPullRequestMergedByTypeOrganization WebhookPullRequestAssignedPullRequestMergedByType = "Organization"
	WebhookPullRequestAssignedPullRequestMergedByTypeUser WebhookPullRequestAssignedPullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestAssignedPullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestAssignedPullRequestMergedByType const type.
func PossibleWebhookPullRequestAssignedPullRequestMergedByTypeValues() []WebhookPullRequestAssignedPullRequestMergedByType {
	return []WebhookPullRequestAssignedPullRequestMergedByType{
		WebhookPullRequestAssignedPullRequestMergedByTypeBot,
		WebhookPullRequestAssignedPullRequestMergedByTypeOrganization,
		WebhookPullRequestAssignedPullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestAssignedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestAssignedPullRequestMilestoneCreatorTypeBot WebhookPullRequestAssignedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestAssignedPullRequestMilestoneCreatorTypeMannequin WebhookPullRequestAssignedPullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestAssignedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestAssignedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestAssignedPullRequestMilestoneCreatorTypeUser WebhookPullRequestAssignedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestAssignedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestAssignedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestAssignedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestAssignedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestAssignedPullRequestMilestoneCreatorType{
		WebhookPullRequestAssignedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestAssignedPullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestAssignedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestAssignedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestAssignedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestAssignedPullRequestMilestoneState string

const (
	WebhookPullRequestAssignedPullRequestMilestoneStateClosed WebhookPullRequestAssignedPullRequestMilestoneState = "closed"
	WebhookPullRequestAssignedPullRequestMilestoneStateOpen WebhookPullRequestAssignedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestAssignedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestAssignedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestAssignedPullRequestMilestoneStateValues() []WebhookPullRequestAssignedPullRequestMilestoneState {
	return []WebhookPullRequestAssignedPullRequestMilestoneState{
		WebhookPullRequestAssignedPullRequestMilestoneStateClosed,
		WebhookPullRequestAssignedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestAssignedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

// WebhookPullRequestAssignedPullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestAssignedPullRequestState string

const (
	WebhookPullRequestAssignedPullRequestStateClosed WebhookPullRequestAssignedPullRequestState = "closed"
	WebhookPullRequestAssignedPullRequestStateOpen WebhookPullRequestAssignedPullRequestState = "open"
)

// PossibleWebhookPullRequestAssignedPullRequestStateValues returns the possible values for the WebhookPullRequestAssignedPullRequestState const type.
func PossibleWebhookPullRequestAssignedPullRequestStateValues() []WebhookPullRequestAssignedPullRequestState {
	return []WebhookPullRequestAssignedPullRequestState{
		WebhookPullRequestAssignedPullRequestStateClosed,
		WebhookPullRequestAssignedPullRequestStateOpen,
	}
}

type WebhookPullRequestAssignedPullRequestUserType string

const (
	WebhookPullRequestAssignedPullRequestUserTypeBot WebhookPullRequestAssignedPullRequestUserType = "Bot"
	WebhookPullRequestAssignedPullRequestUserTypeMannequin WebhookPullRequestAssignedPullRequestUserType = "Mannequin"
	WebhookPullRequestAssignedPullRequestUserTypeOrganization WebhookPullRequestAssignedPullRequestUserType = "Organization"
	WebhookPullRequestAssignedPullRequestUserTypeUser WebhookPullRequestAssignedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestAssignedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestAssignedPullRequestUserType const type.
func PossibleWebhookPullRequestAssignedPullRequestUserTypeValues() []WebhookPullRequestAssignedPullRequestUserType {
	return []WebhookPullRequestAssignedPullRequestUserType{
		WebhookPullRequestAssignedPullRequestUserTypeBot,
		WebhookPullRequestAssignedPullRequestUserTypeMannequin,
		WebhookPullRequestAssignedPullRequestUserTypeOrganization,
		WebhookPullRequestAssignedPullRequestUserTypeUser,
	}
}

type WebhookPullRequestAutoMergeDisabledAction string

const (
	WebhookPullRequestAutoMergeDisabledActionAutoMergeDisabled WebhookPullRequestAutoMergeDisabledAction = "auto_merge_disabled"
)

// PossibleWebhookPullRequestAutoMergeDisabledActionValues returns the possible values for the WebhookPullRequestAutoMergeDisabledAction const type.
func PossibleWebhookPullRequestAutoMergeDisabledActionValues() []WebhookPullRequestAutoMergeDisabledAction {
	return []WebhookPullRequestAutoMergeDisabledAction{
		WebhookPullRequestAutoMergeDisabledActionAutoMergeDisabled,
	}
}

type WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReason string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReasonNull WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReason = "null"
	WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReasonOffTopic WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReasonResolved WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReason = "resolved"
	WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReasonSpam WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReason = "spam"
	WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReasonTooHeated WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestActiveLockReasonValues() []WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReason {
	return []WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReason{
		WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReasonNull,
		WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReasonResolved,
		WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReasonSpam,
		WebhookPullRequestAutoMergeDisabledPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestAutoMergeDisabledPullRequestAssigneeType string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestAssigneeTypeBot WebhookPullRequestAutoMergeDisabledPullRequestAssigneeType = "Bot"
	WebhookPullRequestAutoMergeDisabledPullRequestAssigneeTypeOrganization WebhookPullRequestAutoMergeDisabledPullRequestAssigneeType = "Organization"
	WebhookPullRequestAutoMergeDisabledPullRequestAssigneeTypeUser WebhookPullRequestAutoMergeDisabledPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestAssigneeType const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestAssigneeTypeValues() []WebhookPullRequestAutoMergeDisabledPullRequestAssigneeType {
	return []WebhookPullRequestAutoMergeDisabledPullRequestAssigneeType{
		WebhookPullRequestAutoMergeDisabledPullRequestAssigneeTypeBot,
		WebhookPullRequestAutoMergeDisabledPullRequestAssigneeTypeOrganization,
		WebhookPullRequestAutoMergeDisabledPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemType string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemTypeBot WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemTypeOrganization WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemTypeUser WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemTypeValues() []WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemType {
	return []WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemType{
		WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemTypeBot,
		WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestAutoMergeDisabledPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociation string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationMEMBER WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationNONE WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationOWNER WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationValues() []WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociation {
	return []WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociation{
		WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationNONE,
		WebhookPullRequestAutoMergeDisabledPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByType{
		WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethod string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethodMerge WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethodRebase WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethodSquash WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethodValues() []WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethod {
	return []WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethod{
		WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethodMerge,
		WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethodRebase,
		WebhookPullRequestAutoMergeDisabledPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerTypeBot WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerTypeUser WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerType{
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibilityInternal WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibilityPrivate WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibilityPublic WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibilityValues() []WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibility {
	return []WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibility{
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestAutoMergeDisabledPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestAutoMergeDisabledPullRequestBaseUserType string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestBaseUserTypeBot WebhookPullRequestAutoMergeDisabledPullRequestBaseUserType = "Bot"
	WebhookPullRequestAutoMergeDisabledPullRequestBaseUserTypeOrganization WebhookPullRequestAutoMergeDisabledPullRequestBaseUserType = "Organization"
	WebhookPullRequestAutoMergeDisabledPullRequestBaseUserTypeUser WebhookPullRequestAutoMergeDisabledPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestBaseUserType const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestBaseUserTypeValues() []WebhookPullRequestAutoMergeDisabledPullRequestBaseUserType {
	return []WebhookPullRequestAutoMergeDisabledPullRequestBaseUserType{
		WebhookPullRequestAutoMergeDisabledPullRequestBaseUserTypeBot,
		WebhookPullRequestAutoMergeDisabledPullRequestBaseUserTypeOrganization,
		WebhookPullRequestAutoMergeDisabledPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerTypeBot WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerTypeUser WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerType{
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibilityInternal WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibilityPrivate WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibilityPublic WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibilityValues() []WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibility {
	return []WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibility{
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestAutoMergeDisabledPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestAutoMergeDisabledPullRequestHeadUserType string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestHeadUserTypeBot WebhookPullRequestAutoMergeDisabledPullRequestHeadUserType = "Bot"
	WebhookPullRequestAutoMergeDisabledPullRequestHeadUserTypeOrganization WebhookPullRequestAutoMergeDisabledPullRequestHeadUserType = "Organization"
	WebhookPullRequestAutoMergeDisabledPullRequestHeadUserTypeUser WebhookPullRequestAutoMergeDisabledPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestHeadUserType const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestHeadUserTypeValues() []WebhookPullRequestAutoMergeDisabledPullRequestHeadUserType {
	return []WebhookPullRequestAutoMergeDisabledPullRequestHeadUserType{
		WebhookPullRequestAutoMergeDisabledPullRequestHeadUserTypeBot,
		WebhookPullRequestAutoMergeDisabledPullRequestHeadUserTypeOrganization,
		WebhookPullRequestAutoMergeDisabledPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestAutoMergeDisabledPullRequestMergedByType string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestMergedByTypeBot WebhookPullRequestAutoMergeDisabledPullRequestMergedByType = "Bot"
	WebhookPullRequestAutoMergeDisabledPullRequestMergedByTypeOrganization WebhookPullRequestAutoMergeDisabledPullRequestMergedByType = "Organization"
	WebhookPullRequestAutoMergeDisabledPullRequestMergedByTypeUser WebhookPullRequestAutoMergeDisabledPullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestMergedByType const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestMergedByTypeValues() []WebhookPullRequestAutoMergeDisabledPullRequestMergedByType {
	return []WebhookPullRequestAutoMergeDisabledPullRequestMergedByType{
		WebhookPullRequestAutoMergeDisabledPullRequestMergedByTypeBot,
		WebhookPullRequestAutoMergeDisabledPullRequestMergedByTypeOrganization,
		WebhookPullRequestAutoMergeDisabledPullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorTypeBot WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorTypeUser WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorType {
	return []WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorType{
		WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestAutoMergeDisabledPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestAutoMergeDisabledPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestAutoMergeDisabledPullRequestMilestoneState string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestMilestoneStateClosed WebhookPullRequestAutoMergeDisabledPullRequestMilestoneState = "closed"
	WebhookPullRequestAutoMergeDisabledPullRequestMilestoneStateOpen WebhookPullRequestAutoMergeDisabledPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestMilestoneState const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestMilestoneStateValues() []WebhookPullRequestAutoMergeDisabledPullRequestMilestoneState {
	return []WebhookPullRequestAutoMergeDisabledPullRequestMilestoneState{
		WebhookPullRequestAutoMergeDisabledPullRequestMilestoneStateClosed,
		WebhookPullRequestAutoMergeDisabledPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestAutoMergeDisabledPullRequestRequestedTeamsItemPrivacySecret,
	}
}

// WebhookPullRequestAutoMergeDisabledPullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestAutoMergeDisabledPullRequestState string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestStateClosed WebhookPullRequestAutoMergeDisabledPullRequestState = "closed"
	WebhookPullRequestAutoMergeDisabledPullRequestStateOpen WebhookPullRequestAutoMergeDisabledPullRequestState = "open"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestStateValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestState const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestStateValues() []WebhookPullRequestAutoMergeDisabledPullRequestState {
	return []WebhookPullRequestAutoMergeDisabledPullRequestState{
		WebhookPullRequestAutoMergeDisabledPullRequestStateClosed,
		WebhookPullRequestAutoMergeDisabledPullRequestStateOpen,
	}
}

type WebhookPullRequestAutoMergeDisabledPullRequestUserType string

const (
	WebhookPullRequestAutoMergeDisabledPullRequestUserTypeBot WebhookPullRequestAutoMergeDisabledPullRequestUserType = "Bot"
	WebhookPullRequestAutoMergeDisabledPullRequestUserTypeMannequin WebhookPullRequestAutoMergeDisabledPullRequestUserType = "Mannequin"
	WebhookPullRequestAutoMergeDisabledPullRequestUserTypeOrganization WebhookPullRequestAutoMergeDisabledPullRequestUserType = "Organization"
	WebhookPullRequestAutoMergeDisabledPullRequestUserTypeUser WebhookPullRequestAutoMergeDisabledPullRequestUserType = "User"
)

// PossibleWebhookPullRequestAutoMergeDisabledPullRequestUserTypeValues returns the possible values for the WebhookPullRequestAutoMergeDisabledPullRequestUserType const type.
func PossibleWebhookPullRequestAutoMergeDisabledPullRequestUserTypeValues() []WebhookPullRequestAutoMergeDisabledPullRequestUserType {
	return []WebhookPullRequestAutoMergeDisabledPullRequestUserType{
		WebhookPullRequestAutoMergeDisabledPullRequestUserTypeBot,
		WebhookPullRequestAutoMergeDisabledPullRequestUserTypeMannequin,
		WebhookPullRequestAutoMergeDisabledPullRequestUserTypeOrganization,
		WebhookPullRequestAutoMergeDisabledPullRequestUserTypeUser,
	}
}

type WebhookPullRequestAutoMergeEnabledAction string

const (
	WebhookPullRequestAutoMergeEnabledActionAutoMergeEnabled WebhookPullRequestAutoMergeEnabledAction = "auto_merge_enabled"
)

// PossibleWebhookPullRequestAutoMergeEnabledActionValues returns the possible values for the WebhookPullRequestAutoMergeEnabledAction const type.
func PossibleWebhookPullRequestAutoMergeEnabledActionValues() []WebhookPullRequestAutoMergeEnabledAction {
	return []WebhookPullRequestAutoMergeEnabledAction{
		WebhookPullRequestAutoMergeEnabledActionAutoMergeEnabled,
	}
}

type WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReason string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReasonNull WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReason = "null"
	WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReasonOffTopic WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReasonResolved WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReason = "resolved"
	WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReasonSpam WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReason = "spam"
	WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReasonTooHeated WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestActiveLockReasonValues() []WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReason {
	return []WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReason{
		WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReasonNull,
		WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReasonResolved,
		WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReasonSpam,
		WebhookPullRequestAutoMergeEnabledPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestAutoMergeEnabledPullRequestAssigneeType string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestAssigneeTypeBot WebhookPullRequestAutoMergeEnabledPullRequestAssigneeType = "Bot"
	WebhookPullRequestAutoMergeEnabledPullRequestAssigneeTypeOrganization WebhookPullRequestAutoMergeEnabledPullRequestAssigneeType = "Organization"
	WebhookPullRequestAutoMergeEnabledPullRequestAssigneeTypeUser WebhookPullRequestAutoMergeEnabledPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestAssigneeType const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestAssigneeTypeValues() []WebhookPullRequestAutoMergeEnabledPullRequestAssigneeType {
	return []WebhookPullRequestAutoMergeEnabledPullRequestAssigneeType{
		WebhookPullRequestAutoMergeEnabledPullRequestAssigneeTypeBot,
		WebhookPullRequestAutoMergeEnabledPullRequestAssigneeTypeOrganization,
		WebhookPullRequestAutoMergeEnabledPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemType string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemTypeBot WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemTypeOrganization WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemTypeUser WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemTypeValues() []WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemType {
	return []WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemType{
		WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemTypeBot,
		WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestAutoMergeEnabledPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociation string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationMEMBER WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationNONE WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationOWNER WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationValues() []WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociation {
	return []WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociation{
		WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationNONE,
		WebhookPullRequestAutoMergeEnabledPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByType{
		WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethod string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethodMerge WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethodRebase WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethodSquash WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethodValues() []WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethod {
	return []WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethod{
		WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethodMerge,
		WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethodRebase,
		WebhookPullRequestAutoMergeEnabledPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerTypeBot WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerTypeUser WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerType{
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibilityInternal WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibilityPrivate WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibilityPublic WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibilityValues() []WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibility {
	return []WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibility{
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestAutoMergeEnabledPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestAutoMergeEnabledPullRequestBaseUserType string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestBaseUserTypeBot WebhookPullRequestAutoMergeEnabledPullRequestBaseUserType = "Bot"
	WebhookPullRequestAutoMergeEnabledPullRequestBaseUserTypeOrganization WebhookPullRequestAutoMergeEnabledPullRequestBaseUserType = "Organization"
	WebhookPullRequestAutoMergeEnabledPullRequestBaseUserTypeUser WebhookPullRequestAutoMergeEnabledPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestBaseUserType const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestBaseUserTypeValues() []WebhookPullRequestAutoMergeEnabledPullRequestBaseUserType {
	return []WebhookPullRequestAutoMergeEnabledPullRequestBaseUserType{
		WebhookPullRequestAutoMergeEnabledPullRequestBaseUserTypeBot,
		WebhookPullRequestAutoMergeEnabledPullRequestBaseUserTypeOrganization,
		WebhookPullRequestAutoMergeEnabledPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerTypeBot WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerTypeUser WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerType{
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibilityInternal WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibilityPrivate WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibilityPublic WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibilityValues() []WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibility {
	return []WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibility{
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestAutoMergeEnabledPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestAutoMergeEnabledPullRequestHeadUserType string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestHeadUserTypeBot WebhookPullRequestAutoMergeEnabledPullRequestHeadUserType = "Bot"
	WebhookPullRequestAutoMergeEnabledPullRequestHeadUserTypeOrganization WebhookPullRequestAutoMergeEnabledPullRequestHeadUserType = "Organization"
	WebhookPullRequestAutoMergeEnabledPullRequestHeadUserTypeUser WebhookPullRequestAutoMergeEnabledPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestHeadUserType const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestHeadUserTypeValues() []WebhookPullRequestAutoMergeEnabledPullRequestHeadUserType {
	return []WebhookPullRequestAutoMergeEnabledPullRequestHeadUserType{
		WebhookPullRequestAutoMergeEnabledPullRequestHeadUserTypeBot,
		WebhookPullRequestAutoMergeEnabledPullRequestHeadUserTypeOrganization,
		WebhookPullRequestAutoMergeEnabledPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestAutoMergeEnabledPullRequestMergedByType string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestMergedByTypeBot WebhookPullRequestAutoMergeEnabledPullRequestMergedByType = "Bot"
	WebhookPullRequestAutoMergeEnabledPullRequestMergedByTypeOrganization WebhookPullRequestAutoMergeEnabledPullRequestMergedByType = "Organization"
	WebhookPullRequestAutoMergeEnabledPullRequestMergedByTypeUser WebhookPullRequestAutoMergeEnabledPullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestMergedByType const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestMergedByTypeValues() []WebhookPullRequestAutoMergeEnabledPullRequestMergedByType {
	return []WebhookPullRequestAutoMergeEnabledPullRequestMergedByType{
		WebhookPullRequestAutoMergeEnabledPullRequestMergedByTypeBot,
		WebhookPullRequestAutoMergeEnabledPullRequestMergedByTypeOrganization,
		WebhookPullRequestAutoMergeEnabledPullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorTypeBot WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorTypeMannequin WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorTypeUser WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorType {
	return []WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorType{
		WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestAutoMergeEnabledPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestAutoMergeEnabledPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestAutoMergeEnabledPullRequestMilestoneState string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestMilestoneStateClosed WebhookPullRequestAutoMergeEnabledPullRequestMilestoneState = "closed"
	WebhookPullRequestAutoMergeEnabledPullRequestMilestoneStateOpen WebhookPullRequestAutoMergeEnabledPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestMilestoneState const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestMilestoneStateValues() []WebhookPullRequestAutoMergeEnabledPullRequestMilestoneState {
	return []WebhookPullRequestAutoMergeEnabledPullRequestMilestoneState{
		WebhookPullRequestAutoMergeEnabledPullRequestMilestoneStateClosed,
		WebhookPullRequestAutoMergeEnabledPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestAutoMergeEnabledPullRequestRequestedTeamsItemPrivacySecret,
	}
}

// WebhookPullRequestAutoMergeEnabledPullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestAutoMergeEnabledPullRequestState string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestStateClosed WebhookPullRequestAutoMergeEnabledPullRequestState = "closed"
	WebhookPullRequestAutoMergeEnabledPullRequestStateOpen WebhookPullRequestAutoMergeEnabledPullRequestState = "open"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestStateValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestState const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestStateValues() []WebhookPullRequestAutoMergeEnabledPullRequestState {
	return []WebhookPullRequestAutoMergeEnabledPullRequestState{
		WebhookPullRequestAutoMergeEnabledPullRequestStateClosed,
		WebhookPullRequestAutoMergeEnabledPullRequestStateOpen,
	}
}

type WebhookPullRequestAutoMergeEnabledPullRequestUserType string

const (
	WebhookPullRequestAutoMergeEnabledPullRequestUserTypeBot WebhookPullRequestAutoMergeEnabledPullRequestUserType = "Bot"
	WebhookPullRequestAutoMergeEnabledPullRequestUserTypeMannequin WebhookPullRequestAutoMergeEnabledPullRequestUserType = "Mannequin"
	WebhookPullRequestAutoMergeEnabledPullRequestUserTypeOrganization WebhookPullRequestAutoMergeEnabledPullRequestUserType = "Organization"
	WebhookPullRequestAutoMergeEnabledPullRequestUserTypeUser WebhookPullRequestAutoMergeEnabledPullRequestUserType = "User"
)

// PossibleWebhookPullRequestAutoMergeEnabledPullRequestUserTypeValues returns the possible values for the WebhookPullRequestAutoMergeEnabledPullRequestUserType const type.
func PossibleWebhookPullRequestAutoMergeEnabledPullRequestUserTypeValues() []WebhookPullRequestAutoMergeEnabledPullRequestUserType {
	return []WebhookPullRequestAutoMergeEnabledPullRequestUserType{
		WebhookPullRequestAutoMergeEnabledPullRequestUserTypeBot,
		WebhookPullRequestAutoMergeEnabledPullRequestUserTypeMannequin,
		WebhookPullRequestAutoMergeEnabledPullRequestUserTypeOrganization,
		WebhookPullRequestAutoMergeEnabledPullRequestUserTypeUser,
	}
}

type WebhookPullRequestClosedAction string

const (
	WebhookPullRequestClosedActionClosed WebhookPullRequestClosedAction = "closed"
)

// PossibleWebhookPullRequestClosedActionValues returns the possible values for the WebhookPullRequestClosedAction const type.
func PossibleWebhookPullRequestClosedActionValues() []WebhookPullRequestClosedAction {
	return []WebhookPullRequestClosedAction{
		WebhookPullRequestClosedActionClosed,
	}
}

type WebhookPullRequestClosedPullRequest0ActiveLockReason string

const (
	WebhookPullRequestClosedPullRequest0ActiveLockReasonNull WebhookPullRequestClosedPullRequest0ActiveLockReason = "null"
	WebhookPullRequestClosedPullRequest0ActiveLockReasonOffTopic WebhookPullRequestClosedPullRequest0ActiveLockReason = "off-topic"
	WebhookPullRequestClosedPullRequest0ActiveLockReasonResolved WebhookPullRequestClosedPullRequest0ActiveLockReason = "resolved"
	WebhookPullRequestClosedPullRequest0ActiveLockReasonSpam WebhookPullRequestClosedPullRequest0ActiveLockReason = "spam"
	WebhookPullRequestClosedPullRequest0ActiveLockReasonTooHeated WebhookPullRequestClosedPullRequest0ActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestClosedPullRequest0ActiveLockReasonValues returns the possible values for the WebhookPullRequestClosedPullRequest0ActiveLockReason const type.
func PossibleWebhookPullRequestClosedPullRequest0ActiveLockReasonValues() []WebhookPullRequestClosedPullRequest0ActiveLockReason {
	return []WebhookPullRequestClosedPullRequest0ActiveLockReason{
		WebhookPullRequestClosedPullRequest0ActiveLockReasonNull,
		WebhookPullRequestClosedPullRequest0ActiveLockReasonOffTopic,
		WebhookPullRequestClosedPullRequest0ActiveLockReasonResolved,
		WebhookPullRequestClosedPullRequest0ActiveLockReasonSpam,
		WebhookPullRequestClosedPullRequest0ActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestClosedPullRequest0AssigneeType string

const (
	WebhookPullRequestClosedPullRequest0AssigneeTypeBot WebhookPullRequestClosedPullRequest0AssigneeType = "Bot"
	WebhookPullRequestClosedPullRequest0AssigneeTypeMannequin WebhookPullRequestClosedPullRequest0AssigneeType = "Mannequin"
	WebhookPullRequestClosedPullRequest0AssigneeTypeOrganization WebhookPullRequestClosedPullRequest0AssigneeType = "Organization"
	WebhookPullRequestClosedPullRequest0AssigneeTypeUser WebhookPullRequestClosedPullRequest0AssigneeType = "User"
)

// PossibleWebhookPullRequestClosedPullRequest0AssigneeTypeValues returns the possible values for the WebhookPullRequestClosedPullRequest0AssigneeType const type.
func PossibleWebhookPullRequestClosedPullRequest0AssigneeTypeValues() []WebhookPullRequestClosedPullRequest0AssigneeType {
	return []WebhookPullRequestClosedPullRequest0AssigneeType{
		WebhookPullRequestClosedPullRequest0AssigneeTypeBot,
		WebhookPullRequestClosedPullRequest0AssigneeTypeMannequin,
		WebhookPullRequestClosedPullRequest0AssigneeTypeOrganization,
		WebhookPullRequestClosedPullRequest0AssigneeTypeUser,
	}
}

// WebhookPullRequestClosedPullRequest0AuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestClosedPullRequest0AuthorAssociation string

const (
	WebhookPullRequestClosedPullRequest0AuthorAssociationCOLLABORATOR WebhookPullRequestClosedPullRequest0AuthorAssociation = "COLLABORATOR"
	WebhookPullRequestClosedPullRequest0AuthorAssociationCONTRIBUTOR WebhookPullRequestClosedPullRequest0AuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestClosedPullRequest0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestClosedPullRequest0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestClosedPullRequest0AuthorAssociationFIRSTTIMER WebhookPullRequestClosedPullRequest0AuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestClosedPullRequest0AuthorAssociationMANNEQUIN WebhookPullRequestClosedPullRequest0AuthorAssociation = "MANNEQUIN"
	WebhookPullRequestClosedPullRequest0AuthorAssociationMEMBER WebhookPullRequestClosedPullRequest0AuthorAssociation = "MEMBER"
	WebhookPullRequestClosedPullRequest0AuthorAssociationNONE WebhookPullRequestClosedPullRequest0AuthorAssociation = "NONE"
	WebhookPullRequestClosedPullRequest0AuthorAssociationOWNER WebhookPullRequestClosedPullRequest0AuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestClosedPullRequest0AuthorAssociationValues returns the possible values for the WebhookPullRequestClosedPullRequest0AuthorAssociation const type.
func PossibleWebhookPullRequestClosedPullRequest0AuthorAssociationValues() []WebhookPullRequestClosedPullRequest0AuthorAssociation {
	return []WebhookPullRequestClosedPullRequest0AuthorAssociation{
		WebhookPullRequestClosedPullRequest0AuthorAssociationCOLLABORATOR,
		WebhookPullRequestClosedPullRequest0AuthorAssociationCONTRIBUTOR,
		WebhookPullRequestClosedPullRequest0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestClosedPullRequest0AuthorAssociationFIRSTTIMER,
		WebhookPullRequestClosedPullRequest0AuthorAssociationMANNEQUIN,
		WebhookPullRequestClosedPullRequest0AuthorAssociationMEMBER,
		WebhookPullRequestClosedPullRequest0AuthorAssociationNONE,
		WebhookPullRequestClosedPullRequest0AuthorAssociationOWNER,
	}
}

type WebhookPullRequestClosedPullRequest0AutoMergeEnabledByType string

const (
	WebhookPullRequestClosedPullRequest0AutoMergeEnabledByTypeBot WebhookPullRequestClosedPullRequest0AutoMergeEnabledByType = "Bot"
	WebhookPullRequestClosedPullRequest0AutoMergeEnabledByTypeOrganization WebhookPullRequestClosedPullRequest0AutoMergeEnabledByType = "Organization"
	WebhookPullRequestClosedPullRequest0AutoMergeEnabledByTypeUser WebhookPullRequestClosedPullRequest0AutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestClosedPullRequest0AutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestClosedPullRequest0AutoMergeEnabledByType const type.
func PossibleWebhookPullRequestClosedPullRequest0AutoMergeEnabledByTypeValues() []WebhookPullRequestClosedPullRequest0AutoMergeEnabledByType {
	return []WebhookPullRequestClosedPullRequest0AutoMergeEnabledByType{
		WebhookPullRequestClosedPullRequest0AutoMergeEnabledByTypeBot,
		WebhookPullRequestClosedPullRequest0AutoMergeEnabledByTypeOrganization,
		WebhookPullRequestClosedPullRequest0AutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestClosedPullRequest0AutoMergeMethod - The merge method to use.
type WebhookPullRequestClosedPullRequest0AutoMergeMethod string

const (
	WebhookPullRequestClosedPullRequest0AutoMergeMethodMerge WebhookPullRequestClosedPullRequest0AutoMergeMethod = "merge"
	WebhookPullRequestClosedPullRequest0AutoMergeMethodRebase WebhookPullRequestClosedPullRequest0AutoMergeMethod = "rebase"
	WebhookPullRequestClosedPullRequest0AutoMergeMethodSquash WebhookPullRequestClosedPullRequest0AutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestClosedPullRequest0AutoMergeMethodValues returns the possible values for the WebhookPullRequestClosedPullRequest0AutoMergeMethod const type.
func PossibleWebhookPullRequestClosedPullRequest0AutoMergeMethodValues() []WebhookPullRequestClosedPullRequest0AutoMergeMethod {
	return []WebhookPullRequestClosedPullRequest0AutoMergeMethod{
		WebhookPullRequestClosedPullRequest0AutoMergeMethodMerge,
		WebhookPullRequestClosedPullRequest0AutoMergeMethodRebase,
		WebhookPullRequestClosedPullRequest0AutoMergeMethodSquash,
	}
}

// WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessage string

const (
	WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessageBLANK WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessagePRBODY WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessagePRTITLE WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessageValues() []WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessage {
	return []WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessage{
		WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitTitle string

const (
	WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitTitlePRTITLE WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestClosedPullRequest0BaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestClosedPullRequest0BaseRepoMergeCommitTitleValues() []WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitTitle {
	return []WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitTitle{
		WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestClosedPullRequest0BaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestClosedPullRequest0BaseRepoOwnerType string

const (
	WebhookPullRequestClosedPullRequest0BaseRepoOwnerTypeBot WebhookPullRequestClosedPullRequest0BaseRepoOwnerType = "Bot"
	WebhookPullRequestClosedPullRequest0BaseRepoOwnerTypeOrganization WebhookPullRequestClosedPullRequest0BaseRepoOwnerType = "Organization"
	WebhookPullRequestClosedPullRequest0BaseRepoOwnerTypeUser WebhookPullRequestClosedPullRequest0BaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestClosedPullRequest0BaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestClosedPullRequest0BaseRepoOwnerType const type.
func PossibleWebhookPullRequestClosedPullRequest0BaseRepoOwnerTypeValues() []WebhookPullRequestClosedPullRequest0BaseRepoOwnerType {
	return []WebhookPullRequestClosedPullRequest0BaseRepoOwnerType{
		WebhookPullRequestClosedPullRequest0BaseRepoOwnerTypeBot,
		WebhookPullRequestClosedPullRequest0BaseRepoOwnerTypeOrganization,
		WebhookPullRequestClosedPullRequest0BaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessage{
		WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitTitle{
		WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestClosedPullRequest0BaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestClosedPullRequest0BaseRepoVisibility string

const (
	WebhookPullRequestClosedPullRequest0BaseRepoVisibilityInternal WebhookPullRequestClosedPullRequest0BaseRepoVisibility = "internal"
	WebhookPullRequestClosedPullRequest0BaseRepoVisibilityPrivate WebhookPullRequestClosedPullRequest0BaseRepoVisibility = "private"
	WebhookPullRequestClosedPullRequest0BaseRepoVisibilityPublic WebhookPullRequestClosedPullRequest0BaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestClosedPullRequest0BaseRepoVisibilityValues returns the possible values for the WebhookPullRequestClosedPullRequest0BaseRepoVisibility const type.
func PossibleWebhookPullRequestClosedPullRequest0BaseRepoVisibilityValues() []WebhookPullRequestClosedPullRequest0BaseRepoVisibility {
	return []WebhookPullRequestClosedPullRequest0BaseRepoVisibility{
		WebhookPullRequestClosedPullRequest0BaseRepoVisibilityInternal,
		WebhookPullRequestClosedPullRequest0BaseRepoVisibilityPrivate,
		WebhookPullRequestClosedPullRequest0BaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestClosedPullRequest0BaseUserType string

const (
	WebhookPullRequestClosedPullRequest0BaseUserTypeBot WebhookPullRequestClosedPullRequest0BaseUserType = "Bot"
	WebhookPullRequestClosedPullRequest0BaseUserTypeOrganization WebhookPullRequestClosedPullRequest0BaseUserType = "Organization"
	WebhookPullRequestClosedPullRequest0BaseUserTypeUser WebhookPullRequestClosedPullRequest0BaseUserType = "User"
)

// PossibleWebhookPullRequestClosedPullRequest0BaseUserTypeValues returns the possible values for the WebhookPullRequestClosedPullRequest0BaseUserType const type.
func PossibleWebhookPullRequestClosedPullRequest0BaseUserTypeValues() []WebhookPullRequestClosedPullRequest0BaseUserType {
	return []WebhookPullRequestClosedPullRequest0BaseUserType{
		WebhookPullRequestClosedPullRequest0BaseUserTypeBot,
		WebhookPullRequestClosedPullRequest0BaseUserTypeOrganization,
		WebhookPullRequestClosedPullRequest0BaseUserTypeUser,
	}
}

// WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessage - The default value for a merge commit message.
type WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessage string

const (
	WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessageBLANK WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessagePRBODY WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessagePRTITLE WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessageValues() []WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessage {
	return []WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessage{
		WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitTitle - The default value for a merge commit message title.
type WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitTitle string

const (
	WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitTitlePRTITLE WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestClosedPullRequest0HeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestClosedPullRequest0HeadRepoMergeCommitTitleValues() []WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitTitle {
	return []WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitTitle{
		WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestClosedPullRequest0HeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestClosedPullRequest0HeadRepoOwnerType string

const (
	WebhookPullRequestClosedPullRequest0HeadRepoOwnerTypeBot WebhookPullRequestClosedPullRequest0HeadRepoOwnerType = "Bot"
	WebhookPullRequestClosedPullRequest0HeadRepoOwnerTypeOrganization WebhookPullRequestClosedPullRequest0HeadRepoOwnerType = "Organization"
	WebhookPullRequestClosedPullRequest0HeadRepoOwnerTypeUser WebhookPullRequestClosedPullRequest0HeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestClosedPullRequest0HeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestClosedPullRequest0HeadRepoOwnerType const type.
func PossibleWebhookPullRequestClosedPullRequest0HeadRepoOwnerTypeValues() []WebhookPullRequestClosedPullRequest0HeadRepoOwnerType {
	return []WebhookPullRequestClosedPullRequest0HeadRepoOwnerType{
		WebhookPullRequestClosedPullRequest0HeadRepoOwnerTypeBot,
		WebhookPullRequestClosedPullRequest0HeadRepoOwnerTypeOrganization,
		WebhookPullRequestClosedPullRequest0HeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessage - The default value for a squash merge commit message.
type WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessage{
		WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitTitle - The default value for a squash merge commit title.
type WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitTitle{
		WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestClosedPullRequest0HeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestClosedPullRequest0HeadRepoVisibility string

const (
	WebhookPullRequestClosedPullRequest0HeadRepoVisibilityInternal WebhookPullRequestClosedPullRequest0HeadRepoVisibility = "internal"
	WebhookPullRequestClosedPullRequest0HeadRepoVisibilityPrivate WebhookPullRequestClosedPullRequest0HeadRepoVisibility = "private"
	WebhookPullRequestClosedPullRequest0HeadRepoVisibilityPublic WebhookPullRequestClosedPullRequest0HeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestClosedPullRequest0HeadRepoVisibilityValues returns the possible values for the WebhookPullRequestClosedPullRequest0HeadRepoVisibility const type.
func PossibleWebhookPullRequestClosedPullRequest0HeadRepoVisibilityValues() []WebhookPullRequestClosedPullRequest0HeadRepoVisibility {
	return []WebhookPullRequestClosedPullRequest0HeadRepoVisibility{
		WebhookPullRequestClosedPullRequest0HeadRepoVisibilityInternal,
		WebhookPullRequestClosedPullRequest0HeadRepoVisibilityPrivate,
		WebhookPullRequestClosedPullRequest0HeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestClosedPullRequest0HeadUserType string

const (
	WebhookPullRequestClosedPullRequest0HeadUserTypeBot WebhookPullRequestClosedPullRequest0HeadUserType = "Bot"
	WebhookPullRequestClosedPullRequest0HeadUserTypeOrganization WebhookPullRequestClosedPullRequest0HeadUserType = "Organization"
	WebhookPullRequestClosedPullRequest0HeadUserTypeUser WebhookPullRequestClosedPullRequest0HeadUserType = "User"
)

// PossibleWebhookPullRequestClosedPullRequest0HeadUserTypeValues returns the possible values for the WebhookPullRequestClosedPullRequest0HeadUserType const type.
func PossibleWebhookPullRequestClosedPullRequest0HeadUserTypeValues() []WebhookPullRequestClosedPullRequest0HeadUserType {
	return []WebhookPullRequestClosedPullRequest0HeadUserType{
		WebhookPullRequestClosedPullRequest0HeadUserTypeBot,
		WebhookPullRequestClosedPullRequest0HeadUserTypeOrganization,
		WebhookPullRequestClosedPullRequest0HeadUserTypeUser,
	}
}

type WebhookPullRequestClosedPullRequest0MergedByType string

const (
	WebhookPullRequestClosedPullRequest0MergedByTypeBot WebhookPullRequestClosedPullRequest0MergedByType = "Bot"
	WebhookPullRequestClosedPullRequest0MergedByTypeOrganization WebhookPullRequestClosedPullRequest0MergedByType = "Organization"
	WebhookPullRequestClosedPullRequest0MergedByTypeUser WebhookPullRequestClosedPullRequest0MergedByType = "User"
)

// PossibleWebhookPullRequestClosedPullRequest0MergedByTypeValues returns the possible values for the WebhookPullRequestClosedPullRequest0MergedByType const type.
func PossibleWebhookPullRequestClosedPullRequest0MergedByTypeValues() []WebhookPullRequestClosedPullRequest0MergedByType {
	return []WebhookPullRequestClosedPullRequest0MergedByType{
		WebhookPullRequestClosedPullRequest0MergedByTypeBot,
		WebhookPullRequestClosedPullRequest0MergedByTypeOrganization,
		WebhookPullRequestClosedPullRequest0MergedByTypeUser,
	}
}

type WebhookPullRequestClosedPullRequest0MilestoneCreatorType string

const (
	WebhookPullRequestClosedPullRequest0MilestoneCreatorTypeBot WebhookPullRequestClosedPullRequest0MilestoneCreatorType = "Bot"
	WebhookPullRequestClosedPullRequest0MilestoneCreatorTypeMannequin WebhookPullRequestClosedPullRequest0MilestoneCreatorType = "Mannequin"
	WebhookPullRequestClosedPullRequest0MilestoneCreatorTypeOrganization WebhookPullRequestClosedPullRequest0MilestoneCreatorType = "Organization"
	WebhookPullRequestClosedPullRequest0MilestoneCreatorTypeUser WebhookPullRequestClosedPullRequest0MilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestClosedPullRequest0MilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestClosedPullRequest0MilestoneCreatorType const type.
func PossibleWebhookPullRequestClosedPullRequest0MilestoneCreatorTypeValues() []WebhookPullRequestClosedPullRequest0MilestoneCreatorType {
	return []WebhookPullRequestClosedPullRequest0MilestoneCreatorType{
		WebhookPullRequestClosedPullRequest0MilestoneCreatorTypeBot,
		WebhookPullRequestClosedPullRequest0MilestoneCreatorTypeMannequin,
		WebhookPullRequestClosedPullRequest0MilestoneCreatorTypeOrganization,
		WebhookPullRequestClosedPullRequest0MilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestClosedPullRequest0MilestoneState - The state of the milestone.
type WebhookPullRequestClosedPullRequest0MilestoneState string

const (
	WebhookPullRequestClosedPullRequest0MilestoneStateClosed WebhookPullRequestClosedPullRequest0MilestoneState = "closed"
	WebhookPullRequestClosedPullRequest0MilestoneStateOpen WebhookPullRequestClosedPullRequest0MilestoneState = "open"
)

// PossibleWebhookPullRequestClosedPullRequest0MilestoneStateValues returns the possible values for the WebhookPullRequestClosedPullRequest0MilestoneState const type.
func PossibleWebhookPullRequestClosedPullRequest0MilestoneStateValues() []WebhookPullRequestClosedPullRequest0MilestoneState {
	return []WebhookPullRequestClosedPullRequest0MilestoneState{
		WebhookPullRequestClosedPullRequest0MilestoneStateClosed,
		WebhookPullRequestClosedPullRequest0MilestoneStateOpen,
	}
}

// WebhookPullRequestClosedPullRequest0State - State of this Pull Request. Either open or closed.
type WebhookPullRequestClosedPullRequest0State string

const (
	WebhookPullRequestClosedPullRequest0StateClosed WebhookPullRequestClosedPullRequest0State = "closed"
	WebhookPullRequestClosedPullRequest0StateOpen WebhookPullRequestClosedPullRequest0State = "open"
)

// PossibleWebhookPullRequestClosedPullRequest0StateValues returns the possible values for the WebhookPullRequestClosedPullRequest0State const type.
func PossibleWebhookPullRequestClosedPullRequest0StateValues() []WebhookPullRequestClosedPullRequest0State {
	return []WebhookPullRequestClosedPullRequest0State{
		WebhookPullRequestClosedPullRequest0StateClosed,
		WebhookPullRequestClosedPullRequest0StateOpen,
	}
}

type WebhookPullRequestClosedPullRequest0UserType string

const (
	WebhookPullRequestClosedPullRequest0UserTypeBot WebhookPullRequestClosedPullRequest0UserType = "Bot"
	WebhookPullRequestClosedPullRequest0UserTypeMannequin WebhookPullRequestClosedPullRequest0UserType = "Mannequin"
	WebhookPullRequestClosedPullRequest0UserTypeOrganization WebhookPullRequestClosedPullRequest0UserType = "Organization"
	WebhookPullRequestClosedPullRequest0UserTypeUser WebhookPullRequestClosedPullRequest0UserType = "User"
)

// PossibleWebhookPullRequestClosedPullRequest0UserTypeValues returns the possible values for the WebhookPullRequestClosedPullRequest0UserType const type.
func PossibleWebhookPullRequestClosedPullRequest0UserTypeValues() []WebhookPullRequestClosedPullRequest0UserType {
	return []WebhookPullRequestClosedPullRequest0UserType{
		WebhookPullRequestClosedPullRequest0UserTypeBot,
		WebhookPullRequestClosedPullRequest0UserTypeMannequin,
		WebhookPullRequestClosedPullRequest0UserTypeOrganization,
		WebhookPullRequestClosedPullRequest0UserTypeUser,
	}
}

type WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessage string

const (
	WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessageBLANK WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessagePRBODY WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessagePRTITLE WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessageValues() []WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessage {
	return []WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessage{
		WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitMessagePRTITLE,
	}
}

type WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitTitle string

const (
	WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitTitlePRTITLE WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestClosedPullRequest1BaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestClosedPullRequest1BaseRepoMergeCommitTitleValues() []WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitTitle {
	return []WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitTitle{
		WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestClosedPullRequest1BaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessage{
		WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitMessagePRBODY,
	}
}

type WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitTitle{
		WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestClosedPullRequest1BaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessage string

const (
	WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessageBLANK WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessagePRBODY WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessagePRTITLE WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessageValues() []WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessage {
	return []WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessage{
		WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitMessagePRTITLE,
	}
}

type WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitTitle string

const (
	WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitTitlePRTITLE WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestClosedPullRequest1HeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestClosedPullRequest1HeadRepoMergeCommitTitleValues() []WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitTitle {
	return []WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitTitle{
		WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestClosedPullRequest1HeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessage{
		WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitMessagePRBODY,
	}
}

type WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitTitle{
		WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestClosedPullRequest1HeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

// WebhookPullRequestClosedPullRequest1State - State of this Pull Request. Either open or closed.
type WebhookPullRequestClosedPullRequest1State string

const (
	WebhookPullRequestClosedPullRequest1StateClosed WebhookPullRequestClosedPullRequest1State = "closed"
	WebhookPullRequestClosedPullRequest1StateOpen WebhookPullRequestClosedPullRequest1State = "open"
)

// PossibleWebhookPullRequestClosedPullRequest1StateValues returns the possible values for the WebhookPullRequestClosedPullRequest1State const type.
func PossibleWebhookPullRequestClosedPullRequest1StateValues() []WebhookPullRequestClosedPullRequest1State {
	return []WebhookPullRequestClosedPullRequest1State{
		WebhookPullRequestClosedPullRequest1StateClosed,
		WebhookPullRequestClosedPullRequest1StateOpen,
	}
}

type WebhookPullRequestClosedPullRequestOneOf0AssigneesItemType string

const (
	WebhookPullRequestClosedPullRequestOneOf0AssigneesItemTypeBot WebhookPullRequestClosedPullRequestOneOf0AssigneesItemType = "Bot"
	WebhookPullRequestClosedPullRequestOneOf0AssigneesItemTypeMannequin WebhookPullRequestClosedPullRequestOneOf0AssigneesItemType = "Mannequin"
	WebhookPullRequestClosedPullRequestOneOf0AssigneesItemTypeOrganization WebhookPullRequestClosedPullRequestOneOf0AssigneesItemType = "Organization"
	WebhookPullRequestClosedPullRequestOneOf0AssigneesItemTypeUser WebhookPullRequestClosedPullRequestOneOf0AssigneesItemType = "User"
)

// PossibleWebhookPullRequestClosedPullRequestOneOf0AssigneesItemTypeValues returns the possible values for the WebhookPullRequestClosedPullRequestOneOf0AssigneesItemType const type.
func PossibleWebhookPullRequestClosedPullRequestOneOf0AssigneesItemTypeValues() []WebhookPullRequestClosedPullRequestOneOf0AssigneesItemType {
	return []WebhookPullRequestClosedPullRequestOneOf0AssigneesItemType{
		WebhookPullRequestClosedPullRequestOneOf0AssigneesItemTypeBot,
		WebhookPullRequestClosedPullRequestOneOf0AssigneesItemTypeMannequin,
		WebhookPullRequestClosedPullRequestOneOf0AssigneesItemTypeOrganization,
		WebhookPullRequestClosedPullRequestOneOf0AssigneesItemTypeUser,
	}
}

type WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacy string

const (
	WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacyClosed WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacyOpen WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacy = "open"
	WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacySecret WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacyValues() []WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacy {
	return []WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacy{
		WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacyClosed,
		WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacyOpen,
		WebhookPullRequestClosedPullRequestOneOf0RequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestConvertedToDraftAction string

const (
	WebhookPullRequestConvertedToDraftActionConvertedToDraft WebhookPullRequestConvertedToDraftAction = "converted_to_draft"
)

// PossibleWebhookPullRequestConvertedToDraftActionValues returns the possible values for the WebhookPullRequestConvertedToDraftAction const type.
func PossibleWebhookPullRequestConvertedToDraftActionValues() []WebhookPullRequestConvertedToDraftAction {
	return []WebhookPullRequestConvertedToDraftAction{
		WebhookPullRequestConvertedToDraftActionConvertedToDraft,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReason string

const (
	WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReasonNull WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReason = "null"
	WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReasonOffTopic WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReason = "off-topic"
	WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReasonResolved WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReason = "resolved"
	WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReasonSpam WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReason = "spam"
	WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReasonTooHeated WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0ActiveLockReasonValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReason const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0ActiveLockReasonValues() []WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReason {
	return []WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReason{
		WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReasonNull,
		WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReasonOffTopic,
		WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReasonResolved,
		WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReasonSpam,
		WebhookPullRequestConvertedToDraftPullRequest0ActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest0AssigneeType string

const (
	WebhookPullRequestConvertedToDraftPullRequest0AssigneeTypeBot WebhookPullRequestConvertedToDraftPullRequest0AssigneeType = "Bot"
	WebhookPullRequestConvertedToDraftPullRequest0AssigneeTypeOrganization WebhookPullRequestConvertedToDraftPullRequest0AssigneeType = "Organization"
	WebhookPullRequestConvertedToDraftPullRequest0AssigneeTypeUser WebhookPullRequestConvertedToDraftPullRequest0AssigneeType = "User"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0AssigneeTypeValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0AssigneeType const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0AssigneeTypeValues() []WebhookPullRequestConvertedToDraftPullRequest0AssigneeType {
	return []WebhookPullRequestConvertedToDraftPullRequest0AssigneeType{
		WebhookPullRequestConvertedToDraftPullRequest0AssigneeTypeBot,
		WebhookPullRequestConvertedToDraftPullRequest0AssigneeTypeOrganization,
		WebhookPullRequestConvertedToDraftPullRequest0AssigneeTypeUser,
	}
}

// WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociation string

const (
	WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationCOLLABORATOR WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociation = "COLLABORATOR"
	WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationCONTRIBUTOR WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationFIRSTTIMER WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationMANNEQUIN WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociation = "MANNEQUIN"
	WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationMEMBER WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociation = "MEMBER"
	WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationNONE WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociation = "NONE"
	WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationOWNER WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociation const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationValues() []WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociation {
	return []WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociation{
		WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationCOLLABORATOR,
		WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationCONTRIBUTOR,
		WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationFIRSTTIMER,
		WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationMANNEQUIN,
		WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationMEMBER,
		WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationNONE,
		WebhookPullRequestConvertedToDraftPullRequest0AuthorAssociationOWNER,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByType string

const (
	WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByTypeBot WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByType = "Bot"
	WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByTypeOrganization WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByType = "Organization"
	WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByTypeUser WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByType const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByTypeValues() []WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByType {
	return []WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByType{
		WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByTypeBot,
		WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByTypeOrganization,
		WebhookPullRequestConvertedToDraftPullRequest0AutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethod - The merge method to use.
type WebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethod string

const (
	WebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethodMerge WebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethod = "merge"
	WebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethodRebase WebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethod = "rebase"
	WebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethodSquash WebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethodValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethod const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethodValues() []WebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethod {
	return []WebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethod{
		WebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethodMerge,
		WebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethodRebase,
		WebhookPullRequestConvertedToDraftPullRequest0AutoMergeMethodSquash,
	}
}

// WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessage string

const (
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessageBLANK WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessagePRBODY WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessagePRTITLE WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessageValues() []WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessage {
	return []WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessage{
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitTitle string

const (
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitTitlePRTITLE WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitTitleValues() []WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitTitle {
	return []WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitTitle{
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerType string

const (
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerTypeBot WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerType = "Bot"
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerTypeOrganization WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerType = "Organization"
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerTypeUser WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerType const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerTypeValues() []WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerType {
	return []WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerType{
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerTypeBot,
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerTypeOrganization,
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessage{
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitTitle{
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibility string

const (
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibilityInternal WebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibility = "internal"
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibilityPrivate WebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibility = "private"
	WebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibilityPublic WebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibilityValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibility const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibilityValues() []WebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibility {
	return []WebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibility{
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibilityInternal,
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibilityPrivate,
		WebhookPullRequestConvertedToDraftPullRequest0BaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest0BaseUserType string

const (
	WebhookPullRequestConvertedToDraftPullRequest0BaseUserTypeBot WebhookPullRequestConvertedToDraftPullRequest0BaseUserType = "Bot"
	WebhookPullRequestConvertedToDraftPullRequest0BaseUserTypeOrganization WebhookPullRequestConvertedToDraftPullRequest0BaseUserType = "Organization"
	WebhookPullRequestConvertedToDraftPullRequest0BaseUserTypeUser WebhookPullRequestConvertedToDraftPullRequest0BaseUserType = "User"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0BaseUserTypeValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0BaseUserType const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0BaseUserTypeValues() []WebhookPullRequestConvertedToDraftPullRequest0BaseUserType {
	return []WebhookPullRequestConvertedToDraftPullRequest0BaseUserType{
		WebhookPullRequestConvertedToDraftPullRequest0BaseUserTypeBot,
		WebhookPullRequestConvertedToDraftPullRequest0BaseUserTypeOrganization,
		WebhookPullRequestConvertedToDraftPullRequest0BaseUserTypeUser,
	}
}

// WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessage string

const (
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessageBLANK WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessagePRBODY WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessagePRTITLE WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessageValues() []WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessage {
	return []WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessage{
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitTitle string

const (
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitTitlePRTITLE WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitTitleValues() []WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitTitle {
	return []WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitTitle{
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerType string

const (
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerTypeBot WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerType = "Bot"
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerTypeOrganization WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerType = "Organization"
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerTypeUser WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerType const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerTypeValues() []WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerType {
	return []WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerType{
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerTypeBot,
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerTypeOrganization,
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessage{
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitTitle{
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibility string

const (
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibilityInternal WebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibility = "internal"
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibilityPrivate WebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibility = "private"
	WebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibilityPublic WebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibilityValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibility const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibilityValues() []WebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibility {
	return []WebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibility{
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibilityInternal,
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibilityPrivate,
		WebhookPullRequestConvertedToDraftPullRequest0HeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest0HeadUserType string

const (
	WebhookPullRequestConvertedToDraftPullRequest0HeadUserTypeBot WebhookPullRequestConvertedToDraftPullRequest0HeadUserType = "Bot"
	WebhookPullRequestConvertedToDraftPullRequest0HeadUserTypeOrganization WebhookPullRequestConvertedToDraftPullRequest0HeadUserType = "Organization"
	WebhookPullRequestConvertedToDraftPullRequest0HeadUserTypeUser WebhookPullRequestConvertedToDraftPullRequest0HeadUserType = "User"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0HeadUserTypeValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0HeadUserType const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0HeadUserTypeValues() []WebhookPullRequestConvertedToDraftPullRequest0HeadUserType {
	return []WebhookPullRequestConvertedToDraftPullRequest0HeadUserType{
		WebhookPullRequestConvertedToDraftPullRequest0HeadUserTypeBot,
		WebhookPullRequestConvertedToDraftPullRequest0HeadUserTypeOrganization,
		WebhookPullRequestConvertedToDraftPullRequest0HeadUserTypeUser,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest0MergedByType string

const (
	WebhookPullRequestConvertedToDraftPullRequest0MergedByTypeBot WebhookPullRequestConvertedToDraftPullRequest0MergedByType = "Bot"
	WebhookPullRequestConvertedToDraftPullRequest0MergedByTypeOrganization WebhookPullRequestConvertedToDraftPullRequest0MergedByType = "Organization"
	WebhookPullRequestConvertedToDraftPullRequest0MergedByTypeUser WebhookPullRequestConvertedToDraftPullRequest0MergedByType = "User"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0MergedByTypeValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0MergedByType const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0MergedByTypeValues() []WebhookPullRequestConvertedToDraftPullRequest0MergedByType {
	return []WebhookPullRequestConvertedToDraftPullRequest0MergedByType{
		WebhookPullRequestConvertedToDraftPullRequest0MergedByTypeBot,
		WebhookPullRequestConvertedToDraftPullRequest0MergedByTypeOrganization,
		WebhookPullRequestConvertedToDraftPullRequest0MergedByTypeUser,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorType string

const (
	WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorTypeBot WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorType = "Bot"
	WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorTypeOrganization WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorType = "Organization"
	WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorTypeUser WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorType const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorTypeValues() []WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorType {
	return []WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorType{
		WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorTypeBot,
		WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorTypeOrganization,
		WebhookPullRequestConvertedToDraftPullRequest0MilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestConvertedToDraftPullRequest0MilestoneState - The state of the milestone.
type WebhookPullRequestConvertedToDraftPullRequest0MilestoneState string

const (
	WebhookPullRequestConvertedToDraftPullRequest0MilestoneStateClosed WebhookPullRequestConvertedToDraftPullRequest0MilestoneState = "closed"
	WebhookPullRequestConvertedToDraftPullRequest0MilestoneStateOpen WebhookPullRequestConvertedToDraftPullRequest0MilestoneState = "open"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0MilestoneStateValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0MilestoneState const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0MilestoneStateValues() []WebhookPullRequestConvertedToDraftPullRequest0MilestoneState {
	return []WebhookPullRequestConvertedToDraftPullRequest0MilestoneState{
		WebhookPullRequestConvertedToDraftPullRequest0MilestoneStateClosed,
		WebhookPullRequestConvertedToDraftPullRequest0MilestoneStateOpen,
	}
}

// WebhookPullRequestConvertedToDraftPullRequest0State - State of this Pull Request. Either open or closed.
type WebhookPullRequestConvertedToDraftPullRequest0State string

const (
	WebhookPullRequestConvertedToDraftPullRequest0StateClosed WebhookPullRequestConvertedToDraftPullRequest0State = "closed"
	WebhookPullRequestConvertedToDraftPullRequest0StateOpen WebhookPullRequestConvertedToDraftPullRequest0State = "open"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0StateValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0State const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0StateValues() []WebhookPullRequestConvertedToDraftPullRequest0State {
	return []WebhookPullRequestConvertedToDraftPullRequest0State{
		WebhookPullRequestConvertedToDraftPullRequest0StateClosed,
		WebhookPullRequestConvertedToDraftPullRequest0StateOpen,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest0UserType string

const (
	WebhookPullRequestConvertedToDraftPullRequest0UserTypeBot WebhookPullRequestConvertedToDraftPullRequest0UserType = "Bot"
	WebhookPullRequestConvertedToDraftPullRequest0UserTypeMannequin WebhookPullRequestConvertedToDraftPullRequest0UserType = "Mannequin"
	WebhookPullRequestConvertedToDraftPullRequest0UserTypeOrganization WebhookPullRequestConvertedToDraftPullRequest0UserType = "Organization"
	WebhookPullRequestConvertedToDraftPullRequest0UserTypeUser WebhookPullRequestConvertedToDraftPullRequest0UserType = "User"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest0UserTypeValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest0UserType const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest0UserTypeValues() []WebhookPullRequestConvertedToDraftPullRequest0UserType {
	return []WebhookPullRequestConvertedToDraftPullRequest0UserType{
		WebhookPullRequestConvertedToDraftPullRequest0UserTypeBot,
		WebhookPullRequestConvertedToDraftPullRequest0UserTypeMannequin,
		WebhookPullRequestConvertedToDraftPullRequest0UserTypeOrganization,
		WebhookPullRequestConvertedToDraftPullRequest0UserTypeUser,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessage string

const (
	WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessageBLANK WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessagePRBODY WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessagePRTITLE WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessageValues() []WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessage {
	return []WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessage{
		WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitMessagePRTITLE,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitTitle string

const (
	WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitTitlePRTITLE WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitTitleValues() []WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitTitle {
	return []WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitTitle{
		WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestConvertedToDraftPullRequest1BaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessage{
		WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitMessagePRBODY,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitTitle{
		WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestConvertedToDraftPullRequest1BaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessage string

const (
	WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessageBLANK WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessagePRBODY WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessagePRTITLE WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessageValues() []WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessage {
	return []WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessage{
		WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitMessagePRTITLE,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitTitle string

const (
	WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitTitlePRTITLE WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitTitleValues() []WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitTitle {
	return []WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitTitle{
		WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestConvertedToDraftPullRequest1HeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessage{
		WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitMessagePRBODY,
	}
}

type WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitTitle{
		WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestConvertedToDraftPullRequest1HeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemType string

const (
	WebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemTypeBot WebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemType = "Bot"
	WebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemTypeOrganization WebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemType = "Organization"
	WebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemTypeUser WebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemType = "User"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemTypeValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemType const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemTypeValues() []WebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemType {
	return []WebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemType{
		WebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemTypeBot,
		WebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemTypeOrganization,
		WebhookPullRequestConvertedToDraftPullRequestOneOf0AssigneesItemTypeUser,
	}
}

type WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacy string

const (
	WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacyClosed WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacyOpen WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacy = "open"
	WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacySecret WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacyValues() []WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacy {
	return []WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacy{
		WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacyClosed,
		WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacyOpen,
		WebhookPullRequestConvertedToDraftPullRequestOneOf0RequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestDemilestonedAction string

const (
	WebhookPullRequestDemilestonedActionDemilestoned WebhookPullRequestDemilestonedAction = "demilestoned"
)

// PossibleWebhookPullRequestDemilestonedActionValues returns the possible values for the WebhookPullRequestDemilestonedAction const type.
func PossibleWebhookPullRequestDemilestonedActionValues() []WebhookPullRequestDemilestonedAction {
	return []WebhookPullRequestDemilestonedAction{
		WebhookPullRequestDemilestonedActionDemilestoned,
	}
}

type WebhookPullRequestDemilestonedPullRequestActiveLockReason string

const (
	WebhookPullRequestDemilestonedPullRequestActiveLockReasonNull WebhookPullRequestDemilestonedPullRequestActiveLockReason = "null"
	WebhookPullRequestDemilestonedPullRequestActiveLockReasonOffTopic WebhookPullRequestDemilestonedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestDemilestonedPullRequestActiveLockReasonResolved WebhookPullRequestDemilestonedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestDemilestonedPullRequestActiveLockReasonSpam WebhookPullRequestDemilestonedPullRequestActiveLockReason = "spam"
	WebhookPullRequestDemilestonedPullRequestActiveLockReasonTooHeated WebhookPullRequestDemilestonedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestDemilestonedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestDemilestonedPullRequestActiveLockReasonValues() []WebhookPullRequestDemilestonedPullRequestActiveLockReason {
	return []WebhookPullRequestDemilestonedPullRequestActiveLockReason{
		WebhookPullRequestDemilestonedPullRequestActiveLockReasonNull,
		WebhookPullRequestDemilestonedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestDemilestonedPullRequestActiveLockReasonResolved,
		WebhookPullRequestDemilestonedPullRequestActiveLockReasonSpam,
		WebhookPullRequestDemilestonedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestDemilestonedPullRequestAssigneeType string

const (
	WebhookPullRequestDemilestonedPullRequestAssigneeTypeBot WebhookPullRequestDemilestonedPullRequestAssigneeType = "Bot"
	WebhookPullRequestDemilestonedPullRequestAssigneeTypeMannequin WebhookPullRequestDemilestonedPullRequestAssigneeType = "Mannequin"
	WebhookPullRequestDemilestonedPullRequestAssigneeTypeOrganization WebhookPullRequestDemilestonedPullRequestAssigneeType = "Organization"
	WebhookPullRequestDemilestonedPullRequestAssigneeTypeUser WebhookPullRequestDemilestonedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestDemilestonedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestDemilestonedPullRequestAssigneeTypeValues() []WebhookPullRequestDemilestonedPullRequestAssigneeType {
	return []WebhookPullRequestDemilestonedPullRequestAssigneeType{
		WebhookPullRequestDemilestonedPullRequestAssigneeTypeBot,
		WebhookPullRequestDemilestonedPullRequestAssigneeTypeMannequin,
		WebhookPullRequestDemilestonedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestDemilestonedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestDemilestonedPullRequestAssigneesItemType string

const (
	WebhookPullRequestDemilestonedPullRequestAssigneesItemTypeBot WebhookPullRequestDemilestonedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestDemilestonedPullRequestAssigneesItemTypeMannequin WebhookPullRequestDemilestonedPullRequestAssigneesItemType = "Mannequin"
	WebhookPullRequestDemilestonedPullRequestAssigneesItemTypeOrganization WebhookPullRequestDemilestonedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestDemilestonedPullRequestAssigneesItemTypeUser WebhookPullRequestDemilestonedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestDemilestonedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestDemilestonedPullRequestAssigneesItemTypeValues() []WebhookPullRequestDemilestonedPullRequestAssigneesItemType {
	return []WebhookPullRequestDemilestonedPullRequestAssigneesItemType{
		WebhookPullRequestDemilestonedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestDemilestonedPullRequestAssigneesItemTypeMannequin,
		WebhookPullRequestDemilestonedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestDemilestonedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestDemilestonedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestDemilestonedPullRequestAuthorAssociation string

const (
	WebhookPullRequestDemilestonedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestDemilestonedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestDemilestonedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestDemilestonedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestDemilestonedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestDemilestonedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestDemilestonedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestDemilestonedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestDemilestonedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestDemilestonedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestDemilestonedPullRequestAuthorAssociationMEMBER WebhookPullRequestDemilestonedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestDemilestonedPullRequestAuthorAssociationNONE WebhookPullRequestDemilestonedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestDemilestonedPullRequestAuthorAssociationOWNER WebhookPullRequestDemilestonedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestDemilestonedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestDemilestonedPullRequestAuthorAssociationValues() []WebhookPullRequestDemilestonedPullRequestAuthorAssociation {
	return []WebhookPullRequestDemilestonedPullRequestAuthorAssociation{
		WebhookPullRequestDemilestonedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestDemilestonedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestDemilestonedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestDemilestonedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestDemilestonedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestDemilestonedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestDemilestonedPullRequestAuthorAssociationNONE,
		WebhookPullRequestDemilestonedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestDemilestonedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestDemilestonedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestDemilestonedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestDemilestonedPullRequestAutoMergeMethodMerge WebhookPullRequestDemilestonedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestDemilestonedPullRequestAutoMergeMethodRebase WebhookPullRequestDemilestonedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestDemilestonedPullRequestAutoMergeMethodSquash WebhookPullRequestDemilestonedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestDemilestonedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestDemilestonedPullRequestAutoMergeMethodValues() []WebhookPullRequestDemilestonedPullRequestAutoMergeMethod {
	return []WebhookPullRequestDemilestonedPullRequestAutoMergeMethod{
		WebhookPullRequestDemilestonedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestDemilestonedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestDemilestonedPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestDemilestonedPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestDemilestonedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestDemilestonedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestDemilestonedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestDemilestonedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestDemilestonedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestDemilestonedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestDemilestonedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestDemilestonedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestDemilestonedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestDemilestonedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestDemilestonedPullRequestBaseRepoOwnerType{
		WebhookPullRequestDemilestonedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestDemilestonedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestDemilestonedPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestDemilestonedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestDemilestonedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestDemilestonedPullRequestBaseRepoVisibilityInternal WebhookPullRequestDemilestonedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestDemilestonedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestDemilestonedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestDemilestonedPullRequestBaseRepoVisibilityPublic WebhookPullRequestDemilestonedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestDemilestonedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestDemilestonedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestDemilestonedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestDemilestonedPullRequestBaseRepoVisibility{
		WebhookPullRequestDemilestonedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestDemilestonedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestDemilestonedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestDemilestonedPullRequestBaseUserType string

const (
	WebhookPullRequestDemilestonedPullRequestBaseUserTypeBot WebhookPullRequestDemilestonedPullRequestBaseUserType = "Bot"
	WebhookPullRequestDemilestonedPullRequestBaseUserTypeOrganization WebhookPullRequestDemilestonedPullRequestBaseUserType = "Organization"
	WebhookPullRequestDemilestonedPullRequestBaseUserTypeUser WebhookPullRequestDemilestonedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestDemilestonedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestDemilestonedPullRequestBaseUserTypeValues() []WebhookPullRequestDemilestonedPullRequestBaseUserType {
	return []WebhookPullRequestDemilestonedPullRequestBaseUserType{
		WebhookPullRequestDemilestonedPullRequestBaseUserTypeBot,
		WebhookPullRequestDemilestonedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestDemilestonedPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestDemilestonedPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestDemilestonedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestDemilestonedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestDemilestonedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestDemilestonedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestDemilestonedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestDemilestonedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestDemilestonedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestDemilestonedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestDemilestonedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestDemilestonedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestDemilestonedPullRequestHeadRepoOwnerType{
		WebhookPullRequestDemilestonedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestDemilestonedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestDemilestonedPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestDemilestonedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestDemilestonedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestDemilestonedPullRequestHeadRepoVisibilityInternal WebhookPullRequestDemilestonedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestDemilestonedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestDemilestonedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestDemilestonedPullRequestHeadRepoVisibilityPublic WebhookPullRequestDemilestonedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestDemilestonedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestDemilestonedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestDemilestonedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestDemilestonedPullRequestHeadRepoVisibility{
		WebhookPullRequestDemilestonedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestDemilestonedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestDemilestonedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestDemilestonedPullRequestHeadUserType string

const (
	WebhookPullRequestDemilestonedPullRequestHeadUserTypeBot WebhookPullRequestDemilestonedPullRequestHeadUserType = "Bot"
	WebhookPullRequestDemilestonedPullRequestHeadUserTypeOrganization WebhookPullRequestDemilestonedPullRequestHeadUserType = "Organization"
	WebhookPullRequestDemilestonedPullRequestHeadUserTypeUser WebhookPullRequestDemilestonedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestDemilestonedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestDemilestonedPullRequestHeadUserTypeValues() []WebhookPullRequestDemilestonedPullRequestHeadUserType {
	return []WebhookPullRequestDemilestonedPullRequestHeadUserType{
		WebhookPullRequestDemilestonedPullRequestHeadUserTypeBot,
		WebhookPullRequestDemilestonedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestDemilestonedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestDemilestonedPullRequestMergedByType string

const (
	WebhookPullRequestDemilestonedPullRequestMergedByTypeBot WebhookPullRequestDemilestonedPullRequestMergedByType = "Bot"
	WebhookPullRequestDemilestonedPullRequestMergedByTypeMannequin WebhookPullRequestDemilestonedPullRequestMergedByType = "Mannequin"
	WebhookPullRequestDemilestonedPullRequestMergedByTypeOrganization WebhookPullRequestDemilestonedPullRequestMergedByType = "Organization"
	WebhookPullRequestDemilestonedPullRequestMergedByTypeUser WebhookPullRequestDemilestonedPullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestDemilestonedPullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestMergedByType const type.
func PossibleWebhookPullRequestDemilestonedPullRequestMergedByTypeValues() []WebhookPullRequestDemilestonedPullRequestMergedByType {
	return []WebhookPullRequestDemilestonedPullRequestMergedByType{
		WebhookPullRequestDemilestonedPullRequestMergedByTypeBot,
		WebhookPullRequestDemilestonedPullRequestMergedByTypeMannequin,
		WebhookPullRequestDemilestonedPullRequestMergedByTypeOrganization,
		WebhookPullRequestDemilestonedPullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestDemilestonedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestDemilestonedPullRequestMilestoneCreatorTypeBot WebhookPullRequestDemilestonedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestDemilestonedPullRequestMilestoneCreatorTypeMannequin WebhookPullRequestDemilestonedPullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestDemilestonedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestDemilestonedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestDemilestonedPullRequestMilestoneCreatorTypeUser WebhookPullRequestDemilestonedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestDemilestonedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestDemilestonedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestDemilestonedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestDemilestonedPullRequestMilestoneCreatorType{
		WebhookPullRequestDemilestonedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestDemilestonedPullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestDemilestonedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestDemilestonedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestDemilestonedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestDemilestonedPullRequestMilestoneState string

const (
	WebhookPullRequestDemilestonedPullRequestMilestoneStateClosed WebhookPullRequestDemilestonedPullRequestMilestoneState = "closed"
	WebhookPullRequestDemilestonedPullRequestMilestoneStateOpen WebhookPullRequestDemilestonedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestDemilestonedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestDemilestonedPullRequestMilestoneStateValues() []WebhookPullRequestDemilestonedPullRequestMilestoneState {
	return []WebhookPullRequestDemilestonedPullRequestMilestoneState{
		WebhookPullRequestDemilestonedPullRequestMilestoneStateClosed,
		WebhookPullRequestDemilestonedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestDemilestonedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

// WebhookPullRequestDemilestonedPullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestDemilestonedPullRequestState string

const (
	WebhookPullRequestDemilestonedPullRequestStateClosed WebhookPullRequestDemilestonedPullRequestState = "closed"
	WebhookPullRequestDemilestonedPullRequestStateOpen WebhookPullRequestDemilestonedPullRequestState = "open"
)

// PossibleWebhookPullRequestDemilestonedPullRequestStateValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestState const type.
func PossibleWebhookPullRequestDemilestonedPullRequestStateValues() []WebhookPullRequestDemilestonedPullRequestState {
	return []WebhookPullRequestDemilestonedPullRequestState{
		WebhookPullRequestDemilestonedPullRequestStateClosed,
		WebhookPullRequestDemilestonedPullRequestStateOpen,
	}
}

type WebhookPullRequestDemilestonedPullRequestUserType string

const (
	WebhookPullRequestDemilestonedPullRequestUserTypeBot WebhookPullRequestDemilestonedPullRequestUserType = "Bot"
	WebhookPullRequestDemilestonedPullRequestUserTypeMannequin WebhookPullRequestDemilestonedPullRequestUserType = "Mannequin"
	WebhookPullRequestDemilestonedPullRequestUserTypeOrganization WebhookPullRequestDemilestonedPullRequestUserType = "Organization"
	WebhookPullRequestDemilestonedPullRequestUserTypeUser WebhookPullRequestDemilestonedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestDemilestonedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestDemilestonedPullRequestUserType const type.
func PossibleWebhookPullRequestDemilestonedPullRequestUserTypeValues() []WebhookPullRequestDemilestonedPullRequestUserType {
	return []WebhookPullRequestDemilestonedPullRequestUserType{
		WebhookPullRequestDemilestonedPullRequestUserTypeBot,
		WebhookPullRequestDemilestonedPullRequestUserTypeMannequin,
		WebhookPullRequestDemilestonedPullRequestUserTypeOrganization,
		WebhookPullRequestDemilestonedPullRequestUserTypeUser,
	}
}

type WebhookPullRequestDequeuedAction string

const (
	WebhookPullRequestDequeuedActionDequeued WebhookPullRequestDequeuedAction = "dequeued"
)

// PossibleWebhookPullRequestDequeuedActionValues returns the possible values for the WebhookPullRequestDequeuedAction const type.
func PossibleWebhookPullRequestDequeuedActionValues() []WebhookPullRequestDequeuedAction {
	return []WebhookPullRequestDequeuedAction{
		WebhookPullRequestDequeuedActionDequeued,
	}
}

type WebhookPullRequestDequeuedPullRequestActiveLockReason string

const (
	WebhookPullRequestDequeuedPullRequestActiveLockReasonNull WebhookPullRequestDequeuedPullRequestActiveLockReason = "null"
	WebhookPullRequestDequeuedPullRequestActiveLockReasonOffTopic WebhookPullRequestDequeuedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestDequeuedPullRequestActiveLockReasonResolved WebhookPullRequestDequeuedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestDequeuedPullRequestActiveLockReasonSpam WebhookPullRequestDequeuedPullRequestActiveLockReason = "spam"
	WebhookPullRequestDequeuedPullRequestActiveLockReasonTooHeated WebhookPullRequestDequeuedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestDequeuedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestDequeuedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestDequeuedPullRequestActiveLockReasonValues() []WebhookPullRequestDequeuedPullRequestActiveLockReason {
	return []WebhookPullRequestDequeuedPullRequestActiveLockReason{
		WebhookPullRequestDequeuedPullRequestActiveLockReasonNull,
		WebhookPullRequestDequeuedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestDequeuedPullRequestActiveLockReasonResolved,
		WebhookPullRequestDequeuedPullRequestActiveLockReasonSpam,
		WebhookPullRequestDequeuedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestDequeuedPullRequestAssigneeType string

const (
	WebhookPullRequestDequeuedPullRequestAssigneeTypeBot WebhookPullRequestDequeuedPullRequestAssigneeType = "Bot"
	WebhookPullRequestDequeuedPullRequestAssigneeTypeOrganization WebhookPullRequestDequeuedPullRequestAssigneeType = "Organization"
	WebhookPullRequestDequeuedPullRequestAssigneeTypeUser WebhookPullRequestDequeuedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestDequeuedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestDequeuedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestDequeuedPullRequestAssigneeTypeValues() []WebhookPullRequestDequeuedPullRequestAssigneeType {
	return []WebhookPullRequestDequeuedPullRequestAssigneeType{
		WebhookPullRequestDequeuedPullRequestAssigneeTypeBot,
		WebhookPullRequestDequeuedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestDequeuedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestDequeuedPullRequestAssigneesItemType string

const (
	WebhookPullRequestDequeuedPullRequestAssigneesItemTypeBot WebhookPullRequestDequeuedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestDequeuedPullRequestAssigneesItemTypeOrganization WebhookPullRequestDequeuedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestDequeuedPullRequestAssigneesItemTypeUser WebhookPullRequestDequeuedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestDequeuedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestDequeuedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestDequeuedPullRequestAssigneesItemTypeValues() []WebhookPullRequestDequeuedPullRequestAssigneesItemType {
	return []WebhookPullRequestDequeuedPullRequestAssigneesItemType{
		WebhookPullRequestDequeuedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestDequeuedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestDequeuedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestDequeuedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestDequeuedPullRequestAuthorAssociation string

const (
	WebhookPullRequestDequeuedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestDequeuedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestDequeuedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestDequeuedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestDequeuedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestDequeuedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestDequeuedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestDequeuedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestDequeuedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestDequeuedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestDequeuedPullRequestAuthorAssociationMEMBER WebhookPullRequestDequeuedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestDequeuedPullRequestAuthorAssociationNONE WebhookPullRequestDequeuedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestDequeuedPullRequestAuthorAssociationOWNER WebhookPullRequestDequeuedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestDequeuedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestDequeuedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestDequeuedPullRequestAuthorAssociationValues() []WebhookPullRequestDequeuedPullRequestAuthorAssociation {
	return []WebhookPullRequestDequeuedPullRequestAuthorAssociation{
		WebhookPullRequestDequeuedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestDequeuedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestDequeuedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestDequeuedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestDequeuedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestDequeuedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestDequeuedPullRequestAuthorAssociationNONE,
		WebhookPullRequestDequeuedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestDequeuedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestDequeuedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestDequeuedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestDequeuedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestDequeuedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestDequeuedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestDequeuedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestDequeuedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestDequeuedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestDequeuedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestDequeuedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestDequeuedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestDequeuedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestDequeuedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestDequeuedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestDequeuedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestDequeuedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestDequeuedPullRequestAutoMergeMethodMerge WebhookPullRequestDequeuedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestDequeuedPullRequestAutoMergeMethodRebase WebhookPullRequestDequeuedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestDequeuedPullRequestAutoMergeMethodSquash WebhookPullRequestDequeuedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestDequeuedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestDequeuedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestDequeuedPullRequestAutoMergeMethodValues() []WebhookPullRequestDequeuedPullRequestAutoMergeMethod {
	return []WebhookPullRequestDequeuedPullRequestAutoMergeMethod{
		WebhookPullRequestDequeuedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestDequeuedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestDequeuedPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestDequeuedPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestDequeuedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestDequeuedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestDequeuedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestDequeuedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestDequeuedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestDequeuedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestDequeuedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestDequeuedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestDequeuedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestDequeuedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestDequeuedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestDequeuedPullRequestBaseRepoOwnerType{
		WebhookPullRequestDequeuedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestDequeuedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestDequeuedPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestDequeuedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestDequeuedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestDequeuedPullRequestBaseRepoVisibilityInternal WebhookPullRequestDequeuedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestDequeuedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestDequeuedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestDequeuedPullRequestBaseRepoVisibilityPublic WebhookPullRequestDequeuedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestDequeuedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestDequeuedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestDequeuedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestDequeuedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestDequeuedPullRequestBaseRepoVisibility{
		WebhookPullRequestDequeuedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestDequeuedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestDequeuedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestDequeuedPullRequestBaseUserType string

const (
	WebhookPullRequestDequeuedPullRequestBaseUserTypeBot WebhookPullRequestDequeuedPullRequestBaseUserType = "Bot"
	WebhookPullRequestDequeuedPullRequestBaseUserTypeOrganization WebhookPullRequestDequeuedPullRequestBaseUserType = "Organization"
	WebhookPullRequestDequeuedPullRequestBaseUserTypeUser WebhookPullRequestDequeuedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestDequeuedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestDequeuedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestDequeuedPullRequestBaseUserTypeValues() []WebhookPullRequestDequeuedPullRequestBaseUserType {
	return []WebhookPullRequestDequeuedPullRequestBaseUserType{
		WebhookPullRequestDequeuedPullRequestBaseUserTypeBot,
		WebhookPullRequestDequeuedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestDequeuedPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestDequeuedPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestDequeuedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestDequeuedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestDequeuedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestDequeuedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestDequeuedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestDequeuedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestDequeuedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestDequeuedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestDequeuedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestDequeuedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestDequeuedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestDequeuedPullRequestHeadRepoOwnerType{
		WebhookPullRequestDequeuedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestDequeuedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestDequeuedPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestDequeuedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestDequeuedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestDequeuedPullRequestHeadRepoVisibilityInternal WebhookPullRequestDequeuedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestDequeuedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestDequeuedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestDequeuedPullRequestHeadRepoVisibilityPublic WebhookPullRequestDequeuedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestDequeuedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestDequeuedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestDequeuedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestDequeuedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestDequeuedPullRequestHeadRepoVisibility{
		WebhookPullRequestDequeuedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestDequeuedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestDequeuedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestDequeuedPullRequestHeadUserType string

const (
	WebhookPullRequestDequeuedPullRequestHeadUserTypeBot WebhookPullRequestDequeuedPullRequestHeadUserType = "Bot"
	WebhookPullRequestDequeuedPullRequestHeadUserTypeOrganization WebhookPullRequestDequeuedPullRequestHeadUserType = "Organization"
	WebhookPullRequestDequeuedPullRequestHeadUserTypeUser WebhookPullRequestDequeuedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestDequeuedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestDequeuedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestDequeuedPullRequestHeadUserTypeValues() []WebhookPullRequestDequeuedPullRequestHeadUserType {
	return []WebhookPullRequestDequeuedPullRequestHeadUserType{
		WebhookPullRequestDequeuedPullRequestHeadUserTypeBot,
		WebhookPullRequestDequeuedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestDequeuedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestDequeuedPullRequestMergedByType string

const (
	WebhookPullRequestDequeuedPullRequestMergedByTypeBot WebhookPullRequestDequeuedPullRequestMergedByType = "Bot"
	WebhookPullRequestDequeuedPullRequestMergedByTypeOrganization WebhookPullRequestDequeuedPullRequestMergedByType = "Organization"
	WebhookPullRequestDequeuedPullRequestMergedByTypeUser WebhookPullRequestDequeuedPullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestDequeuedPullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestDequeuedPullRequestMergedByType const type.
func PossibleWebhookPullRequestDequeuedPullRequestMergedByTypeValues() []WebhookPullRequestDequeuedPullRequestMergedByType {
	return []WebhookPullRequestDequeuedPullRequestMergedByType{
		WebhookPullRequestDequeuedPullRequestMergedByTypeBot,
		WebhookPullRequestDequeuedPullRequestMergedByTypeOrganization,
		WebhookPullRequestDequeuedPullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestDequeuedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestDequeuedPullRequestMilestoneCreatorTypeBot WebhookPullRequestDequeuedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestDequeuedPullRequestMilestoneCreatorTypeMannequin WebhookPullRequestDequeuedPullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestDequeuedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestDequeuedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestDequeuedPullRequestMilestoneCreatorTypeUser WebhookPullRequestDequeuedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestDequeuedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestDequeuedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestDequeuedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestDequeuedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestDequeuedPullRequestMilestoneCreatorType{
		WebhookPullRequestDequeuedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestDequeuedPullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestDequeuedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestDequeuedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestDequeuedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestDequeuedPullRequestMilestoneState string

const (
	WebhookPullRequestDequeuedPullRequestMilestoneStateClosed WebhookPullRequestDequeuedPullRequestMilestoneState = "closed"
	WebhookPullRequestDequeuedPullRequestMilestoneStateOpen WebhookPullRequestDequeuedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestDequeuedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestDequeuedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestDequeuedPullRequestMilestoneStateValues() []WebhookPullRequestDequeuedPullRequestMilestoneState {
	return []WebhookPullRequestDequeuedPullRequestMilestoneState{
		WebhookPullRequestDequeuedPullRequestMilestoneStateClosed,
		WebhookPullRequestDequeuedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestDequeuedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

// WebhookPullRequestDequeuedPullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestDequeuedPullRequestState string

const (
	WebhookPullRequestDequeuedPullRequestStateClosed WebhookPullRequestDequeuedPullRequestState = "closed"
	WebhookPullRequestDequeuedPullRequestStateOpen WebhookPullRequestDequeuedPullRequestState = "open"
)

// PossibleWebhookPullRequestDequeuedPullRequestStateValues returns the possible values for the WebhookPullRequestDequeuedPullRequestState const type.
func PossibleWebhookPullRequestDequeuedPullRequestStateValues() []WebhookPullRequestDequeuedPullRequestState {
	return []WebhookPullRequestDequeuedPullRequestState{
		WebhookPullRequestDequeuedPullRequestStateClosed,
		WebhookPullRequestDequeuedPullRequestStateOpen,
	}
}

type WebhookPullRequestDequeuedPullRequestUserType string

const (
	WebhookPullRequestDequeuedPullRequestUserTypeBot WebhookPullRequestDequeuedPullRequestUserType = "Bot"
	WebhookPullRequestDequeuedPullRequestUserTypeMannequin WebhookPullRequestDequeuedPullRequestUserType = "Mannequin"
	WebhookPullRequestDequeuedPullRequestUserTypeOrganization WebhookPullRequestDequeuedPullRequestUserType = "Organization"
	WebhookPullRequestDequeuedPullRequestUserTypeUser WebhookPullRequestDequeuedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestDequeuedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestDequeuedPullRequestUserType const type.
func PossibleWebhookPullRequestDequeuedPullRequestUserTypeValues() []WebhookPullRequestDequeuedPullRequestUserType {
	return []WebhookPullRequestDequeuedPullRequestUserType{
		WebhookPullRequestDequeuedPullRequestUserTypeBot,
		WebhookPullRequestDequeuedPullRequestUserTypeMannequin,
		WebhookPullRequestDequeuedPullRequestUserTypeOrganization,
		WebhookPullRequestDequeuedPullRequestUserTypeUser,
	}
}

type WebhookPullRequestEditedAction string

const (
	WebhookPullRequestEditedActionEdited WebhookPullRequestEditedAction = "edited"
)

// PossibleWebhookPullRequestEditedActionValues returns the possible values for the WebhookPullRequestEditedAction const type.
func PossibleWebhookPullRequestEditedActionValues() []WebhookPullRequestEditedAction {
	return []WebhookPullRequestEditedAction{
		WebhookPullRequestEditedActionEdited,
	}
}

type WebhookPullRequestEditedPullRequestActiveLockReason string

const (
	WebhookPullRequestEditedPullRequestActiveLockReasonNull WebhookPullRequestEditedPullRequestActiveLockReason = "null"
	WebhookPullRequestEditedPullRequestActiveLockReasonOffTopic WebhookPullRequestEditedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestEditedPullRequestActiveLockReasonResolved WebhookPullRequestEditedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestEditedPullRequestActiveLockReasonSpam WebhookPullRequestEditedPullRequestActiveLockReason = "spam"
	WebhookPullRequestEditedPullRequestActiveLockReasonTooHeated WebhookPullRequestEditedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestEditedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestEditedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestEditedPullRequestActiveLockReasonValues() []WebhookPullRequestEditedPullRequestActiveLockReason {
	return []WebhookPullRequestEditedPullRequestActiveLockReason{
		WebhookPullRequestEditedPullRequestActiveLockReasonNull,
		WebhookPullRequestEditedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestEditedPullRequestActiveLockReasonResolved,
		WebhookPullRequestEditedPullRequestActiveLockReasonSpam,
		WebhookPullRequestEditedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestEditedPullRequestAssigneeType string

const (
	WebhookPullRequestEditedPullRequestAssigneeTypeBot WebhookPullRequestEditedPullRequestAssigneeType = "Bot"
	WebhookPullRequestEditedPullRequestAssigneeTypeMannequin WebhookPullRequestEditedPullRequestAssigneeType = "Mannequin"
	WebhookPullRequestEditedPullRequestAssigneeTypeOrganization WebhookPullRequestEditedPullRequestAssigneeType = "Organization"
	WebhookPullRequestEditedPullRequestAssigneeTypeUser WebhookPullRequestEditedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestEditedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestEditedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestEditedPullRequestAssigneeTypeValues() []WebhookPullRequestEditedPullRequestAssigneeType {
	return []WebhookPullRequestEditedPullRequestAssigneeType{
		WebhookPullRequestEditedPullRequestAssigneeTypeBot,
		WebhookPullRequestEditedPullRequestAssigneeTypeMannequin,
		WebhookPullRequestEditedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestEditedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestEditedPullRequestAssigneesItemType string

const (
	WebhookPullRequestEditedPullRequestAssigneesItemTypeBot WebhookPullRequestEditedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestEditedPullRequestAssigneesItemTypeMannequin WebhookPullRequestEditedPullRequestAssigneesItemType = "Mannequin"
	WebhookPullRequestEditedPullRequestAssigneesItemTypeOrganization WebhookPullRequestEditedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestEditedPullRequestAssigneesItemTypeUser WebhookPullRequestEditedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestEditedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestEditedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestEditedPullRequestAssigneesItemTypeValues() []WebhookPullRequestEditedPullRequestAssigneesItemType {
	return []WebhookPullRequestEditedPullRequestAssigneesItemType{
		WebhookPullRequestEditedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestEditedPullRequestAssigneesItemTypeMannequin,
		WebhookPullRequestEditedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestEditedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestEditedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestEditedPullRequestAuthorAssociation string

const (
	WebhookPullRequestEditedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestEditedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestEditedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestEditedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestEditedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestEditedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestEditedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestEditedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestEditedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestEditedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestEditedPullRequestAuthorAssociationMEMBER WebhookPullRequestEditedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestEditedPullRequestAuthorAssociationNONE WebhookPullRequestEditedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestEditedPullRequestAuthorAssociationOWNER WebhookPullRequestEditedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestEditedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestEditedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestEditedPullRequestAuthorAssociationValues() []WebhookPullRequestEditedPullRequestAuthorAssociation {
	return []WebhookPullRequestEditedPullRequestAuthorAssociation{
		WebhookPullRequestEditedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestEditedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestEditedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestEditedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestEditedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestEditedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestEditedPullRequestAuthorAssociationNONE,
		WebhookPullRequestEditedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestEditedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestEditedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestEditedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestEditedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestEditedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestEditedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestEditedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestEditedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestEditedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestEditedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestEditedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestEditedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestEditedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestEditedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestEditedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestEditedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestEditedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestEditedPullRequestAutoMergeMethodMerge WebhookPullRequestEditedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestEditedPullRequestAutoMergeMethodRebase WebhookPullRequestEditedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestEditedPullRequestAutoMergeMethodSquash WebhookPullRequestEditedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestEditedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestEditedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestEditedPullRequestAutoMergeMethodValues() []WebhookPullRequestEditedPullRequestAutoMergeMethod {
	return []WebhookPullRequestEditedPullRequestAutoMergeMethod{
		WebhookPullRequestEditedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestEditedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestEditedPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestEditedPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestEditedPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestEditedPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestEditedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestEditedPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestEditedPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestEditedPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestEditedPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestEditedPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestEditedPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestEditedPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestEditedPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestEditedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestEditedPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestEditedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestEditedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestEditedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestEditedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestEditedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestEditedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestEditedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestEditedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestEditedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestEditedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestEditedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestEditedPullRequestBaseRepoOwnerType{
		WebhookPullRequestEditedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestEditedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestEditedPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestEditedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestEditedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestEditedPullRequestBaseRepoVisibilityInternal WebhookPullRequestEditedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestEditedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestEditedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestEditedPullRequestBaseRepoVisibilityPublic WebhookPullRequestEditedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestEditedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestEditedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestEditedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestEditedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestEditedPullRequestBaseRepoVisibility{
		WebhookPullRequestEditedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestEditedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestEditedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestEditedPullRequestBaseUserType string

const (
	WebhookPullRequestEditedPullRequestBaseUserTypeBot WebhookPullRequestEditedPullRequestBaseUserType = "Bot"
	WebhookPullRequestEditedPullRequestBaseUserTypeOrganization WebhookPullRequestEditedPullRequestBaseUserType = "Organization"
	WebhookPullRequestEditedPullRequestBaseUserTypeUser WebhookPullRequestEditedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestEditedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestEditedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestEditedPullRequestBaseUserTypeValues() []WebhookPullRequestEditedPullRequestBaseUserType {
	return []WebhookPullRequestEditedPullRequestBaseUserType{
		WebhookPullRequestEditedPullRequestBaseUserTypeBot,
		WebhookPullRequestEditedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestEditedPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestEditedPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestEditedPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestEditedPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestEditedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestEditedPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestEditedPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestEditedPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestEditedPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestEditedPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestEditedPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestEditedPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestEditedPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestEditedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestEditedPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestEditedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestEditedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestEditedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestEditedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestEditedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestEditedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestEditedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestEditedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestEditedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestEditedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestEditedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestEditedPullRequestHeadRepoOwnerType{
		WebhookPullRequestEditedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestEditedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestEditedPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestEditedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestEditedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestEditedPullRequestHeadRepoVisibilityInternal WebhookPullRequestEditedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestEditedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestEditedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestEditedPullRequestHeadRepoVisibilityPublic WebhookPullRequestEditedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestEditedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestEditedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestEditedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestEditedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestEditedPullRequestHeadRepoVisibility{
		WebhookPullRequestEditedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestEditedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestEditedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestEditedPullRequestHeadUserType string

const (
	WebhookPullRequestEditedPullRequestHeadUserTypeBot WebhookPullRequestEditedPullRequestHeadUserType = "Bot"
	WebhookPullRequestEditedPullRequestHeadUserTypeOrganization WebhookPullRequestEditedPullRequestHeadUserType = "Organization"
	WebhookPullRequestEditedPullRequestHeadUserTypeUser WebhookPullRequestEditedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestEditedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestEditedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestEditedPullRequestHeadUserTypeValues() []WebhookPullRequestEditedPullRequestHeadUserType {
	return []WebhookPullRequestEditedPullRequestHeadUserType{
		WebhookPullRequestEditedPullRequestHeadUserTypeBot,
		WebhookPullRequestEditedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestEditedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestEditedPullRequestMergedByType string

const (
	WebhookPullRequestEditedPullRequestMergedByTypeBot WebhookPullRequestEditedPullRequestMergedByType = "Bot"
	WebhookPullRequestEditedPullRequestMergedByTypeMannequin WebhookPullRequestEditedPullRequestMergedByType = "Mannequin"
	WebhookPullRequestEditedPullRequestMergedByTypeOrganization WebhookPullRequestEditedPullRequestMergedByType = "Organization"
	WebhookPullRequestEditedPullRequestMergedByTypeUser WebhookPullRequestEditedPullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestEditedPullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestEditedPullRequestMergedByType const type.
func PossibleWebhookPullRequestEditedPullRequestMergedByTypeValues() []WebhookPullRequestEditedPullRequestMergedByType {
	return []WebhookPullRequestEditedPullRequestMergedByType{
		WebhookPullRequestEditedPullRequestMergedByTypeBot,
		WebhookPullRequestEditedPullRequestMergedByTypeMannequin,
		WebhookPullRequestEditedPullRequestMergedByTypeOrganization,
		WebhookPullRequestEditedPullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestEditedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestEditedPullRequestMilestoneCreatorTypeBot WebhookPullRequestEditedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestEditedPullRequestMilestoneCreatorTypeMannequin WebhookPullRequestEditedPullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestEditedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestEditedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestEditedPullRequestMilestoneCreatorTypeUser WebhookPullRequestEditedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestEditedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestEditedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestEditedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestEditedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestEditedPullRequestMilestoneCreatorType{
		WebhookPullRequestEditedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestEditedPullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestEditedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestEditedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestEditedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestEditedPullRequestMilestoneState string

const (
	WebhookPullRequestEditedPullRequestMilestoneStateClosed WebhookPullRequestEditedPullRequestMilestoneState = "closed"
	WebhookPullRequestEditedPullRequestMilestoneStateOpen WebhookPullRequestEditedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestEditedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestEditedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestEditedPullRequestMilestoneStateValues() []WebhookPullRequestEditedPullRequestMilestoneState {
	return []WebhookPullRequestEditedPullRequestMilestoneState{
		WebhookPullRequestEditedPullRequestMilestoneStateClosed,
		WebhookPullRequestEditedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestEditedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

// WebhookPullRequestEditedPullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestEditedPullRequestState string

const (
	WebhookPullRequestEditedPullRequestStateClosed WebhookPullRequestEditedPullRequestState = "closed"
	WebhookPullRequestEditedPullRequestStateOpen WebhookPullRequestEditedPullRequestState = "open"
)

// PossibleWebhookPullRequestEditedPullRequestStateValues returns the possible values for the WebhookPullRequestEditedPullRequestState const type.
func PossibleWebhookPullRequestEditedPullRequestStateValues() []WebhookPullRequestEditedPullRequestState {
	return []WebhookPullRequestEditedPullRequestState{
		WebhookPullRequestEditedPullRequestStateClosed,
		WebhookPullRequestEditedPullRequestStateOpen,
	}
}

type WebhookPullRequestEditedPullRequestUserType string

const (
	WebhookPullRequestEditedPullRequestUserTypeBot WebhookPullRequestEditedPullRequestUserType = "Bot"
	WebhookPullRequestEditedPullRequestUserTypeMannequin WebhookPullRequestEditedPullRequestUserType = "Mannequin"
	WebhookPullRequestEditedPullRequestUserTypeOrganization WebhookPullRequestEditedPullRequestUserType = "Organization"
	WebhookPullRequestEditedPullRequestUserTypeUser WebhookPullRequestEditedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestEditedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestEditedPullRequestUserType const type.
func PossibleWebhookPullRequestEditedPullRequestUserTypeValues() []WebhookPullRequestEditedPullRequestUserType {
	return []WebhookPullRequestEditedPullRequestUserType{
		WebhookPullRequestEditedPullRequestUserTypeBot,
		WebhookPullRequestEditedPullRequestUserTypeMannequin,
		WebhookPullRequestEditedPullRequestUserTypeOrganization,
		WebhookPullRequestEditedPullRequestUserTypeUser,
	}
}

type WebhookPullRequestEnqueuedAction string

const (
	WebhookPullRequestEnqueuedActionEnqueued WebhookPullRequestEnqueuedAction = "enqueued"
)

// PossibleWebhookPullRequestEnqueuedActionValues returns the possible values for the WebhookPullRequestEnqueuedAction const type.
func PossibleWebhookPullRequestEnqueuedActionValues() []WebhookPullRequestEnqueuedAction {
	return []WebhookPullRequestEnqueuedAction{
		WebhookPullRequestEnqueuedActionEnqueued,
	}
}

type WebhookPullRequestEnqueuedPullRequestActiveLockReason string

const (
	WebhookPullRequestEnqueuedPullRequestActiveLockReasonNull WebhookPullRequestEnqueuedPullRequestActiveLockReason = "null"
	WebhookPullRequestEnqueuedPullRequestActiveLockReasonOffTopic WebhookPullRequestEnqueuedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestEnqueuedPullRequestActiveLockReasonResolved WebhookPullRequestEnqueuedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestEnqueuedPullRequestActiveLockReasonSpam WebhookPullRequestEnqueuedPullRequestActiveLockReason = "spam"
	WebhookPullRequestEnqueuedPullRequestActiveLockReasonTooHeated WebhookPullRequestEnqueuedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestEnqueuedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestEnqueuedPullRequestActiveLockReasonValues() []WebhookPullRequestEnqueuedPullRequestActiveLockReason {
	return []WebhookPullRequestEnqueuedPullRequestActiveLockReason{
		WebhookPullRequestEnqueuedPullRequestActiveLockReasonNull,
		WebhookPullRequestEnqueuedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestEnqueuedPullRequestActiveLockReasonResolved,
		WebhookPullRequestEnqueuedPullRequestActiveLockReasonSpam,
		WebhookPullRequestEnqueuedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestEnqueuedPullRequestAssigneeType string

const (
	WebhookPullRequestEnqueuedPullRequestAssigneeTypeBot WebhookPullRequestEnqueuedPullRequestAssigneeType = "Bot"
	WebhookPullRequestEnqueuedPullRequestAssigneeTypeOrganization WebhookPullRequestEnqueuedPullRequestAssigneeType = "Organization"
	WebhookPullRequestEnqueuedPullRequestAssigneeTypeUser WebhookPullRequestEnqueuedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestEnqueuedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestEnqueuedPullRequestAssigneeTypeValues() []WebhookPullRequestEnqueuedPullRequestAssigneeType {
	return []WebhookPullRequestEnqueuedPullRequestAssigneeType{
		WebhookPullRequestEnqueuedPullRequestAssigneeTypeBot,
		WebhookPullRequestEnqueuedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestEnqueuedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestEnqueuedPullRequestAssigneesItemType string

const (
	WebhookPullRequestEnqueuedPullRequestAssigneesItemTypeBot WebhookPullRequestEnqueuedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestEnqueuedPullRequestAssigneesItemTypeOrganization WebhookPullRequestEnqueuedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestEnqueuedPullRequestAssigneesItemTypeUser WebhookPullRequestEnqueuedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestEnqueuedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestEnqueuedPullRequestAssigneesItemTypeValues() []WebhookPullRequestEnqueuedPullRequestAssigneesItemType {
	return []WebhookPullRequestEnqueuedPullRequestAssigneesItemType{
		WebhookPullRequestEnqueuedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestEnqueuedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestEnqueuedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestEnqueuedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestEnqueuedPullRequestAuthorAssociation string

const (
	WebhookPullRequestEnqueuedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestEnqueuedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestEnqueuedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestEnqueuedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestEnqueuedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestEnqueuedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestEnqueuedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestEnqueuedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestEnqueuedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestEnqueuedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestEnqueuedPullRequestAuthorAssociationMEMBER WebhookPullRequestEnqueuedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestEnqueuedPullRequestAuthorAssociationNONE WebhookPullRequestEnqueuedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestEnqueuedPullRequestAuthorAssociationOWNER WebhookPullRequestEnqueuedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestEnqueuedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestEnqueuedPullRequestAuthorAssociationValues() []WebhookPullRequestEnqueuedPullRequestAuthorAssociation {
	return []WebhookPullRequestEnqueuedPullRequestAuthorAssociation{
		WebhookPullRequestEnqueuedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestEnqueuedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestEnqueuedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestEnqueuedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestEnqueuedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestEnqueuedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestEnqueuedPullRequestAuthorAssociationNONE,
		WebhookPullRequestEnqueuedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestEnqueuedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestEnqueuedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestEnqueuedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestEnqueuedPullRequestAutoMergeMethodMerge WebhookPullRequestEnqueuedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestEnqueuedPullRequestAutoMergeMethodRebase WebhookPullRequestEnqueuedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestEnqueuedPullRequestAutoMergeMethodSquash WebhookPullRequestEnqueuedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestEnqueuedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestEnqueuedPullRequestAutoMergeMethodValues() []WebhookPullRequestEnqueuedPullRequestAutoMergeMethod {
	return []WebhookPullRequestEnqueuedPullRequestAutoMergeMethod{
		WebhookPullRequestEnqueuedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestEnqueuedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestEnqueuedPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestEnqueuedPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestEnqueuedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestEnqueuedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestEnqueuedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestEnqueuedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestEnqueuedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestEnqueuedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestEnqueuedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestEnqueuedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestEnqueuedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestEnqueuedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestEnqueuedPullRequestBaseRepoOwnerType{
		WebhookPullRequestEnqueuedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestEnqueuedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestEnqueuedPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestEnqueuedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestEnqueuedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestEnqueuedPullRequestBaseRepoVisibilityInternal WebhookPullRequestEnqueuedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestEnqueuedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestEnqueuedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestEnqueuedPullRequestBaseRepoVisibilityPublic WebhookPullRequestEnqueuedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestEnqueuedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestEnqueuedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestEnqueuedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestEnqueuedPullRequestBaseRepoVisibility{
		WebhookPullRequestEnqueuedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestEnqueuedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestEnqueuedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestEnqueuedPullRequestBaseUserType string

const (
	WebhookPullRequestEnqueuedPullRequestBaseUserTypeBot WebhookPullRequestEnqueuedPullRequestBaseUserType = "Bot"
	WebhookPullRequestEnqueuedPullRequestBaseUserTypeOrganization WebhookPullRequestEnqueuedPullRequestBaseUserType = "Organization"
	WebhookPullRequestEnqueuedPullRequestBaseUserTypeUser WebhookPullRequestEnqueuedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestEnqueuedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestEnqueuedPullRequestBaseUserTypeValues() []WebhookPullRequestEnqueuedPullRequestBaseUserType {
	return []WebhookPullRequestEnqueuedPullRequestBaseUserType{
		WebhookPullRequestEnqueuedPullRequestBaseUserTypeBot,
		WebhookPullRequestEnqueuedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestEnqueuedPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestEnqueuedPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestEnqueuedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestEnqueuedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestEnqueuedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestEnqueuedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestEnqueuedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestEnqueuedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestEnqueuedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestEnqueuedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestEnqueuedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestEnqueuedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestEnqueuedPullRequestHeadRepoOwnerType{
		WebhookPullRequestEnqueuedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestEnqueuedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestEnqueuedPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestEnqueuedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestEnqueuedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestEnqueuedPullRequestHeadRepoVisibilityInternal WebhookPullRequestEnqueuedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestEnqueuedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestEnqueuedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestEnqueuedPullRequestHeadRepoVisibilityPublic WebhookPullRequestEnqueuedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestEnqueuedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestEnqueuedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestEnqueuedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestEnqueuedPullRequestHeadRepoVisibility{
		WebhookPullRequestEnqueuedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestEnqueuedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestEnqueuedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestEnqueuedPullRequestHeadUserType string

const (
	WebhookPullRequestEnqueuedPullRequestHeadUserTypeBot WebhookPullRequestEnqueuedPullRequestHeadUserType = "Bot"
	WebhookPullRequestEnqueuedPullRequestHeadUserTypeOrganization WebhookPullRequestEnqueuedPullRequestHeadUserType = "Organization"
	WebhookPullRequestEnqueuedPullRequestHeadUserTypeUser WebhookPullRequestEnqueuedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestEnqueuedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestEnqueuedPullRequestHeadUserTypeValues() []WebhookPullRequestEnqueuedPullRequestHeadUserType {
	return []WebhookPullRequestEnqueuedPullRequestHeadUserType{
		WebhookPullRequestEnqueuedPullRequestHeadUserTypeBot,
		WebhookPullRequestEnqueuedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestEnqueuedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestEnqueuedPullRequestMergedByType string

const (
	WebhookPullRequestEnqueuedPullRequestMergedByTypeBot WebhookPullRequestEnqueuedPullRequestMergedByType = "Bot"
	WebhookPullRequestEnqueuedPullRequestMergedByTypeOrganization WebhookPullRequestEnqueuedPullRequestMergedByType = "Organization"
	WebhookPullRequestEnqueuedPullRequestMergedByTypeUser WebhookPullRequestEnqueuedPullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestEnqueuedPullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestMergedByType const type.
func PossibleWebhookPullRequestEnqueuedPullRequestMergedByTypeValues() []WebhookPullRequestEnqueuedPullRequestMergedByType {
	return []WebhookPullRequestEnqueuedPullRequestMergedByType{
		WebhookPullRequestEnqueuedPullRequestMergedByTypeBot,
		WebhookPullRequestEnqueuedPullRequestMergedByTypeOrganization,
		WebhookPullRequestEnqueuedPullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestEnqueuedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestEnqueuedPullRequestMilestoneCreatorTypeBot WebhookPullRequestEnqueuedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestEnqueuedPullRequestMilestoneCreatorTypeMannequin WebhookPullRequestEnqueuedPullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestEnqueuedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestEnqueuedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestEnqueuedPullRequestMilestoneCreatorTypeUser WebhookPullRequestEnqueuedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestEnqueuedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestEnqueuedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestEnqueuedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestEnqueuedPullRequestMilestoneCreatorType{
		WebhookPullRequestEnqueuedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestEnqueuedPullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestEnqueuedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestEnqueuedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestEnqueuedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestEnqueuedPullRequestMilestoneState string

const (
	WebhookPullRequestEnqueuedPullRequestMilestoneStateClosed WebhookPullRequestEnqueuedPullRequestMilestoneState = "closed"
	WebhookPullRequestEnqueuedPullRequestMilestoneStateOpen WebhookPullRequestEnqueuedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestEnqueuedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestEnqueuedPullRequestMilestoneStateValues() []WebhookPullRequestEnqueuedPullRequestMilestoneState {
	return []WebhookPullRequestEnqueuedPullRequestMilestoneState{
		WebhookPullRequestEnqueuedPullRequestMilestoneStateClosed,
		WebhookPullRequestEnqueuedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestEnqueuedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

// WebhookPullRequestEnqueuedPullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestEnqueuedPullRequestState string

const (
	WebhookPullRequestEnqueuedPullRequestStateClosed WebhookPullRequestEnqueuedPullRequestState = "closed"
	WebhookPullRequestEnqueuedPullRequestStateOpen WebhookPullRequestEnqueuedPullRequestState = "open"
)

// PossibleWebhookPullRequestEnqueuedPullRequestStateValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestState const type.
func PossibleWebhookPullRequestEnqueuedPullRequestStateValues() []WebhookPullRequestEnqueuedPullRequestState {
	return []WebhookPullRequestEnqueuedPullRequestState{
		WebhookPullRequestEnqueuedPullRequestStateClosed,
		WebhookPullRequestEnqueuedPullRequestStateOpen,
	}
}

type WebhookPullRequestEnqueuedPullRequestUserType string

const (
	WebhookPullRequestEnqueuedPullRequestUserTypeBot WebhookPullRequestEnqueuedPullRequestUserType = "Bot"
	WebhookPullRequestEnqueuedPullRequestUserTypeMannequin WebhookPullRequestEnqueuedPullRequestUserType = "Mannequin"
	WebhookPullRequestEnqueuedPullRequestUserTypeOrganization WebhookPullRequestEnqueuedPullRequestUserType = "Organization"
	WebhookPullRequestEnqueuedPullRequestUserTypeUser WebhookPullRequestEnqueuedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestEnqueuedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestEnqueuedPullRequestUserType const type.
func PossibleWebhookPullRequestEnqueuedPullRequestUserTypeValues() []WebhookPullRequestEnqueuedPullRequestUserType {
	return []WebhookPullRequestEnqueuedPullRequestUserType{
		WebhookPullRequestEnqueuedPullRequestUserTypeBot,
		WebhookPullRequestEnqueuedPullRequestUserTypeMannequin,
		WebhookPullRequestEnqueuedPullRequestUserTypeOrganization,
		WebhookPullRequestEnqueuedPullRequestUserTypeUser,
	}
}

type WebhookPullRequestLabeledAction string

const (
	WebhookPullRequestLabeledActionLabeled WebhookPullRequestLabeledAction = "labeled"
)

// PossibleWebhookPullRequestLabeledActionValues returns the possible values for the WebhookPullRequestLabeledAction const type.
func PossibleWebhookPullRequestLabeledActionValues() []WebhookPullRequestLabeledAction {
	return []WebhookPullRequestLabeledAction{
		WebhookPullRequestLabeledActionLabeled,
	}
}

type WebhookPullRequestLabeledPullRequestActiveLockReason string

const (
	WebhookPullRequestLabeledPullRequestActiveLockReasonNull WebhookPullRequestLabeledPullRequestActiveLockReason = "null"
	WebhookPullRequestLabeledPullRequestActiveLockReasonOffTopic WebhookPullRequestLabeledPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestLabeledPullRequestActiveLockReasonResolved WebhookPullRequestLabeledPullRequestActiveLockReason = "resolved"
	WebhookPullRequestLabeledPullRequestActiveLockReasonSpam WebhookPullRequestLabeledPullRequestActiveLockReason = "spam"
	WebhookPullRequestLabeledPullRequestActiveLockReasonTooHeated WebhookPullRequestLabeledPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestLabeledPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestLabeledPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestLabeledPullRequestActiveLockReasonValues() []WebhookPullRequestLabeledPullRequestActiveLockReason {
	return []WebhookPullRequestLabeledPullRequestActiveLockReason{
		WebhookPullRequestLabeledPullRequestActiveLockReasonNull,
		WebhookPullRequestLabeledPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestLabeledPullRequestActiveLockReasonResolved,
		WebhookPullRequestLabeledPullRequestActiveLockReasonSpam,
		WebhookPullRequestLabeledPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestLabeledPullRequestAssigneeType string

const (
	WebhookPullRequestLabeledPullRequestAssigneeTypeBot WebhookPullRequestLabeledPullRequestAssigneeType = "Bot"
	WebhookPullRequestLabeledPullRequestAssigneeTypeMannequin WebhookPullRequestLabeledPullRequestAssigneeType = "Mannequin"
	WebhookPullRequestLabeledPullRequestAssigneeTypeOrganization WebhookPullRequestLabeledPullRequestAssigneeType = "Organization"
	WebhookPullRequestLabeledPullRequestAssigneeTypeUser WebhookPullRequestLabeledPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestLabeledPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestLabeledPullRequestAssigneeType const type.
func PossibleWebhookPullRequestLabeledPullRequestAssigneeTypeValues() []WebhookPullRequestLabeledPullRequestAssigneeType {
	return []WebhookPullRequestLabeledPullRequestAssigneeType{
		WebhookPullRequestLabeledPullRequestAssigneeTypeBot,
		WebhookPullRequestLabeledPullRequestAssigneeTypeMannequin,
		WebhookPullRequestLabeledPullRequestAssigneeTypeOrganization,
		WebhookPullRequestLabeledPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestLabeledPullRequestAssigneesItemType string

const (
	WebhookPullRequestLabeledPullRequestAssigneesItemTypeBot WebhookPullRequestLabeledPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestLabeledPullRequestAssigneesItemTypeMannequin WebhookPullRequestLabeledPullRequestAssigneesItemType = "Mannequin"
	WebhookPullRequestLabeledPullRequestAssigneesItemTypeOrganization WebhookPullRequestLabeledPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestLabeledPullRequestAssigneesItemTypeUser WebhookPullRequestLabeledPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestLabeledPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestLabeledPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestLabeledPullRequestAssigneesItemTypeValues() []WebhookPullRequestLabeledPullRequestAssigneesItemType {
	return []WebhookPullRequestLabeledPullRequestAssigneesItemType{
		WebhookPullRequestLabeledPullRequestAssigneesItemTypeBot,
		WebhookPullRequestLabeledPullRequestAssigneesItemTypeMannequin,
		WebhookPullRequestLabeledPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestLabeledPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestLabeledPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestLabeledPullRequestAuthorAssociation string

const (
	WebhookPullRequestLabeledPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestLabeledPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestLabeledPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestLabeledPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestLabeledPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestLabeledPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestLabeledPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestLabeledPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestLabeledPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestLabeledPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestLabeledPullRequestAuthorAssociationMEMBER WebhookPullRequestLabeledPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestLabeledPullRequestAuthorAssociationNONE WebhookPullRequestLabeledPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestLabeledPullRequestAuthorAssociationOWNER WebhookPullRequestLabeledPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestLabeledPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestLabeledPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestLabeledPullRequestAuthorAssociationValues() []WebhookPullRequestLabeledPullRequestAuthorAssociation {
	return []WebhookPullRequestLabeledPullRequestAuthorAssociation{
		WebhookPullRequestLabeledPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestLabeledPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestLabeledPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestLabeledPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestLabeledPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestLabeledPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestLabeledPullRequestAuthorAssociationNONE,
		WebhookPullRequestLabeledPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestLabeledPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestLabeledPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestLabeledPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestLabeledPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestLabeledPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestLabeledPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestLabeledPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestLabeledPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestLabeledPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestLabeledPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestLabeledPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestLabeledPullRequestAutoMergeEnabledByType{
		WebhookPullRequestLabeledPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestLabeledPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestLabeledPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestLabeledPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestLabeledPullRequestAutoMergeMethod string

const (
	WebhookPullRequestLabeledPullRequestAutoMergeMethodMerge WebhookPullRequestLabeledPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestLabeledPullRequestAutoMergeMethodRebase WebhookPullRequestLabeledPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestLabeledPullRequestAutoMergeMethodSquash WebhookPullRequestLabeledPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestLabeledPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestLabeledPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestLabeledPullRequestAutoMergeMethodValues() []WebhookPullRequestLabeledPullRequestAutoMergeMethod {
	return []WebhookPullRequestLabeledPullRequestAutoMergeMethod{
		WebhookPullRequestLabeledPullRequestAutoMergeMethodMerge,
		WebhookPullRequestLabeledPullRequestAutoMergeMethodRebase,
		WebhookPullRequestLabeledPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestLabeledPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestLabeledPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestLabeledPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestLabeledPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestLabeledPullRequestBaseRepoOwnerTypeBot WebhookPullRequestLabeledPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestLabeledPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestLabeledPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestLabeledPullRequestBaseRepoOwnerTypeUser WebhookPullRequestLabeledPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestLabeledPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestLabeledPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestLabeledPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestLabeledPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestLabeledPullRequestBaseRepoOwnerType{
		WebhookPullRequestLabeledPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestLabeledPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestLabeledPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestLabeledPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestLabeledPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestLabeledPullRequestBaseRepoVisibilityInternal WebhookPullRequestLabeledPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestLabeledPullRequestBaseRepoVisibilityPrivate WebhookPullRequestLabeledPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestLabeledPullRequestBaseRepoVisibilityPublic WebhookPullRequestLabeledPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestLabeledPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestLabeledPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestLabeledPullRequestBaseRepoVisibilityValues() []WebhookPullRequestLabeledPullRequestBaseRepoVisibility {
	return []WebhookPullRequestLabeledPullRequestBaseRepoVisibility{
		WebhookPullRequestLabeledPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestLabeledPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestLabeledPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestLabeledPullRequestBaseUserType string

const (
	WebhookPullRequestLabeledPullRequestBaseUserTypeBot WebhookPullRequestLabeledPullRequestBaseUserType = "Bot"
	WebhookPullRequestLabeledPullRequestBaseUserTypeOrganization WebhookPullRequestLabeledPullRequestBaseUserType = "Organization"
	WebhookPullRequestLabeledPullRequestBaseUserTypeUser WebhookPullRequestLabeledPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestLabeledPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestLabeledPullRequestBaseUserType const type.
func PossibleWebhookPullRequestLabeledPullRequestBaseUserTypeValues() []WebhookPullRequestLabeledPullRequestBaseUserType {
	return []WebhookPullRequestLabeledPullRequestBaseUserType{
		WebhookPullRequestLabeledPullRequestBaseUserTypeBot,
		WebhookPullRequestLabeledPullRequestBaseUserTypeOrganization,
		WebhookPullRequestLabeledPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestLabeledPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestLabeledPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestLabeledPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestLabeledPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestLabeledPullRequestHeadRepoOwnerTypeBot WebhookPullRequestLabeledPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestLabeledPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestLabeledPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestLabeledPullRequestHeadRepoOwnerTypeUser WebhookPullRequestLabeledPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestLabeledPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestLabeledPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestLabeledPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestLabeledPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestLabeledPullRequestHeadRepoOwnerType{
		WebhookPullRequestLabeledPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestLabeledPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestLabeledPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestLabeledPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestLabeledPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestLabeledPullRequestHeadRepoVisibilityInternal WebhookPullRequestLabeledPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestLabeledPullRequestHeadRepoVisibilityPrivate WebhookPullRequestLabeledPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestLabeledPullRequestHeadRepoVisibilityPublic WebhookPullRequestLabeledPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestLabeledPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestLabeledPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestLabeledPullRequestHeadRepoVisibilityValues() []WebhookPullRequestLabeledPullRequestHeadRepoVisibility {
	return []WebhookPullRequestLabeledPullRequestHeadRepoVisibility{
		WebhookPullRequestLabeledPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestLabeledPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestLabeledPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestLabeledPullRequestHeadUserType string

const (
	WebhookPullRequestLabeledPullRequestHeadUserTypeBot WebhookPullRequestLabeledPullRequestHeadUserType = "Bot"
	WebhookPullRequestLabeledPullRequestHeadUserTypeOrganization WebhookPullRequestLabeledPullRequestHeadUserType = "Organization"
	WebhookPullRequestLabeledPullRequestHeadUserTypeUser WebhookPullRequestLabeledPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestLabeledPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestLabeledPullRequestHeadUserType const type.
func PossibleWebhookPullRequestLabeledPullRequestHeadUserTypeValues() []WebhookPullRequestLabeledPullRequestHeadUserType {
	return []WebhookPullRequestLabeledPullRequestHeadUserType{
		WebhookPullRequestLabeledPullRequestHeadUserTypeBot,
		WebhookPullRequestLabeledPullRequestHeadUserTypeOrganization,
		WebhookPullRequestLabeledPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestLabeledPullRequestMergedByType string

const (
	WebhookPullRequestLabeledPullRequestMergedByTypeBot WebhookPullRequestLabeledPullRequestMergedByType = "Bot"
	WebhookPullRequestLabeledPullRequestMergedByTypeMannequin WebhookPullRequestLabeledPullRequestMergedByType = "Mannequin"
	WebhookPullRequestLabeledPullRequestMergedByTypeOrganization WebhookPullRequestLabeledPullRequestMergedByType = "Organization"
	WebhookPullRequestLabeledPullRequestMergedByTypeUser WebhookPullRequestLabeledPullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestLabeledPullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestLabeledPullRequestMergedByType const type.
func PossibleWebhookPullRequestLabeledPullRequestMergedByTypeValues() []WebhookPullRequestLabeledPullRequestMergedByType {
	return []WebhookPullRequestLabeledPullRequestMergedByType{
		WebhookPullRequestLabeledPullRequestMergedByTypeBot,
		WebhookPullRequestLabeledPullRequestMergedByTypeMannequin,
		WebhookPullRequestLabeledPullRequestMergedByTypeOrganization,
		WebhookPullRequestLabeledPullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestLabeledPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestLabeledPullRequestMilestoneCreatorTypeBot WebhookPullRequestLabeledPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestLabeledPullRequestMilestoneCreatorTypeMannequin WebhookPullRequestLabeledPullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestLabeledPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestLabeledPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestLabeledPullRequestMilestoneCreatorTypeUser WebhookPullRequestLabeledPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestLabeledPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestLabeledPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestLabeledPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestLabeledPullRequestMilestoneCreatorType {
	return []WebhookPullRequestLabeledPullRequestMilestoneCreatorType{
		WebhookPullRequestLabeledPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestLabeledPullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestLabeledPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestLabeledPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestLabeledPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestLabeledPullRequestMilestoneState string

const (
	WebhookPullRequestLabeledPullRequestMilestoneStateClosed WebhookPullRequestLabeledPullRequestMilestoneState = "closed"
	WebhookPullRequestLabeledPullRequestMilestoneStateOpen WebhookPullRequestLabeledPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestLabeledPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestLabeledPullRequestMilestoneState const type.
func PossibleWebhookPullRequestLabeledPullRequestMilestoneStateValues() []WebhookPullRequestLabeledPullRequestMilestoneState {
	return []WebhookPullRequestLabeledPullRequestMilestoneState{
		WebhookPullRequestLabeledPullRequestMilestoneStateClosed,
		WebhookPullRequestLabeledPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestLabeledPullRequestRequestedTeamsItemPrivacySecret,
	}
}

// WebhookPullRequestLabeledPullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestLabeledPullRequestState string

const (
	WebhookPullRequestLabeledPullRequestStateClosed WebhookPullRequestLabeledPullRequestState = "closed"
	WebhookPullRequestLabeledPullRequestStateOpen WebhookPullRequestLabeledPullRequestState = "open"
)

// PossibleWebhookPullRequestLabeledPullRequestStateValues returns the possible values for the WebhookPullRequestLabeledPullRequestState const type.
func PossibleWebhookPullRequestLabeledPullRequestStateValues() []WebhookPullRequestLabeledPullRequestState {
	return []WebhookPullRequestLabeledPullRequestState{
		WebhookPullRequestLabeledPullRequestStateClosed,
		WebhookPullRequestLabeledPullRequestStateOpen,
	}
}

type WebhookPullRequestLabeledPullRequestUserType string

const (
	WebhookPullRequestLabeledPullRequestUserTypeBot WebhookPullRequestLabeledPullRequestUserType = "Bot"
	WebhookPullRequestLabeledPullRequestUserTypeMannequin WebhookPullRequestLabeledPullRequestUserType = "Mannequin"
	WebhookPullRequestLabeledPullRequestUserTypeOrganization WebhookPullRequestLabeledPullRequestUserType = "Organization"
	WebhookPullRequestLabeledPullRequestUserTypeUser WebhookPullRequestLabeledPullRequestUserType = "User"
)

// PossibleWebhookPullRequestLabeledPullRequestUserTypeValues returns the possible values for the WebhookPullRequestLabeledPullRequestUserType const type.
func PossibleWebhookPullRequestLabeledPullRequestUserTypeValues() []WebhookPullRequestLabeledPullRequestUserType {
	return []WebhookPullRequestLabeledPullRequestUserType{
		WebhookPullRequestLabeledPullRequestUserTypeBot,
		WebhookPullRequestLabeledPullRequestUserTypeMannequin,
		WebhookPullRequestLabeledPullRequestUserTypeOrganization,
		WebhookPullRequestLabeledPullRequestUserTypeUser,
	}
}

type WebhookPullRequestLockedAction string

const (
	WebhookPullRequestLockedActionLocked WebhookPullRequestLockedAction = "locked"
)

// PossibleWebhookPullRequestLockedActionValues returns the possible values for the WebhookPullRequestLockedAction const type.
func PossibleWebhookPullRequestLockedActionValues() []WebhookPullRequestLockedAction {
	return []WebhookPullRequestLockedAction{
		WebhookPullRequestLockedActionLocked,
	}
}

type WebhookPullRequestLockedPullRequestActiveLockReason string

const (
	WebhookPullRequestLockedPullRequestActiveLockReasonNull WebhookPullRequestLockedPullRequestActiveLockReason = "null"
	WebhookPullRequestLockedPullRequestActiveLockReasonOffTopic WebhookPullRequestLockedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestLockedPullRequestActiveLockReasonResolved WebhookPullRequestLockedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestLockedPullRequestActiveLockReasonSpam WebhookPullRequestLockedPullRequestActiveLockReason = "spam"
	WebhookPullRequestLockedPullRequestActiveLockReasonTooHeated WebhookPullRequestLockedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestLockedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestLockedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestLockedPullRequestActiveLockReasonValues() []WebhookPullRequestLockedPullRequestActiveLockReason {
	return []WebhookPullRequestLockedPullRequestActiveLockReason{
		WebhookPullRequestLockedPullRequestActiveLockReasonNull,
		WebhookPullRequestLockedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestLockedPullRequestActiveLockReasonResolved,
		WebhookPullRequestLockedPullRequestActiveLockReasonSpam,
		WebhookPullRequestLockedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestLockedPullRequestAssigneeType string

const (
	WebhookPullRequestLockedPullRequestAssigneeTypeBot WebhookPullRequestLockedPullRequestAssigneeType = "Bot"
	WebhookPullRequestLockedPullRequestAssigneeTypeOrganization WebhookPullRequestLockedPullRequestAssigneeType = "Organization"
	WebhookPullRequestLockedPullRequestAssigneeTypeUser WebhookPullRequestLockedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestLockedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestLockedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestLockedPullRequestAssigneeTypeValues() []WebhookPullRequestLockedPullRequestAssigneeType {
	return []WebhookPullRequestLockedPullRequestAssigneeType{
		WebhookPullRequestLockedPullRequestAssigneeTypeBot,
		WebhookPullRequestLockedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestLockedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestLockedPullRequestAssigneesItemType string

const (
	WebhookPullRequestLockedPullRequestAssigneesItemTypeBot WebhookPullRequestLockedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestLockedPullRequestAssigneesItemTypeMannequin WebhookPullRequestLockedPullRequestAssigneesItemType = "Mannequin"
	WebhookPullRequestLockedPullRequestAssigneesItemTypeOrganization WebhookPullRequestLockedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestLockedPullRequestAssigneesItemTypeUser WebhookPullRequestLockedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestLockedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestLockedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestLockedPullRequestAssigneesItemTypeValues() []WebhookPullRequestLockedPullRequestAssigneesItemType {
	return []WebhookPullRequestLockedPullRequestAssigneesItemType{
		WebhookPullRequestLockedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestLockedPullRequestAssigneesItemTypeMannequin,
		WebhookPullRequestLockedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestLockedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestLockedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestLockedPullRequestAuthorAssociation string

const (
	WebhookPullRequestLockedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestLockedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestLockedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestLockedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestLockedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestLockedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestLockedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestLockedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestLockedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestLockedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestLockedPullRequestAuthorAssociationMEMBER WebhookPullRequestLockedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestLockedPullRequestAuthorAssociationNONE WebhookPullRequestLockedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestLockedPullRequestAuthorAssociationOWNER WebhookPullRequestLockedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestLockedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestLockedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestLockedPullRequestAuthorAssociationValues() []WebhookPullRequestLockedPullRequestAuthorAssociation {
	return []WebhookPullRequestLockedPullRequestAuthorAssociation{
		WebhookPullRequestLockedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestLockedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestLockedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestLockedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestLockedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestLockedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestLockedPullRequestAuthorAssociationNONE,
		WebhookPullRequestLockedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestLockedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestLockedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestLockedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestLockedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestLockedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestLockedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestLockedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestLockedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestLockedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestLockedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestLockedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestLockedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestLockedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestLockedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestLockedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestLockedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestLockedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestLockedPullRequestAutoMergeMethodMerge WebhookPullRequestLockedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestLockedPullRequestAutoMergeMethodRebase WebhookPullRequestLockedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestLockedPullRequestAutoMergeMethodSquash WebhookPullRequestLockedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestLockedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestLockedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestLockedPullRequestAutoMergeMethodValues() []WebhookPullRequestLockedPullRequestAutoMergeMethod {
	return []WebhookPullRequestLockedPullRequestAutoMergeMethod{
		WebhookPullRequestLockedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestLockedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestLockedPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestLockedPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestLockedPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestLockedPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestLockedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestLockedPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestLockedPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestLockedPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestLockedPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestLockedPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestLockedPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestLockedPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestLockedPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestLockedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestLockedPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestLockedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestLockedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestLockedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestLockedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestLockedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestLockedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestLockedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestLockedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestLockedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestLockedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestLockedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestLockedPullRequestBaseRepoOwnerType{
		WebhookPullRequestLockedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestLockedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestLockedPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestLockedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestLockedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestLockedPullRequestBaseRepoVisibilityInternal WebhookPullRequestLockedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestLockedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestLockedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestLockedPullRequestBaseRepoVisibilityPublic WebhookPullRequestLockedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestLockedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestLockedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestLockedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestLockedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestLockedPullRequestBaseRepoVisibility{
		WebhookPullRequestLockedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestLockedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestLockedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestLockedPullRequestBaseUserType string

const (
	WebhookPullRequestLockedPullRequestBaseUserTypeBot WebhookPullRequestLockedPullRequestBaseUserType = "Bot"
	WebhookPullRequestLockedPullRequestBaseUserTypeOrganization WebhookPullRequestLockedPullRequestBaseUserType = "Organization"
	WebhookPullRequestLockedPullRequestBaseUserTypeUser WebhookPullRequestLockedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestLockedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestLockedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestLockedPullRequestBaseUserTypeValues() []WebhookPullRequestLockedPullRequestBaseUserType {
	return []WebhookPullRequestLockedPullRequestBaseUserType{
		WebhookPullRequestLockedPullRequestBaseUserTypeBot,
		WebhookPullRequestLockedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestLockedPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestLockedPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestLockedPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestLockedPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestLockedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestLockedPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestLockedPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestLockedPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestLockedPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestLockedPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestLockedPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestLockedPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestLockedPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestLockedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestLockedPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestLockedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestLockedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestLockedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestLockedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestLockedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestLockedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestLockedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestLockedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestLockedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestLockedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestLockedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestLockedPullRequestHeadRepoOwnerType{
		WebhookPullRequestLockedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestLockedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestLockedPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestLockedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestLockedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestLockedPullRequestHeadRepoVisibilityInternal WebhookPullRequestLockedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestLockedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestLockedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestLockedPullRequestHeadRepoVisibilityPublic WebhookPullRequestLockedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestLockedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestLockedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestLockedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestLockedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestLockedPullRequestHeadRepoVisibility{
		WebhookPullRequestLockedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestLockedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestLockedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestLockedPullRequestHeadUserType string

const (
	WebhookPullRequestLockedPullRequestHeadUserTypeBot WebhookPullRequestLockedPullRequestHeadUserType = "Bot"
	WebhookPullRequestLockedPullRequestHeadUserTypeOrganization WebhookPullRequestLockedPullRequestHeadUserType = "Organization"
	WebhookPullRequestLockedPullRequestHeadUserTypeUser WebhookPullRequestLockedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestLockedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestLockedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestLockedPullRequestHeadUserTypeValues() []WebhookPullRequestLockedPullRequestHeadUserType {
	return []WebhookPullRequestLockedPullRequestHeadUserType{
		WebhookPullRequestLockedPullRequestHeadUserTypeBot,
		WebhookPullRequestLockedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestLockedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestLockedPullRequestMergedByType string

const (
	WebhookPullRequestLockedPullRequestMergedByTypeBot WebhookPullRequestLockedPullRequestMergedByType = "Bot"
	WebhookPullRequestLockedPullRequestMergedByTypeMannequin WebhookPullRequestLockedPullRequestMergedByType = "Mannequin"
	WebhookPullRequestLockedPullRequestMergedByTypeOrganization WebhookPullRequestLockedPullRequestMergedByType = "Organization"
	WebhookPullRequestLockedPullRequestMergedByTypeUser WebhookPullRequestLockedPullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestLockedPullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestLockedPullRequestMergedByType const type.
func PossibleWebhookPullRequestLockedPullRequestMergedByTypeValues() []WebhookPullRequestLockedPullRequestMergedByType {
	return []WebhookPullRequestLockedPullRequestMergedByType{
		WebhookPullRequestLockedPullRequestMergedByTypeBot,
		WebhookPullRequestLockedPullRequestMergedByTypeMannequin,
		WebhookPullRequestLockedPullRequestMergedByTypeOrganization,
		WebhookPullRequestLockedPullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestLockedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestLockedPullRequestMilestoneCreatorTypeBot WebhookPullRequestLockedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestLockedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestLockedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestLockedPullRequestMilestoneCreatorTypeUser WebhookPullRequestLockedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestLockedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestLockedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestLockedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestLockedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestLockedPullRequestMilestoneCreatorType{
		WebhookPullRequestLockedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestLockedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestLockedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestLockedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestLockedPullRequestMilestoneState string

const (
	WebhookPullRequestLockedPullRequestMilestoneStateClosed WebhookPullRequestLockedPullRequestMilestoneState = "closed"
	WebhookPullRequestLockedPullRequestMilestoneStateOpen WebhookPullRequestLockedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestLockedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestLockedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestLockedPullRequestMilestoneStateValues() []WebhookPullRequestLockedPullRequestMilestoneState {
	return []WebhookPullRequestLockedPullRequestMilestoneState{
		WebhookPullRequestLockedPullRequestMilestoneStateClosed,
		WebhookPullRequestLockedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestLockedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

// WebhookPullRequestLockedPullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestLockedPullRequestState string

const (
	WebhookPullRequestLockedPullRequestStateClosed WebhookPullRequestLockedPullRequestState = "closed"
	WebhookPullRequestLockedPullRequestStateOpen WebhookPullRequestLockedPullRequestState = "open"
)

// PossibleWebhookPullRequestLockedPullRequestStateValues returns the possible values for the WebhookPullRequestLockedPullRequestState const type.
func PossibleWebhookPullRequestLockedPullRequestStateValues() []WebhookPullRequestLockedPullRequestState {
	return []WebhookPullRequestLockedPullRequestState{
		WebhookPullRequestLockedPullRequestStateClosed,
		WebhookPullRequestLockedPullRequestStateOpen,
	}
}

type WebhookPullRequestLockedPullRequestUserType string

const (
	WebhookPullRequestLockedPullRequestUserTypeBot WebhookPullRequestLockedPullRequestUserType = "Bot"
	WebhookPullRequestLockedPullRequestUserTypeMannequin WebhookPullRequestLockedPullRequestUserType = "Mannequin"
	WebhookPullRequestLockedPullRequestUserTypeOrganization WebhookPullRequestLockedPullRequestUserType = "Organization"
	WebhookPullRequestLockedPullRequestUserTypeUser WebhookPullRequestLockedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestLockedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestLockedPullRequestUserType const type.
func PossibleWebhookPullRequestLockedPullRequestUserTypeValues() []WebhookPullRequestLockedPullRequestUserType {
	return []WebhookPullRequestLockedPullRequestUserType{
		WebhookPullRequestLockedPullRequestUserTypeBot,
		WebhookPullRequestLockedPullRequestUserTypeMannequin,
		WebhookPullRequestLockedPullRequestUserTypeOrganization,
		WebhookPullRequestLockedPullRequestUserTypeUser,
	}
}

type WebhookPullRequestMilestonedAction string

const (
	WebhookPullRequestMilestonedActionMilestoned WebhookPullRequestMilestonedAction = "milestoned"
)

// PossibleWebhookPullRequestMilestonedActionValues returns the possible values for the WebhookPullRequestMilestonedAction const type.
func PossibleWebhookPullRequestMilestonedActionValues() []WebhookPullRequestMilestonedAction {
	return []WebhookPullRequestMilestonedAction{
		WebhookPullRequestMilestonedActionMilestoned,
	}
}

type WebhookPullRequestMilestonedPullRequestActiveLockReason string

const (
	WebhookPullRequestMilestonedPullRequestActiveLockReasonNull WebhookPullRequestMilestonedPullRequestActiveLockReason = "null"
	WebhookPullRequestMilestonedPullRequestActiveLockReasonOffTopic WebhookPullRequestMilestonedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestMilestonedPullRequestActiveLockReasonResolved WebhookPullRequestMilestonedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestMilestonedPullRequestActiveLockReasonSpam WebhookPullRequestMilestonedPullRequestActiveLockReason = "spam"
	WebhookPullRequestMilestonedPullRequestActiveLockReasonTooHeated WebhookPullRequestMilestonedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestMilestonedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestMilestonedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestMilestonedPullRequestActiveLockReasonValues() []WebhookPullRequestMilestonedPullRequestActiveLockReason {
	return []WebhookPullRequestMilestonedPullRequestActiveLockReason{
		WebhookPullRequestMilestonedPullRequestActiveLockReasonNull,
		WebhookPullRequestMilestonedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestMilestonedPullRequestActiveLockReasonResolved,
		WebhookPullRequestMilestonedPullRequestActiveLockReasonSpam,
		WebhookPullRequestMilestonedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestMilestonedPullRequestAssigneeType string

const (
	WebhookPullRequestMilestonedPullRequestAssigneeTypeBot WebhookPullRequestMilestonedPullRequestAssigneeType = "Bot"
	WebhookPullRequestMilestonedPullRequestAssigneeTypeMannequin WebhookPullRequestMilestonedPullRequestAssigneeType = "Mannequin"
	WebhookPullRequestMilestonedPullRequestAssigneeTypeOrganization WebhookPullRequestMilestonedPullRequestAssigneeType = "Organization"
	WebhookPullRequestMilestonedPullRequestAssigneeTypeUser WebhookPullRequestMilestonedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestMilestonedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestMilestonedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestMilestonedPullRequestAssigneeTypeValues() []WebhookPullRequestMilestonedPullRequestAssigneeType {
	return []WebhookPullRequestMilestonedPullRequestAssigneeType{
		WebhookPullRequestMilestonedPullRequestAssigneeTypeBot,
		WebhookPullRequestMilestonedPullRequestAssigneeTypeMannequin,
		WebhookPullRequestMilestonedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestMilestonedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestMilestonedPullRequestAssigneesItemType string

const (
	WebhookPullRequestMilestonedPullRequestAssigneesItemTypeBot WebhookPullRequestMilestonedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestMilestonedPullRequestAssigneesItemTypeMannequin WebhookPullRequestMilestonedPullRequestAssigneesItemType = "Mannequin"
	WebhookPullRequestMilestonedPullRequestAssigneesItemTypeOrganization WebhookPullRequestMilestonedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestMilestonedPullRequestAssigneesItemTypeUser WebhookPullRequestMilestonedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestMilestonedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestMilestonedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestMilestonedPullRequestAssigneesItemTypeValues() []WebhookPullRequestMilestonedPullRequestAssigneesItemType {
	return []WebhookPullRequestMilestonedPullRequestAssigneesItemType{
		WebhookPullRequestMilestonedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestMilestonedPullRequestAssigneesItemTypeMannequin,
		WebhookPullRequestMilestonedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestMilestonedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestMilestonedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestMilestonedPullRequestAuthorAssociation string

const (
	WebhookPullRequestMilestonedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestMilestonedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestMilestonedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestMilestonedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestMilestonedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestMilestonedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestMilestonedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestMilestonedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestMilestonedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestMilestonedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestMilestonedPullRequestAuthorAssociationMEMBER WebhookPullRequestMilestonedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestMilestonedPullRequestAuthorAssociationNONE WebhookPullRequestMilestonedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestMilestonedPullRequestAuthorAssociationOWNER WebhookPullRequestMilestonedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestMilestonedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestMilestonedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestMilestonedPullRequestAuthorAssociationValues() []WebhookPullRequestMilestonedPullRequestAuthorAssociation {
	return []WebhookPullRequestMilestonedPullRequestAuthorAssociation{
		WebhookPullRequestMilestonedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestMilestonedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestMilestonedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestMilestonedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestMilestonedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestMilestonedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestMilestonedPullRequestAuthorAssociationNONE,
		WebhookPullRequestMilestonedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestMilestonedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestMilestonedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestMilestonedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestMilestonedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestMilestonedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestMilestonedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestMilestonedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestMilestonedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestMilestonedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestMilestonedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestMilestonedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestMilestonedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestMilestonedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestMilestonedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestMilestonedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestMilestonedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestMilestonedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestMilestonedPullRequestAutoMergeMethodMerge WebhookPullRequestMilestonedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestMilestonedPullRequestAutoMergeMethodRebase WebhookPullRequestMilestonedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestMilestonedPullRequestAutoMergeMethodSquash WebhookPullRequestMilestonedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestMilestonedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestMilestonedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestMilestonedPullRequestAutoMergeMethodValues() []WebhookPullRequestMilestonedPullRequestAutoMergeMethod {
	return []WebhookPullRequestMilestonedPullRequestAutoMergeMethod{
		WebhookPullRequestMilestonedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestMilestonedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestMilestonedPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestMilestonedPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestMilestonedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestMilestonedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestMilestonedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestMilestonedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestMilestonedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestMilestonedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestMilestonedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestMilestonedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestMilestonedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestMilestonedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestMilestonedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestMilestonedPullRequestBaseRepoOwnerType{
		WebhookPullRequestMilestonedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestMilestonedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestMilestonedPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestMilestonedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestMilestonedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestMilestonedPullRequestBaseRepoVisibilityInternal WebhookPullRequestMilestonedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestMilestonedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestMilestonedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestMilestonedPullRequestBaseRepoVisibilityPublic WebhookPullRequestMilestonedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestMilestonedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestMilestonedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestMilestonedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestMilestonedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestMilestonedPullRequestBaseRepoVisibility{
		WebhookPullRequestMilestonedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestMilestonedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestMilestonedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestMilestonedPullRequestBaseUserType string

const (
	WebhookPullRequestMilestonedPullRequestBaseUserTypeBot WebhookPullRequestMilestonedPullRequestBaseUserType = "Bot"
	WebhookPullRequestMilestonedPullRequestBaseUserTypeOrganization WebhookPullRequestMilestonedPullRequestBaseUserType = "Organization"
	WebhookPullRequestMilestonedPullRequestBaseUserTypeUser WebhookPullRequestMilestonedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestMilestonedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestMilestonedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestMilestonedPullRequestBaseUserTypeValues() []WebhookPullRequestMilestonedPullRequestBaseUserType {
	return []WebhookPullRequestMilestonedPullRequestBaseUserType{
		WebhookPullRequestMilestonedPullRequestBaseUserTypeBot,
		WebhookPullRequestMilestonedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestMilestonedPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestMilestonedPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestMilestonedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestMilestonedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestMilestonedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestMilestonedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestMilestonedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestMilestonedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestMilestonedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestMilestonedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestMilestonedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestMilestonedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestMilestonedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestMilestonedPullRequestHeadRepoOwnerType{
		WebhookPullRequestMilestonedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestMilestonedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestMilestonedPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestMilestonedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestMilestonedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestMilestonedPullRequestHeadRepoVisibilityInternal WebhookPullRequestMilestonedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestMilestonedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestMilestonedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestMilestonedPullRequestHeadRepoVisibilityPublic WebhookPullRequestMilestonedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestMilestonedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestMilestonedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestMilestonedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestMilestonedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestMilestonedPullRequestHeadRepoVisibility{
		WebhookPullRequestMilestonedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestMilestonedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestMilestonedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestMilestonedPullRequestHeadUserType string

const (
	WebhookPullRequestMilestonedPullRequestHeadUserTypeBot WebhookPullRequestMilestonedPullRequestHeadUserType = "Bot"
	WebhookPullRequestMilestonedPullRequestHeadUserTypeOrganization WebhookPullRequestMilestonedPullRequestHeadUserType = "Organization"
	WebhookPullRequestMilestonedPullRequestHeadUserTypeUser WebhookPullRequestMilestonedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestMilestonedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestMilestonedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestMilestonedPullRequestHeadUserTypeValues() []WebhookPullRequestMilestonedPullRequestHeadUserType {
	return []WebhookPullRequestMilestonedPullRequestHeadUserType{
		WebhookPullRequestMilestonedPullRequestHeadUserTypeBot,
		WebhookPullRequestMilestonedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestMilestonedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestMilestonedPullRequestMergedByType string

const (
	WebhookPullRequestMilestonedPullRequestMergedByTypeBot WebhookPullRequestMilestonedPullRequestMergedByType = "Bot"
	WebhookPullRequestMilestonedPullRequestMergedByTypeMannequin WebhookPullRequestMilestonedPullRequestMergedByType = "Mannequin"
	WebhookPullRequestMilestonedPullRequestMergedByTypeOrganization WebhookPullRequestMilestonedPullRequestMergedByType = "Organization"
	WebhookPullRequestMilestonedPullRequestMergedByTypeUser WebhookPullRequestMilestonedPullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestMilestonedPullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestMilestonedPullRequestMergedByType const type.
func PossibleWebhookPullRequestMilestonedPullRequestMergedByTypeValues() []WebhookPullRequestMilestonedPullRequestMergedByType {
	return []WebhookPullRequestMilestonedPullRequestMergedByType{
		WebhookPullRequestMilestonedPullRequestMergedByTypeBot,
		WebhookPullRequestMilestonedPullRequestMergedByTypeMannequin,
		WebhookPullRequestMilestonedPullRequestMergedByTypeOrganization,
		WebhookPullRequestMilestonedPullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestMilestonedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestMilestonedPullRequestMilestoneCreatorTypeBot WebhookPullRequestMilestonedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestMilestonedPullRequestMilestoneCreatorTypeMannequin WebhookPullRequestMilestonedPullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestMilestonedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestMilestonedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestMilestonedPullRequestMilestoneCreatorTypeUser WebhookPullRequestMilestonedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestMilestonedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestMilestonedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestMilestonedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestMilestonedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestMilestonedPullRequestMilestoneCreatorType{
		WebhookPullRequestMilestonedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestMilestonedPullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestMilestonedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestMilestonedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestMilestonedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestMilestonedPullRequestMilestoneState string

const (
	WebhookPullRequestMilestonedPullRequestMilestoneStateClosed WebhookPullRequestMilestonedPullRequestMilestoneState = "closed"
	WebhookPullRequestMilestonedPullRequestMilestoneStateOpen WebhookPullRequestMilestonedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestMilestonedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestMilestonedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestMilestonedPullRequestMilestoneStateValues() []WebhookPullRequestMilestonedPullRequestMilestoneState {
	return []WebhookPullRequestMilestonedPullRequestMilestoneState{
		WebhookPullRequestMilestonedPullRequestMilestoneStateClosed,
		WebhookPullRequestMilestonedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestMilestonedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

// WebhookPullRequestMilestonedPullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestMilestonedPullRequestState string

const (
	WebhookPullRequestMilestonedPullRequestStateClosed WebhookPullRequestMilestonedPullRequestState = "closed"
	WebhookPullRequestMilestonedPullRequestStateOpen WebhookPullRequestMilestonedPullRequestState = "open"
)

// PossibleWebhookPullRequestMilestonedPullRequestStateValues returns the possible values for the WebhookPullRequestMilestonedPullRequestState const type.
func PossibleWebhookPullRequestMilestonedPullRequestStateValues() []WebhookPullRequestMilestonedPullRequestState {
	return []WebhookPullRequestMilestonedPullRequestState{
		WebhookPullRequestMilestonedPullRequestStateClosed,
		WebhookPullRequestMilestonedPullRequestStateOpen,
	}
}

type WebhookPullRequestMilestonedPullRequestUserType string

const (
	WebhookPullRequestMilestonedPullRequestUserTypeBot WebhookPullRequestMilestonedPullRequestUserType = "Bot"
	WebhookPullRequestMilestonedPullRequestUserTypeMannequin WebhookPullRequestMilestonedPullRequestUserType = "Mannequin"
	WebhookPullRequestMilestonedPullRequestUserTypeOrganization WebhookPullRequestMilestonedPullRequestUserType = "Organization"
	WebhookPullRequestMilestonedPullRequestUserTypeUser WebhookPullRequestMilestonedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestMilestonedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestMilestonedPullRequestUserType const type.
func PossibleWebhookPullRequestMilestonedPullRequestUserTypeValues() []WebhookPullRequestMilestonedPullRequestUserType {
	return []WebhookPullRequestMilestonedPullRequestUserType{
		WebhookPullRequestMilestonedPullRequestUserTypeBot,
		WebhookPullRequestMilestonedPullRequestUserTypeMannequin,
		WebhookPullRequestMilestonedPullRequestUserTypeOrganization,
		WebhookPullRequestMilestonedPullRequestUserTypeUser,
	}
}

type WebhookPullRequestOpenedAction string

const (
	WebhookPullRequestOpenedActionOpened WebhookPullRequestOpenedAction = "opened"
)

// PossibleWebhookPullRequestOpenedActionValues returns the possible values for the WebhookPullRequestOpenedAction const type.
func PossibleWebhookPullRequestOpenedActionValues() []WebhookPullRequestOpenedAction {
	return []WebhookPullRequestOpenedAction{
		WebhookPullRequestOpenedActionOpened,
	}
}

type WebhookPullRequestOpenedPullRequest0ActiveLockReason string

const (
	WebhookPullRequestOpenedPullRequest0ActiveLockReasonNull WebhookPullRequestOpenedPullRequest0ActiveLockReason = "null"
	WebhookPullRequestOpenedPullRequest0ActiveLockReasonOffTopic WebhookPullRequestOpenedPullRequest0ActiveLockReason = "off-topic"
	WebhookPullRequestOpenedPullRequest0ActiveLockReasonResolved WebhookPullRequestOpenedPullRequest0ActiveLockReason = "resolved"
	WebhookPullRequestOpenedPullRequest0ActiveLockReasonSpam WebhookPullRequestOpenedPullRequest0ActiveLockReason = "spam"
	WebhookPullRequestOpenedPullRequest0ActiveLockReasonTooHeated WebhookPullRequestOpenedPullRequest0ActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestOpenedPullRequest0ActiveLockReasonValues returns the possible values for the WebhookPullRequestOpenedPullRequest0ActiveLockReason const type.
func PossibleWebhookPullRequestOpenedPullRequest0ActiveLockReasonValues() []WebhookPullRequestOpenedPullRequest0ActiveLockReason {
	return []WebhookPullRequestOpenedPullRequest0ActiveLockReason{
		WebhookPullRequestOpenedPullRequest0ActiveLockReasonNull,
		WebhookPullRequestOpenedPullRequest0ActiveLockReasonOffTopic,
		WebhookPullRequestOpenedPullRequest0ActiveLockReasonResolved,
		WebhookPullRequestOpenedPullRequest0ActiveLockReasonSpam,
		WebhookPullRequestOpenedPullRequest0ActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestOpenedPullRequest0AssigneeType string

const (
	WebhookPullRequestOpenedPullRequest0AssigneeTypeBot WebhookPullRequestOpenedPullRequest0AssigneeType = "Bot"
	WebhookPullRequestOpenedPullRequest0AssigneeTypeOrganization WebhookPullRequestOpenedPullRequest0AssigneeType = "Organization"
	WebhookPullRequestOpenedPullRequest0AssigneeTypeUser WebhookPullRequestOpenedPullRequest0AssigneeType = "User"
)

// PossibleWebhookPullRequestOpenedPullRequest0AssigneeTypeValues returns the possible values for the WebhookPullRequestOpenedPullRequest0AssigneeType const type.
func PossibleWebhookPullRequestOpenedPullRequest0AssigneeTypeValues() []WebhookPullRequestOpenedPullRequest0AssigneeType {
	return []WebhookPullRequestOpenedPullRequest0AssigneeType{
		WebhookPullRequestOpenedPullRequest0AssigneeTypeBot,
		WebhookPullRequestOpenedPullRequest0AssigneeTypeOrganization,
		WebhookPullRequestOpenedPullRequest0AssigneeTypeUser,
	}
}

// WebhookPullRequestOpenedPullRequest0AuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestOpenedPullRequest0AuthorAssociation string

const (
	WebhookPullRequestOpenedPullRequest0AuthorAssociationCOLLABORATOR WebhookPullRequestOpenedPullRequest0AuthorAssociation = "COLLABORATOR"
	WebhookPullRequestOpenedPullRequest0AuthorAssociationCONTRIBUTOR WebhookPullRequestOpenedPullRequest0AuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestOpenedPullRequest0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestOpenedPullRequest0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestOpenedPullRequest0AuthorAssociationFIRSTTIMER WebhookPullRequestOpenedPullRequest0AuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestOpenedPullRequest0AuthorAssociationMANNEQUIN WebhookPullRequestOpenedPullRequest0AuthorAssociation = "MANNEQUIN"
	WebhookPullRequestOpenedPullRequest0AuthorAssociationMEMBER WebhookPullRequestOpenedPullRequest0AuthorAssociation = "MEMBER"
	WebhookPullRequestOpenedPullRequest0AuthorAssociationNONE WebhookPullRequestOpenedPullRequest0AuthorAssociation = "NONE"
	WebhookPullRequestOpenedPullRequest0AuthorAssociationOWNER WebhookPullRequestOpenedPullRequest0AuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestOpenedPullRequest0AuthorAssociationValues returns the possible values for the WebhookPullRequestOpenedPullRequest0AuthorAssociation const type.
func PossibleWebhookPullRequestOpenedPullRequest0AuthorAssociationValues() []WebhookPullRequestOpenedPullRequest0AuthorAssociation {
	return []WebhookPullRequestOpenedPullRequest0AuthorAssociation{
		WebhookPullRequestOpenedPullRequest0AuthorAssociationCOLLABORATOR,
		WebhookPullRequestOpenedPullRequest0AuthorAssociationCONTRIBUTOR,
		WebhookPullRequestOpenedPullRequest0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestOpenedPullRequest0AuthorAssociationFIRSTTIMER,
		WebhookPullRequestOpenedPullRequest0AuthorAssociationMANNEQUIN,
		WebhookPullRequestOpenedPullRequest0AuthorAssociationMEMBER,
		WebhookPullRequestOpenedPullRequest0AuthorAssociationNONE,
		WebhookPullRequestOpenedPullRequest0AuthorAssociationOWNER,
	}
}

type WebhookPullRequestOpenedPullRequest0AutoMergeEnabledByType string

const (
	WebhookPullRequestOpenedPullRequest0AutoMergeEnabledByTypeBot WebhookPullRequestOpenedPullRequest0AutoMergeEnabledByType = "Bot"
	WebhookPullRequestOpenedPullRequest0AutoMergeEnabledByTypeOrganization WebhookPullRequestOpenedPullRequest0AutoMergeEnabledByType = "Organization"
	WebhookPullRequestOpenedPullRequest0AutoMergeEnabledByTypeUser WebhookPullRequestOpenedPullRequest0AutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestOpenedPullRequest0AutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestOpenedPullRequest0AutoMergeEnabledByType const type.
func PossibleWebhookPullRequestOpenedPullRequest0AutoMergeEnabledByTypeValues() []WebhookPullRequestOpenedPullRequest0AutoMergeEnabledByType {
	return []WebhookPullRequestOpenedPullRequest0AutoMergeEnabledByType{
		WebhookPullRequestOpenedPullRequest0AutoMergeEnabledByTypeBot,
		WebhookPullRequestOpenedPullRequest0AutoMergeEnabledByTypeOrganization,
		WebhookPullRequestOpenedPullRequest0AutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestOpenedPullRequest0AutoMergeMethod - The merge method to use.
type WebhookPullRequestOpenedPullRequest0AutoMergeMethod string

const (
	WebhookPullRequestOpenedPullRequest0AutoMergeMethodMerge WebhookPullRequestOpenedPullRequest0AutoMergeMethod = "merge"
	WebhookPullRequestOpenedPullRequest0AutoMergeMethodRebase WebhookPullRequestOpenedPullRequest0AutoMergeMethod = "rebase"
	WebhookPullRequestOpenedPullRequest0AutoMergeMethodSquash WebhookPullRequestOpenedPullRequest0AutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestOpenedPullRequest0AutoMergeMethodValues returns the possible values for the WebhookPullRequestOpenedPullRequest0AutoMergeMethod const type.
func PossibleWebhookPullRequestOpenedPullRequest0AutoMergeMethodValues() []WebhookPullRequestOpenedPullRequest0AutoMergeMethod {
	return []WebhookPullRequestOpenedPullRequest0AutoMergeMethod{
		WebhookPullRequestOpenedPullRequest0AutoMergeMethodMerge,
		WebhookPullRequestOpenedPullRequest0AutoMergeMethodRebase,
		WebhookPullRequestOpenedPullRequest0AutoMergeMethodSquash,
	}
}

// WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessage string

const (
	WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessageBLANK WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessagePRBODY WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessagePRTITLE WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessageValues() []WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessage {
	return []WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessage{
		WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitTitle string

const (
	WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitTitlePRTITLE WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitTitleValues() []WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitTitle {
	return []WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitTitle{
		WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestOpenedPullRequest0BaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestOpenedPullRequest0BaseRepoOwnerType string

const (
	WebhookPullRequestOpenedPullRequest0BaseRepoOwnerTypeBot WebhookPullRequestOpenedPullRequest0BaseRepoOwnerType = "Bot"
	WebhookPullRequestOpenedPullRequest0BaseRepoOwnerTypeOrganization WebhookPullRequestOpenedPullRequest0BaseRepoOwnerType = "Organization"
	WebhookPullRequestOpenedPullRequest0BaseRepoOwnerTypeUser WebhookPullRequestOpenedPullRequest0BaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestOpenedPullRequest0BaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestOpenedPullRequest0BaseRepoOwnerType const type.
func PossibleWebhookPullRequestOpenedPullRequest0BaseRepoOwnerTypeValues() []WebhookPullRequestOpenedPullRequest0BaseRepoOwnerType {
	return []WebhookPullRequestOpenedPullRequest0BaseRepoOwnerType{
		WebhookPullRequestOpenedPullRequest0BaseRepoOwnerTypeBot,
		WebhookPullRequestOpenedPullRequest0BaseRepoOwnerTypeOrganization,
		WebhookPullRequestOpenedPullRequest0BaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessage{
		WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitTitle{
		WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestOpenedPullRequest0BaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestOpenedPullRequest0BaseRepoVisibility string

const (
	WebhookPullRequestOpenedPullRequest0BaseRepoVisibilityInternal WebhookPullRequestOpenedPullRequest0BaseRepoVisibility = "internal"
	WebhookPullRequestOpenedPullRequest0BaseRepoVisibilityPrivate WebhookPullRequestOpenedPullRequest0BaseRepoVisibility = "private"
	WebhookPullRequestOpenedPullRequest0BaseRepoVisibilityPublic WebhookPullRequestOpenedPullRequest0BaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestOpenedPullRequest0BaseRepoVisibilityValues returns the possible values for the WebhookPullRequestOpenedPullRequest0BaseRepoVisibility const type.
func PossibleWebhookPullRequestOpenedPullRequest0BaseRepoVisibilityValues() []WebhookPullRequestOpenedPullRequest0BaseRepoVisibility {
	return []WebhookPullRequestOpenedPullRequest0BaseRepoVisibility{
		WebhookPullRequestOpenedPullRequest0BaseRepoVisibilityInternal,
		WebhookPullRequestOpenedPullRequest0BaseRepoVisibilityPrivate,
		WebhookPullRequestOpenedPullRequest0BaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestOpenedPullRequest0BaseUserType string

const (
	WebhookPullRequestOpenedPullRequest0BaseUserTypeBot WebhookPullRequestOpenedPullRequest0BaseUserType = "Bot"
	WebhookPullRequestOpenedPullRequest0BaseUserTypeOrganization WebhookPullRequestOpenedPullRequest0BaseUserType = "Organization"
	WebhookPullRequestOpenedPullRequest0BaseUserTypeUser WebhookPullRequestOpenedPullRequest0BaseUserType = "User"
)

// PossibleWebhookPullRequestOpenedPullRequest0BaseUserTypeValues returns the possible values for the WebhookPullRequestOpenedPullRequest0BaseUserType const type.
func PossibleWebhookPullRequestOpenedPullRequest0BaseUserTypeValues() []WebhookPullRequestOpenedPullRequest0BaseUserType {
	return []WebhookPullRequestOpenedPullRequest0BaseUserType{
		WebhookPullRequestOpenedPullRequest0BaseUserTypeBot,
		WebhookPullRequestOpenedPullRequest0BaseUserTypeOrganization,
		WebhookPullRequestOpenedPullRequest0BaseUserTypeUser,
	}
}

// WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessage - The default value for a merge commit message.
type WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessage string

const (
	WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessageBLANK WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessagePRBODY WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessagePRTITLE WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessageValues() []WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessage {
	return []WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessage{
		WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitTitle - The default value for a merge commit message title.
type WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitTitle string

const (
	WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitTitlePRTITLE WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitTitleValues() []WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitTitle {
	return []WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitTitle{
		WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestOpenedPullRequest0HeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestOpenedPullRequest0HeadRepoOwnerType string

const (
	WebhookPullRequestOpenedPullRequest0HeadRepoOwnerTypeBot WebhookPullRequestOpenedPullRequest0HeadRepoOwnerType = "Bot"
	WebhookPullRequestOpenedPullRequest0HeadRepoOwnerTypeOrganization WebhookPullRequestOpenedPullRequest0HeadRepoOwnerType = "Organization"
	WebhookPullRequestOpenedPullRequest0HeadRepoOwnerTypeUser WebhookPullRequestOpenedPullRequest0HeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestOpenedPullRequest0HeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestOpenedPullRequest0HeadRepoOwnerType const type.
func PossibleWebhookPullRequestOpenedPullRequest0HeadRepoOwnerTypeValues() []WebhookPullRequestOpenedPullRequest0HeadRepoOwnerType {
	return []WebhookPullRequestOpenedPullRequest0HeadRepoOwnerType{
		WebhookPullRequestOpenedPullRequest0HeadRepoOwnerTypeBot,
		WebhookPullRequestOpenedPullRequest0HeadRepoOwnerTypeOrganization,
		WebhookPullRequestOpenedPullRequest0HeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessage{
		WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitTitle{
		WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestOpenedPullRequest0HeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestOpenedPullRequest0HeadRepoVisibility string

const (
	WebhookPullRequestOpenedPullRequest0HeadRepoVisibilityInternal WebhookPullRequestOpenedPullRequest0HeadRepoVisibility = "internal"
	WebhookPullRequestOpenedPullRequest0HeadRepoVisibilityPrivate WebhookPullRequestOpenedPullRequest0HeadRepoVisibility = "private"
	WebhookPullRequestOpenedPullRequest0HeadRepoVisibilityPublic WebhookPullRequestOpenedPullRequest0HeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestOpenedPullRequest0HeadRepoVisibilityValues returns the possible values for the WebhookPullRequestOpenedPullRequest0HeadRepoVisibility const type.
func PossibleWebhookPullRequestOpenedPullRequest0HeadRepoVisibilityValues() []WebhookPullRequestOpenedPullRequest0HeadRepoVisibility {
	return []WebhookPullRequestOpenedPullRequest0HeadRepoVisibility{
		WebhookPullRequestOpenedPullRequest0HeadRepoVisibilityInternal,
		WebhookPullRequestOpenedPullRequest0HeadRepoVisibilityPrivate,
		WebhookPullRequestOpenedPullRequest0HeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestOpenedPullRequest0HeadUserType string

const (
	WebhookPullRequestOpenedPullRequest0HeadUserTypeBot WebhookPullRequestOpenedPullRequest0HeadUserType = "Bot"
	WebhookPullRequestOpenedPullRequest0HeadUserTypeOrganization WebhookPullRequestOpenedPullRequest0HeadUserType = "Organization"
	WebhookPullRequestOpenedPullRequest0HeadUserTypeUser WebhookPullRequestOpenedPullRequest0HeadUserType = "User"
)

// PossibleWebhookPullRequestOpenedPullRequest0HeadUserTypeValues returns the possible values for the WebhookPullRequestOpenedPullRequest0HeadUserType const type.
func PossibleWebhookPullRequestOpenedPullRequest0HeadUserTypeValues() []WebhookPullRequestOpenedPullRequest0HeadUserType {
	return []WebhookPullRequestOpenedPullRequest0HeadUserType{
		WebhookPullRequestOpenedPullRequest0HeadUserTypeBot,
		WebhookPullRequestOpenedPullRequest0HeadUserTypeOrganization,
		WebhookPullRequestOpenedPullRequest0HeadUserTypeUser,
	}
}

type WebhookPullRequestOpenedPullRequest0MergedByType string

const (
	WebhookPullRequestOpenedPullRequest0MergedByTypeBot WebhookPullRequestOpenedPullRequest0MergedByType = "Bot"
	WebhookPullRequestOpenedPullRequest0MergedByTypeOrganization WebhookPullRequestOpenedPullRequest0MergedByType = "Organization"
	WebhookPullRequestOpenedPullRequest0MergedByTypeUser WebhookPullRequestOpenedPullRequest0MergedByType = "User"
)

// PossibleWebhookPullRequestOpenedPullRequest0MergedByTypeValues returns the possible values for the WebhookPullRequestOpenedPullRequest0MergedByType const type.
func PossibleWebhookPullRequestOpenedPullRequest0MergedByTypeValues() []WebhookPullRequestOpenedPullRequest0MergedByType {
	return []WebhookPullRequestOpenedPullRequest0MergedByType{
		WebhookPullRequestOpenedPullRequest0MergedByTypeBot,
		WebhookPullRequestOpenedPullRequest0MergedByTypeOrganization,
		WebhookPullRequestOpenedPullRequest0MergedByTypeUser,
	}
}

type WebhookPullRequestOpenedPullRequest0MilestoneCreatorType string

const (
	WebhookPullRequestOpenedPullRequest0MilestoneCreatorTypeBot WebhookPullRequestOpenedPullRequest0MilestoneCreatorType = "Bot"
	WebhookPullRequestOpenedPullRequest0MilestoneCreatorTypeMannequin WebhookPullRequestOpenedPullRequest0MilestoneCreatorType = "Mannequin"
	WebhookPullRequestOpenedPullRequest0MilestoneCreatorTypeOrganization WebhookPullRequestOpenedPullRequest0MilestoneCreatorType = "Organization"
	WebhookPullRequestOpenedPullRequest0MilestoneCreatorTypeUser WebhookPullRequestOpenedPullRequest0MilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestOpenedPullRequest0MilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestOpenedPullRequest0MilestoneCreatorType const type.
func PossibleWebhookPullRequestOpenedPullRequest0MilestoneCreatorTypeValues() []WebhookPullRequestOpenedPullRequest0MilestoneCreatorType {
	return []WebhookPullRequestOpenedPullRequest0MilestoneCreatorType{
		WebhookPullRequestOpenedPullRequest0MilestoneCreatorTypeBot,
		WebhookPullRequestOpenedPullRequest0MilestoneCreatorTypeMannequin,
		WebhookPullRequestOpenedPullRequest0MilestoneCreatorTypeOrganization,
		WebhookPullRequestOpenedPullRequest0MilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestOpenedPullRequest0MilestoneState - The state of the milestone.
type WebhookPullRequestOpenedPullRequest0MilestoneState string

const (
	WebhookPullRequestOpenedPullRequest0MilestoneStateClosed WebhookPullRequestOpenedPullRequest0MilestoneState = "closed"
	WebhookPullRequestOpenedPullRequest0MilestoneStateOpen WebhookPullRequestOpenedPullRequest0MilestoneState = "open"
)

// PossibleWebhookPullRequestOpenedPullRequest0MilestoneStateValues returns the possible values for the WebhookPullRequestOpenedPullRequest0MilestoneState const type.
func PossibleWebhookPullRequestOpenedPullRequest0MilestoneStateValues() []WebhookPullRequestOpenedPullRequest0MilestoneState {
	return []WebhookPullRequestOpenedPullRequest0MilestoneState{
		WebhookPullRequestOpenedPullRequest0MilestoneStateClosed,
		WebhookPullRequestOpenedPullRequest0MilestoneStateOpen,
	}
}

// WebhookPullRequestOpenedPullRequest0State - State of this Pull Request. Either open or closed.
type WebhookPullRequestOpenedPullRequest0State string

const (
	WebhookPullRequestOpenedPullRequest0StateClosed WebhookPullRequestOpenedPullRequest0State = "closed"
	WebhookPullRequestOpenedPullRequest0StateOpen WebhookPullRequestOpenedPullRequest0State = "open"
)

// PossibleWebhookPullRequestOpenedPullRequest0StateValues returns the possible values for the WebhookPullRequestOpenedPullRequest0State const type.
func PossibleWebhookPullRequestOpenedPullRequest0StateValues() []WebhookPullRequestOpenedPullRequest0State {
	return []WebhookPullRequestOpenedPullRequest0State{
		WebhookPullRequestOpenedPullRequest0StateClosed,
		WebhookPullRequestOpenedPullRequest0StateOpen,
	}
}

type WebhookPullRequestOpenedPullRequest0UserType string

const (
	WebhookPullRequestOpenedPullRequest0UserTypeBot WebhookPullRequestOpenedPullRequest0UserType = "Bot"
	WebhookPullRequestOpenedPullRequest0UserTypeMannequin WebhookPullRequestOpenedPullRequest0UserType = "Mannequin"
	WebhookPullRequestOpenedPullRequest0UserTypeOrganization WebhookPullRequestOpenedPullRequest0UserType = "Organization"
	WebhookPullRequestOpenedPullRequest0UserTypeUser WebhookPullRequestOpenedPullRequest0UserType = "User"
)

// PossibleWebhookPullRequestOpenedPullRequest0UserTypeValues returns the possible values for the WebhookPullRequestOpenedPullRequest0UserType const type.
func PossibleWebhookPullRequestOpenedPullRequest0UserTypeValues() []WebhookPullRequestOpenedPullRequest0UserType {
	return []WebhookPullRequestOpenedPullRequest0UserType{
		WebhookPullRequestOpenedPullRequest0UserTypeBot,
		WebhookPullRequestOpenedPullRequest0UserTypeMannequin,
		WebhookPullRequestOpenedPullRequest0UserTypeOrganization,
		WebhookPullRequestOpenedPullRequest0UserTypeUser,
	}
}

type WebhookPullRequestOpenedPullRequest1State string

const (
	WebhookPullRequestOpenedPullRequest1StateClosed WebhookPullRequestOpenedPullRequest1State = "closed"
	WebhookPullRequestOpenedPullRequest1StateOpen WebhookPullRequestOpenedPullRequest1State = "open"
)

// PossibleWebhookPullRequestOpenedPullRequest1StateValues returns the possible values for the WebhookPullRequestOpenedPullRequest1State const type.
func PossibleWebhookPullRequestOpenedPullRequest1StateValues() []WebhookPullRequestOpenedPullRequest1State {
	return []WebhookPullRequestOpenedPullRequest1State{
		WebhookPullRequestOpenedPullRequest1StateClosed,
		WebhookPullRequestOpenedPullRequest1StateOpen,
	}
}

type WebhookPullRequestOpenedPullRequestOneOf0AssigneesItemType string

const (
	WebhookPullRequestOpenedPullRequestOneOf0AssigneesItemTypeBot WebhookPullRequestOpenedPullRequestOneOf0AssigneesItemType = "Bot"
	WebhookPullRequestOpenedPullRequestOneOf0AssigneesItemTypeOrganization WebhookPullRequestOpenedPullRequestOneOf0AssigneesItemType = "Organization"
	WebhookPullRequestOpenedPullRequestOneOf0AssigneesItemTypeUser WebhookPullRequestOpenedPullRequestOneOf0AssigneesItemType = "User"
)

// PossibleWebhookPullRequestOpenedPullRequestOneOf0AssigneesItemTypeValues returns the possible values for the WebhookPullRequestOpenedPullRequestOneOf0AssigneesItemType const type.
func PossibleWebhookPullRequestOpenedPullRequestOneOf0AssigneesItemTypeValues() []WebhookPullRequestOpenedPullRequestOneOf0AssigneesItemType {
	return []WebhookPullRequestOpenedPullRequestOneOf0AssigneesItemType{
		WebhookPullRequestOpenedPullRequestOneOf0AssigneesItemTypeBot,
		WebhookPullRequestOpenedPullRequestOneOf0AssigneesItemTypeOrganization,
		WebhookPullRequestOpenedPullRequestOneOf0AssigneesItemTypeUser,
	}
}

type WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacy string

const (
	WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacyClosed WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacyOpen WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacy = "open"
	WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacySecret WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacyValues() []WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacy {
	return []WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacy{
		WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacyClosed,
		WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacyOpen,
		WebhookPullRequestOpenedPullRequestOneOf0RequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestReadyForReviewAction string

const (
	WebhookPullRequestReadyForReviewActionReadyForReview WebhookPullRequestReadyForReviewAction = "ready_for_review"
)

// PossibleWebhookPullRequestReadyForReviewActionValues returns the possible values for the WebhookPullRequestReadyForReviewAction const type.
func PossibleWebhookPullRequestReadyForReviewActionValues() []WebhookPullRequestReadyForReviewAction {
	return []WebhookPullRequestReadyForReviewAction{
		WebhookPullRequestReadyForReviewActionReadyForReview,
	}
}

type WebhookPullRequestReadyForReviewPullRequest0ActiveLockReason string

const (
	WebhookPullRequestReadyForReviewPullRequest0ActiveLockReasonNull WebhookPullRequestReadyForReviewPullRequest0ActiveLockReason = "null"
	WebhookPullRequestReadyForReviewPullRequest0ActiveLockReasonOffTopic WebhookPullRequestReadyForReviewPullRequest0ActiveLockReason = "off-topic"
	WebhookPullRequestReadyForReviewPullRequest0ActiveLockReasonResolved WebhookPullRequestReadyForReviewPullRequest0ActiveLockReason = "resolved"
	WebhookPullRequestReadyForReviewPullRequest0ActiveLockReasonSpam WebhookPullRequestReadyForReviewPullRequest0ActiveLockReason = "spam"
	WebhookPullRequestReadyForReviewPullRequest0ActiveLockReasonTooHeated WebhookPullRequestReadyForReviewPullRequest0ActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0ActiveLockReasonValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0ActiveLockReason const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0ActiveLockReasonValues() []WebhookPullRequestReadyForReviewPullRequest0ActiveLockReason {
	return []WebhookPullRequestReadyForReviewPullRequest0ActiveLockReason{
		WebhookPullRequestReadyForReviewPullRequest0ActiveLockReasonNull,
		WebhookPullRequestReadyForReviewPullRequest0ActiveLockReasonOffTopic,
		WebhookPullRequestReadyForReviewPullRequest0ActiveLockReasonResolved,
		WebhookPullRequestReadyForReviewPullRequest0ActiveLockReasonSpam,
		WebhookPullRequestReadyForReviewPullRequest0ActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestReadyForReviewPullRequest0AssigneeType string

const (
	WebhookPullRequestReadyForReviewPullRequest0AssigneeTypeBot WebhookPullRequestReadyForReviewPullRequest0AssigneeType = "Bot"
	WebhookPullRequestReadyForReviewPullRequest0AssigneeTypeOrganization WebhookPullRequestReadyForReviewPullRequest0AssigneeType = "Organization"
	WebhookPullRequestReadyForReviewPullRequest0AssigneeTypeUser WebhookPullRequestReadyForReviewPullRequest0AssigneeType = "User"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0AssigneeTypeValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0AssigneeType const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0AssigneeTypeValues() []WebhookPullRequestReadyForReviewPullRequest0AssigneeType {
	return []WebhookPullRequestReadyForReviewPullRequest0AssigneeType{
		WebhookPullRequestReadyForReviewPullRequest0AssigneeTypeBot,
		WebhookPullRequestReadyForReviewPullRequest0AssigneeTypeOrganization,
		WebhookPullRequestReadyForReviewPullRequest0AssigneeTypeUser,
	}
}

// WebhookPullRequestReadyForReviewPullRequest0AuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReadyForReviewPullRequest0AuthorAssociation string

const (
	WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationCOLLABORATOR WebhookPullRequestReadyForReviewPullRequest0AuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationCONTRIBUTOR WebhookPullRequestReadyForReviewPullRequest0AuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReadyForReviewPullRequest0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationFIRSTTIMER WebhookPullRequestReadyForReviewPullRequest0AuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationMANNEQUIN WebhookPullRequestReadyForReviewPullRequest0AuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationMEMBER WebhookPullRequestReadyForReviewPullRequest0AuthorAssociation = "MEMBER"
	WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationNONE WebhookPullRequestReadyForReviewPullRequest0AuthorAssociation = "NONE"
	WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationOWNER WebhookPullRequestReadyForReviewPullRequest0AuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0AuthorAssociationValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0AuthorAssociation const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0AuthorAssociationValues() []WebhookPullRequestReadyForReviewPullRequest0AuthorAssociation {
	return []WebhookPullRequestReadyForReviewPullRequest0AuthorAssociation{
		WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationCOLLABORATOR,
		WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationFIRSTTIMER,
		WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationMANNEQUIN,
		WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationMEMBER,
		WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationNONE,
		WebhookPullRequestReadyForReviewPullRequest0AuthorAssociationOWNER,
	}
}

type WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByType string

const (
	WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByTypeBot WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByType = "Bot"
	WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByTypeOrganization WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByType = "Organization"
	WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByTypeUser WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByType const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByTypeValues() []WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByType {
	return []WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByType{
		WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByTypeBot,
		WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByTypeOrganization,
		WebhookPullRequestReadyForReviewPullRequest0AutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestReadyForReviewPullRequest0AutoMergeMethod - The merge method to use.
type WebhookPullRequestReadyForReviewPullRequest0AutoMergeMethod string

const (
	WebhookPullRequestReadyForReviewPullRequest0AutoMergeMethodMerge WebhookPullRequestReadyForReviewPullRequest0AutoMergeMethod = "merge"
	WebhookPullRequestReadyForReviewPullRequest0AutoMergeMethodRebase WebhookPullRequestReadyForReviewPullRequest0AutoMergeMethod = "rebase"
	WebhookPullRequestReadyForReviewPullRequest0AutoMergeMethodSquash WebhookPullRequestReadyForReviewPullRequest0AutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0AutoMergeMethodValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0AutoMergeMethod const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0AutoMergeMethodValues() []WebhookPullRequestReadyForReviewPullRequest0AutoMergeMethod {
	return []WebhookPullRequestReadyForReviewPullRequest0AutoMergeMethod{
		WebhookPullRequestReadyForReviewPullRequest0AutoMergeMethodMerge,
		WebhookPullRequestReadyForReviewPullRequest0AutoMergeMethodRebase,
		WebhookPullRequestReadyForReviewPullRequest0AutoMergeMethodSquash,
	}
}

// WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessage string

const (
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessageBLANK WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessagePRBODY WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessagePRTITLE WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessageValues() []WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessage {
	return []WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessage{
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitTitle string

const (
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitTitlePRTITLE WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitTitleValues() []WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitTitle {
	return []WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitTitle{
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerType string

const (
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerTypeBot WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerType = "Bot"
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerTypeOrganization WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerType = "Organization"
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerTypeUser WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerType const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerTypeValues() []WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerType {
	return []WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerType{
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerTypeBot,
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerTypeOrganization,
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessage{
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitTitle{
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibility string

const (
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibilityInternal WebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibility = "internal"
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibilityPrivate WebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibility = "private"
	WebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibilityPublic WebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibilityValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibility const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibilityValues() []WebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibility {
	return []WebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibility{
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibilityInternal,
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibilityPrivate,
		WebhookPullRequestReadyForReviewPullRequest0BaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestReadyForReviewPullRequest0BaseUserType string

const (
	WebhookPullRequestReadyForReviewPullRequest0BaseUserTypeBot WebhookPullRequestReadyForReviewPullRequest0BaseUserType = "Bot"
	WebhookPullRequestReadyForReviewPullRequest0BaseUserTypeOrganization WebhookPullRequestReadyForReviewPullRequest0BaseUserType = "Organization"
	WebhookPullRequestReadyForReviewPullRequest0BaseUserTypeUser WebhookPullRequestReadyForReviewPullRequest0BaseUserType = "User"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0BaseUserTypeValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0BaseUserType const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0BaseUserTypeValues() []WebhookPullRequestReadyForReviewPullRequest0BaseUserType {
	return []WebhookPullRequestReadyForReviewPullRequest0BaseUserType{
		WebhookPullRequestReadyForReviewPullRequest0BaseUserTypeBot,
		WebhookPullRequestReadyForReviewPullRequest0BaseUserTypeOrganization,
		WebhookPullRequestReadyForReviewPullRequest0BaseUserTypeUser,
	}
}

// WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessage string

const (
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessageBLANK WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessagePRBODY WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessagePRTITLE WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessageValues() []WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessage {
	return []WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessage{
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitTitle string

const (
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitTitlePRTITLE WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitTitleValues() []WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitTitle {
	return []WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitTitle{
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerType string

const (
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerTypeBot WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerType = "Bot"
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerTypeOrganization WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerType = "Organization"
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerTypeUser WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerType const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerTypeValues() []WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerType {
	return []WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerType{
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerTypeBot,
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerTypeOrganization,
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessage{
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitTitle{
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibility string

const (
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibilityInternal WebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibility = "internal"
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibilityPrivate WebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibility = "private"
	WebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibilityPublic WebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibilityValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibility const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibilityValues() []WebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibility {
	return []WebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibility{
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibilityInternal,
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibilityPrivate,
		WebhookPullRequestReadyForReviewPullRequest0HeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestReadyForReviewPullRequest0HeadUserType string

const (
	WebhookPullRequestReadyForReviewPullRequest0HeadUserTypeBot WebhookPullRequestReadyForReviewPullRequest0HeadUserType = "Bot"
	WebhookPullRequestReadyForReviewPullRequest0HeadUserTypeOrganization WebhookPullRequestReadyForReviewPullRequest0HeadUserType = "Organization"
	WebhookPullRequestReadyForReviewPullRequest0HeadUserTypeUser WebhookPullRequestReadyForReviewPullRequest0HeadUserType = "User"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0HeadUserTypeValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0HeadUserType const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0HeadUserTypeValues() []WebhookPullRequestReadyForReviewPullRequest0HeadUserType {
	return []WebhookPullRequestReadyForReviewPullRequest0HeadUserType{
		WebhookPullRequestReadyForReviewPullRequest0HeadUserTypeBot,
		WebhookPullRequestReadyForReviewPullRequest0HeadUserTypeOrganization,
		WebhookPullRequestReadyForReviewPullRequest0HeadUserTypeUser,
	}
}

type WebhookPullRequestReadyForReviewPullRequest0MergedByType string

const (
	WebhookPullRequestReadyForReviewPullRequest0MergedByTypeBot WebhookPullRequestReadyForReviewPullRequest0MergedByType = "Bot"
	WebhookPullRequestReadyForReviewPullRequest0MergedByTypeOrganization WebhookPullRequestReadyForReviewPullRequest0MergedByType = "Organization"
	WebhookPullRequestReadyForReviewPullRequest0MergedByTypeUser WebhookPullRequestReadyForReviewPullRequest0MergedByType = "User"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0MergedByTypeValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0MergedByType const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0MergedByTypeValues() []WebhookPullRequestReadyForReviewPullRequest0MergedByType {
	return []WebhookPullRequestReadyForReviewPullRequest0MergedByType{
		WebhookPullRequestReadyForReviewPullRequest0MergedByTypeBot,
		WebhookPullRequestReadyForReviewPullRequest0MergedByTypeOrganization,
		WebhookPullRequestReadyForReviewPullRequest0MergedByTypeUser,
	}
}

type WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorType string

const (
	WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorTypeBot WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorType = "Bot"
	WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorTypeMannequin WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorType = "Mannequin"
	WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorTypeOrganization WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorType = "Organization"
	WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorTypeUser WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorType const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorTypeValues() []WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorType {
	return []WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorType{
		WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorTypeBot,
		WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorTypeMannequin,
		WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorTypeOrganization,
		WebhookPullRequestReadyForReviewPullRequest0MilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestReadyForReviewPullRequest0MilestoneState - The state of the milestone.
type WebhookPullRequestReadyForReviewPullRequest0MilestoneState string

const (
	WebhookPullRequestReadyForReviewPullRequest0MilestoneStateClosed WebhookPullRequestReadyForReviewPullRequest0MilestoneState = "closed"
	WebhookPullRequestReadyForReviewPullRequest0MilestoneStateOpen WebhookPullRequestReadyForReviewPullRequest0MilestoneState = "open"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0MilestoneStateValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0MilestoneState const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0MilestoneStateValues() []WebhookPullRequestReadyForReviewPullRequest0MilestoneState {
	return []WebhookPullRequestReadyForReviewPullRequest0MilestoneState{
		WebhookPullRequestReadyForReviewPullRequest0MilestoneStateClosed,
		WebhookPullRequestReadyForReviewPullRequest0MilestoneStateOpen,
	}
}

// WebhookPullRequestReadyForReviewPullRequest0State - State of this Pull Request. Either open or closed.
type WebhookPullRequestReadyForReviewPullRequest0State string

const (
	WebhookPullRequestReadyForReviewPullRequest0StateClosed WebhookPullRequestReadyForReviewPullRequest0State = "closed"
	WebhookPullRequestReadyForReviewPullRequest0StateOpen WebhookPullRequestReadyForReviewPullRequest0State = "open"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0StateValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0State const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0StateValues() []WebhookPullRequestReadyForReviewPullRequest0State {
	return []WebhookPullRequestReadyForReviewPullRequest0State{
		WebhookPullRequestReadyForReviewPullRequest0StateClosed,
		WebhookPullRequestReadyForReviewPullRequest0StateOpen,
	}
}

type WebhookPullRequestReadyForReviewPullRequest0UserType string

const (
	WebhookPullRequestReadyForReviewPullRequest0UserTypeBot WebhookPullRequestReadyForReviewPullRequest0UserType = "Bot"
	WebhookPullRequestReadyForReviewPullRequest0UserTypeMannequin WebhookPullRequestReadyForReviewPullRequest0UserType = "Mannequin"
	WebhookPullRequestReadyForReviewPullRequest0UserTypeOrganization WebhookPullRequestReadyForReviewPullRequest0UserType = "Organization"
	WebhookPullRequestReadyForReviewPullRequest0UserTypeUser WebhookPullRequestReadyForReviewPullRequest0UserType = "User"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest0UserTypeValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest0UserType const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest0UserTypeValues() []WebhookPullRequestReadyForReviewPullRequest0UserType {
	return []WebhookPullRequestReadyForReviewPullRequest0UserType{
		WebhookPullRequestReadyForReviewPullRequest0UserTypeBot,
		WebhookPullRequestReadyForReviewPullRequest0UserTypeMannequin,
		WebhookPullRequestReadyForReviewPullRequest0UserTypeOrganization,
		WebhookPullRequestReadyForReviewPullRequest0UserTypeUser,
	}
}

type WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessage string

const (
	WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessageBLANK WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessagePRBODY WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessagePRTITLE WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessageValues() []WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessage {
	return []WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessage{
		WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitMessagePRTITLE,
	}
}

type WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitTitle string

const (
	WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitTitlePRTITLE WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitTitleValues() []WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitTitle {
	return []WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitTitle{
		WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReadyForReviewPullRequest1BaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessage{
		WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitMessagePRBODY,
	}
}

type WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitTitle{
		WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReadyForReviewPullRequest1BaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessage string

const (
	WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessageBLANK WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessagePRBODY WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessagePRTITLE WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessageValues() []WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessage {
	return []WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessage{
		WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitMessagePRTITLE,
	}
}

type WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitTitle string

const (
	WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitTitlePRTITLE WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitTitleValues() []WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitTitle {
	return []WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitTitle{
		WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReadyForReviewPullRequest1HeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessage{
		WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitMessagePRBODY,
	}
}

type WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitTitle{
		WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReadyForReviewPullRequest1HeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReadyForReviewPullRequest1State string

const (
	WebhookPullRequestReadyForReviewPullRequest1StateClosed WebhookPullRequestReadyForReviewPullRequest1State = "closed"
	WebhookPullRequestReadyForReviewPullRequest1StateOpen WebhookPullRequestReadyForReviewPullRequest1State = "open"
)

// PossibleWebhookPullRequestReadyForReviewPullRequest1StateValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequest1State const type.
func PossibleWebhookPullRequestReadyForReviewPullRequest1StateValues() []WebhookPullRequestReadyForReviewPullRequest1State {
	return []WebhookPullRequestReadyForReviewPullRequest1State{
		WebhookPullRequestReadyForReviewPullRequest1StateClosed,
		WebhookPullRequestReadyForReviewPullRequest1StateOpen,
	}
}

type WebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemType string

const (
	WebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemTypeBot WebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemType = "Bot"
	WebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemTypeOrganization WebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemType = "Organization"
	WebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemTypeUser WebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemType = "User"
)

// PossibleWebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemTypeValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemType const type.
func PossibleWebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemTypeValues() []WebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemType {
	return []WebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemType{
		WebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemTypeBot,
		WebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemTypeOrganization,
		WebhookPullRequestReadyForReviewPullRequestOneOf0AssigneesItemTypeUser,
	}
}

type WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacy string

const (
	WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacyClosed WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacyOpen WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacy = "open"
	WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacySecret WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacyValues() []WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacy {
	return []WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacy{
		WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacyClosed,
		WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacyOpen,
		WebhookPullRequestReadyForReviewPullRequestOneOf0RequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestReopenedAction string

const (
	WebhookPullRequestReopenedActionReopened WebhookPullRequestReopenedAction = "reopened"
)

// PossibleWebhookPullRequestReopenedActionValues returns the possible values for the WebhookPullRequestReopenedAction const type.
func PossibleWebhookPullRequestReopenedActionValues() []WebhookPullRequestReopenedAction {
	return []WebhookPullRequestReopenedAction{
		WebhookPullRequestReopenedActionReopened,
	}
}

type WebhookPullRequestReopenedPullRequest0ActiveLockReason string

const (
	WebhookPullRequestReopenedPullRequest0ActiveLockReasonNull WebhookPullRequestReopenedPullRequest0ActiveLockReason = "null"
	WebhookPullRequestReopenedPullRequest0ActiveLockReasonOffTopic WebhookPullRequestReopenedPullRequest0ActiveLockReason = "off-topic"
	WebhookPullRequestReopenedPullRequest0ActiveLockReasonResolved WebhookPullRequestReopenedPullRequest0ActiveLockReason = "resolved"
	WebhookPullRequestReopenedPullRequest0ActiveLockReasonSpam WebhookPullRequestReopenedPullRequest0ActiveLockReason = "spam"
	WebhookPullRequestReopenedPullRequest0ActiveLockReasonTooHeated WebhookPullRequestReopenedPullRequest0ActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestReopenedPullRequest0ActiveLockReasonValues returns the possible values for the WebhookPullRequestReopenedPullRequest0ActiveLockReason const type.
func PossibleWebhookPullRequestReopenedPullRequest0ActiveLockReasonValues() []WebhookPullRequestReopenedPullRequest0ActiveLockReason {
	return []WebhookPullRequestReopenedPullRequest0ActiveLockReason{
		WebhookPullRequestReopenedPullRequest0ActiveLockReasonNull,
		WebhookPullRequestReopenedPullRequest0ActiveLockReasonOffTopic,
		WebhookPullRequestReopenedPullRequest0ActiveLockReasonResolved,
		WebhookPullRequestReopenedPullRequest0ActiveLockReasonSpam,
		WebhookPullRequestReopenedPullRequest0ActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestReopenedPullRequest0AssigneeType string

const (
	WebhookPullRequestReopenedPullRequest0AssigneeTypeBot WebhookPullRequestReopenedPullRequest0AssigneeType = "Bot"
	WebhookPullRequestReopenedPullRequest0AssigneeTypeOrganization WebhookPullRequestReopenedPullRequest0AssigneeType = "Organization"
	WebhookPullRequestReopenedPullRequest0AssigneeTypeUser WebhookPullRequestReopenedPullRequest0AssigneeType = "User"
)

// PossibleWebhookPullRequestReopenedPullRequest0AssigneeTypeValues returns the possible values for the WebhookPullRequestReopenedPullRequest0AssigneeType const type.
func PossibleWebhookPullRequestReopenedPullRequest0AssigneeTypeValues() []WebhookPullRequestReopenedPullRequest0AssigneeType {
	return []WebhookPullRequestReopenedPullRequest0AssigneeType{
		WebhookPullRequestReopenedPullRequest0AssigneeTypeBot,
		WebhookPullRequestReopenedPullRequest0AssigneeTypeOrganization,
		WebhookPullRequestReopenedPullRequest0AssigneeTypeUser,
	}
}

// WebhookPullRequestReopenedPullRequest0AuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReopenedPullRequest0AuthorAssociation string

const (
	WebhookPullRequestReopenedPullRequest0AuthorAssociationCOLLABORATOR WebhookPullRequestReopenedPullRequest0AuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReopenedPullRequest0AuthorAssociationCONTRIBUTOR WebhookPullRequestReopenedPullRequest0AuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReopenedPullRequest0AuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReopenedPullRequest0AuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReopenedPullRequest0AuthorAssociationFIRSTTIMER WebhookPullRequestReopenedPullRequest0AuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReopenedPullRequest0AuthorAssociationMANNEQUIN WebhookPullRequestReopenedPullRequest0AuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReopenedPullRequest0AuthorAssociationMEMBER WebhookPullRequestReopenedPullRequest0AuthorAssociation = "MEMBER"
	WebhookPullRequestReopenedPullRequest0AuthorAssociationNONE WebhookPullRequestReopenedPullRequest0AuthorAssociation = "NONE"
	WebhookPullRequestReopenedPullRequest0AuthorAssociationOWNER WebhookPullRequestReopenedPullRequest0AuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReopenedPullRequest0AuthorAssociationValues returns the possible values for the WebhookPullRequestReopenedPullRequest0AuthorAssociation const type.
func PossibleWebhookPullRequestReopenedPullRequest0AuthorAssociationValues() []WebhookPullRequestReopenedPullRequest0AuthorAssociation {
	return []WebhookPullRequestReopenedPullRequest0AuthorAssociation{
		WebhookPullRequestReopenedPullRequest0AuthorAssociationCOLLABORATOR,
		WebhookPullRequestReopenedPullRequest0AuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReopenedPullRequest0AuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReopenedPullRequest0AuthorAssociationFIRSTTIMER,
		WebhookPullRequestReopenedPullRequest0AuthorAssociationMANNEQUIN,
		WebhookPullRequestReopenedPullRequest0AuthorAssociationMEMBER,
		WebhookPullRequestReopenedPullRequest0AuthorAssociationNONE,
		WebhookPullRequestReopenedPullRequest0AuthorAssociationOWNER,
	}
}

type WebhookPullRequestReopenedPullRequest0AutoMergeEnabledByType string

const (
	WebhookPullRequestReopenedPullRequest0AutoMergeEnabledByTypeBot WebhookPullRequestReopenedPullRequest0AutoMergeEnabledByType = "Bot"
	WebhookPullRequestReopenedPullRequest0AutoMergeEnabledByTypeOrganization WebhookPullRequestReopenedPullRequest0AutoMergeEnabledByType = "Organization"
	WebhookPullRequestReopenedPullRequest0AutoMergeEnabledByTypeUser WebhookPullRequestReopenedPullRequest0AutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestReopenedPullRequest0AutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestReopenedPullRequest0AutoMergeEnabledByType const type.
func PossibleWebhookPullRequestReopenedPullRequest0AutoMergeEnabledByTypeValues() []WebhookPullRequestReopenedPullRequest0AutoMergeEnabledByType {
	return []WebhookPullRequestReopenedPullRequest0AutoMergeEnabledByType{
		WebhookPullRequestReopenedPullRequest0AutoMergeEnabledByTypeBot,
		WebhookPullRequestReopenedPullRequest0AutoMergeEnabledByTypeOrganization,
		WebhookPullRequestReopenedPullRequest0AutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestReopenedPullRequest0AutoMergeMethod - The merge method to use.
type WebhookPullRequestReopenedPullRequest0AutoMergeMethod string

const (
	WebhookPullRequestReopenedPullRequest0AutoMergeMethodMerge WebhookPullRequestReopenedPullRequest0AutoMergeMethod = "merge"
	WebhookPullRequestReopenedPullRequest0AutoMergeMethodRebase WebhookPullRequestReopenedPullRequest0AutoMergeMethod = "rebase"
	WebhookPullRequestReopenedPullRequest0AutoMergeMethodSquash WebhookPullRequestReopenedPullRequest0AutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestReopenedPullRequest0AutoMergeMethodValues returns the possible values for the WebhookPullRequestReopenedPullRequest0AutoMergeMethod const type.
func PossibleWebhookPullRequestReopenedPullRequest0AutoMergeMethodValues() []WebhookPullRequestReopenedPullRequest0AutoMergeMethod {
	return []WebhookPullRequestReopenedPullRequest0AutoMergeMethod{
		WebhookPullRequestReopenedPullRequest0AutoMergeMethodMerge,
		WebhookPullRequestReopenedPullRequest0AutoMergeMethodRebase,
		WebhookPullRequestReopenedPullRequest0AutoMergeMethodSquash,
	}
}

// WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessage string

const (
	WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessageBLANK WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessagePRBODY WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessagePRTITLE WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessageValues() []WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessage {
	return []WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessage{
		WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitTitle string

const (
	WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitTitlePRTITLE WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitTitleValues() []WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitTitle {
	return []WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitTitle{
		WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReopenedPullRequest0BaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReopenedPullRequest0BaseRepoOwnerType string

const (
	WebhookPullRequestReopenedPullRequest0BaseRepoOwnerTypeBot WebhookPullRequestReopenedPullRequest0BaseRepoOwnerType = "Bot"
	WebhookPullRequestReopenedPullRequest0BaseRepoOwnerTypeOrganization WebhookPullRequestReopenedPullRequest0BaseRepoOwnerType = "Organization"
	WebhookPullRequestReopenedPullRequest0BaseRepoOwnerTypeUser WebhookPullRequestReopenedPullRequest0BaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReopenedPullRequest0BaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReopenedPullRequest0BaseRepoOwnerType const type.
func PossibleWebhookPullRequestReopenedPullRequest0BaseRepoOwnerTypeValues() []WebhookPullRequestReopenedPullRequest0BaseRepoOwnerType {
	return []WebhookPullRequestReopenedPullRequest0BaseRepoOwnerType{
		WebhookPullRequestReopenedPullRequest0BaseRepoOwnerTypeBot,
		WebhookPullRequestReopenedPullRequest0BaseRepoOwnerTypeOrganization,
		WebhookPullRequestReopenedPullRequest0BaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessage{
		WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitTitle{
		WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReopenedPullRequest0BaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReopenedPullRequest0BaseRepoVisibility string

const (
	WebhookPullRequestReopenedPullRequest0BaseRepoVisibilityInternal WebhookPullRequestReopenedPullRequest0BaseRepoVisibility = "internal"
	WebhookPullRequestReopenedPullRequest0BaseRepoVisibilityPrivate WebhookPullRequestReopenedPullRequest0BaseRepoVisibility = "private"
	WebhookPullRequestReopenedPullRequest0BaseRepoVisibilityPublic WebhookPullRequestReopenedPullRequest0BaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestReopenedPullRequest0BaseRepoVisibilityValues returns the possible values for the WebhookPullRequestReopenedPullRequest0BaseRepoVisibility const type.
func PossibleWebhookPullRequestReopenedPullRequest0BaseRepoVisibilityValues() []WebhookPullRequestReopenedPullRequest0BaseRepoVisibility {
	return []WebhookPullRequestReopenedPullRequest0BaseRepoVisibility{
		WebhookPullRequestReopenedPullRequest0BaseRepoVisibilityInternal,
		WebhookPullRequestReopenedPullRequest0BaseRepoVisibilityPrivate,
		WebhookPullRequestReopenedPullRequest0BaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestReopenedPullRequest0BaseUserType string

const (
	WebhookPullRequestReopenedPullRequest0BaseUserTypeBot WebhookPullRequestReopenedPullRequest0BaseUserType = "Bot"
	WebhookPullRequestReopenedPullRequest0BaseUserTypeOrganization WebhookPullRequestReopenedPullRequest0BaseUserType = "Organization"
	WebhookPullRequestReopenedPullRequest0BaseUserTypeUser WebhookPullRequestReopenedPullRequest0BaseUserType = "User"
)

// PossibleWebhookPullRequestReopenedPullRequest0BaseUserTypeValues returns the possible values for the WebhookPullRequestReopenedPullRequest0BaseUserType const type.
func PossibleWebhookPullRequestReopenedPullRequest0BaseUserTypeValues() []WebhookPullRequestReopenedPullRequest0BaseUserType {
	return []WebhookPullRequestReopenedPullRequest0BaseUserType{
		WebhookPullRequestReopenedPullRequest0BaseUserTypeBot,
		WebhookPullRequestReopenedPullRequest0BaseUserTypeOrganization,
		WebhookPullRequestReopenedPullRequest0BaseUserTypeUser,
	}
}

// WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessage - The default value for a merge commit message.
type WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessage string

const (
	WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessageBLANK WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessagePRBODY WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessagePRTITLE WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessageValues() []WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessage {
	return []WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessage{
		WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitTitle - The default value for a merge commit message title.
type WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitTitle string

const (
	WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitTitlePRTITLE WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitTitleValues() []WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitTitle {
	return []WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitTitle{
		WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReopenedPullRequest0HeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReopenedPullRequest0HeadRepoOwnerType string

const (
	WebhookPullRequestReopenedPullRequest0HeadRepoOwnerTypeBot WebhookPullRequestReopenedPullRequest0HeadRepoOwnerType = "Bot"
	WebhookPullRequestReopenedPullRequest0HeadRepoOwnerTypeOrganization WebhookPullRequestReopenedPullRequest0HeadRepoOwnerType = "Organization"
	WebhookPullRequestReopenedPullRequest0HeadRepoOwnerTypeUser WebhookPullRequestReopenedPullRequest0HeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReopenedPullRequest0HeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReopenedPullRequest0HeadRepoOwnerType const type.
func PossibleWebhookPullRequestReopenedPullRequest0HeadRepoOwnerTypeValues() []WebhookPullRequestReopenedPullRequest0HeadRepoOwnerType {
	return []WebhookPullRequestReopenedPullRequest0HeadRepoOwnerType{
		WebhookPullRequestReopenedPullRequest0HeadRepoOwnerTypeBot,
		WebhookPullRequestReopenedPullRequest0HeadRepoOwnerTypeOrganization,
		WebhookPullRequestReopenedPullRequest0HeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessage{
		WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitTitle{
		WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReopenedPullRequest0HeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReopenedPullRequest0HeadRepoVisibility string

const (
	WebhookPullRequestReopenedPullRequest0HeadRepoVisibilityInternal WebhookPullRequestReopenedPullRequest0HeadRepoVisibility = "internal"
	WebhookPullRequestReopenedPullRequest0HeadRepoVisibilityPrivate WebhookPullRequestReopenedPullRequest0HeadRepoVisibility = "private"
	WebhookPullRequestReopenedPullRequest0HeadRepoVisibilityPublic WebhookPullRequestReopenedPullRequest0HeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestReopenedPullRequest0HeadRepoVisibilityValues returns the possible values for the WebhookPullRequestReopenedPullRequest0HeadRepoVisibility const type.
func PossibleWebhookPullRequestReopenedPullRequest0HeadRepoVisibilityValues() []WebhookPullRequestReopenedPullRequest0HeadRepoVisibility {
	return []WebhookPullRequestReopenedPullRequest0HeadRepoVisibility{
		WebhookPullRequestReopenedPullRequest0HeadRepoVisibilityInternal,
		WebhookPullRequestReopenedPullRequest0HeadRepoVisibilityPrivate,
		WebhookPullRequestReopenedPullRequest0HeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestReopenedPullRequest0HeadUserType string

const (
	WebhookPullRequestReopenedPullRequest0HeadUserTypeBot WebhookPullRequestReopenedPullRequest0HeadUserType = "Bot"
	WebhookPullRequestReopenedPullRequest0HeadUserTypeOrganization WebhookPullRequestReopenedPullRequest0HeadUserType = "Organization"
	WebhookPullRequestReopenedPullRequest0HeadUserTypeUser WebhookPullRequestReopenedPullRequest0HeadUserType = "User"
)

// PossibleWebhookPullRequestReopenedPullRequest0HeadUserTypeValues returns the possible values for the WebhookPullRequestReopenedPullRequest0HeadUserType const type.
func PossibleWebhookPullRequestReopenedPullRequest0HeadUserTypeValues() []WebhookPullRequestReopenedPullRequest0HeadUserType {
	return []WebhookPullRequestReopenedPullRequest0HeadUserType{
		WebhookPullRequestReopenedPullRequest0HeadUserTypeBot,
		WebhookPullRequestReopenedPullRequest0HeadUserTypeOrganization,
		WebhookPullRequestReopenedPullRequest0HeadUserTypeUser,
	}
}

type WebhookPullRequestReopenedPullRequest0MergedByType string

const (
	WebhookPullRequestReopenedPullRequest0MergedByTypeBot WebhookPullRequestReopenedPullRequest0MergedByType = "Bot"
	WebhookPullRequestReopenedPullRequest0MergedByTypeOrganization WebhookPullRequestReopenedPullRequest0MergedByType = "Organization"
	WebhookPullRequestReopenedPullRequest0MergedByTypeUser WebhookPullRequestReopenedPullRequest0MergedByType = "User"
)

// PossibleWebhookPullRequestReopenedPullRequest0MergedByTypeValues returns the possible values for the WebhookPullRequestReopenedPullRequest0MergedByType const type.
func PossibleWebhookPullRequestReopenedPullRequest0MergedByTypeValues() []WebhookPullRequestReopenedPullRequest0MergedByType {
	return []WebhookPullRequestReopenedPullRequest0MergedByType{
		WebhookPullRequestReopenedPullRequest0MergedByTypeBot,
		WebhookPullRequestReopenedPullRequest0MergedByTypeOrganization,
		WebhookPullRequestReopenedPullRequest0MergedByTypeUser,
	}
}

type WebhookPullRequestReopenedPullRequest0MilestoneCreatorType string

const (
	WebhookPullRequestReopenedPullRequest0MilestoneCreatorTypeBot WebhookPullRequestReopenedPullRequest0MilestoneCreatorType = "Bot"
	WebhookPullRequestReopenedPullRequest0MilestoneCreatorTypeOrganization WebhookPullRequestReopenedPullRequest0MilestoneCreatorType = "Organization"
	WebhookPullRequestReopenedPullRequest0MilestoneCreatorTypeUser WebhookPullRequestReopenedPullRequest0MilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestReopenedPullRequest0MilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestReopenedPullRequest0MilestoneCreatorType const type.
func PossibleWebhookPullRequestReopenedPullRequest0MilestoneCreatorTypeValues() []WebhookPullRequestReopenedPullRequest0MilestoneCreatorType {
	return []WebhookPullRequestReopenedPullRequest0MilestoneCreatorType{
		WebhookPullRequestReopenedPullRequest0MilestoneCreatorTypeBot,
		WebhookPullRequestReopenedPullRequest0MilestoneCreatorTypeOrganization,
		WebhookPullRequestReopenedPullRequest0MilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestReopenedPullRequest0MilestoneState - The state of the milestone.
type WebhookPullRequestReopenedPullRequest0MilestoneState string

const (
	WebhookPullRequestReopenedPullRequest0MilestoneStateClosed WebhookPullRequestReopenedPullRequest0MilestoneState = "closed"
	WebhookPullRequestReopenedPullRequest0MilestoneStateOpen WebhookPullRequestReopenedPullRequest0MilestoneState = "open"
)

// PossibleWebhookPullRequestReopenedPullRequest0MilestoneStateValues returns the possible values for the WebhookPullRequestReopenedPullRequest0MilestoneState const type.
func PossibleWebhookPullRequestReopenedPullRequest0MilestoneStateValues() []WebhookPullRequestReopenedPullRequest0MilestoneState {
	return []WebhookPullRequestReopenedPullRequest0MilestoneState{
		WebhookPullRequestReopenedPullRequest0MilestoneStateClosed,
		WebhookPullRequestReopenedPullRequest0MilestoneStateOpen,
	}
}

// WebhookPullRequestReopenedPullRequest0State - State of this Pull Request. Either open or closed.
type WebhookPullRequestReopenedPullRequest0State string

const (
	WebhookPullRequestReopenedPullRequest0StateClosed WebhookPullRequestReopenedPullRequest0State = "closed"
	WebhookPullRequestReopenedPullRequest0StateOpen WebhookPullRequestReopenedPullRequest0State = "open"
)

// PossibleWebhookPullRequestReopenedPullRequest0StateValues returns the possible values for the WebhookPullRequestReopenedPullRequest0State const type.
func PossibleWebhookPullRequestReopenedPullRequest0StateValues() []WebhookPullRequestReopenedPullRequest0State {
	return []WebhookPullRequestReopenedPullRequest0State{
		WebhookPullRequestReopenedPullRequest0StateClosed,
		WebhookPullRequestReopenedPullRequest0StateOpen,
	}
}

type WebhookPullRequestReopenedPullRequest0UserType string

const (
	WebhookPullRequestReopenedPullRequest0UserTypeBot WebhookPullRequestReopenedPullRequest0UserType = "Bot"
	WebhookPullRequestReopenedPullRequest0UserTypeMannequin WebhookPullRequestReopenedPullRequest0UserType = "Mannequin"
	WebhookPullRequestReopenedPullRequest0UserTypeOrganization WebhookPullRequestReopenedPullRequest0UserType = "Organization"
	WebhookPullRequestReopenedPullRequest0UserTypeUser WebhookPullRequestReopenedPullRequest0UserType = "User"
)

// PossibleWebhookPullRequestReopenedPullRequest0UserTypeValues returns the possible values for the WebhookPullRequestReopenedPullRequest0UserType const type.
func PossibleWebhookPullRequestReopenedPullRequest0UserTypeValues() []WebhookPullRequestReopenedPullRequest0UserType {
	return []WebhookPullRequestReopenedPullRequest0UserType{
		WebhookPullRequestReopenedPullRequest0UserTypeBot,
		WebhookPullRequestReopenedPullRequest0UserTypeMannequin,
		WebhookPullRequestReopenedPullRequest0UserTypeOrganization,
		WebhookPullRequestReopenedPullRequest0UserTypeUser,
	}
}

type WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessage string

const (
	WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessageBLANK WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessagePRBODY WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessagePRTITLE WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessageValues() []WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessage {
	return []WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessage{
		WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitMessagePRTITLE,
	}
}

type WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitTitle string

const (
	WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitTitlePRTITLE WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitTitleValues() []WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitTitle {
	return []WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitTitle{
		WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReopenedPullRequest1BaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessage{
		WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitMessagePRBODY,
	}
}

type WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitTitle{
		WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReopenedPullRequest1BaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessage string

const (
	WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessageBLANK WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessagePRBODY WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessagePRTITLE WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessageValues() []WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessage {
	return []WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessage{
		WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitMessagePRTITLE,
	}
}

type WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitTitle string

const (
	WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitTitlePRTITLE WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitTitleValues() []WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitTitle {
	return []WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitTitle{
		WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReopenedPullRequest1HeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessage{
		WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitMessagePRBODY,
	}
}

type WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitTitle{
		WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReopenedPullRequest1HeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReopenedPullRequest1State string

const (
	WebhookPullRequestReopenedPullRequest1StateClosed WebhookPullRequestReopenedPullRequest1State = "closed"
	WebhookPullRequestReopenedPullRequest1StateOpen WebhookPullRequestReopenedPullRequest1State = "open"
)

// PossibleWebhookPullRequestReopenedPullRequest1StateValues returns the possible values for the WebhookPullRequestReopenedPullRequest1State const type.
func PossibleWebhookPullRequestReopenedPullRequest1StateValues() []WebhookPullRequestReopenedPullRequest1State {
	return []WebhookPullRequestReopenedPullRequest1State{
		WebhookPullRequestReopenedPullRequest1StateClosed,
		WebhookPullRequestReopenedPullRequest1StateOpen,
	}
}

type WebhookPullRequestReopenedPullRequestOneOf0AssigneesItemType string

const (
	WebhookPullRequestReopenedPullRequestOneOf0AssigneesItemTypeBot WebhookPullRequestReopenedPullRequestOneOf0AssigneesItemType = "Bot"
	WebhookPullRequestReopenedPullRequestOneOf0AssigneesItemTypeOrganization WebhookPullRequestReopenedPullRequestOneOf0AssigneesItemType = "Organization"
	WebhookPullRequestReopenedPullRequestOneOf0AssigneesItemTypeUser WebhookPullRequestReopenedPullRequestOneOf0AssigneesItemType = "User"
)

// PossibleWebhookPullRequestReopenedPullRequestOneOf0AssigneesItemTypeValues returns the possible values for the WebhookPullRequestReopenedPullRequestOneOf0AssigneesItemType const type.
func PossibleWebhookPullRequestReopenedPullRequestOneOf0AssigneesItemTypeValues() []WebhookPullRequestReopenedPullRequestOneOf0AssigneesItemType {
	return []WebhookPullRequestReopenedPullRequestOneOf0AssigneesItemType{
		WebhookPullRequestReopenedPullRequestOneOf0AssigneesItemTypeBot,
		WebhookPullRequestReopenedPullRequestOneOf0AssigneesItemTypeOrganization,
		WebhookPullRequestReopenedPullRequestOneOf0AssigneesItemTypeUser,
	}
}

type WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacy string

const (
	WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacyClosed WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacyOpen WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacy = "open"
	WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacySecret WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacyValues() []WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacy {
	return []WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacy{
		WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacyClosed,
		WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacyOpen,
		WebhookPullRequestReopenedPullRequestOneOf0RequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestReviewCommentCreatedAction string

const (
	WebhookPullRequestReviewCommentCreatedActionCreated WebhookPullRequestReviewCommentCreatedAction = "created"
)

// PossibleWebhookPullRequestReviewCommentCreatedActionValues returns the possible values for the WebhookPullRequestReviewCommentCreatedAction const type.
func PossibleWebhookPullRequestReviewCommentCreatedActionValues() []WebhookPullRequestReviewCommentCreatedAction {
	return []WebhookPullRequestReviewCommentCreatedAction{
		WebhookPullRequestReviewCommentCreatedActionCreated,
	}
}

// WebhookPullRequestReviewCommentCreatedCommentAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewCommentCreatedCommentAuthorAssociation string

const (
	WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationCOLLABORATOR WebhookPullRequestReviewCommentCreatedCommentAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewCommentCreatedCommentAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewCommentCreatedCommentAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationFIRSTTIMER WebhookPullRequestReviewCommentCreatedCommentAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationMANNEQUIN WebhookPullRequestReviewCommentCreatedCommentAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationMEMBER WebhookPullRequestReviewCommentCreatedCommentAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationNONE WebhookPullRequestReviewCommentCreatedCommentAuthorAssociation = "NONE"
	WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationOWNER WebhookPullRequestReviewCommentCreatedCommentAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewCommentCreatedCommentAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewCommentCreatedCommentAuthorAssociation const type.
func PossibleWebhookPullRequestReviewCommentCreatedCommentAuthorAssociationValues() []WebhookPullRequestReviewCommentCreatedCommentAuthorAssociation {
	return []WebhookPullRequestReviewCommentCreatedCommentAuthorAssociation{
		WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationMEMBER,
		WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationNONE,
		WebhookPullRequestReviewCommentCreatedCommentAuthorAssociationOWNER,
	}
}

// WebhookPullRequestReviewCommentCreatedCommentSide - The side of the first line of the range for a multi-line comment.
type WebhookPullRequestReviewCommentCreatedCommentSide string

const (
	WebhookPullRequestReviewCommentCreatedCommentSideLEFT WebhookPullRequestReviewCommentCreatedCommentSide = "LEFT"
	WebhookPullRequestReviewCommentCreatedCommentSideRIGHT WebhookPullRequestReviewCommentCreatedCommentSide = "RIGHT"
)

// PossibleWebhookPullRequestReviewCommentCreatedCommentSideValues returns the possible values for the WebhookPullRequestReviewCommentCreatedCommentSide const type.
func PossibleWebhookPullRequestReviewCommentCreatedCommentSideValues() []WebhookPullRequestReviewCommentCreatedCommentSide {
	return []WebhookPullRequestReviewCommentCreatedCommentSide{
		WebhookPullRequestReviewCommentCreatedCommentSideLEFT,
		WebhookPullRequestReviewCommentCreatedCommentSideRIGHT,
	}
}

// WebhookPullRequestReviewCommentCreatedCommentStartSide - The side of the first line of the range for a multi-line comment.
type WebhookPullRequestReviewCommentCreatedCommentStartSide string

const (
	WebhookPullRequestReviewCommentCreatedCommentStartSideLEFT WebhookPullRequestReviewCommentCreatedCommentStartSide = "LEFT"
	WebhookPullRequestReviewCommentCreatedCommentStartSideNull WebhookPullRequestReviewCommentCreatedCommentStartSide = "null"
	WebhookPullRequestReviewCommentCreatedCommentStartSideRIGHT WebhookPullRequestReviewCommentCreatedCommentStartSide = "RIGHT"
)

// PossibleWebhookPullRequestReviewCommentCreatedCommentStartSideValues returns the possible values for the WebhookPullRequestReviewCommentCreatedCommentStartSide const type.
func PossibleWebhookPullRequestReviewCommentCreatedCommentStartSideValues() []WebhookPullRequestReviewCommentCreatedCommentStartSide {
	return []WebhookPullRequestReviewCommentCreatedCommentStartSide{
		WebhookPullRequestReviewCommentCreatedCommentStartSideLEFT,
		WebhookPullRequestReviewCommentCreatedCommentStartSideNull,
		WebhookPullRequestReviewCommentCreatedCommentStartSideRIGHT,
	}
}

type WebhookPullRequestReviewCommentCreatedCommentUserType string

const (
	WebhookPullRequestReviewCommentCreatedCommentUserTypeBot WebhookPullRequestReviewCommentCreatedCommentUserType = "Bot"
	WebhookPullRequestReviewCommentCreatedCommentUserTypeOrganization WebhookPullRequestReviewCommentCreatedCommentUserType = "Organization"
	WebhookPullRequestReviewCommentCreatedCommentUserTypeUser WebhookPullRequestReviewCommentCreatedCommentUserType = "User"
)

// PossibleWebhookPullRequestReviewCommentCreatedCommentUserTypeValues returns the possible values for the WebhookPullRequestReviewCommentCreatedCommentUserType const type.
func PossibleWebhookPullRequestReviewCommentCreatedCommentUserTypeValues() []WebhookPullRequestReviewCommentCreatedCommentUserType {
	return []WebhookPullRequestReviewCommentCreatedCommentUserType{
		WebhookPullRequestReviewCommentCreatedCommentUserTypeBot,
		WebhookPullRequestReviewCommentCreatedCommentUserTypeOrganization,
		WebhookPullRequestReviewCommentCreatedCommentUserTypeUser,
	}
}

type WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReasonNull WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason = "null"
	WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReasonOffTopic WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReasonResolved WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReasonSpam WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason = "spam"
	WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReasonTooHeated WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestActiveLockReasonValues() []WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason {
	return []WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReason{
		WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReasonNull,
		WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReasonResolved,
		WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReasonSpam,
		WebhookPullRequestReviewCommentCreatedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestReviewCommentCreatedPullRequestAssigneeType string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestAssigneeTypeBot WebhookPullRequestReviewCommentCreatedPullRequestAssigneeType = "Bot"
	WebhookPullRequestReviewCommentCreatedPullRequestAssigneeTypeMannequin WebhookPullRequestReviewCommentCreatedPullRequestAssigneeType = "Mannequin"
	WebhookPullRequestReviewCommentCreatedPullRequestAssigneeTypeOrganization WebhookPullRequestReviewCommentCreatedPullRequestAssigneeType = "Organization"
	WebhookPullRequestReviewCommentCreatedPullRequestAssigneeTypeUser WebhookPullRequestReviewCommentCreatedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestAssigneeTypeValues() []WebhookPullRequestReviewCommentCreatedPullRequestAssigneeType {
	return []WebhookPullRequestReviewCommentCreatedPullRequestAssigneeType{
		WebhookPullRequestReviewCommentCreatedPullRequestAssigneeTypeBot,
		WebhookPullRequestReviewCommentCreatedPullRequestAssigneeTypeMannequin,
		WebhookPullRequestReviewCommentCreatedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestReviewCommentCreatedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemType string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemTypeBot WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemTypeMannequin WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemType = "Mannequin"
	WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemTypeOrganization WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemTypeUser WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemTypeValues() []WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemType {
	return []WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemType{
		WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemTypeMannequin,
		WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestReviewCommentCreatedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationMEMBER WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationNONE WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationOWNER WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationValues() []WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation {
	return []WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociation{
		WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationNONE,
		WebhookPullRequestReviewCommentCreatedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethodMerge WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethodRebase WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethodSquash WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethodValues() []WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethod {
	return []WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethod{
		WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestReviewCommentCreatedPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerType{
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge
// commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge
// commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibilityInternal WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibilityPublic WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibility{
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestReviewCommentCreatedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewCommentCreatedPullRequestBaseUserType string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestBaseUserTypeBot WebhookPullRequestReviewCommentCreatedPullRequestBaseUserType = "Bot"
	WebhookPullRequestReviewCommentCreatedPullRequestBaseUserTypeOrganization WebhookPullRequestReviewCommentCreatedPullRequestBaseUserType = "Organization"
	WebhookPullRequestReviewCommentCreatedPullRequestBaseUserTypeUser WebhookPullRequestReviewCommentCreatedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestBaseUserTypeValues() []WebhookPullRequestReviewCommentCreatedPullRequestBaseUserType {
	return []WebhookPullRequestReviewCommentCreatedPullRequestBaseUserType{
		WebhookPullRequestReviewCommentCreatedPullRequestBaseUserTypeBot,
		WebhookPullRequestReviewCommentCreatedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestReviewCommentCreatedPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerType{
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge
// commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge
// commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibilityInternal WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibilityPublic WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibility{
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestReviewCommentCreatedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewCommentCreatedPullRequestHeadUserType string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestHeadUserTypeBot WebhookPullRequestReviewCommentCreatedPullRequestHeadUserType = "Bot"
	WebhookPullRequestReviewCommentCreatedPullRequestHeadUserTypeOrganization WebhookPullRequestReviewCommentCreatedPullRequestHeadUserType = "Organization"
	WebhookPullRequestReviewCommentCreatedPullRequestHeadUserTypeUser WebhookPullRequestReviewCommentCreatedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestHeadUserTypeValues() []WebhookPullRequestReviewCommentCreatedPullRequestHeadUserType {
	return []WebhookPullRequestReviewCommentCreatedPullRequestHeadUserType{
		WebhookPullRequestReviewCommentCreatedPullRequestHeadUserTypeBot,
		WebhookPullRequestReviewCommentCreatedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestReviewCommentCreatedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorTypeBot WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorTypeMannequin WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorTypeUser WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorType{
		WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestReviewCommentCreatedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestReviewCommentCreatedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestReviewCommentCreatedPullRequestMilestoneState string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestMilestoneStateClosed WebhookPullRequestReviewCommentCreatedPullRequestMilestoneState = "closed"
	WebhookPullRequestReviewCommentCreatedPullRequestMilestoneStateOpen WebhookPullRequestReviewCommentCreatedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestMilestoneStateValues() []WebhookPullRequestReviewCommentCreatedPullRequestMilestoneState {
	return []WebhookPullRequestReviewCommentCreatedPullRequestMilestoneState{
		WebhookPullRequestReviewCommentCreatedPullRequestMilestoneStateClosed,
		WebhookPullRequestReviewCommentCreatedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestReviewCommentCreatedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestReviewCommentCreatedPullRequestState string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestStateClosed WebhookPullRequestReviewCommentCreatedPullRequestState = "closed"
	WebhookPullRequestReviewCommentCreatedPullRequestStateOpen WebhookPullRequestReviewCommentCreatedPullRequestState = "open"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestStateValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestState const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestStateValues() []WebhookPullRequestReviewCommentCreatedPullRequestState {
	return []WebhookPullRequestReviewCommentCreatedPullRequestState{
		WebhookPullRequestReviewCommentCreatedPullRequestStateClosed,
		WebhookPullRequestReviewCommentCreatedPullRequestStateOpen,
	}
}

type WebhookPullRequestReviewCommentCreatedPullRequestUserType string

const (
	WebhookPullRequestReviewCommentCreatedPullRequestUserTypeBot WebhookPullRequestReviewCommentCreatedPullRequestUserType = "Bot"
	WebhookPullRequestReviewCommentCreatedPullRequestUserTypeMannequin WebhookPullRequestReviewCommentCreatedPullRequestUserType = "Mannequin"
	WebhookPullRequestReviewCommentCreatedPullRequestUserTypeOrganization WebhookPullRequestReviewCommentCreatedPullRequestUserType = "Organization"
	WebhookPullRequestReviewCommentCreatedPullRequestUserTypeUser WebhookPullRequestReviewCommentCreatedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestReviewCommentCreatedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestReviewCommentCreatedPullRequestUserType const type.
func PossibleWebhookPullRequestReviewCommentCreatedPullRequestUserTypeValues() []WebhookPullRequestReviewCommentCreatedPullRequestUserType {
	return []WebhookPullRequestReviewCommentCreatedPullRequestUserType{
		WebhookPullRequestReviewCommentCreatedPullRequestUserTypeBot,
		WebhookPullRequestReviewCommentCreatedPullRequestUserTypeMannequin,
		WebhookPullRequestReviewCommentCreatedPullRequestUserTypeOrganization,
		WebhookPullRequestReviewCommentCreatedPullRequestUserTypeUser,
	}
}

type WebhookPullRequestReviewCommentDeletedAction string

const (
	WebhookPullRequestReviewCommentDeletedActionDeleted WebhookPullRequestReviewCommentDeletedAction = "deleted"
)

// PossibleWebhookPullRequestReviewCommentDeletedActionValues returns the possible values for the WebhookPullRequestReviewCommentDeletedAction const type.
func PossibleWebhookPullRequestReviewCommentDeletedActionValues() []WebhookPullRequestReviewCommentDeletedAction {
	return []WebhookPullRequestReviewCommentDeletedAction{
		WebhookPullRequestReviewCommentDeletedActionDeleted,
	}
}

// WebhookPullRequestReviewCommentDeletedCommentAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewCommentDeletedCommentAuthorAssociation string

const (
	WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationCOLLABORATOR WebhookPullRequestReviewCommentDeletedCommentAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewCommentDeletedCommentAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewCommentDeletedCommentAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationFIRSTTIMER WebhookPullRequestReviewCommentDeletedCommentAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationMANNEQUIN WebhookPullRequestReviewCommentDeletedCommentAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationMEMBER WebhookPullRequestReviewCommentDeletedCommentAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationNONE WebhookPullRequestReviewCommentDeletedCommentAuthorAssociation = "NONE"
	WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationOWNER WebhookPullRequestReviewCommentDeletedCommentAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewCommentDeletedCommentAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewCommentDeletedCommentAuthorAssociation const type.
func PossibleWebhookPullRequestReviewCommentDeletedCommentAuthorAssociationValues() []WebhookPullRequestReviewCommentDeletedCommentAuthorAssociation {
	return []WebhookPullRequestReviewCommentDeletedCommentAuthorAssociation{
		WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationMEMBER,
		WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationNONE,
		WebhookPullRequestReviewCommentDeletedCommentAuthorAssociationOWNER,
	}
}

// WebhookPullRequestReviewCommentDeletedCommentSide - The side of the first line of the range for a multi-line comment.
type WebhookPullRequestReviewCommentDeletedCommentSide string

const (
	WebhookPullRequestReviewCommentDeletedCommentSideLEFT WebhookPullRequestReviewCommentDeletedCommentSide = "LEFT"
	WebhookPullRequestReviewCommentDeletedCommentSideRIGHT WebhookPullRequestReviewCommentDeletedCommentSide = "RIGHT"
)

// PossibleWebhookPullRequestReviewCommentDeletedCommentSideValues returns the possible values for the WebhookPullRequestReviewCommentDeletedCommentSide const type.
func PossibleWebhookPullRequestReviewCommentDeletedCommentSideValues() []WebhookPullRequestReviewCommentDeletedCommentSide {
	return []WebhookPullRequestReviewCommentDeletedCommentSide{
		WebhookPullRequestReviewCommentDeletedCommentSideLEFT,
		WebhookPullRequestReviewCommentDeletedCommentSideRIGHT,
	}
}

// WebhookPullRequestReviewCommentDeletedCommentStartSide - The side of the first line of the range for a multi-line comment.
type WebhookPullRequestReviewCommentDeletedCommentStartSide string

const (
	WebhookPullRequestReviewCommentDeletedCommentStartSideLEFT WebhookPullRequestReviewCommentDeletedCommentStartSide = "LEFT"
	WebhookPullRequestReviewCommentDeletedCommentStartSideNull WebhookPullRequestReviewCommentDeletedCommentStartSide = "null"
	WebhookPullRequestReviewCommentDeletedCommentStartSideRIGHT WebhookPullRequestReviewCommentDeletedCommentStartSide = "RIGHT"
)

// PossibleWebhookPullRequestReviewCommentDeletedCommentStartSideValues returns the possible values for the WebhookPullRequestReviewCommentDeletedCommentStartSide const type.
func PossibleWebhookPullRequestReviewCommentDeletedCommentStartSideValues() []WebhookPullRequestReviewCommentDeletedCommentStartSide {
	return []WebhookPullRequestReviewCommentDeletedCommentStartSide{
		WebhookPullRequestReviewCommentDeletedCommentStartSideLEFT,
		WebhookPullRequestReviewCommentDeletedCommentStartSideNull,
		WebhookPullRequestReviewCommentDeletedCommentStartSideRIGHT,
	}
}

type WebhookPullRequestReviewCommentDeletedCommentUserType string

const (
	WebhookPullRequestReviewCommentDeletedCommentUserTypeBot WebhookPullRequestReviewCommentDeletedCommentUserType = "Bot"
	WebhookPullRequestReviewCommentDeletedCommentUserTypeOrganization WebhookPullRequestReviewCommentDeletedCommentUserType = "Organization"
	WebhookPullRequestReviewCommentDeletedCommentUserTypeUser WebhookPullRequestReviewCommentDeletedCommentUserType = "User"
)

// PossibleWebhookPullRequestReviewCommentDeletedCommentUserTypeValues returns the possible values for the WebhookPullRequestReviewCommentDeletedCommentUserType const type.
func PossibleWebhookPullRequestReviewCommentDeletedCommentUserTypeValues() []WebhookPullRequestReviewCommentDeletedCommentUserType {
	return []WebhookPullRequestReviewCommentDeletedCommentUserType{
		WebhookPullRequestReviewCommentDeletedCommentUserTypeBot,
		WebhookPullRequestReviewCommentDeletedCommentUserTypeOrganization,
		WebhookPullRequestReviewCommentDeletedCommentUserTypeUser,
	}
}

type WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReasonNull WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason = "null"
	WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReasonOffTopic WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReasonResolved WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReasonSpam WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason = "spam"
	WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReasonTooHeated WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestActiveLockReasonValues() []WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason {
	return []WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReason{
		WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReasonNull,
		WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReasonResolved,
		WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReasonSpam,
		WebhookPullRequestReviewCommentDeletedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestReviewCommentDeletedPullRequestAssigneeType string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestAssigneeTypeBot WebhookPullRequestReviewCommentDeletedPullRequestAssigneeType = "Bot"
	WebhookPullRequestReviewCommentDeletedPullRequestAssigneeTypeOrganization WebhookPullRequestReviewCommentDeletedPullRequestAssigneeType = "Organization"
	WebhookPullRequestReviewCommentDeletedPullRequestAssigneeTypeUser WebhookPullRequestReviewCommentDeletedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestAssigneeTypeValues() []WebhookPullRequestReviewCommentDeletedPullRequestAssigneeType {
	return []WebhookPullRequestReviewCommentDeletedPullRequestAssigneeType{
		WebhookPullRequestReviewCommentDeletedPullRequestAssigneeTypeBot,
		WebhookPullRequestReviewCommentDeletedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestReviewCommentDeletedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemType string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemTypeBot WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemTypeOrganization WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemTypeUser WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemTypeValues() []WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemType {
	return []WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemType{
		WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestReviewCommentDeletedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationMEMBER WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationNONE WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationOWNER WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationValues() []WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation {
	return []WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociation{
		WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationNONE,
		WebhookPullRequestReviewCommentDeletedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethodMerge WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethodRebase WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethodSquash WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethodValues() []WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethod {
	return []WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethod{
		WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestReviewCommentDeletedPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerType{
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge
// commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge
// commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibilityInternal WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibilityPublic WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibility{
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestReviewCommentDeletedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewCommentDeletedPullRequestBaseUserType string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestBaseUserTypeBot WebhookPullRequestReviewCommentDeletedPullRequestBaseUserType = "Bot"
	WebhookPullRequestReviewCommentDeletedPullRequestBaseUserTypeOrganization WebhookPullRequestReviewCommentDeletedPullRequestBaseUserType = "Organization"
	WebhookPullRequestReviewCommentDeletedPullRequestBaseUserTypeUser WebhookPullRequestReviewCommentDeletedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestBaseUserTypeValues() []WebhookPullRequestReviewCommentDeletedPullRequestBaseUserType {
	return []WebhookPullRequestReviewCommentDeletedPullRequestBaseUserType{
		WebhookPullRequestReviewCommentDeletedPullRequestBaseUserTypeBot,
		WebhookPullRequestReviewCommentDeletedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestReviewCommentDeletedPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerType{
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge
// commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge
// commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibilityInternal WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibilityPublic WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibility{
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestReviewCommentDeletedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewCommentDeletedPullRequestHeadUserType string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestHeadUserTypeBot WebhookPullRequestReviewCommentDeletedPullRequestHeadUserType = "Bot"
	WebhookPullRequestReviewCommentDeletedPullRequestHeadUserTypeOrganization WebhookPullRequestReviewCommentDeletedPullRequestHeadUserType = "Organization"
	WebhookPullRequestReviewCommentDeletedPullRequestHeadUserTypeUser WebhookPullRequestReviewCommentDeletedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestHeadUserTypeValues() []WebhookPullRequestReviewCommentDeletedPullRequestHeadUserType {
	return []WebhookPullRequestReviewCommentDeletedPullRequestHeadUserType{
		WebhookPullRequestReviewCommentDeletedPullRequestHeadUserTypeBot,
		WebhookPullRequestReviewCommentDeletedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestReviewCommentDeletedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorTypeBot WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorTypeUser WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorType{
		WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestReviewCommentDeletedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestReviewCommentDeletedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestReviewCommentDeletedPullRequestMilestoneState string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestMilestoneStateClosed WebhookPullRequestReviewCommentDeletedPullRequestMilestoneState = "closed"
	WebhookPullRequestReviewCommentDeletedPullRequestMilestoneStateOpen WebhookPullRequestReviewCommentDeletedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestMilestoneStateValues() []WebhookPullRequestReviewCommentDeletedPullRequestMilestoneState {
	return []WebhookPullRequestReviewCommentDeletedPullRequestMilestoneState{
		WebhookPullRequestReviewCommentDeletedPullRequestMilestoneStateClosed,
		WebhookPullRequestReviewCommentDeletedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestReviewCommentDeletedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestReviewCommentDeletedPullRequestState string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestStateClosed WebhookPullRequestReviewCommentDeletedPullRequestState = "closed"
	WebhookPullRequestReviewCommentDeletedPullRequestStateOpen WebhookPullRequestReviewCommentDeletedPullRequestState = "open"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestStateValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestState const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestStateValues() []WebhookPullRequestReviewCommentDeletedPullRequestState {
	return []WebhookPullRequestReviewCommentDeletedPullRequestState{
		WebhookPullRequestReviewCommentDeletedPullRequestStateClosed,
		WebhookPullRequestReviewCommentDeletedPullRequestStateOpen,
	}
}

type WebhookPullRequestReviewCommentDeletedPullRequestUserType string

const (
	WebhookPullRequestReviewCommentDeletedPullRequestUserTypeBot WebhookPullRequestReviewCommentDeletedPullRequestUserType = "Bot"
	WebhookPullRequestReviewCommentDeletedPullRequestUserTypeMannequin WebhookPullRequestReviewCommentDeletedPullRequestUserType = "Mannequin"
	WebhookPullRequestReviewCommentDeletedPullRequestUserTypeOrganization WebhookPullRequestReviewCommentDeletedPullRequestUserType = "Organization"
	WebhookPullRequestReviewCommentDeletedPullRequestUserTypeUser WebhookPullRequestReviewCommentDeletedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestReviewCommentDeletedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestReviewCommentDeletedPullRequestUserType const type.
func PossibleWebhookPullRequestReviewCommentDeletedPullRequestUserTypeValues() []WebhookPullRequestReviewCommentDeletedPullRequestUserType {
	return []WebhookPullRequestReviewCommentDeletedPullRequestUserType{
		WebhookPullRequestReviewCommentDeletedPullRequestUserTypeBot,
		WebhookPullRequestReviewCommentDeletedPullRequestUserTypeMannequin,
		WebhookPullRequestReviewCommentDeletedPullRequestUserTypeOrganization,
		WebhookPullRequestReviewCommentDeletedPullRequestUserTypeUser,
	}
}

type WebhookPullRequestReviewCommentEditedAction string

const (
	WebhookPullRequestReviewCommentEditedActionEdited WebhookPullRequestReviewCommentEditedAction = "edited"
)

// PossibleWebhookPullRequestReviewCommentEditedActionValues returns the possible values for the WebhookPullRequestReviewCommentEditedAction const type.
func PossibleWebhookPullRequestReviewCommentEditedActionValues() []WebhookPullRequestReviewCommentEditedAction {
	return []WebhookPullRequestReviewCommentEditedAction{
		WebhookPullRequestReviewCommentEditedActionEdited,
	}
}

// WebhookPullRequestReviewCommentEditedCommentAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewCommentEditedCommentAuthorAssociation string

const (
	WebhookPullRequestReviewCommentEditedCommentAuthorAssociationCOLLABORATOR WebhookPullRequestReviewCommentEditedCommentAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewCommentEditedCommentAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewCommentEditedCommentAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewCommentEditedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewCommentEditedCommentAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewCommentEditedCommentAuthorAssociationFIRSTTIMER WebhookPullRequestReviewCommentEditedCommentAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewCommentEditedCommentAuthorAssociationMANNEQUIN WebhookPullRequestReviewCommentEditedCommentAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewCommentEditedCommentAuthorAssociationMEMBER WebhookPullRequestReviewCommentEditedCommentAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewCommentEditedCommentAuthorAssociationNONE WebhookPullRequestReviewCommentEditedCommentAuthorAssociation = "NONE"
	WebhookPullRequestReviewCommentEditedCommentAuthorAssociationOWNER WebhookPullRequestReviewCommentEditedCommentAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewCommentEditedCommentAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewCommentEditedCommentAuthorAssociation const type.
func PossibleWebhookPullRequestReviewCommentEditedCommentAuthorAssociationValues() []WebhookPullRequestReviewCommentEditedCommentAuthorAssociation {
	return []WebhookPullRequestReviewCommentEditedCommentAuthorAssociation{
		WebhookPullRequestReviewCommentEditedCommentAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewCommentEditedCommentAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewCommentEditedCommentAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewCommentEditedCommentAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewCommentEditedCommentAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewCommentEditedCommentAuthorAssociationMEMBER,
		WebhookPullRequestReviewCommentEditedCommentAuthorAssociationNONE,
		WebhookPullRequestReviewCommentEditedCommentAuthorAssociationOWNER,
	}
}

// WebhookPullRequestReviewCommentEditedCommentSide - The side of the first line of the range for a multi-line comment.
type WebhookPullRequestReviewCommentEditedCommentSide string

const (
	WebhookPullRequestReviewCommentEditedCommentSideLEFT WebhookPullRequestReviewCommentEditedCommentSide = "LEFT"
	WebhookPullRequestReviewCommentEditedCommentSideRIGHT WebhookPullRequestReviewCommentEditedCommentSide = "RIGHT"
)

// PossibleWebhookPullRequestReviewCommentEditedCommentSideValues returns the possible values for the WebhookPullRequestReviewCommentEditedCommentSide const type.
func PossibleWebhookPullRequestReviewCommentEditedCommentSideValues() []WebhookPullRequestReviewCommentEditedCommentSide {
	return []WebhookPullRequestReviewCommentEditedCommentSide{
		WebhookPullRequestReviewCommentEditedCommentSideLEFT,
		WebhookPullRequestReviewCommentEditedCommentSideRIGHT,
	}
}

// WebhookPullRequestReviewCommentEditedCommentStartSide - The side of the first line of the range for a multi-line comment.
type WebhookPullRequestReviewCommentEditedCommentStartSide string

const (
	WebhookPullRequestReviewCommentEditedCommentStartSideLEFT WebhookPullRequestReviewCommentEditedCommentStartSide = "LEFT"
	WebhookPullRequestReviewCommentEditedCommentStartSideNull WebhookPullRequestReviewCommentEditedCommentStartSide = "null"
	WebhookPullRequestReviewCommentEditedCommentStartSideRIGHT WebhookPullRequestReviewCommentEditedCommentStartSide = "RIGHT"
)

// PossibleWebhookPullRequestReviewCommentEditedCommentStartSideValues returns the possible values for the WebhookPullRequestReviewCommentEditedCommentStartSide const type.
func PossibleWebhookPullRequestReviewCommentEditedCommentStartSideValues() []WebhookPullRequestReviewCommentEditedCommentStartSide {
	return []WebhookPullRequestReviewCommentEditedCommentStartSide{
		WebhookPullRequestReviewCommentEditedCommentStartSideLEFT,
		WebhookPullRequestReviewCommentEditedCommentStartSideNull,
		WebhookPullRequestReviewCommentEditedCommentStartSideRIGHT,
	}
}

type WebhookPullRequestReviewCommentEditedCommentUserType string

const (
	WebhookPullRequestReviewCommentEditedCommentUserTypeBot WebhookPullRequestReviewCommentEditedCommentUserType = "Bot"
	WebhookPullRequestReviewCommentEditedCommentUserTypeOrganization WebhookPullRequestReviewCommentEditedCommentUserType = "Organization"
	WebhookPullRequestReviewCommentEditedCommentUserTypeUser WebhookPullRequestReviewCommentEditedCommentUserType = "User"
)

// PossibleWebhookPullRequestReviewCommentEditedCommentUserTypeValues returns the possible values for the WebhookPullRequestReviewCommentEditedCommentUserType const type.
func PossibleWebhookPullRequestReviewCommentEditedCommentUserTypeValues() []WebhookPullRequestReviewCommentEditedCommentUserType {
	return []WebhookPullRequestReviewCommentEditedCommentUserType{
		WebhookPullRequestReviewCommentEditedCommentUserTypeBot,
		WebhookPullRequestReviewCommentEditedCommentUserTypeOrganization,
		WebhookPullRequestReviewCommentEditedCommentUserTypeUser,
	}
}

type WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason string

const (
	WebhookPullRequestReviewCommentEditedPullRequestActiveLockReasonNull WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason = "null"
	WebhookPullRequestReviewCommentEditedPullRequestActiveLockReasonOffTopic WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestReviewCommentEditedPullRequestActiveLockReasonResolved WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestReviewCommentEditedPullRequestActiveLockReasonSpam WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason = "spam"
	WebhookPullRequestReviewCommentEditedPullRequestActiveLockReasonTooHeated WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestActiveLockReasonValues() []WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason {
	return []WebhookPullRequestReviewCommentEditedPullRequestActiveLockReason{
		WebhookPullRequestReviewCommentEditedPullRequestActiveLockReasonNull,
		WebhookPullRequestReviewCommentEditedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestReviewCommentEditedPullRequestActiveLockReasonResolved,
		WebhookPullRequestReviewCommentEditedPullRequestActiveLockReasonSpam,
		WebhookPullRequestReviewCommentEditedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestReviewCommentEditedPullRequestAssigneeType string

const (
	WebhookPullRequestReviewCommentEditedPullRequestAssigneeTypeBot WebhookPullRequestReviewCommentEditedPullRequestAssigneeType = "Bot"
	WebhookPullRequestReviewCommentEditedPullRequestAssigneeTypeOrganization WebhookPullRequestReviewCommentEditedPullRequestAssigneeType = "Organization"
	WebhookPullRequestReviewCommentEditedPullRequestAssigneeTypeUser WebhookPullRequestReviewCommentEditedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestAssigneeTypeValues() []WebhookPullRequestReviewCommentEditedPullRequestAssigneeType {
	return []WebhookPullRequestReviewCommentEditedPullRequestAssigneeType{
		WebhookPullRequestReviewCommentEditedPullRequestAssigneeTypeBot,
		WebhookPullRequestReviewCommentEditedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestReviewCommentEditedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestReviewCommentEditedPullRequestAssigneesItemType string

const (
	WebhookPullRequestReviewCommentEditedPullRequestAssigneesItemTypeBot WebhookPullRequestReviewCommentEditedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestReviewCommentEditedPullRequestAssigneesItemTypeOrganization WebhookPullRequestReviewCommentEditedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestReviewCommentEditedPullRequestAssigneesItemTypeUser WebhookPullRequestReviewCommentEditedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestAssigneesItemTypeValues() []WebhookPullRequestReviewCommentEditedPullRequestAssigneesItemType {
	return []WebhookPullRequestReviewCommentEditedPullRequestAssigneesItemType{
		WebhookPullRequestReviewCommentEditedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestReviewCommentEditedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestReviewCommentEditedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation string

const (
	WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationMEMBER WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationNONE WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationOWNER WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationValues() []WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation {
	return []WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociation{
		WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationNONE,
		WebhookPullRequestReviewCommentEditedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestReviewCommentEditedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethodMerge WebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethodRebase WebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethodSquash WebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethodValues() []WebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethod {
	return []WebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethod{
		WebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestReviewCommentEditedPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerType{
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge
// commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibilityInternal WebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibilityPublic WebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibility{
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestReviewCommentEditedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewCommentEditedPullRequestBaseUserType string

const (
	WebhookPullRequestReviewCommentEditedPullRequestBaseUserTypeBot WebhookPullRequestReviewCommentEditedPullRequestBaseUserType = "Bot"
	WebhookPullRequestReviewCommentEditedPullRequestBaseUserTypeOrganization WebhookPullRequestReviewCommentEditedPullRequestBaseUserType = "Organization"
	WebhookPullRequestReviewCommentEditedPullRequestBaseUserTypeUser WebhookPullRequestReviewCommentEditedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestBaseUserTypeValues() []WebhookPullRequestReviewCommentEditedPullRequestBaseUserType {
	return []WebhookPullRequestReviewCommentEditedPullRequestBaseUserType{
		WebhookPullRequestReviewCommentEditedPullRequestBaseUserTypeBot,
		WebhookPullRequestReviewCommentEditedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestReviewCommentEditedPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerType{
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge
// commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibilityInternal WebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibilityPublic WebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibility{
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestReviewCommentEditedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewCommentEditedPullRequestHeadUserType string

const (
	WebhookPullRequestReviewCommentEditedPullRequestHeadUserTypeBot WebhookPullRequestReviewCommentEditedPullRequestHeadUserType = "Bot"
	WebhookPullRequestReviewCommentEditedPullRequestHeadUserTypeOrganization WebhookPullRequestReviewCommentEditedPullRequestHeadUserType = "Organization"
	WebhookPullRequestReviewCommentEditedPullRequestHeadUserTypeUser WebhookPullRequestReviewCommentEditedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestHeadUserTypeValues() []WebhookPullRequestReviewCommentEditedPullRequestHeadUserType {
	return []WebhookPullRequestReviewCommentEditedPullRequestHeadUserType{
		WebhookPullRequestReviewCommentEditedPullRequestHeadUserTypeBot,
		WebhookPullRequestReviewCommentEditedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestReviewCommentEditedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorTypeBot WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorTypeMannequin WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorTypeUser WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorType{
		WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestReviewCommentEditedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestReviewCommentEditedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestReviewCommentEditedPullRequestMilestoneState string

const (
	WebhookPullRequestReviewCommentEditedPullRequestMilestoneStateClosed WebhookPullRequestReviewCommentEditedPullRequestMilestoneState = "closed"
	WebhookPullRequestReviewCommentEditedPullRequestMilestoneStateOpen WebhookPullRequestReviewCommentEditedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestMilestoneStateValues() []WebhookPullRequestReviewCommentEditedPullRequestMilestoneState {
	return []WebhookPullRequestReviewCommentEditedPullRequestMilestoneState{
		WebhookPullRequestReviewCommentEditedPullRequestMilestoneStateClosed,
		WebhookPullRequestReviewCommentEditedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestReviewCommentEditedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestReviewCommentEditedPullRequestState string

const (
	WebhookPullRequestReviewCommentEditedPullRequestStateClosed WebhookPullRequestReviewCommentEditedPullRequestState = "closed"
	WebhookPullRequestReviewCommentEditedPullRequestStateOpen WebhookPullRequestReviewCommentEditedPullRequestState = "open"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestStateValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestState const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestStateValues() []WebhookPullRequestReviewCommentEditedPullRequestState {
	return []WebhookPullRequestReviewCommentEditedPullRequestState{
		WebhookPullRequestReviewCommentEditedPullRequestStateClosed,
		WebhookPullRequestReviewCommentEditedPullRequestStateOpen,
	}
}

type WebhookPullRequestReviewCommentEditedPullRequestUserType string

const (
	WebhookPullRequestReviewCommentEditedPullRequestUserTypeBot WebhookPullRequestReviewCommentEditedPullRequestUserType = "Bot"
	WebhookPullRequestReviewCommentEditedPullRequestUserTypeMannequin WebhookPullRequestReviewCommentEditedPullRequestUserType = "Mannequin"
	WebhookPullRequestReviewCommentEditedPullRequestUserTypeOrganization WebhookPullRequestReviewCommentEditedPullRequestUserType = "Organization"
	WebhookPullRequestReviewCommentEditedPullRequestUserTypeUser WebhookPullRequestReviewCommentEditedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestReviewCommentEditedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestReviewCommentEditedPullRequestUserType const type.
func PossibleWebhookPullRequestReviewCommentEditedPullRequestUserTypeValues() []WebhookPullRequestReviewCommentEditedPullRequestUserType {
	return []WebhookPullRequestReviewCommentEditedPullRequestUserType{
		WebhookPullRequestReviewCommentEditedPullRequestUserTypeBot,
		WebhookPullRequestReviewCommentEditedPullRequestUserTypeMannequin,
		WebhookPullRequestReviewCommentEditedPullRequestUserTypeOrganization,
		WebhookPullRequestReviewCommentEditedPullRequestUserTypeUser,
	}
}

type WebhookPullRequestReviewDismissedAction string

const (
	WebhookPullRequestReviewDismissedActionDismissed WebhookPullRequestReviewDismissedAction = "dismissed"
)

// PossibleWebhookPullRequestReviewDismissedActionValues returns the possible values for the WebhookPullRequestReviewDismissedAction const type.
func PossibleWebhookPullRequestReviewDismissedActionValues() []WebhookPullRequestReviewDismissedAction {
	return []WebhookPullRequestReviewDismissedAction{
		WebhookPullRequestReviewDismissedActionDismissed,
	}
}

type WebhookPullRequestReviewDismissedPullRequestActiveLockReason string

const (
	WebhookPullRequestReviewDismissedPullRequestActiveLockReasonNull WebhookPullRequestReviewDismissedPullRequestActiveLockReason = "null"
	WebhookPullRequestReviewDismissedPullRequestActiveLockReasonOffTopic WebhookPullRequestReviewDismissedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestReviewDismissedPullRequestActiveLockReasonResolved WebhookPullRequestReviewDismissedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestReviewDismissedPullRequestActiveLockReasonSpam WebhookPullRequestReviewDismissedPullRequestActiveLockReason = "spam"
	WebhookPullRequestReviewDismissedPullRequestActiveLockReasonTooHeated WebhookPullRequestReviewDismissedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestActiveLockReasonValues() []WebhookPullRequestReviewDismissedPullRequestActiveLockReason {
	return []WebhookPullRequestReviewDismissedPullRequestActiveLockReason{
		WebhookPullRequestReviewDismissedPullRequestActiveLockReasonNull,
		WebhookPullRequestReviewDismissedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestReviewDismissedPullRequestActiveLockReasonResolved,
		WebhookPullRequestReviewDismissedPullRequestActiveLockReasonSpam,
		WebhookPullRequestReviewDismissedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestReviewDismissedPullRequestAssigneeType string

const (
	WebhookPullRequestReviewDismissedPullRequestAssigneeTypeBot WebhookPullRequestReviewDismissedPullRequestAssigneeType = "Bot"
	WebhookPullRequestReviewDismissedPullRequestAssigneeTypeMannequin WebhookPullRequestReviewDismissedPullRequestAssigneeType = "Mannequin"
	WebhookPullRequestReviewDismissedPullRequestAssigneeTypeOrganization WebhookPullRequestReviewDismissedPullRequestAssigneeType = "Organization"
	WebhookPullRequestReviewDismissedPullRequestAssigneeTypeUser WebhookPullRequestReviewDismissedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestAssigneeTypeValues() []WebhookPullRequestReviewDismissedPullRequestAssigneeType {
	return []WebhookPullRequestReviewDismissedPullRequestAssigneeType{
		WebhookPullRequestReviewDismissedPullRequestAssigneeTypeBot,
		WebhookPullRequestReviewDismissedPullRequestAssigneeTypeMannequin,
		WebhookPullRequestReviewDismissedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestReviewDismissedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestReviewDismissedPullRequestAssigneesItemType string

const (
	WebhookPullRequestReviewDismissedPullRequestAssigneesItemTypeBot WebhookPullRequestReviewDismissedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestReviewDismissedPullRequestAssigneesItemTypeMannequin WebhookPullRequestReviewDismissedPullRequestAssigneesItemType = "Mannequin"
	WebhookPullRequestReviewDismissedPullRequestAssigneesItemTypeOrganization WebhookPullRequestReviewDismissedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestReviewDismissedPullRequestAssigneesItemTypeUser WebhookPullRequestReviewDismissedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestAssigneesItemTypeValues() []WebhookPullRequestReviewDismissedPullRequestAssigneesItemType {
	return []WebhookPullRequestReviewDismissedPullRequestAssigneesItemType{
		WebhookPullRequestReviewDismissedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestReviewDismissedPullRequestAssigneesItemTypeMannequin,
		WebhookPullRequestReviewDismissedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestReviewDismissedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestReviewDismissedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewDismissedPullRequestAuthorAssociation string

const (
	WebhookPullRequestReviewDismissedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestReviewDismissedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewDismissedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewDismissedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewDismissedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewDismissedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewDismissedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestReviewDismissedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewDismissedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestReviewDismissedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewDismissedPullRequestAuthorAssociationMEMBER WebhookPullRequestReviewDismissedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewDismissedPullRequestAuthorAssociationNONE WebhookPullRequestReviewDismissedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestReviewDismissedPullRequestAuthorAssociationOWNER WebhookPullRequestReviewDismissedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestAuthorAssociationValues() []WebhookPullRequestReviewDismissedPullRequestAuthorAssociation {
	return []WebhookPullRequestReviewDismissedPullRequestAuthorAssociation{
		WebhookPullRequestReviewDismissedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewDismissedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewDismissedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewDismissedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewDismissedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewDismissedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestReviewDismissedPullRequestAuthorAssociationNONE,
		WebhookPullRequestReviewDismissedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestReviewDismissedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestReviewDismissedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestReviewDismissedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestReviewDismissedPullRequestAutoMergeMethodMerge WebhookPullRequestReviewDismissedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestReviewDismissedPullRequestAutoMergeMethodRebase WebhookPullRequestReviewDismissedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestReviewDismissedPullRequestAutoMergeMethodSquash WebhookPullRequestReviewDismissedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestAutoMergeMethodValues() []WebhookPullRequestReviewDismissedPullRequestAutoMergeMethod {
	return []WebhookPullRequestReviewDismissedPullRequestAutoMergeMethod{
		WebhookPullRequestReviewDismissedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestReviewDismissedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestReviewDismissedPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewDismissedPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerType{
		WebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestReviewDismissedPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewDismissedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewDismissedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestReviewDismissedPullRequestBaseRepoVisibilityInternal WebhookPullRequestReviewDismissedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestReviewDismissedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestReviewDismissedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestReviewDismissedPullRequestBaseRepoVisibilityPublic WebhookPullRequestReviewDismissedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestReviewDismissedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestReviewDismissedPullRequestBaseRepoVisibility{
		WebhookPullRequestReviewDismissedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestReviewDismissedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestReviewDismissedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewDismissedPullRequestBaseUserType string

const (
	WebhookPullRequestReviewDismissedPullRequestBaseUserTypeBot WebhookPullRequestReviewDismissedPullRequestBaseUserType = "Bot"
	WebhookPullRequestReviewDismissedPullRequestBaseUserTypeOrganization WebhookPullRequestReviewDismissedPullRequestBaseUserType = "Organization"
	WebhookPullRequestReviewDismissedPullRequestBaseUserTypeUser WebhookPullRequestReviewDismissedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestBaseUserTypeValues() []WebhookPullRequestReviewDismissedPullRequestBaseUserType {
	return []WebhookPullRequestReviewDismissedPullRequestBaseUserType{
		WebhookPullRequestReviewDismissedPullRequestBaseUserTypeBot,
		WebhookPullRequestReviewDismissedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestReviewDismissedPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewDismissedPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerType{
		WebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestReviewDismissedPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewDismissedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewDismissedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestReviewDismissedPullRequestHeadRepoVisibilityInternal WebhookPullRequestReviewDismissedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestReviewDismissedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestReviewDismissedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestReviewDismissedPullRequestHeadRepoVisibilityPublic WebhookPullRequestReviewDismissedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestReviewDismissedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestReviewDismissedPullRequestHeadRepoVisibility{
		WebhookPullRequestReviewDismissedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestReviewDismissedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestReviewDismissedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewDismissedPullRequestHeadUserType string

const (
	WebhookPullRequestReviewDismissedPullRequestHeadUserTypeBot WebhookPullRequestReviewDismissedPullRequestHeadUserType = "Bot"
	WebhookPullRequestReviewDismissedPullRequestHeadUserTypeOrganization WebhookPullRequestReviewDismissedPullRequestHeadUserType = "Organization"
	WebhookPullRequestReviewDismissedPullRequestHeadUserTypeUser WebhookPullRequestReviewDismissedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestHeadUserTypeValues() []WebhookPullRequestReviewDismissedPullRequestHeadUserType {
	return []WebhookPullRequestReviewDismissedPullRequestHeadUserType{
		WebhookPullRequestReviewDismissedPullRequestHeadUserTypeBot,
		WebhookPullRequestReviewDismissedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestReviewDismissedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestReviewDismissedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestReviewDismissedPullRequestMilestoneCreatorTypeBot WebhookPullRequestReviewDismissedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestReviewDismissedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestReviewDismissedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestReviewDismissedPullRequestMilestoneCreatorTypeUser WebhookPullRequestReviewDismissedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestReviewDismissedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestReviewDismissedPullRequestMilestoneCreatorType{
		WebhookPullRequestReviewDismissedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestReviewDismissedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestReviewDismissedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestReviewDismissedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestReviewDismissedPullRequestMilestoneState string

const (
	WebhookPullRequestReviewDismissedPullRequestMilestoneStateClosed WebhookPullRequestReviewDismissedPullRequestMilestoneState = "closed"
	WebhookPullRequestReviewDismissedPullRequestMilestoneStateOpen WebhookPullRequestReviewDismissedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestMilestoneStateValues() []WebhookPullRequestReviewDismissedPullRequestMilestoneState {
	return []WebhookPullRequestReviewDismissedPullRequestMilestoneState{
		WebhookPullRequestReviewDismissedPullRequestMilestoneStateClosed,
		WebhookPullRequestReviewDismissedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestReviewDismissedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestReviewDismissedPullRequestState string

const (
	WebhookPullRequestReviewDismissedPullRequestStateClosed WebhookPullRequestReviewDismissedPullRequestState = "closed"
	WebhookPullRequestReviewDismissedPullRequestStateOpen WebhookPullRequestReviewDismissedPullRequestState = "open"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestStateValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestState const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestStateValues() []WebhookPullRequestReviewDismissedPullRequestState {
	return []WebhookPullRequestReviewDismissedPullRequestState{
		WebhookPullRequestReviewDismissedPullRequestStateClosed,
		WebhookPullRequestReviewDismissedPullRequestStateOpen,
	}
}

type WebhookPullRequestReviewDismissedPullRequestUserType string

const (
	WebhookPullRequestReviewDismissedPullRequestUserTypeBot WebhookPullRequestReviewDismissedPullRequestUserType = "Bot"
	WebhookPullRequestReviewDismissedPullRequestUserTypeMannequin WebhookPullRequestReviewDismissedPullRequestUserType = "Mannequin"
	WebhookPullRequestReviewDismissedPullRequestUserTypeOrganization WebhookPullRequestReviewDismissedPullRequestUserType = "Organization"
	WebhookPullRequestReviewDismissedPullRequestUserTypeUser WebhookPullRequestReviewDismissedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestReviewDismissedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestReviewDismissedPullRequestUserType const type.
func PossibleWebhookPullRequestReviewDismissedPullRequestUserTypeValues() []WebhookPullRequestReviewDismissedPullRequestUserType {
	return []WebhookPullRequestReviewDismissedPullRequestUserType{
		WebhookPullRequestReviewDismissedPullRequestUserTypeBot,
		WebhookPullRequestReviewDismissedPullRequestUserTypeMannequin,
		WebhookPullRequestReviewDismissedPullRequestUserTypeOrganization,
		WebhookPullRequestReviewDismissedPullRequestUserTypeUser,
	}
}

// WebhookPullRequestReviewDismissedReviewAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewDismissedReviewAuthorAssociation string

const (
	WebhookPullRequestReviewDismissedReviewAuthorAssociationCOLLABORATOR WebhookPullRequestReviewDismissedReviewAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewDismissedReviewAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewDismissedReviewAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewDismissedReviewAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewDismissedReviewAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewDismissedReviewAuthorAssociationFIRSTTIMER WebhookPullRequestReviewDismissedReviewAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewDismissedReviewAuthorAssociationMANNEQUIN WebhookPullRequestReviewDismissedReviewAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewDismissedReviewAuthorAssociationMEMBER WebhookPullRequestReviewDismissedReviewAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewDismissedReviewAuthorAssociationNONE WebhookPullRequestReviewDismissedReviewAuthorAssociation = "NONE"
	WebhookPullRequestReviewDismissedReviewAuthorAssociationOWNER WebhookPullRequestReviewDismissedReviewAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewDismissedReviewAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewDismissedReviewAuthorAssociation const type.
func PossibleWebhookPullRequestReviewDismissedReviewAuthorAssociationValues() []WebhookPullRequestReviewDismissedReviewAuthorAssociation {
	return []WebhookPullRequestReviewDismissedReviewAuthorAssociation{
		WebhookPullRequestReviewDismissedReviewAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewDismissedReviewAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewDismissedReviewAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewDismissedReviewAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewDismissedReviewAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewDismissedReviewAuthorAssociationMEMBER,
		WebhookPullRequestReviewDismissedReviewAuthorAssociationNONE,
		WebhookPullRequestReviewDismissedReviewAuthorAssociationOWNER,
	}
}

type WebhookPullRequestReviewDismissedReviewState string

const (
	WebhookPullRequestReviewDismissedReviewStateApproved WebhookPullRequestReviewDismissedReviewState = "approved"
	WebhookPullRequestReviewDismissedReviewStateChangesRequested WebhookPullRequestReviewDismissedReviewState = "changes_requested"
	WebhookPullRequestReviewDismissedReviewStateDismissed WebhookPullRequestReviewDismissedReviewState = "dismissed"
)

// PossibleWebhookPullRequestReviewDismissedReviewStateValues returns the possible values for the WebhookPullRequestReviewDismissedReviewState const type.
func PossibleWebhookPullRequestReviewDismissedReviewStateValues() []WebhookPullRequestReviewDismissedReviewState {
	return []WebhookPullRequestReviewDismissedReviewState{
		WebhookPullRequestReviewDismissedReviewStateApproved,
		WebhookPullRequestReviewDismissedReviewStateChangesRequested,
		WebhookPullRequestReviewDismissedReviewStateDismissed,
	}
}

type WebhookPullRequestReviewDismissedReviewUserType string

const (
	WebhookPullRequestReviewDismissedReviewUserTypeBot WebhookPullRequestReviewDismissedReviewUserType = "Bot"
	WebhookPullRequestReviewDismissedReviewUserTypeMannequin WebhookPullRequestReviewDismissedReviewUserType = "Mannequin"
	WebhookPullRequestReviewDismissedReviewUserTypeOrganization WebhookPullRequestReviewDismissedReviewUserType = "Organization"
	WebhookPullRequestReviewDismissedReviewUserTypeUser WebhookPullRequestReviewDismissedReviewUserType = "User"
)

// PossibleWebhookPullRequestReviewDismissedReviewUserTypeValues returns the possible values for the WebhookPullRequestReviewDismissedReviewUserType const type.
func PossibleWebhookPullRequestReviewDismissedReviewUserTypeValues() []WebhookPullRequestReviewDismissedReviewUserType {
	return []WebhookPullRequestReviewDismissedReviewUserType{
		WebhookPullRequestReviewDismissedReviewUserTypeBot,
		WebhookPullRequestReviewDismissedReviewUserTypeMannequin,
		WebhookPullRequestReviewDismissedReviewUserTypeOrganization,
		WebhookPullRequestReviewDismissedReviewUserTypeUser,
	}
}

type WebhookPullRequestReviewEditedAction string

const (
	WebhookPullRequestReviewEditedActionEdited WebhookPullRequestReviewEditedAction = "edited"
)

// PossibleWebhookPullRequestReviewEditedActionValues returns the possible values for the WebhookPullRequestReviewEditedAction const type.
func PossibleWebhookPullRequestReviewEditedActionValues() []WebhookPullRequestReviewEditedAction {
	return []WebhookPullRequestReviewEditedAction{
		WebhookPullRequestReviewEditedActionEdited,
	}
}

type WebhookPullRequestReviewEditedPullRequestActiveLockReason string

const (
	WebhookPullRequestReviewEditedPullRequestActiveLockReasonNull WebhookPullRequestReviewEditedPullRequestActiveLockReason = "null"
	WebhookPullRequestReviewEditedPullRequestActiveLockReasonOffTopic WebhookPullRequestReviewEditedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestReviewEditedPullRequestActiveLockReasonResolved WebhookPullRequestReviewEditedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestReviewEditedPullRequestActiveLockReasonSpam WebhookPullRequestReviewEditedPullRequestActiveLockReason = "spam"
	WebhookPullRequestReviewEditedPullRequestActiveLockReasonTooHeated WebhookPullRequestReviewEditedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestReviewEditedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestReviewEditedPullRequestActiveLockReasonValues() []WebhookPullRequestReviewEditedPullRequestActiveLockReason {
	return []WebhookPullRequestReviewEditedPullRequestActiveLockReason{
		WebhookPullRequestReviewEditedPullRequestActiveLockReasonNull,
		WebhookPullRequestReviewEditedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestReviewEditedPullRequestActiveLockReasonResolved,
		WebhookPullRequestReviewEditedPullRequestActiveLockReasonSpam,
		WebhookPullRequestReviewEditedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestReviewEditedPullRequestAssigneeType string

const (
	WebhookPullRequestReviewEditedPullRequestAssigneeTypeBot WebhookPullRequestReviewEditedPullRequestAssigneeType = "Bot"
	WebhookPullRequestReviewEditedPullRequestAssigneeTypeMannequin WebhookPullRequestReviewEditedPullRequestAssigneeType = "Mannequin"
	WebhookPullRequestReviewEditedPullRequestAssigneeTypeOrganization WebhookPullRequestReviewEditedPullRequestAssigneeType = "Organization"
	WebhookPullRequestReviewEditedPullRequestAssigneeTypeUser WebhookPullRequestReviewEditedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestReviewEditedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestReviewEditedPullRequestAssigneeTypeValues() []WebhookPullRequestReviewEditedPullRequestAssigneeType {
	return []WebhookPullRequestReviewEditedPullRequestAssigneeType{
		WebhookPullRequestReviewEditedPullRequestAssigneeTypeBot,
		WebhookPullRequestReviewEditedPullRequestAssigneeTypeMannequin,
		WebhookPullRequestReviewEditedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestReviewEditedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestReviewEditedPullRequestAssigneesItemType string

const (
	WebhookPullRequestReviewEditedPullRequestAssigneesItemTypeBot WebhookPullRequestReviewEditedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestReviewEditedPullRequestAssigneesItemTypeMannequin WebhookPullRequestReviewEditedPullRequestAssigneesItemType = "Mannequin"
	WebhookPullRequestReviewEditedPullRequestAssigneesItemTypeOrganization WebhookPullRequestReviewEditedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestReviewEditedPullRequestAssigneesItemTypeUser WebhookPullRequestReviewEditedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestReviewEditedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestReviewEditedPullRequestAssigneesItemTypeValues() []WebhookPullRequestReviewEditedPullRequestAssigneesItemType {
	return []WebhookPullRequestReviewEditedPullRequestAssigneesItemType{
		WebhookPullRequestReviewEditedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestReviewEditedPullRequestAssigneesItemTypeMannequin,
		WebhookPullRequestReviewEditedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestReviewEditedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestReviewEditedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewEditedPullRequestAuthorAssociation string

const (
	WebhookPullRequestReviewEditedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestReviewEditedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewEditedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewEditedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewEditedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewEditedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewEditedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestReviewEditedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewEditedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestReviewEditedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewEditedPullRequestAuthorAssociationMEMBER WebhookPullRequestReviewEditedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewEditedPullRequestAuthorAssociationNONE WebhookPullRequestReviewEditedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestReviewEditedPullRequestAuthorAssociationOWNER WebhookPullRequestReviewEditedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewEditedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestReviewEditedPullRequestAuthorAssociationValues() []WebhookPullRequestReviewEditedPullRequestAuthorAssociation {
	return []WebhookPullRequestReviewEditedPullRequestAuthorAssociation{
		WebhookPullRequestReviewEditedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewEditedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewEditedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewEditedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewEditedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewEditedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestReviewEditedPullRequestAuthorAssociationNONE,
		WebhookPullRequestReviewEditedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestReviewEditedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestReviewEditedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestReviewEditedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestReviewEditedPullRequestAutoMergeMethodMerge WebhookPullRequestReviewEditedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestReviewEditedPullRequestAutoMergeMethodRebase WebhookPullRequestReviewEditedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestReviewEditedPullRequestAutoMergeMethodSquash WebhookPullRequestReviewEditedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestReviewEditedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestReviewEditedPullRequestAutoMergeMethodValues() []WebhookPullRequestReviewEditedPullRequestAutoMergeMethod {
	return []WebhookPullRequestReviewEditedPullRequestAutoMergeMethod{
		WebhookPullRequestReviewEditedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestReviewEditedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestReviewEditedPullRequestAutoMergeMethodSquash,
	}
}

type WebhookPullRequestReviewEditedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestReviewEditedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestReviewEditedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestReviewEditedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestReviewEditedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestReviewEditedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestReviewEditedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewEditedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestReviewEditedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestReviewEditedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestReviewEditedPullRequestBaseRepoOwnerType{
		WebhookPullRequestReviewEditedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestReviewEditedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestReviewEditedPullRequestBaseRepoOwnerTypeUser,
	}
}

type WebhookPullRequestReviewEditedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestReviewEditedPullRequestBaseRepoVisibilityInternal WebhookPullRequestReviewEditedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestReviewEditedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestReviewEditedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestReviewEditedPullRequestBaseRepoVisibilityPublic WebhookPullRequestReviewEditedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewEditedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestReviewEditedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestReviewEditedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestReviewEditedPullRequestBaseRepoVisibility{
		WebhookPullRequestReviewEditedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestReviewEditedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestReviewEditedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewEditedPullRequestBaseUserType string

const (
	WebhookPullRequestReviewEditedPullRequestBaseUserTypeBot WebhookPullRequestReviewEditedPullRequestBaseUserType = "Bot"
	WebhookPullRequestReviewEditedPullRequestBaseUserTypeOrganization WebhookPullRequestReviewEditedPullRequestBaseUserType = "Organization"
	WebhookPullRequestReviewEditedPullRequestBaseUserTypeUser WebhookPullRequestReviewEditedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestReviewEditedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestReviewEditedPullRequestBaseUserTypeValues() []WebhookPullRequestReviewEditedPullRequestBaseUserType {
	return []WebhookPullRequestReviewEditedPullRequestBaseUserType{
		WebhookPullRequestReviewEditedPullRequestBaseUserTypeBot,
		WebhookPullRequestReviewEditedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestReviewEditedPullRequestBaseUserTypeUser,
	}
}

type WebhookPullRequestReviewEditedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestReviewEditedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestReviewEditedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestReviewEditedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestReviewEditedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestReviewEditedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestReviewEditedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewEditedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestReviewEditedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestReviewEditedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestReviewEditedPullRequestHeadRepoOwnerType{
		WebhookPullRequestReviewEditedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestReviewEditedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestReviewEditedPullRequestHeadRepoOwnerTypeUser,
	}
}

type WebhookPullRequestReviewEditedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestReviewEditedPullRequestHeadRepoVisibilityInternal WebhookPullRequestReviewEditedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestReviewEditedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestReviewEditedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestReviewEditedPullRequestHeadRepoVisibilityPublic WebhookPullRequestReviewEditedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewEditedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestReviewEditedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestReviewEditedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestReviewEditedPullRequestHeadRepoVisibility{
		WebhookPullRequestReviewEditedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestReviewEditedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestReviewEditedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewEditedPullRequestHeadUserType string

const (
	WebhookPullRequestReviewEditedPullRequestHeadUserTypeBot WebhookPullRequestReviewEditedPullRequestHeadUserType = "Bot"
	WebhookPullRequestReviewEditedPullRequestHeadUserTypeOrganization WebhookPullRequestReviewEditedPullRequestHeadUserType = "Organization"
	WebhookPullRequestReviewEditedPullRequestHeadUserTypeUser WebhookPullRequestReviewEditedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestReviewEditedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestReviewEditedPullRequestHeadUserTypeValues() []WebhookPullRequestReviewEditedPullRequestHeadUserType {
	return []WebhookPullRequestReviewEditedPullRequestHeadUserType{
		WebhookPullRequestReviewEditedPullRequestHeadUserTypeBot,
		WebhookPullRequestReviewEditedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestReviewEditedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestReviewEditedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestReviewEditedPullRequestMilestoneCreatorTypeBot WebhookPullRequestReviewEditedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestReviewEditedPullRequestMilestoneCreatorTypeMannequin WebhookPullRequestReviewEditedPullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestReviewEditedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestReviewEditedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestReviewEditedPullRequestMilestoneCreatorTypeUser WebhookPullRequestReviewEditedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestReviewEditedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestReviewEditedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestReviewEditedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestReviewEditedPullRequestMilestoneCreatorType{
		WebhookPullRequestReviewEditedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestReviewEditedPullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestReviewEditedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestReviewEditedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestReviewEditedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestReviewEditedPullRequestMilestoneState string

const (
	WebhookPullRequestReviewEditedPullRequestMilestoneStateClosed WebhookPullRequestReviewEditedPullRequestMilestoneState = "closed"
	WebhookPullRequestReviewEditedPullRequestMilestoneStateOpen WebhookPullRequestReviewEditedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestReviewEditedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestReviewEditedPullRequestMilestoneStateValues() []WebhookPullRequestReviewEditedPullRequestMilestoneState {
	return []WebhookPullRequestReviewEditedPullRequestMilestoneState{
		WebhookPullRequestReviewEditedPullRequestMilestoneStateClosed,
		WebhookPullRequestReviewEditedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestReviewEditedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestReviewEditedPullRequestState string

const (
	WebhookPullRequestReviewEditedPullRequestStateClosed WebhookPullRequestReviewEditedPullRequestState = "closed"
	WebhookPullRequestReviewEditedPullRequestStateOpen WebhookPullRequestReviewEditedPullRequestState = "open"
)

// PossibleWebhookPullRequestReviewEditedPullRequestStateValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestState const type.
func PossibleWebhookPullRequestReviewEditedPullRequestStateValues() []WebhookPullRequestReviewEditedPullRequestState {
	return []WebhookPullRequestReviewEditedPullRequestState{
		WebhookPullRequestReviewEditedPullRequestStateClosed,
		WebhookPullRequestReviewEditedPullRequestStateOpen,
	}
}

type WebhookPullRequestReviewEditedPullRequestUserType string

const (
	WebhookPullRequestReviewEditedPullRequestUserTypeBot WebhookPullRequestReviewEditedPullRequestUserType = "Bot"
	WebhookPullRequestReviewEditedPullRequestUserTypeMannequin WebhookPullRequestReviewEditedPullRequestUserType = "Mannequin"
	WebhookPullRequestReviewEditedPullRequestUserTypeOrganization WebhookPullRequestReviewEditedPullRequestUserType = "Organization"
	WebhookPullRequestReviewEditedPullRequestUserTypeUser WebhookPullRequestReviewEditedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestReviewEditedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestReviewEditedPullRequestUserType const type.
func PossibleWebhookPullRequestReviewEditedPullRequestUserTypeValues() []WebhookPullRequestReviewEditedPullRequestUserType {
	return []WebhookPullRequestReviewEditedPullRequestUserType{
		WebhookPullRequestReviewEditedPullRequestUserTypeBot,
		WebhookPullRequestReviewEditedPullRequestUserTypeMannequin,
		WebhookPullRequestReviewEditedPullRequestUserTypeOrganization,
		WebhookPullRequestReviewEditedPullRequestUserTypeUser,
	}
}

// WebhookPullRequestReviewEditedReviewAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewEditedReviewAuthorAssociation string

const (
	WebhookPullRequestReviewEditedReviewAuthorAssociationCOLLABORATOR WebhookPullRequestReviewEditedReviewAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewEditedReviewAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewEditedReviewAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewEditedReviewAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewEditedReviewAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewEditedReviewAuthorAssociationFIRSTTIMER WebhookPullRequestReviewEditedReviewAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewEditedReviewAuthorAssociationMANNEQUIN WebhookPullRequestReviewEditedReviewAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewEditedReviewAuthorAssociationMEMBER WebhookPullRequestReviewEditedReviewAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewEditedReviewAuthorAssociationNONE WebhookPullRequestReviewEditedReviewAuthorAssociation = "NONE"
	WebhookPullRequestReviewEditedReviewAuthorAssociationOWNER WebhookPullRequestReviewEditedReviewAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewEditedReviewAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewEditedReviewAuthorAssociation const type.
func PossibleWebhookPullRequestReviewEditedReviewAuthorAssociationValues() []WebhookPullRequestReviewEditedReviewAuthorAssociation {
	return []WebhookPullRequestReviewEditedReviewAuthorAssociation{
		WebhookPullRequestReviewEditedReviewAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewEditedReviewAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewEditedReviewAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewEditedReviewAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewEditedReviewAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewEditedReviewAuthorAssociationMEMBER,
		WebhookPullRequestReviewEditedReviewAuthorAssociationNONE,
		WebhookPullRequestReviewEditedReviewAuthorAssociationOWNER,
	}
}

type WebhookPullRequestReviewEditedReviewUserType string

const (
	WebhookPullRequestReviewEditedReviewUserTypeBot WebhookPullRequestReviewEditedReviewUserType = "Bot"
	WebhookPullRequestReviewEditedReviewUserTypeOrganization WebhookPullRequestReviewEditedReviewUserType = "Organization"
	WebhookPullRequestReviewEditedReviewUserTypeUser WebhookPullRequestReviewEditedReviewUserType = "User"
)

// PossibleWebhookPullRequestReviewEditedReviewUserTypeValues returns the possible values for the WebhookPullRequestReviewEditedReviewUserType const type.
func PossibleWebhookPullRequestReviewEditedReviewUserTypeValues() []WebhookPullRequestReviewEditedReviewUserType {
	return []WebhookPullRequestReviewEditedReviewUserType{
		WebhookPullRequestReviewEditedReviewUserTypeBot,
		WebhookPullRequestReviewEditedReviewUserTypeOrganization,
		WebhookPullRequestReviewEditedReviewUserTypeUser,
	}
}

type WebhookPullRequestReviewRequestRemoved0Action string

const (
	WebhookPullRequestReviewRequestRemoved0ActionReviewRequestRemoved WebhookPullRequestReviewRequestRemoved0Action = "review_request_removed"
)

// PossibleWebhookPullRequestReviewRequestRemoved0ActionValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0Action const type.
func PossibleWebhookPullRequestReviewRequestRemoved0ActionValues() []WebhookPullRequestReviewRequestRemoved0Action {
	return []WebhookPullRequestReviewRequestRemoved0Action{
		WebhookPullRequestReviewRequestRemoved0ActionReviewRequestRemoved,
	}
}

type WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReason string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReasonNull WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReason = "null"
	WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReasonOffTopic WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReason = "off-topic"
	WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReasonResolved WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReason = "resolved"
	WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReasonSpam WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReason = "spam"
	WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReasonTooHeated WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReason const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReasonValues() []WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReason {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReason{
		WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReasonNull,
		WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReasonOffTopic,
		WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReasonResolved,
		WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReasonSpam,
		WebhookPullRequestReviewRequestRemoved0PullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestReviewRequestRemoved0PullRequestAssigneeType string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestAssigneeTypeBot WebhookPullRequestReviewRequestRemoved0PullRequestAssigneeType = "Bot"
	WebhookPullRequestReviewRequestRemoved0PullRequestAssigneeTypeOrganization WebhookPullRequestReviewRequestRemoved0PullRequestAssigneeType = "Organization"
	WebhookPullRequestReviewRequestRemoved0PullRequestAssigneeTypeUser WebhookPullRequestReviewRequestRemoved0PullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestAssigneeType const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestAssigneeTypeValues() []WebhookPullRequestReviewRequestRemoved0PullRequestAssigneeType {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestAssigneeType{
		WebhookPullRequestReviewRequestRemoved0PullRequestAssigneeTypeBot,
		WebhookPullRequestReviewRequestRemoved0PullRequestAssigneeTypeOrganization,
		WebhookPullRequestReviewRequestRemoved0PullRequestAssigneeTypeUser,
	}
}

// WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociation string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationMANNEQUIN WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationMEMBER WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationNONE WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociation = "NONE"
	WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationOWNER WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationValues() []WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociation {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociation{
		WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationMEMBER,
		WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationNONE,
		WebhookPullRequestReviewRequestRemoved0PullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByTypeBot WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByTypeUser WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByType{
		WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethod string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethodMerge WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethod = "merge"
	WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethodRebase WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethodSquash WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethodValues() []WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethod {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethod{
		WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethodMerge,
		WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethodRebase,
		WebhookPullRequestReviewRequestRemoved0PullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerTypeBot WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerTypeUser WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerType {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerType{
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge
// commit message.
type WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge
// commit title.
type WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibility string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibilityInternal WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibilityPrivate WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibility = "private"
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibilityPublic WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibilityValues() []WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibility {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibility{
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewRequestRemoved0PullRequestBaseUserType string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseUserTypeBot WebhookPullRequestReviewRequestRemoved0PullRequestBaseUserType = "Bot"
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseUserTypeOrganization WebhookPullRequestReviewRequestRemoved0PullRequestBaseUserType = "Organization"
	WebhookPullRequestReviewRequestRemoved0PullRequestBaseUserTypeUser WebhookPullRequestReviewRequestRemoved0PullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestBaseUserType const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestBaseUserTypeValues() []WebhookPullRequestReviewRequestRemoved0PullRequestBaseUserType {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestBaseUserType{
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseUserTypeBot,
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseUserTypeOrganization,
		WebhookPullRequestReviewRequestRemoved0PullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerTypeBot WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerTypeUser WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerType {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerType{
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge
// commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge
// commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibility string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibilityInternal WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibilityPrivate WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibility = "private"
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibilityPublic WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibilityValues() []WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibility {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibility{
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewRequestRemoved0PullRequestHeadUserType string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadUserTypeBot WebhookPullRequestReviewRequestRemoved0PullRequestHeadUserType = "Bot"
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadUserTypeOrganization WebhookPullRequestReviewRequestRemoved0PullRequestHeadUserType = "Organization"
	WebhookPullRequestReviewRequestRemoved0PullRequestHeadUserTypeUser WebhookPullRequestReviewRequestRemoved0PullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestHeadUserType const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestHeadUserTypeValues() []WebhookPullRequestReviewRequestRemoved0PullRequestHeadUserType {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestHeadUserType{
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadUserTypeBot,
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadUserTypeOrganization,
		WebhookPullRequestReviewRequestRemoved0PullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestReviewRequestRemoved0PullRequestMergedByType string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestMergedByTypeBot WebhookPullRequestReviewRequestRemoved0PullRequestMergedByType = "Bot"
	WebhookPullRequestReviewRequestRemoved0PullRequestMergedByTypeOrganization WebhookPullRequestReviewRequestRemoved0PullRequestMergedByType = "Organization"
	WebhookPullRequestReviewRequestRemoved0PullRequestMergedByTypeUser WebhookPullRequestReviewRequestRemoved0PullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestMergedByType const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestMergedByTypeValues() []WebhookPullRequestReviewRequestRemoved0PullRequestMergedByType {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestMergedByType{
		WebhookPullRequestReviewRequestRemoved0PullRequestMergedByTypeBot,
		WebhookPullRequestReviewRequestRemoved0PullRequestMergedByTypeOrganization,
		WebhookPullRequestReviewRequestRemoved0PullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorType string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorTypeBot WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorTypeOrganization WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorTypeUser WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorTypeValues() []WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorType {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorType{
		WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneState string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneStateClosed WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneState = "closed"
	WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneStateOpen WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneState const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestMilestoneStateValues() []WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneState {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneState{
		WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneStateClosed,
		WebhookPullRequestReviewRequestRemoved0PullRequestMilestoneStateOpen,
	}
}

// WebhookPullRequestReviewRequestRemoved0PullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestReviewRequestRemoved0PullRequestState string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestStateClosed WebhookPullRequestReviewRequestRemoved0PullRequestState = "closed"
	WebhookPullRequestReviewRequestRemoved0PullRequestStateOpen WebhookPullRequestReviewRequestRemoved0PullRequestState = "open"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestStateValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestState const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestStateValues() []WebhookPullRequestReviewRequestRemoved0PullRequestState {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestState{
		WebhookPullRequestReviewRequestRemoved0PullRequestStateClosed,
		WebhookPullRequestReviewRequestRemoved0PullRequestStateOpen,
	}
}

type WebhookPullRequestReviewRequestRemoved0PullRequestUserType string

const (
	WebhookPullRequestReviewRequestRemoved0PullRequestUserTypeBot WebhookPullRequestReviewRequestRemoved0PullRequestUserType = "Bot"
	WebhookPullRequestReviewRequestRemoved0PullRequestUserTypeOrganization WebhookPullRequestReviewRequestRemoved0PullRequestUserType = "Organization"
	WebhookPullRequestReviewRequestRemoved0PullRequestUserTypeUser WebhookPullRequestReviewRequestRemoved0PullRequestUserType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved0PullRequestUserTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0PullRequestUserType const type.
func PossibleWebhookPullRequestReviewRequestRemoved0PullRequestUserTypeValues() []WebhookPullRequestReviewRequestRemoved0PullRequestUserType {
	return []WebhookPullRequestReviewRequestRemoved0PullRequestUserType{
		WebhookPullRequestReviewRequestRemoved0PullRequestUserTypeBot,
		WebhookPullRequestReviewRequestRemoved0PullRequestUserTypeOrganization,
		WebhookPullRequestReviewRequestRemoved0PullRequestUserTypeUser,
	}
}

type WebhookPullRequestReviewRequestRemoved0RequestedReviewerType string

const (
	WebhookPullRequestReviewRequestRemoved0RequestedReviewerTypeBot WebhookPullRequestReviewRequestRemoved0RequestedReviewerType = "Bot"
	WebhookPullRequestReviewRequestRemoved0RequestedReviewerTypeOrganization WebhookPullRequestReviewRequestRemoved0RequestedReviewerType = "Organization"
	WebhookPullRequestReviewRequestRemoved0RequestedReviewerTypeUser WebhookPullRequestReviewRequestRemoved0RequestedReviewerType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved0RequestedReviewerTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved0RequestedReviewerType const type.
func PossibleWebhookPullRequestReviewRequestRemoved0RequestedReviewerTypeValues() []WebhookPullRequestReviewRequestRemoved0RequestedReviewerType {
	return []WebhookPullRequestReviewRequestRemoved0RequestedReviewerType{
		WebhookPullRequestReviewRequestRemoved0RequestedReviewerTypeBot,
		WebhookPullRequestReviewRequestRemoved0RequestedReviewerTypeOrganization,
		WebhookPullRequestReviewRequestRemoved0RequestedReviewerTypeUser,
	}
}

type WebhookPullRequestReviewRequestRemoved1Action string

const (
	WebhookPullRequestReviewRequestRemoved1ActionReviewRequestRemoved WebhookPullRequestReviewRequestRemoved1Action = "review_request_removed"
)

// PossibleWebhookPullRequestReviewRequestRemoved1ActionValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1Action const type.
func PossibleWebhookPullRequestReviewRequestRemoved1ActionValues() []WebhookPullRequestReviewRequestRemoved1Action {
	return []WebhookPullRequestReviewRequestRemoved1Action{
		WebhookPullRequestReviewRequestRemoved1ActionReviewRequestRemoved,
	}
}

type WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReason string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReasonNull WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReason = "null"
	WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReasonOffTopic WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReason = "off-topic"
	WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReasonResolved WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReason = "resolved"
	WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReasonSpam WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReason = "spam"
	WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReasonTooHeated WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReason const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReasonValues() []WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReason {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReason{
		WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReasonNull,
		WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReasonOffTopic,
		WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReasonResolved,
		WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReasonSpam,
		WebhookPullRequestReviewRequestRemoved1PullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestReviewRequestRemoved1PullRequestAssigneeType string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestAssigneeTypeBot WebhookPullRequestReviewRequestRemoved1PullRequestAssigneeType = "Bot"
	WebhookPullRequestReviewRequestRemoved1PullRequestAssigneeTypeOrganization WebhookPullRequestReviewRequestRemoved1PullRequestAssigneeType = "Organization"
	WebhookPullRequestReviewRequestRemoved1PullRequestAssigneeTypeUser WebhookPullRequestReviewRequestRemoved1PullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestAssigneeType const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestAssigneeTypeValues() []WebhookPullRequestReviewRequestRemoved1PullRequestAssigneeType {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestAssigneeType{
		WebhookPullRequestReviewRequestRemoved1PullRequestAssigneeTypeBot,
		WebhookPullRequestReviewRequestRemoved1PullRequestAssigneeTypeOrganization,
		WebhookPullRequestReviewRequestRemoved1PullRequestAssigneeTypeUser,
	}
}

// WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociation string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationMANNEQUIN WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationMEMBER WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationNONE WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociation = "NONE"
	WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationOWNER WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationValues() []WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociation {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociation{
		WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationMEMBER,
		WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationNONE,
		WebhookPullRequestReviewRequestRemoved1PullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByTypeBot WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByTypeUser WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByType{
		WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethod string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethodMerge WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethod = "merge"
	WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethodRebase WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethodSquash WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethodValues() []WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethod {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethod{
		WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethodMerge,
		WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethodRebase,
		WebhookPullRequestReviewRequestRemoved1PullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerTypeBot WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerTypeUser WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerType {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerType{
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge
// commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge
// commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibility string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibilityInternal WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibilityPrivate WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibility = "private"
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibilityPublic WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibilityValues() []WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibility {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibility{
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewRequestRemoved1PullRequestBaseUserType string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseUserTypeBot WebhookPullRequestReviewRequestRemoved1PullRequestBaseUserType = "Bot"
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseUserTypeOrganization WebhookPullRequestReviewRequestRemoved1PullRequestBaseUserType = "Organization"
	WebhookPullRequestReviewRequestRemoved1PullRequestBaseUserTypeUser WebhookPullRequestReviewRequestRemoved1PullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestBaseUserType const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestBaseUserTypeValues() []WebhookPullRequestReviewRequestRemoved1PullRequestBaseUserType {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestBaseUserType{
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseUserTypeBot,
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseUserTypeOrganization,
		WebhookPullRequestReviewRequestRemoved1PullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerTypeBot WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerTypeUser WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerType {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerType{
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge
// commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge
// commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibility string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibilityInternal WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibilityPrivate WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibility = "private"
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibilityPublic WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibilityValues() []WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibility {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibility{
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewRequestRemoved1PullRequestHeadUserType string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadUserTypeBot WebhookPullRequestReviewRequestRemoved1PullRequestHeadUserType = "Bot"
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadUserTypeOrganization WebhookPullRequestReviewRequestRemoved1PullRequestHeadUserType = "Organization"
	WebhookPullRequestReviewRequestRemoved1PullRequestHeadUserTypeUser WebhookPullRequestReviewRequestRemoved1PullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestHeadUserType const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestHeadUserTypeValues() []WebhookPullRequestReviewRequestRemoved1PullRequestHeadUserType {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestHeadUserType{
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadUserTypeBot,
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadUserTypeOrganization,
		WebhookPullRequestReviewRequestRemoved1PullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestReviewRequestRemoved1PullRequestMergedByType string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestMergedByTypeBot WebhookPullRequestReviewRequestRemoved1PullRequestMergedByType = "Bot"
	WebhookPullRequestReviewRequestRemoved1PullRequestMergedByTypeOrganization WebhookPullRequestReviewRequestRemoved1PullRequestMergedByType = "Organization"
	WebhookPullRequestReviewRequestRemoved1PullRequestMergedByTypeUser WebhookPullRequestReviewRequestRemoved1PullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestMergedByType const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestMergedByTypeValues() []WebhookPullRequestReviewRequestRemoved1PullRequestMergedByType {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestMergedByType{
		WebhookPullRequestReviewRequestRemoved1PullRequestMergedByTypeBot,
		WebhookPullRequestReviewRequestRemoved1PullRequestMergedByTypeOrganization,
		WebhookPullRequestReviewRequestRemoved1PullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorType string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorTypeBot WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorTypeOrganization WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorTypeUser WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorTypeValues() []WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorType {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorType{
		WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneState string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneStateClosed WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneState = "closed"
	WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneStateOpen WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneState const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestMilestoneStateValues() []WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneState {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneState{
		WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneStateClosed,
		WebhookPullRequestReviewRequestRemoved1PullRequestMilestoneStateOpen,
	}
}

// WebhookPullRequestReviewRequestRemoved1PullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestReviewRequestRemoved1PullRequestState string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestStateClosed WebhookPullRequestReviewRequestRemoved1PullRequestState = "closed"
	WebhookPullRequestReviewRequestRemoved1PullRequestStateOpen WebhookPullRequestReviewRequestRemoved1PullRequestState = "open"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestStateValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestState const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestStateValues() []WebhookPullRequestReviewRequestRemoved1PullRequestState {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestState{
		WebhookPullRequestReviewRequestRemoved1PullRequestStateClosed,
		WebhookPullRequestReviewRequestRemoved1PullRequestStateOpen,
	}
}

type WebhookPullRequestReviewRequestRemoved1PullRequestUserType string

const (
	WebhookPullRequestReviewRequestRemoved1PullRequestUserTypeBot WebhookPullRequestReviewRequestRemoved1PullRequestUserType = "Bot"
	WebhookPullRequestReviewRequestRemoved1PullRequestUserTypeOrganization WebhookPullRequestReviewRequestRemoved1PullRequestUserType = "Organization"
	WebhookPullRequestReviewRequestRemoved1PullRequestUserTypeUser WebhookPullRequestReviewRequestRemoved1PullRequestUserType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemoved1PullRequestUserTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1PullRequestUserType const type.
func PossibleWebhookPullRequestReviewRequestRemoved1PullRequestUserTypeValues() []WebhookPullRequestReviewRequestRemoved1PullRequestUserType {
	return []WebhookPullRequestReviewRequestRemoved1PullRequestUserType{
		WebhookPullRequestReviewRequestRemoved1PullRequestUserTypeBot,
		WebhookPullRequestReviewRequestRemoved1PullRequestUserTypeOrganization,
		WebhookPullRequestReviewRequestRemoved1PullRequestUserTypeUser,
	}
}

type WebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacy string

const (
	WebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacyClosed WebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacy = "closed"
	WebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacyOpen WebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacy = "open"
	WebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacySecret WebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacyValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacy const type.
func PossibleWebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacyValues() []WebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacy {
	return []WebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacy{
		WebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacyClosed,
		WebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacyOpen,
		WebhookPullRequestReviewRequestRemoved1RequestedTeamParentPrivacySecret,
	}
}

type WebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacy string

const (
	WebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacyClosed WebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacy = "closed"
	WebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacyOpen WebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacy = "open"
	WebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacySecret WebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacyValues returns the possible values for the WebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacy const type.
func PossibleWebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacyValues() []WebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacy {
	return []WebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacy{
		WebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacyClosed,
		WebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacyOpen,
		WebhookPullRequestReviewRequestRemoved1RequestedTeamPrivacySecret,
	}
}

type WebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemType string

const (
	WebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemTypeBot WebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemType = "Bot"
	WebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemTypeOrganization WebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemType = "Organization"
	WebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemTypeUser WebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemTypeValues() []WebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemType {
	return []WebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemType{
		WebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemTypeBot,
		WebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestReviewRequestRemovedOneOf0PullRequestAssigneesItemTypeUser,
	}
}

type WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestReviewRequestRemovedOneOf0PullRequestRequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemType string

const (
	WebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemTypeBot WebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemType = "Bot"
	WebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemTypeOrganization WebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemType = "Organization"
	WebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemTypeUser WebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemTypeValues() []WebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemType {
	return []WebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemType{
		WebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemTypeBot,
		WebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestReviewRequestRemovedOneOf1PullRequestAssigneesItemTypeUser,
	}
}

type WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestReviewRequestRemovedOneOf1PullRequestRequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestReviewRequested0Action string

const (
	WebhookPullRequestReviewRequested0ActionReviewRequested WebhookPullRequestReviewRequested0Action = "review_requested"
)

// PossibleWebhookPullRequestReviewRequested0ActionValues returns the possible values for the WebhookPullRequestReviewRequested0Action const type.
func PossibleWebhookPullRequestReviewRequested0ActionValues() []WebhookPullRequestReviewRequested0Action {
	return []WebhookPullRequestReviewRequested0Action{
		WebhookPullRequestReviewRequested0ActionReviewRequested,
	}
}

type WebhookPullRequestReviewRequested0PullRequestActiveLockReason string

const (
	WebhookPullRequestReviewRequested0PullRequestActiveLockReasonNull WebhookPullRequestReviewRequested0PullRequestActiveLockReason = "null"
	WebhookPullRequestReviewRequested0PullRequestActiveLockReasonOffTopic WebhookPullRequestReviewRequested0PullRequestActiveLockReason = "off-topic"
	WebhookPullRequestReviewRequested0PullRequestActiveLockReasonResolved WebhookPullRequestReviewRequested0PullRequestActiveLockReason = "resolved"
	WebhookPullRequestReviewRequested0PullRequestActiveLockReasonSpam WebhookPullRequestReviewRequested0PullRequestActiveLockReason = "spam"
	WebhookPullRequestReviewRequested0PullRequestActiveLockReasonTooHeated WebhookPullRequestReviewRequested0PullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestActiveLockReason const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestActiveLockReasonValues() []WebhookPullRequestReviewRequested0PullRequestActiveLockReason {
	return []WebhookPullRequestReviewRequested0PullRequestActiveLockReason{
		WebhookPullRequestReviewRequested0PullRequestActiveLockReasonNull,
		WebhookPullRequestReviewRequested0PullRequestActiveLockReasonOffTopic,
		WebhookPullRequestReviewRequested0PullRequestActiveLockReasonResolved,
		WebhookPullRequestReviewRequested0PullRequestActiveLockReasonSpam,
		WebhookPullRequestReviewRequested0PullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestReviewRequested0PullRequestAssigneeType string

const (
	WebhookPullRequestReviewRequested0PullRequestAssigneeTypeBot WebhookPullRequestReviewRequested0PullRequestAssigneeType = "Bot"
	WebhookPullRequestReviewRequested0PullRequestAssigneeTypeMannequin WebhookPullRequestReviewRequested0PullRequestAssigneeType = "Mannequin"
	WebhookPullRequestReviewRequested0PullRequestAssigneeTypeOrganization WebhookPullRequestReviewRequested0PullRequestAssigneeType = "Organization"
	WebhookPullRequestReviewRequested0PullRequestAssigneeTypeUser WebhookPullRequestReviewRequested0PullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestAssigneeType const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestAssigneeTypeValues() []WebhookPullRequestReviewRequested0PullRequestAssigneeType {
	return []WebhookPullRequestReviewRequested0PullRequestAssigneeType{
		WebhookPullRequestReviewRequested0PullRequestAssigneeTypeBot,
		WebhookPullRequestReviewRequested0PullRequestAssigneeTypeMannequin,
		WebhookPullRequestReviewRequested0PullRequestAssigneeTypeOrganization,
		WebhookPullRequestReviewRequested0PullRequestAssigneeTypeUser,
	}
}

// WebhookPullRequestReviewRequested0PullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewRequested0PullRequestAuthorAssociation string

const (
	WebhookPullRequestReviewRequested0PullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestReviewRequested0PullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewRequested0PullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewRequested0PullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewRequested0PullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewRequested0PullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewRequested0PullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestReviewRequested0PullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewRequested0PullRequestAuthorAssociationMANNEQUIN WebhookPullRequestReviewRequested0PullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewRequested0PullRequestAuthorAssociationMEMBER WebhookPullRequestReviewRequested0PullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewRequested0PullRequestAuthorAssociationNONE WebhookPullRequestReviewRequested0PullRequestAuthorAssociation = "NONE"
	WebhookPullRequestReviewRequested0PullRequestAuthorAssociationOWNER WebhookPullRequestReviewRequested0PullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestAuthorAssociationValues() []WebhookPullRequestReviewRequested0PullRequestAuthorAssociation {
	return []WebhookPullRequestReviewRequested0PullRequestAuthorAssociation{
		WebhookPullRequestReviewRequested0PullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewRequested0PullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewRequested0PullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewRequested0PullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewRequested0PullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewRequested0PullRequestAuthorAssociationMEMBER,
		WebhookPullRequestReviewRequested0PullRequestAuthorAssociationNONE,
		WebhookPullRequestReviewRequested0PullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByTypeBot WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByTypeUser WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByType{
		WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestReviewRequested0PullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestReviewRequested0PullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestReviewRequested0PullRequestAutoMergeMethod string

const (
	WebhookPullRequestReviewRequested0PullRequestAutoMergeMethodMerge WebhookPullRequestReviewRequested0PullRequestAutoMergeMethod = "merge"
	WebhookPullRequestReviewRequested0PullRequestAutoMergeMethodRebase WebhookPullRequestReviewRequested0PullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestReviewRequested0PullRequestAutoMergeMethodSquash WebhookPullRequestReviewRequested0PullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestAutoMergeMethodValues() []WebhookPullRequestReviewRequested0PullRequestAutoMergeMethod {
	return []WebhookPullRequestReviewRequested0PullRequestAutoMergeMethod{
		WebhookPullRequestReviewRequested0PullRequestAutoMergeMethodMerge,
		WebhookPullRequestReviewRequested0PullRequestAutoMergeMethodRebase,
		WebhookPullRequestReviewRequested0PullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewRequested0PullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerTypeBot WebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerTypeUser WebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerType {
	return []WebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerType{
		WebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestReviewRequested0PullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewRequested0PullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequested0PullRequestBaseRepoVisibility string

const (
	WebhookPullRequestReviewRequested0PullRequestBaseRepoVisibilityInternal WebhookPullRequestReviewRequested0PullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestReviewRequested0PullRequestBaseRepoVisibilityPrivate WebhookPullRequestReviewRequested0PullRequestBaseRepoVisibility = "private"
	WebhookPullRequestReviewRequested0PullRequestBaseRepoVisibilityPublic WebhookPullRequestReviewRequested0PullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestBaseRepoVisibilityValues() []WebhookPullRequestReviewRequested0PullRequestBaseRepoVisibility {
	return []WebhookPullRequestReviewRequested0PullRequestBaseRepoVisibility{
		WebhookPullRequestReviewRequested0PullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestReviewRequested0PullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestReviewRequested0PullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewRequested0PullRequestBaseUserType string

const (
	WebhookPullRequestReviewRequested0PullRequestBaseUserTypeBot WebhookPullRequestReviewRequested0PullRequestBaseUserType = "Bot"
	WebhookPullRequestReviewRequested0PullRequestBaseUserTypeOrganization WebhookPullRequestReviewRequested0PullRequestBaseUserType = "Organization"
	WebhookPullRequestReviewRequested0PullRequestBaseUserTypeUser WebhookPullRequestReviewRequested0PullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestBaseUserType const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestBaseUserTypeValues() []WebhookPullRequestReviewRequested0PullRequestBaseUserType {
	return []WebhookPullRequestReviewRequested0PullRequestBaseUserType{
		WebhookPullRequestReviewRequested0PullRequestBaseUserTypeBot,
		WebhookPullRequestReviewRequested0PullRequestBaseUserTypeOrganization,
		WebhookPullRequestReviewRequested0PullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewRequested0PullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerTypeBot WebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerTypeUser WebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerType {
	return []WebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerType{
		WebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestReviewRequested0PullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewRequested0PullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequested0PullRequestHeadRepoVisibility string

const (
	WebhookPullRequestReviewRequested0PullRequestHeadRepoVisibilityInternal WebhookPullRequestReviewRequested0PullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestReviewRequested0PullRequestHeadRepoVisibilityPrivate WebhookPullRequestReviewRequested0PullRequestHeadRepoVisibility = "private"
	WebhookPullRequestReviewRequested0PullRequestHeadRepoVisibilityPublic WebhookPullRequestReviewRequested0PullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestHeadRepoVisibilityValues() []WebhookPullRequestReviewRequested0PullRequestHeadRepoVisibility {
	return []WebhookPullRequestReviewRequested0PullRequestHeadRepoVisibility{
		WebhookPullRequestReviewRequested0PullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestReviewRequested0PullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestReviewRequested0PullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewRequested0PullRequestHeadUserType string

const (
	WebhookPullRequestReviewRequested0PullRequestHeadUserTypeBot WebhookPullRequestReviewRequested0PullRequestHeadUserType = "Bot"
	WebhookPullRequestReviewRequested0PullRequestHeadUserTypeOrganization WebhookPullRequestReviewRequested0PullRequestHeadUserType = "Organization"
	WebhookPullRequestReviewRequested0PullRequestHeadUserTypeUser WebhookPullRequestReviewRequested0PullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestHeadUserType const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestHeadUserTypeValues() []WebhookPullRequestReviewRequested0PullRequestHeadUserType {
	return []WebhookPullRequestReviewRequested0PullRequestHeadUserType{
		WebhookPullRequestReviewRequested0PullRequestHeadUserTypeBot,
		WebhookPullRequestReviewRequested0PullRequestHeadUserTypeOrganization,
		WebhookPullRequestReviewRequested0PullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestReviewRequested0PullRequestMergedByType string

const (
	WebhookPullRequestReviewRequested0PullRequestMergedByTypeBot WebhookPullRequestReviewRequested0PullRequestMergedByType = "Bot"
	WebhookPullRequestReviewRequested0PullRequestMergedByTypeOrganization WebhookPullRequestReviewRequested0PullRequestMergedByType = "Organization"
	WebhookPullRequestReviewRequested0PullRequestMergedByTypeUser WebhookPullRequestReviewRequested0PullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestMergedByType const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestMergedByTypeValues() []WebhookPullRequestReviewRequested0PullRequestMergedByType {
	return []WebhookPullRequestReviewRequested0PullRequestMergedByType{
		WebhookPullRequestReviewRequested0PullRequestMergedByTypeBot,
		WebhookPullRequestReviewRequested0PullRequestMergedByTypeOrganization,
		WebhookPullRequestReviewRequested0PullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorType string

const (
	WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorTypeBot WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorTypeMannequin WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorTypeOrganization WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorTypeUser WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestMilestoneCreatorTypeValues() []WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorType {
	return []WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorType{
		WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestReviewRequested0PullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestReviewRequested0PullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestReviewRequested0PullRequestMilestoneState string

const (
	WebhookPullRequestReviewRequested0PullRequestMilestoneStateClosed WebhookPullRequestReviewRequested0PullRequestMilestoneState = "closed"
	WebhookPullRequestReviewRequested0PullRequestMilestoneStateOpen WebhookPullRequestReviewRequested0PullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestMilestoneState const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestMilestoneStateValues() []WebhookPullRequestReviewRequested0PullRequestMilestoneState {
	return []WebhookPullRequestReviewRequested0PullRequestMilestoneState{
		WebhookPullRequestReviewRequested0PullRequestMilestoneStateClosed,
		WebhookPullRequestReviewRequested0PullRequestMilestoneStateOpen,
	}
}

// WebhookPullRequestReviewRequested0PullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestReviewRequested0PullRequestState string

const (
	WebhookPullRequestReviewRequested0PullRequestStateClosed WebhookPullRequestReviewRequested0PullRequestState = "closed"
	WebhookPullRequestReviewRequested0PullRequestStateOpen WebhookPullRequestReviewRequested0PullRequestState = "open"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestStateValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestState const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestStateValues() []WebhookPullRequestReviewRequested0PullRequestState {
	return []WebhookPullRequestReviewRequested0PullRequestState{
		WebhookPullRequestReviewRequested0PullRequestStateClosed,
		WebhookPullRequestReviewRequested0PullRequestStateOpen,
	}
}

type WebhookPullRequestReviewRequested0PullRequestUserType string

const (
	WebhookPullRequestReviewRequested0PullRequestUserTypeBot WebhookPullRequestReviewRequested0PullRequestUserType = "Bot"
	WebhookPullRequestReviewRequested0PullRequestUserTypeMannequin WebhookPullRequestReviewRequested0PullRequestUserType = "Mannequin"
	WebhookPullRequestReviewRequested0PullRequestUserTypeOrganization WebhookPullRequestReviewRequested0PullRequestUserType = "Organization"
	WebhookPullRequestReviewRequested0PullRequestUserTypeUser WebhookPullRequestReviewRequested0PullRequestUserType = "User"
)

// PossibleWebhookPullRequestReviewRequested0PullRequestUserTypeValues returns the possible values for the WebhookPullRequestReviewRequested0PullRequestUserType const type.
func PossibleWebhookPullRequestReviewRequested0PullRequestUserTypeValues() []WebhookPullRequestReviewRequested0PullRequestUserType {
	return []WebhookPullRequestReviewRequested0PullRequestUserType{
		WebhookPullRequestReviewRequested0PullRequestUserTypeBot,
		WebhookPullRequestReviewRequested0PullRequestUserTypeMannequin,
		WebhookPullRequestReviewRequested0PullRequestUserTypeOrganization,
		WebhookPullRequestReviewRequested0PullRequestUserTypeUser,
	}
}

type WebhookPullRequestReviewRequested0RequestedReviewerType string

const (
	WebhookPullRequestReviewRequested0RequestedReviewerTypeBot WebhookPullRequestReviewRequested0RequestedReviewerType = "Bot"
	WebhookPullRequestReviewRequested0RequestedReviewerTypeMannequin WebhookPullRequestReviewRequested0RequestedReviewerType = "Mannequin"
	WebhookPullRequestReviewRequested0RequestedReviewerTypeOrganization WebhookPullRequestReviewRequested0RequestedReviewerType = "Organization"
	WebhookPullRequestReviewRequested0RequestedReviewerTypeUser WebhookPullRequestReviewRequested0RequestedReviewerType = "User"
)

// PossibleWebhookPullRequestReviewRequested0RequestedReviewerTypeValues returns the possible values for the WebhookPullRequestReviewRequested0RequestedReviewerType const type.
func PossibleWebhookPullRequestReviewRequested0RequestedReviewerTypeValues() []WebhookPullRequestReviewRequested0RequestedReviewerType {
	return []WebhookPullRequestReviewRequested0RequestedReviewerType{
		WebhookPullRequestReviewRequested0RequestedReviewerTypeBot,
		WebhookPullRequestReviewRequested0RequestedReviewerTypeMannequin,
		WebhookPullRequestReviewRequested0RequestedReviewerTypeOrganization,
		WebhookPullRequestReviewRequested0RequestedReviewerTypeUser,
	}
}

type WebhookPullRequestReviewRequested1Action string

const (
	WebhookPullRequestReviewRequested1ActionReviewRequested WebhookPullRequestReviewRequested1Action = "review_requested"
)

// PossibleWebhookPullRequestReviewRequested1ActionValues returns the possible values for the WebhookPullRequestReviewRequested1Action const type.
func PossibleWebhookPullRequestReviewRequested1ActionValues() []WebhookPullRequestReviewRequested1Action {
	return []WebhookPullRequestReviewRequested1Action{
		WebhookPullRequestReviewRequested1ActionReviewRequested,
	}
}

type WebhookPullRequestReviewRequested1PullRequestActiveLockReason string

const (
	WebhookPullRequestReviewRequested1PullRequestActiveLockReasonNull WebhookPullRequestReviewRequested1PullRequestActiveLockReason = "null"
	WebhookPullRequestReviewRequested1PullRequestActiveLockReasonOffTopic WebhookPullRequestReviewRequested1PullRequestActiveLockReason = "off-topic"
	WebhookPullRequestReviewRequested1PullRequestActiveLockReasonResolved WebhookPullRequestReviewRequested1PullRequestActiveLockReason = "resolved"
	WebhookPullRequestReviewRequested1PullRequestActiveLockReasonSpam WebhookPullRequestReviewRequested1PullRequestActiveLockReason = "spam"
	WebhookPullRequestReviewRequested1PullRequestActiveLockReasonTooHeated WebhookPullRequestReviewRequested1PullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestActiveLockReason const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestActiveLockReasonValues() []WebhookPullRequestReviewRequested1PullRequestActiveLockReason {
	return []WebhookPullRequestReviewRequested1PullRequestActiveLockReason{
		WebhookPullRequestReviewRequested1PullRequestActiveLockReasonNull,
		WebhookPullRequestReviewRequested1PullRequestActiveLockReasonOffTopic,
		WebhookPullRequestReviewRequested1PullRequestActiveLockReasonResolved,
		WebhookPullRequestReviewRequested1PullRequestActiveLockReasonSpam,
		WebhookPullRequestReviewRequested1PullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestReviewRequested1PullRequestAssigneeType string

const (
	WebhookPullRequestReviewRequested1PullRequestAssigneeTypeBot WebhookPullRequestReviewRequested1PullRequestAssigneeType = "Bot"
	WebhookPullRequestReviewRequested1PullRequestAssigneeTypeMannequin WebhookPullRequestReviewRequested1PullRequestAssigneeType = "Mannequin"
	WebhookPullRequestReviewRequested1PullRequestAssigneeTypeOrganization WebhookPullRequestReviewRequested1PullRequestAssigneeType = "Organization"
	WebhookPullRequestReviewRequested1PullRequestAssigneeTypeUser WebhookPullRequestReviewRequested1PullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestAssigneeType const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestAssigneeTypeValues() []WebhookPullRequestReviewRequested1PullRequestAssigneeType {
	return []WebhookPullRequestReviewRequested1PullRequestAssigneeType{
		WebhookPullRequestReviewRequested1PullRequestAssigneeTypeBot,
		WebhookPullRequestReviewRequested1PullRequestAssigneeTypeMannequin,
		WebhookPullRequestReviewRequested1PullRequestAssigneeTypeOrganization,
		WebhookPullRequestReviewRequested1PullRequestAssigneeTypeUser,
	}
}

// WebhookPullRequestReviewRequested1PullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewRequested1PullRequestAuthorAssociation string

const (
	WebhookPullRequestReviewRequested1PullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestReviewRequested1PullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewRequested1PullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewRequested1PullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewRequested1PullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewRequested1PullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewRequested1PullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestReviewRequested1PullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewRequested1PullRequestAuthorAssociationMANNEQUIN WebhookPullRequestReviewRequested1PullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewRequested1PullRequestAuthorAssociationMEMBER WebhookPullRequestReviewRequested1PullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewRequested1PullRequestAuthorAssociationNONE WebhookPullRequestReviewRequested1PullRequestAuthorAssociation = "NONE"
	WebhookPullRequestReviewRequested1PullRequestAuthorAssociationOWNER WebhookPullRequestReviewRequested1PullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestAuthorAssociationValues() []WebhookPullRequestReviewRequested1PullRequestAuthorAssociation {
	return []WebhookPullRequestReviewRequested1PullRequestAuthorAssociation{
		WebhookPullRequestReviewRequested1PullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewRequested1PullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewRequested1PullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewRequested1PullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewRequested1PullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewRequested1PullRequestAuthorAssociationMEMBER,
		WebhookPullRequestReviewRequested1PullRequestAuthorAssociationNONE,
		WebhookPullRequestReviewRequested1PullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByTypeBot WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByTypeUser WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByType{
		WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestReviewRequested1PullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestReviewRequested1PullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestReviewRequested1PullRequestAutoMergeMethod string

const (
	WebhookPullRequestReviewRequested1PullRequestAutoMergeMethodMerge WebhookPullRequestReviewRequested1PullRequestAutoMergeMethod = "merge"
	WebhookPullRequestReviewRequested1PullRequestAutoMergeMethodRebase WebhookPullRequestReviewRequested1PullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestReviewRequested1PullRequestAutoMergeMethodSquash WebhookPullRequestReviewRequested1PullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestAutoMergeMethodValues() []WebhookPullRequestReviewRequested1PullRequestAutoMergeMethod {
	return []WebhookPullRequestReviewRequested1PullRequestAutoMergeMethod{
		WebhookPullRequestReviewRequested1PullRequestAutoMergeMethodMerge,
		WebhookPullRequestReviewRequested1PullRequestAutoMergeMethodRebase,
		WebhookPullRequestReviewRequested1PullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewRequested1PullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerTypeBot WebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerTypeUser WebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerType {
	return []WebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerType{
		WebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestReviewRequested1PullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewRequested1PullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequested1PullRequestBaseRepoVisibility string

const (
	WebhookPullRequestReviewRequested1PullRequestBaseRepoVisibilityInternal WebhookPullRequestReviewRequested1PullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestReviewRequested1PullRequestBaseRepoVisibilityPrivate WebhookPullRequestReviewRequested1PullRequestBaseRepoVisibility = "private"
	WebhookPullRequestReviewRequested1PullRequestBaseRepoVisibilityPublic WebhookPullRequestReviewRequested1PullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestBaseRepoVisibilityValues() []WebhookPullRequestReviewRequested1PullRequestBaseRepoVisibility {
	return []WebhookPullRequestReviewRequested1PullRequestBaseRepoVisibility{
		WebhookPullRequestReviewRequested1PullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestReviewRequested1PullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestReviewRequested1PullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewRequested1PullRequestBaseUserType string

const (
	WebhookPullRequestReviewRequested1PullRequestBaseUserTypeBot WebhookPullRequestReviewRequested1PullRequestBaseUserType = "Bot"
	WebhookPullRequestReviewRequested1PullRequestBaseUserTypeOrganization WebhookPullRequestReviewRequested1PullRequestBaseUserType = "Organization"
	WebhookPullRequestReviewRequested1PullRequestBaseUserTypeUser WebhookPullRequestReviewRequested1PullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestBaseUserType const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestBaseUserTypeValues() []WebhookPullRequestReviewRequested1PullRequestBaseUserType {
	return []WebhookPullRequestReviewRequested1PullRequestBaseUserType{
		WebhookPullRequestReviewRequested1PullRequestBaseUserTypeBot,
		WebhookPullRequestReviewRequested1PullRequestBaseUserTypeOrganization,
		WebhookPullRequestReviewRequested1PullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewRequested1PullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerTypeBot WebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerTypeUser WebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerType {
	return []WebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerType{
		WebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestReviewRequested1PullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewRequested1PullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewRequested1PullRequestHeadRepoVisibility string

const (
	WebhookPullRequestReviewRequested1PullRequestHeadRepoVisibilityInternal WebhookPullRequestReviewRequested1PullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestReviewRequested1PullRequestHeadRepoVisibilityPrivate WebhookPullRequestReviewRequested1PullRequestHeadRepoVisibility = "private"
	WebhookPullRequestReviewRequested1PullRequestHeadRepoVisibilityPublic WebhookPullRequestReviewRequested1PullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestHeadRepoVisibilityValues() []WebhookPullRequestReviewRequested1PullRequestHeadRepoVisibility {
	return []WebhookPullRequestReviewRequested1PullRequestHeadRepoVisibility{
		WebhookPullRequestReviewRequested1PullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestReviewRequested1PullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestReviewRequested1PullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewRequested1PullRequestHeadUserType string

const (
	WebhookPullRequestReviewRequested1PullRequestHeadUserTypeBot WebhookPullRequestReviewRequested1PullRequestHeadUserType = "Bot"
	WebhookPullRequestReviewRequested1PullRequestHeadUserTypeOrganization WebhookPullRequestReviewRequested1PullRequestHeadUserType = "Organization"
	WebhookPullRequestReviewRequested1PullRequestHeadUserTypeUser WebhookPullRequestReviewRequested1PullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestHeadUserType const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestHeadUserTypeValues() []WebhookPullRequestReviewRequested1PullRequestHeadUserType {
	return []WebhookPullRequestReviewRequested1PullRequestHeadUserType{
		WebhookPullRequestReviewRequested1PullRequestHeadUserTypeBot,
		WebhookPullRequestReviewRequested1PullRequestHeadUserTypeOrganization,
		WebhookPullRequestReviewRequested1PullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestReviewRequested1PullRequestMergedByType string

const (
	WebhookPullRequestReviewRequested1PullRequestMergedByTypeBot WebhookPullRequestReviewRequested1PullRequestMergedByType = "Bot"
	WebhookPullRequestReviewRequested1PullRequestMergedByTypeOrganization WebhookPullRequestReviewRequested1PullRequestMergedByType = "Organization"
	WebhookPullRequestReviewRequested1PullRequestMergedByTypeUser WebhookPullRequestReviewRequested1PullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestMergedByType const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestMergedByTypeValues() []WebhookPullRequestReviewRequested1PullRequestMergedByType {
	return []WebhookPullRequestReviewRequested1PullRequestMergedByType{
		WebhookPullRequestReviewRequested1PullRequestMergedByTypeBot,
		WebhookPullRequestReviewRequested1PullRequestMergedByTypeOrganization,
		WebhookPullRequestReviewRequested1PullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorType string

const (
	WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorTypeBot WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorTypeMannequin WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorTypeOrganization WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorTypeUser WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestMilestoneCreatorTypeValues() []WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorType {
	return []WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorType{
		WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestReviewRequested1PullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestReviewRequested1PullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestReviewRequested1PullRequestMilestoneState string

const (
	WebhookPullRequestReviewRequested1PullRequestMilestoneStateClosed WebhookPullRequestReviewRequested1PullRequestMilestoneState = "closed"
	WebhookPullRequestReviewRequested1PullRequestMilestoneStateOpen WebhookPullRequestReviewRequested1PullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestMilestoneState const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestMilestoneStateValues() []WebhookPullRequestReviewRequested1PullRequestMilestoneState {
	return []WebhookPullRequestReviewRequested1PullRequestMilestoneState{
		WebhookPullRequestReviewRequested1PullRequestMilestoneStateClosed,
		WebhookPullRequestReviewRequested1PullRequestMilestoneStateOpen,
	}
}

// WebhookPullRequestReviewRequested1PullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestReviewRequested1PullRequestState string

const (
	WebhookPullRequestReviewRequested1PullRequestStateClosed WebhookPullRequestReviewRequested1PullRequestState = "closed"
	WebhookPullRequestReviewRequested1PullRequestStateOpen WebhookPullRequestReviewRequested1PullRequestState = "open"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestStateValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestState const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestStateValues() []WebhookPullRequestReviewRequested1PullRequestState {
	return []WebhookPullRequestReviewRequested1PullRequestState{
		WebhookPullRequestReviewRequested1PullRequestStateClosed,
		WebhookPullRequestReviewRequested1PullRequestStateOpen,
	}
}

type WebhookPullRequestReviewRequested1PullRequestUserType string

const (
	WebhookPullRequestReviewRequested1PullRequestUserTypeBot WebhookPullRequestReviewRequested1PullRequestUserType = "Bot"
	WebhookPullRequestReviewRequested1PullRequestUserTypeMannequin WebhookPullRequestReviewRequested1PullRequestUserType = "Mannequin"
	WebhookPullRequestReviewRequested1PullRequestUserTypeOrganization WebhookPullRequestReviewRequested1PullRequestUserType = "Organization"
	WebhookPullRequestReviewRequested1PullRequestUserTypeUser WebhookPullRequestReviewRequested1PullRequestUserType = "User"
)

// PossibleWebhookPullRequestReviewRequested1PullRequestUserTypeValues returns the possible values for the WebhookPullRequestReviewRequested1PullRequestUserType const type.
func PossibleWebhookPullRequestReviewRequested1PullRequestUserTypeValues() []WebhookPullRequestReviewRequested1PullRequestUserType {
	return []WebhookPullRequestReviewRequested1PullRequestUserType{
		WebhookPullRequestReviewRequested1PullRequestUserTypeBot,
		WebhookPullRequestReviewRequested1PullRequestUserTypeMannequin,
		WebhookPullRequestReviewRequested1PullRequestUserTypeOrganization,
		WebhookPullRequestReviewRequested1PullRequestUserTypeUser,
	}
}

type WebhookPullRequestReviewRequested1RequestedTeamParentPrivacy string

const (
	WebhookPullRequestReviewRequested1RequestedTeamParentPrivacyClosed WebhookPullRequestReviewRequested1RequestedTeamParentPrivacy = "closed"
	WebhookPullRequestReviewRequested1RequestedTeamParentPrivacyOpen WebhookPullRequestReviewRequested1RequestedTeamParentPrivacy = "open"
	WebhookPullRequestReviewRequested1RequestedTeamParentPrivacySecret WebhookPullRequestReviewRequested1RequestedTeamParentPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewRequested1RequestedTeamParentPrivacyValues returns the possible values for the WebhookPullRequestReviewRequested1RequestedTeamParentPrivacy const type.
func PossibleWebhookPullRequestReviewRequested1RequestedTeamParentPrivacyValues() []WebhookPullRequestReviewRequested1RequestedTeamParentPrivacy {
	return []WebhookPullRequestReviewRequested1RequestedTeamParentPrivacy{
		WebhookPullRequestReviewRequested1RequestedTeamParentPrivacyClosed,
		WebhookPullRequestReviewRequested1RequestedTeamParentPrivacyOpen,
		WebhookPullRequestReviewRequested1RequestedTeamParentPrivacySecret,
	}
}

type WebhookPullRequestReviewRequested1RequestedTeamPrivacy string

const (
	WebhookPullRequestReviewRequested1RequestedTeamPrivacyClosed WebhookPullRequestReviewRequested1RequestedTeamPrivacy = "closed"
	WebhookPullRequestReviewRequested1RequestedTeamPrivacyOpen WebhookPullRequestReviewRequested1RequestedTeamPrivacy = "open"
	WebhookPullRequestReviewRequested1RequestedTeamPrivacySecret WebhookPullRequestReviewRequested1RequestedTeamPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewRequested1RequestedTeamPrivacyValues returns the possible values for the WebhookPullRequestReviewRequested1RequestedTeamPrivacy const type.
func PossibleWebhookPullRequestReviewRequested1RequestedTeamPrivacyValues() []WebhookPullRequestReviewRequested1RequestedTeamPrivacy {
	return []WebhookPullRequestReviewRequested1RequestedTeamPrivacy{
		WebhookPullRequestReviewRequested1RequestedTeamPrivacyClosed,
		WebhookPullRequestReviewRequested1RequestedTeamPrivacyOpen,
		WebhookPullRequestReviewRequested1RequestedTeamPrivacySecret,
	}
}

type WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemType string

const (
	WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemTypeBot WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemType = "Bot"
	WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemTypeMannequin WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemType = "Mannequin"
	WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemTypeOrganization WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemType = "Organization"
	WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemTypeUser WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemTypeValues() []WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemType {
	return []WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemType{
		WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemTypeBot,
		WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemTypeMannequin,
		WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestReviewRequestedOneOf0PullRequestAssigneesItemTypeUser,
	}
}

type WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestReviewRequestedOneOf0PullRequestRequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemType string

const (
	WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemTypeBot WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemType = "Bot"
	WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemTypeMannequin WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemType = "Mannequin"
	WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemTypeOrganization WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemType = "Organization"
	WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemTypeUser WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemTypeValues() []WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemType {
	return []WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemType{
		WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemTypeBot,
		WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemTypeMannequin,
		WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestReviewRequestedOneOf1PullRequestAssigneesItemTypeUser,
	}
}

type WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestReviewRequestedOneOf1PullRequestRequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestReviewSubmittedAction string

const (
	WebhookPullRequestReviewSubmittedActionSubmitted WebhookPullRequestReviewSubmittedAction = "submitted"
)

// PossibleWebhookPullRequestReviewSubmittedActionValues returns the possible values for the WebhookPullRequestReviewSubmittedAction const type.
func PossibleWebhookPullRequestReviewSubmittedActionValues() []WebhookPullRequestReviewSubmittedAction {
	return []WebhookPullRequestReviewSubmittedAction{
		WebhookPullRequestReviewSubmittedActionSubmitted,
	}
}

type WebhookPullRequestReviewSubmittedPullRequestActiveLockReason string

const (
	WebhookPullRequestReviewSubmittedPullRequestActiveLockReasonNull WebhookPullRequestReviewSubmittedPullRequestActiveLockReason = "null"
	WebhookPullRequestReviewSubmittedPullRequestActiveLockReasonOffTopic WebhookPullRequestReviewSubmittedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestReviewSubmittedPullRequestActiveLockReasonResolved WebhookPullRequestReviewSubmittedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestReviewSubmittedPullRequestActiveLockReasonSpam WebhookPullRequestReviewSubmittedPullRequestActiveLockReason = "spam"
	WebhookPullRequestReviewSubmittedPullRequestActiveLockReasonTooHeated WebhookPullRequestReviewSubmittedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestActiveLockReasonValues() []WebhookPullRequestReviewSubmittedPullRequestActiveLockReason {
	return []WebhookPullRequestReviewSubmittedPullRequestActiveLockReason{
		WebhookPullRequestReviewSubmittedPullRequestActiveLockReasonNull,
		WebhookPullRequestReviewSubmittedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestReviewSubmittedPullRequestActiveLockReasonResolved,
		WebhookPullRequestReviewSubmittedPullRequestActiveLockReasonSpam,
		WebhookPullRequestReviewSubmittedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestReviewSubmittedPullRequestAssigneeType string

const (
	WebhookPullRequestReviewSubmittedPullRequestAssigneeTypeBot WebhookPullRequestReviewSubmittedPullRequestAssigneeType = "Bot"
	WebhookPullRequestReviewSubmittedPullRequestAssigneeTypeMannequin WebhookPullRequestReviewSubmittedPullRequestAssigneeType = "Mannequin"
	WebhookPullRequestReviewSubmittedPullRequestAssigneeTypeOrganization WebhookPullRequestReviewSubmittedPullRequestAssigneeType = "Organization"
	WebhookPullRequestReviewSubmittedPullRequestAssigneeTypeUser WebhookPullRequestReviewSubmittedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestAssigneeTypeValues() []WebhookPullRequestReviewSubmittedPullRequestAssigneeType {
	return []WebhookPullRequestReviewSubmittedPullRequestAssigneeType{
		WebhookPullRequestReviewSubmittedPullRequestAssigneeTypeBot,
		WebhookPullRequestReviewSubmittedPullRequestAssigneeTypeMannequin,
		WebhookPullRequestReviewSubmittedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestReviewSubmittedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestReviewSubmittedPullRequestAssigneesItemType string

const (
	WebhookPullRequestReviewSubmittedPullRequestAssigneesItemTypeBot WebhookPullRequestReviewSubmittedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestReviewSubmittedPullRequestAssigneesItemTypeMannequin WebhookPullRequestReviewSubmittedPullRequestAssigneesItemType = "Mannequin"
	WebhookPullRequestReviewSubmittedPullRequestAssigneesItemTypeOrganization WebhookPullRequestReviewSubmittedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestReviewSubmittedPullRequestAssigneesItemTypeUser WebhookPullRequestReviewSubmittedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestAssigneesItemTypeValues() []WebhookPullRequestReviewSubmittedPullRequestAssigneesItemType {
	return []WebhookPullRequestReviewSubmittedPullRequestAssigneesItemType{
		WebhookPullRequestReviewSubmittedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestReviewSubmittedPullRequestAssigneesItemTypeMannequin,
		WebhookPullRequestReviewSubmittedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestReviewSubmittedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestReviewSubmittedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewSubmittedPullRequestAuthorAssociation string

const (
	WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestReviewSubmittedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewSubmittedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewSubmittedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestReviewSubmittedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestReviewSubmittedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationMEMBER WebhookPullRequestReviewSubmittedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationNONE WebhookPullRequestReviewSubmittedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationOWNER WebhookPullRequestReviewSubmittedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestAuthorAssociationValues() []WebhookPullRequestReviewSubmittedPullRequestAuthorAssociation {
	return []WebhookPullRequestReviewSubmittedPullRequestAuthorAssociation{
		WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationNONE,
		WebhookPullRequestReviewSubmittedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestReviewSubmittedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestReviewSubmittedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestReviewSubmittedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestReviewSubmittedPullRequestAutoMergeMethodMerge WebhookPullRequestReviewSubmittedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestReviewSubmittedPullRequestAutoMergeMethodRebase WebhookPullRequestReviewSubmittedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestReviewSubmittedPullRequestAutoMergeMethodSquash WebhookPullRequestReviewSubmittedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestAutoMergeMethodValues() []WebhookPullRequestReviewSubmittedPullRequestAutoMergeMethod {
	return []WebhookPullRequestReviewSubmittedPullRequestAutoMergeMethod{
		WebhookPullRequestReviewSubmittedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestReviewSubmittedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestReviewSubmittedPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerType{
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibilityInternal WebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibilityPublic WebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibility{
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestReviewSubmittedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewSubmittedPullRequestBaseUserType string

const (
	WebhookPullRequestReviewSubmittedPullRequestBaseUserTypeBot WebhookPullRequestReviewSubmittedPullRequestBaseUserType = "Bot"
	WebhookPullRequestReviewSubmittedPullRequestBaseUserTypeOrganization WebhookPullRequestReviewSubmittedPullRequestBaseUserType = "Organization"
	WebhookPullRequestReviewSubmittedPullRequestBaseUserTypeUser WebhookPullRequestReviewSubmittedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestBaseUserTypeValues() []WebhookPullRequestReviewSubmittedPullRequestBaseUserType {
	return []WebhookPullRequestReviewSubmittedPullRequestBaseUserType{
		WebhookPullRequestReviewSubmittedPullRequestBaseUserTypeBot,
		WebhookPullRequestReviewSubmittedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestReviewSubmittedPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerType{
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit
// title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibilityInternal WebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibilityPublic WebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibility{
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestReviewSubmittedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewSubmittedPullRequestHeadUserType string

const (
	WebhookPullRequestReviewSubmittedPullRequestHeadUserTypeBot WebhookPullRequestReviewSubmittedPullRequestHeadUserType = "Bot"
	WebhookPullRequestReviewSubmittedPullRequestHeadUserTypeOrganization WebhookPullRequestReviewSubmittedPullRequestHeadUserType = "Organization"
	WebhookPullRequestReviewSubmittedPullRequestHeadUserTypeUser WebhookPullRequestReviewSubmittedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestHeadUserTypeValues() []WebhookPullRequestReviewSubmittedPullRequestHeadUserType {
	return []WebhookPullRequestReviewSubmittedPullRequestHeadUserType{
		WebhookPullRequestReviewSubmittedPullRequestHeadUserTypeBot,
		WebhookPullRequestReviewSubmittedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestReviewSubmittedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorTypeBot WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorTypeMannequin WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorTypeUser WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorType{
		WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestReviewSubmittedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestReviewSubmittedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestReviewSubmittedPullRequestMilestoneState string

const (
	WebhookPullRequestReviewSubmittedPullRequestMilestoneStateClosed WebhookPullRequestReviewSubmittedPullRequestMilestoneState = "closed"
	WebhookPullRequestReviewSubmittedPullRequestMilestoneStateOpen WebhookPullRequestReviewSubmittedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestMilestoneStateValues() []WebhookPullRequestReviewSubmittedPullRequestMilestoneState {
	return []WebhookPullRequestReviewSubmittedPullRequestMilestoneState{
		WebhookPullRequestReviewSubmittedPullRequestMilestoneStateClosed,
		WebhookPullRequestReviewSubmittedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestReviewSubmittedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestReviewSubmittedPullRequestState string

const (
	WebhookPullRequestReviewSubmittedPullRequestStateClosed WebhookPullRequestReviewSubmittedPullRequestState = "closed"
	WebhookPullRequestReviewSubmittedPullRequestStateOpen WebhookPullRequestReviewSubmittedPullRequestState = "open"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestStateValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestState const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestStateValues() []WebhookPullRequestReviewSubmittedPullRequestState {
	return []WebhookPullRequestReviewSubmittedPullRequestState{
		WebhookPullRequestReviewSubmittedPullRequestStateClosed,
		WebhookPullRequestReviewSubmittedPullRequestStateOpen,
	}
}

type WebhookPullRequestReviewSubmittedPullRequestUserType string

const (
	WebhookPullRequestReviewSubmittedPullRequestUserTypeBot WebhookPullRequestReviewSubmittedPullRequestUserType = "Bot"
	WebhookPullRequestReviewSubmittedPullRequestUserTypeMannequin WebhookPullRequestReviewSubmittedPullRequestUserType = "Mannequin"
	WebhookPullRequestReviewSubmittedPullRequestUserTypeOrganization WebhookPullRequestReviewSubmittedPullRequestUserType = "Organization"
	WebhookPullRequestReviewSubmittedPullRequestUserTypeUser WebhookPullRequestReviewSubmittedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestReviewSubmittedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestReviewSubmittedPullRequestUserType const type.
func PossibleWebhookPullRequestReviewSubmittedPullRequestUserTypeValues() []WebhookPullRequestReviewSubmittedPullRequestUserType {
	return []WebhookPullRequestReviewSubmittedPullRequestUserType{
		WebhookPullRequestReviewSubmittedPullRequestUserTypeBot,
		WebhookPullRequestReviewSubmittedPullRequestUserTypeMannequin,
		WebhookPullRequestReviewSubmittedPullRequestUserTypeOrganization,
		WebhookPullRequestReviewSubmittedPullRequestUserTypeUser,
	}
}

// WebhookPullRequestReviewSubmittedReviewAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewSubmittedReviewAuthorAssociation string

const (
	WebhookPullRequestReviewSubmittedReviewAuthorAssociationCOLLABORATOR WebhookPullRequestReviewSubmittedReviewAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewSubmittedReviewAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewSubmittedReviewAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewSubmittedReviewAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewSubmittedReviewAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewSubmittedReviewAuthorAssociationFIRSTTIMER WebhookPullRequestReviewSubmittedReviewAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewSubmittedReviewAuthorAssociationMANNEQUIN WebhookPullRequestReviewSubmittedReviewAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewSubmittedReviewAuthorAssociationMEMBER WebhookPullRequestReviewSubmittedReviewAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewSubmittedReviewAuthorAssociationNONE WebhookPullRequestReviewSubmittedReviewAuthorAssociation = "NONE"
	WebhookPullRequestReviewSubmittedReviewAuthorAssociationOWNER WebhookPullRequestReviewSubmittedReviewAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewSubmittedReviewAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewSubmittedReviewAuthorAssociation const type.
func PossibleWebhookPullRequestReviewSubmittedReviewAuthorAssociationValues() []WebhookPullRequestReviewSubmittedReviewAuthorAssociation {
	return []WebhookPullRequestReviewSubmittedReviewAuthorAssociation{
		WebhookPullRequestReviewSubmittedReviewAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewSubmittedReviewAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewSubmittedReviewAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewSubmittedReviewAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewSubmittedReviewAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewSubmittedReviewAuthorAssociationMEMBER,
		WebhookPullRequestReviewSubmittedReviewAuthorAssociationNONE,
		WebhookPullRequestReviewSubmittedReviewAuthorAssociationOWNER,
	}
}

type WebhookPullRequestReviewSubmittedReviewUserType string

const (
	WebhookPullRequestReviewSubmittedReviewUserTypeBot WebhookPullRequestReviewSubmittedReviewUserType = "Bot"
	WebhookPullRequestReviewSubmittedReviewUserTypeOrganization WebhookPullRequestReviewSubmittedReviewUserType = "Organization"
	WebhookPullRequestReviewSubmittedReviewUserTypeUser WebhookPullRequestReviewSubmittedReviewUserType = "User"
)

// PossibleWebhookPullRequestReviewSubmittedReviewUserTypeValues returns the possible values for the WebhookPullRequestReviewSubmittedReviewUserType const type.
func PossibleWebhookPullRequestReviewSubmittedReviewUserTypeValues() []WebhookPullRequestReviewSubmittedReviewUserType {
	return []WebhookPullRequestReviewSubmittedReviewUserType{
		WebhookPullRequestReviewSubmittedReviewUserTypeBot,
		WebhookPullRequestReviewSubmittedReviewUserTypeOrganization,
		WebhookPullRequestReviewSubmittedReviewUserTypeUser,
	}
}

type WebhookPullRequestReviewThreadResolvedAction string

const (
	WebhookPullRequestReviewThreadResolvedActionResolved WebhookPullRequestReviewThreadResolvedAction = "resolved"
)

// PossibleWebhookPullRequestReviewThreadResolvedActionValues returns the possible values for the WebhookPullRequestReviewThreadResolvedAction const type.
func PossibleWebhookPullRequestReviewThreadResolvedActionValues() []WebhookPullRequestReviewThreadResolvedAction {
	return []WebhookPullRequestReviewThreadResolvedAction{
		WebhookPullRequestReviewThreadResolvedActionResolved,
	}
}

type WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReason string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReasonNull WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReason = "null"
	WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReasonOffTopic WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReasonResolved WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReasonSpam WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReason = "spam"
	WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReasonTooHeated WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestActiveLockReasonValues() []WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReason {
	return []WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReason{
		WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReasonNull,
		WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReasonResolved,
		WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReasonSpam,
		WebhookPullRequestReviewThreadResolvedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestReviewThreadResolvedPullRequestAssigneeType string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestAssigneeTypeBot WebhookPullRequestReviewThreadResolvedPullRequestAssigneeType = "Bot"
	WebhookPullRequestReviewThreadResolvedPullRequestAssigneeTypeOrganization WebhookPullRequestReviewThreadResolvedPullRequestAssigneeType = "Organization"
	WebhookPullRequestReviewThreadResolvedPullRequestAssigneeTypeUser WebhookPullRequestReviewThreadResolvedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestAssigneeTypeValues() []WebhookPullRequestReviewThreadResolvedPullRequestAssigneeType {
	return []WebhookPullRequestReviewThreadResolvedPullRequestAssigneeType{
		WebhookPullRequestReviewThreadResolvedPullRequestAssigneeTypeBot,
		WebhookPullRequestReviewThreadResolvedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestReviewThreadResolvedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemType string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemTypeBot WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemTypeOrganization WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemTypeUser WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemTypeValues() []WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemType {
	return []WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemType{
		WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestReviewThreadResolvedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociation string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationMEMBER WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationNONE WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationOWNER WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationValues() []WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociation {
	return []WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociation{
		WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationNONE,
		WebhookPullRequestReviewThreadResolvedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethodMerge WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethodRebase WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethodSquash WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethodValues() []WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethod {
	return []WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethod{
		WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestReviewThreadResolvedPullRequestAutoMergeMethodSquash,
	}
}

type WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerType{
		WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoOwnerTypeUser,
	}
}

type WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibilityInternal WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibilityPublic WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibility{
		WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestReviewThreadResolvedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewThreadResolvedPullRequestBaseUserType string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestBaseUserTypeBot WebhookPullRequestReviewThreadResolvedPullRequestBaseUserType = "Bot"
	WebhookPullRequestReviewThreadResolvedPullRequestBaseUserTypeOrganization WebhookPullRequestReviewThreadResolvedPullRequestBaseUserType = "Organization"
	WebhookPullRequestReviewThreadResolvedPullRequestBaseUserTypeUser WebhookPullRequestReviewThreadResolvedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestBaseUserTypeValues() []WebhookPullRequestReviewThreadResolvedPullRequestBaseUserType {
	return []WebhookPullRequestReviewThreadResolvedPullRequestBaseUserType{
		WebhookPullRequestReviewThreadResolvedPullRequestBaseUserTypeBot,
		WebhookPullRequestReviewThreadResolvedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestReviewThreadResolvedPullRequestBaseUserTypeUser,
	}
}

type WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerType{
		WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoOwnerTypeUser,
	}
}

type WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibilityInternal WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibilityPublic WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibility{
		WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestReviewThreadResolvedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewThreadResolvedPullRequestHeadUserType string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestHeadUserTypeBot WebhookPullRequestReviewThreadResolvedPullRequestHeadUserType = "Bot"
	WebhookPullRequestReviewThreadResolvedPullRequestHeadUserTypeOrganization WebhookPullRequestReviewThreadResolvedPullRequestHeadUserType = "Organization"
	WebhookPullRequestReviewThreadResolvedPullRequestHeadUserTypeUser WebhookPullRequestReviewThreadResolvedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestHeadUserTypeValues() []WebhookPullRequestReviewThreadResolvedPullRequestHeadUserType {
	return []WebhookPullRequestReviewThreadResolvedPullRequestHeadUserType{
		WebhookPullRequestReviewThreadResolvedPullRequestHeadUserTypeBot,
		WebhookPullRequestReviewThreadResolvedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestReviewThreadResolvedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorTypeBot WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorTypeUser WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorType{
		WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestReviewThreadResolvedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestReviewThreadResolvedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestReviewThreadResolvedPullRequestMilestoneState string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestMilestoneStateClosed WebhookPullRequestReviewThreadResolvedPullRequestMilestoneState = "closed"
	WebhookPullRequestReviewThreadResolvedPullRequestMilestoneStateOpen WebhookPullRequestReviewThreadResolvedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestMilestoneStateValues() []WebhookPullRequestReviewThreadResolvedPullRequestMilestoneState {
	return []WebhookPullRequestReviewThreadResolvedPullRequestMilestoneState{
		WebhookPullRequestReviewThreadResolvedPullRequestMilestoneStateClosed,
		WebhookPullRequestReviewThreadResolvedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestReviewThreadResolvedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestReviewThreadResolvedPullRequestState string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestStateClosed WebhookPullRequestReviewThreadResolvedPullRequestState = "closed"
	WebhookPullRequestReviewThreadResolvedPullRequestStateOpen WebhookPullRequestReviewThreadResolvedPullRequestState = "open"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestStateValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestState const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestStateValues() []WebhookPullRequestReviewThreadResolvedPullRequestState {
	return []WebhookPullRequestReviewThreadResolvedPullRequestState{
		WebhookPullRequestReviewThreadResolvedPullRequestStateClosed,
		WebhookPullRequestReviewThreadResolvedPullRequestStateOpen,
	}
}

type WebhookPullRequestReviewThreadResolvedPullRequestUserType string

const (
	WebhookPullRequestReviewThreadResolvedPullRequestUserTypeBot WebhookPullRequestReviewThreadResolvedPullRequestUserType = "Bot"
	WebhookPullRequestReviewThreadResolvedPullRequestUserTypeMannequin WebhookPullRequestReviewThreadResolvedPullRequestUserType = "Mannequin"
	WebhookPullRequestReviewThreadResolvedPullRequestUserTypeOrganization WebhookPullRequestReviewThreadResolvedPullRequestUserType = "Organization"
	WebhookPullRequestReviewThreadResolvedPullRequestUserTypeUser WebhookPullRequestReviewThreadResolvedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestReviewThreadResolvedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestReviewThreadResolvedPullRequestUserType const type.
func PossibleWebhookPullRequestReviewThreadResolvedPullRequestUserTypeValues() []WebhookPullRequestReviewThreadResolvedPullRequestUserType {
	return []WebhookPullRequestReviewThreadResolvedPullRequestUserType{
		WebhookPullRequestReviewThreadResolvedPullRequestUserTypeBot,
		WebhookPullRequestReviewThreadResolvedPullRequestUserTypeMannequin,
		WebhookPullRequestReviewThreadResolvedPullRequestUserTypeOrganization,
		WebhookPullRequestReviewThreadResolvedPullRequestUserTypeUser,
	}
}

// WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociation string

const (
	WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationCOLLABORATOR WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationFIRSTTIMER WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationMANNEQUIN WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationMEMBER WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationNONE WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociation = "NONE"
	WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationOWNER WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociation const type.
func PossibleWebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationValues() []WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociation {
	return []WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociation{
		WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationMEMBER,
		WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationNONE,
		WebhookPullRequestReviewThreadResolvedThreadCommentsItemAuthorAssociationOWNER,
	}
}

// WebhookPullRequestReviewThreadResolvedThreadCommentsItemSide - The side of the first line of the range for a multi-line
// comment.
type WebhookPullRequestReviewThreadResolvedThreadCommentsItemSide string

const (
	WebhookPullRequestReviewThreadResolvedThreadCommentsItemSideLEFT WebhookPullRequestReviewThreadResolvedThreadCommentsItemSide = "LEFT"
	WebhookPullRequestReviewThreadResolvedThreadCommentsItemSideRIGHT WebhookPullRequestReviewThreadResolvedThreadCommentsItemSide = "RIGHT"
)

// PossibleWebhookPullRequestReviewThreadResolvedThreadCommentsItemSideValues returns the possible values for the WebhookPullRequestReviewThreadResolvedThreadCommentsItemSide const type.
func PossibleWebhookPullRequestReviewThreadResolvedThreadCommentsItemSideValues() []WebhookPullRequestReviewThreadResolvedThreadCommentsItemSide {
	return []WebhookPullRequestReviewThreadResolvedThreadCommentsItemSide{
		WebhookPullRequestReviewThreadResolvedThreadCommentsItemSideLEFT,
		WebhookPullRequestReviewThreadResolvedThreadCommentsItemSideRIGHT,
	}
}

// WebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSide - The side of the first line of the range for a multi-line
// comment.
type WebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSide string

const (
	WebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSideLEFT WebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSide = "LEFT"
	WebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSideNull WebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSide = "null"
	WebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSideRIGHT WebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSide = "RIGHT"
)

// PossibleWebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSideValues returns the possible values for the WebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSide const type.
func PossibleWebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSideValues() []WebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSide {
	return []WebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSide{
		WebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSideLEFT,
		WebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSideNull,
		WebhookPullRequestReviewThreadResolvedThreadCommentsItemStartSideRIGHT,
	}
}

type WebhookPullRequestReviewThreadUnresolvedAction string

const (
	WebhookPullRequestReviewThreadUnresolvedActionUnresolved WebhookPullRequestReviewThreadUnresolvedAction = "unresolved"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedActionValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedAction const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedActionValues() []WebhookPullRequestReviewThreadUnresolvedAction {
	return []WebhookPullRequestReviewThreadUnresolvedAction{
		WebhookPullRequestReviewThreadUnresolvedActionUnresolved,
	}
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReason string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReasonNull WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReason = "null"
	WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReasonOffTopic WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReasonResolved WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReasonSpam WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReason = "spam"
	WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReasonTooHeated WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReasonValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReason {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReason{
		WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReasonNull,
		WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReasonResolved,
		WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReasonSpam,
		WebhookPullRequestReviewThreadUnresolvedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeType string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeTypeBot WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeType = "Bot"
	WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeTypeOrganization WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeType = "Organization"
	WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeTypeUser WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeTypeValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeType {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeType{
		WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeTypeBot,
		WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemType string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemTypeBot WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemTypeOrganization WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemTypeUser WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemTypeValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemType {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemType{
		WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestReviewThreadUnresolvedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociation string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationMEMBER WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationNONE WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationOWNER WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociation {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociation{
		WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationNONE,
		WebhookPullRequestReviewThreadUnresolvedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethodMerge WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethodRebase WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethodSquash WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethodValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethod {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethod{
		WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestReviewThreadUnresolvedPullRequestAutoMergeMethodSquash,
	}
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerType{
		WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoOwnerTypeUser,
	}
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibilityInternal WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibilityPublic WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibility{
		WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestReviewThreadUnresolvedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserType string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserTypeBot WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserType = "Bot"
	WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserTypeOrganization WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserType = "Organization"
	WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserTypeUser WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserTypeValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserType {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserType{
		WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserTypeBot,
		WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestReviewThreadUnresolvedPullRequestBaseUserTypeUser,
	}
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerType{
		WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoOwnerTypeUser,
	}
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibilityInternal WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibilityPublic WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibility{
		WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestReviewThreadUnresolvedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserType string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserTypeBot WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserType = "Bot"
	WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserTypeOrganization WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserType = "Organization"
	WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserTypeUser WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserTypeValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserType {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserType{
		WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserTypeBot,
		WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestReviewThreadUnresolvedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorTypeBot WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorTypeUser WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorType{
		WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneState string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneStateClosed WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneState = "closed"
	WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneStateOpen WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneStateValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneState {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneState{
		WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneStateClosed,
		WebhookPullRequestReviewThreadUnresolvedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestReviewThreadUnresolvedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestState string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestStateClosed WebhookPullRequestReviewThreadUnresolvedPullRequestState = "closed"
	WebhookPullRequestReviewThreadUnresolvedPullRequestStateOpen WebhookPullRequestReviewThreadUnresolvedPullRequestState = "open"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestStateValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestState const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestStateValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestState {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestState{
		WebhookPullRequestReviewThreadUnresolvedPullRequestStateClosed,
		WebhookPullRequestReviewThreadUnresolvedPullRequestStateOpen,
	}
}

type WebhookPullRequestReviewThreadUnresolvedPullRequestUserType string

const (
	WebhookPullRequestReviewThreadUnresolvedPullRequestUserTypeBot WebhookPullRequestReviewThreadUnresolvedPullRequestUserType = "Bot"
	WebhookPullRequestReviewThreadUnresolvedPullRequestUserTypeOrganization WebhookPullRequestReviewThreadUnresolvedPullRequestUserType = "Organization"
	WebhookPullRequestReviewThreadUnresolvedPullRequestUserTypeUser WebhookPullRequestReviewThreadUnresolvedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedPullRequestUserType const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedPullRequestUserTypeValues() []WebhookPullRequestReviewThreadUnresolvedPullRequestUserType {
	return []WebhookPullRequestReviewThreadUnresolvedPullRequestUserType{
		WebhookPullRequestReviewThreadUnresolvedPullRequestUserTypeBot,
		WebhookPullRequestReviewThreadUnresolvedPullRequestUserTypeOrganization,
		WebhookPullRequestReviewThreadUnresolvedPullRequestUserTypeUser,
	}
}

// WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociation string

const (
	WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationCOLLABORATOR WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationCONTRIBUTOR WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationFIRSTTIMER WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationMANNEQUIN WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationMEMBER WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociation = "MEMBER"
	WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationNONE WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociation = "NONE"
	WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationOWNER WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociation const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationValues() []WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociation {
	return []WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociation{
		WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationCOLLABORATOR,
		WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationFIRSTTIMER,
		WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationMANNEQUIN,
		WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationMEMBER,
		WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationNONE,
		WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemAuthorAssociationOWNER,
	}
}

// WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemSide - The side of the first line of the range for a multi-line
// comment.
type WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemSide string

const (
	WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemSideLEFT WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemSide = "LEFT"
	WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemSideRIGHT WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemSide = "RIGHT"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedThreadCommentsItemSideValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemSide const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedThreadCommentsItemSideValues() []WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemSide {
	return []WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemSide{
		WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemSideLEFT,
		WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemSideRIGHT,
	}
}

// WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSide - The side of the first line of the range for a multi-line
// comment.
type WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSide string

const (
	WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSideLEFT WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSide = "LEFT"
	WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSideNull WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSide = "null"
	WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSideRIGHT WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSide = "RIGHT"
)

// PossibleWebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSideValues returns the possible values for the WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSide const type.
func PossibleWebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSideValues() []WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSide {
	return []WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSide{
		WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSideLEFT,
		WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSideNull,
		WebhookPullRequestReviewThreadUnresolvedThreadCommentsItemStartSideRIGHT,
	}
}

type WebhookPullRequestSynchronizeAction string

const (
	WebhookPullRequestSynchronizeActionSynchronize WebhookPullRequestSynchronizeAction = "synchronize"
)

// PossibleWebhookPullRequestSynchronizeActionValues returns the possible values for the WebhookPullRequestSynchronizeAction const type.
func PossibleWebhookPullRequestSynchronizeActionValues() []WebhookPullRequestSynchronizeAction {
	return []WebhookPullRequestSynchronizeAction{
		WebhookPullRequestSynchronizeActionSynchronize,
	}
}

type WebhookPullRequestSynchronizePullRequestActiveLockReason string

const (
	WebhookPullRequestSynchronizePullRequestActiveLockReasonNull WebhookPullRequestSynchronizePullRequestActiveLockReason = "null"
	WebhookPullRequestSynchronizePullRequestActiveLockReasonOffTopic WebhookPullRequestSynchronizePullRequestActiveLockReason = "off-topic"
	WebhookPullRequestSynchronizePullRequestActiveLockReasonResolved WebhookPullRequestSynchronizePullRequestActiveLockReason = "resolved"
	WebhookPullRequestSynchronizePullRequestActiveLockReasonSpam WebhookPullRequestSynchronizePullRequestActiveLockReason = "spam"
	WebhookPullRequestSynchronizePullRequestActiveLockReasonTooHeated WebhookPullRequestSynchronizePullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestSynchronizePullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestSynchronizePullRequestActiveLockReason const type.
func PossibleWebhookPullRequestSynchronizePullRequestActiveLockReasonValues() []WebhookPullRequestSynchronizePullRequestActiveLockReason {
	return []WebhookPullRequestSynchronizePullRequestActiveLockReason{
		WebhookPullRequestSynchronizePullRequestActiveLockReasonNull,
		WebhookPullRequestSynchronizePullRequestActiveLockReasonOffTopic,
		WebhookPullRequestSynchronizePullRequestActiveLockReasonResolved,
		WebhookPullRequestSynchronizePullRequestActiveLockReasonSpam,
		WebhookPullRequestSynchronizePullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestSynchronizePullRequestAssigneeType string

const (
	WebhookPullRequestSynchronizePullRequestAssigneeTypeBot WebhookPullRequestSynchronizePullRequestAssigneeType = "Bot"
	WebhookPullRequestSynchronizePullRequestAssigneeTypeMannequin WebhookPullRequestSynchronizePullRequestAssigneeType = "Mannequin"
	WebhookPullRequestSynchronizePullRequestAssigneeTypeOrganization WebhookPullRequestSynchronizePullRequestAssigneeType = "Organization"
	WebhookPullRequestSynchronizePullRequestAssigneeTypeUser WebhookPullRequestSynchronizePullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestSynchronizePullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestSynchronizePullRequestAssigneeType const type.
func PossibleWebhookPullRequestSynchronizePullRequestAssigneeTypeValues() []WebhookPullRequestSynchronizePullRequestAssigneeType {
	return []WebhookPullRequestSynchronizePullRequestAssigneeType{
		WebhookPullRequestSynchronizePullRequestAssigneeTypeBot,
		WebhookPullRequestSynchronizePullRequestAssigneeTypeMannequin,
		WebhookPullRequestSynchronizePullRequestAssigneeTypeOrganization,
		WebhookPullRequestSynchronizePullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestSynchronizePullRequestAssigneesItemType string

const (
	WebhookPullRequestSynchronizePullRequestAssigneesItemTypeBot WebhookPullRequestSynchronizePullRequestAssigneesItemType = "Bot"
	WebhookPullRequestSynchronizePullRequestAssigneesItemTypeMannequin WebhookPullRequestSynchronizePullRequestAssigneesItemType = "Mannequin"
	WebhookPullRequestSynchronizePullRequestAssigneesItemTypeOrganization WebhookPullRequestSynchronizePullRequestAssigneesItemType = "Organization"
	WebhookPullRequestSynchronizePullRequestAssigneesItemTypeUser WebhookPullRequestSynchronizePullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestSynchronizePullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestSynchronizePullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestSynchronizePullRequestAssigneesItemTypeValues() []WebhookPullRequestSynchronizePullRequestAssigneesItemType {
	return []WebhookPullRequestSynchronizePullRequestAssigneesItemType{
		WebhookPullRequestSynchronizePullRequestAssigneesItemTypeBot,
		WebhookPullRequestSynchronizePullRequestAssigneesItemTypeMannequin,
		WebhookPullRequestSynchronizePullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestSynchronizePullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestSynchronizePullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestSynchronizePullRequestAuthorAssociation string

const (
	WebhookPullRequestSynchronizePullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestSynchronizePullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestSynchronizePullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestSynchronizePullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestSynchronizePullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestSynchronizePullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestSynchronizePullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestSynchronizePullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestSynchronizePullRequestAuthorAssociationMANNEQUIN WebhookPullRequestSynchronizePullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestSynchronizePullRequestAuthorAssociationMEMBER WebhookPullRequestSynchronizePullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestSynchronizePullRequestAuthorAssociationNONE WebhookPullRequestSynchronizePullRequestAuthorAssociation = "NONE"
	WebhookPullRequestSynchronizePullRequestAuthorAssociationOWNER WebhookPullRequestSynchronizePullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestSynchronizePullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestSynchronizePullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestSynchronizePullRequestAuthorAssociationValues() []WebhookPullRequestSynchronizePullRequestAuthorAssociation {
	return []WebhookPullRequestSynchronizePullRequestAuthorAssociation{
		WebhookPullRequestSynchronizePullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestSynchronizePullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestSynchronizePullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestSynchronizePullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestSynchronizePullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestSynchronizePullRequestAuthorAssociationMEMBER,
		WebhookPullRequestSynchronizePullRequestAuthorAssociationNONE,
		WebhookPullRequestSynchronizePullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestSynchronizePullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestSynchronizePullRequestAutoMergeEnabledByTypeBot WebhookPullRequestSynchronizePullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestSynchronizePullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestSynchronizePullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestSynchronizePullRequestAutoMergeEnabledByTypeUser WebhookPullRequestSynchronizePullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestSynchronizePullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestSynchronizePullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestSynchronizePullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestSynchronizePullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestSynchronizePullRequestAutoMergeEnabledByType{
		WebhookPullRequestSynchronizePullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestSynchronizePullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestSynchronizePullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestSynchronizePullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestSynchronizePullRequestAutoMergeMethod string

const (
	WebhookPullRequestSynchronizePullRequestAutoMergeMethodMerge WebhookPullRequestSynchronizePullRequestAutoMergeMethod = "merge"
	WebhookPullRequestSynchronizePullRequestAutoMergeMethodRebase WebhookPullRequestSynchronizePullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestSynchronizePullRequestAutoMergeMethodSquash WebhookPullRequestSynchronizePullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestSynchronizePullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestSynchronizePullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestSynchronizePullRequestAutoMergeMethodValues() []WebhookPullRequestSynchronizePullRequestAutoMergeMethod {
	return []WebhookPullRequestSynchronizePullRequestAutoMergeMethod{
		WebhookPullRequestSynchronizePullRequestAutoMergeMethodMerge,
		WebhookPullRequestSynchronizePullRequestAutoMergeMethodRebase,
		WebhookPullRequestSynchronizePullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestSynchronizePullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestSynchronizePullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestSynchronizePullRequestBaseRepoOwnerTypeBot WebhookPullRequestSynchronizePullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestSynchronizePullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestSynchronizePullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestSynchronizePullRequestBaseRepoOwnerTypeUser WebhookPullRequestSynchronizePullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestSynchronizePullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestSynchronizePullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestSynchronizePullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestSynchronizePullRequestBaseRepoOwnerType {
	return []WebhookPullRequestSynchronizePullRequestBaseRepoOwnerType{
		WebhookPullRequestSynchronizePullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestSynchronizePullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestSynchronizePullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestSynchronizePullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestSynchronizePullRequestBaseRepoVisibility string

const (
	WebhookPullRequestSynchronizePullRequestBaseRepoVisibilityInternal WebhookPullRequestSynchronizePullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestSynchronizePullRequestBaseRepoVisibilityPrivate WebhookPullRequestSynchronizePullRequestBaseRepoVisibility = "private"
	WebhookPullRequestSynchronizePullRequestBaseRepoVisibilityPublic WebhookPullRequestSynchronizePullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestSynchronizePullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestSynchronizePullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestSynchronizePullRequestBaseRepoVisibilityValues() []WebhookPullRequestSynchronizePullRequestBaseRepoVisibility {
	return []WebhookPullRequestSynchronizePullRequestBaseRepoVisibility{
		WebhookPullRequestSynchronizePullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestSynchronizePullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestSynchronizePullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestSynchronizePullRequestBaseUserType string

const (
	WebhookPullRequestSynchronizePullRequestBaseUserTypeBot WebhookPullRequestSynchronizePullRequestBaseUserType = "Bot"
	WebhookPullRequestSynchronizePullRequestBaseUserTypeOrganization WebhookPullRequestSynchronizePullRequestBaseUserType = "Organization"
	WebhookPullRequestSynchronizePullRequestBaseUserTypeUser WebhookPullRequestSynchronizePullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestSynchronizePullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestSynchronizePullRequestBaseUserType const type.
func PossibleWebhookPullRequestSynchronizePullRequestBaseUserTypeValues() []WebhookPullRequestSynchronizePullRequestBaseUserType {
	return []WebhookPullRequestSynchronizePullRequestBaseUserType{
		WebhookPullRequestSynchronizePullRequestBaseUserTypeBot,
		WebhookPullRequestSynchronizePullRequestBaseUserTypeOrganization,
		WebhookPullRequestSynchronizePullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
type WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitTitle - The default value for a merge commit message title.
type WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestSynchronizePullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestSynchronizePullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestSynchronizePullRequestHeadRepoOwnerTypeBot WebhookPullRequestSynchronizePullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestSynchronizePullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestSynchronizePullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestSynchronizePullRequestHeadRepoOwnerTypeUser WebhookPullRequestSynchronizePullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestSynchronizePullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestSynchronizePullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestSynchronizePullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestSynchronizePullRequestHeadRepoOwnerType {
	return []WebhookPullRequestSynchronizePullRequestHeadRepoOwnerType{
		WebhookPullRequestSynchronizePullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestSynchronizePullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestSynchronizePullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit
// message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestSynchronizePullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestSynchronizePullRequestHeadRepoVisibility string

const (
	WebhookPullRequestSynchronizePullRequestHeadRepoVisibilityInternal WebhookPullRequestSynchronizePullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestSynchronizePullRequestHeadRepoVisibilityPrivate WebhookPullRequestSynchronizePullRequestHeadRepoVisibility = "private"
	WebhookPullRequestSynchronizePullRequestHeadRepoVisibilityPublic WebhookPullRequestSynchronizePullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestSynchronizePullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestSynchronizePullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestSynchronizePullRequestHeadRepoVisibilityValues() []WebhookPullRequestSynchronizePullRequestHeadRepoVisibility {
	return []WebhookPullRequestSynchronizePullRequestHeadRepoVisibility{
		WebhookPullRequestSynchronizePullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestSynchronizePullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestSynchronizePullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestSynchronizePullRequestHeadUserType string

const (
	WebhookPullRequestSynchronizePullRequestHeadUserTypeBot WebhookPullRequestSynchronizePullRequestHeadUserType = "Bot"
	WebhookPullRequestSynchronizePullRequestHeadUserTypeOrganization WebhookPullRequestSynchronizePullRequestHeadUserType = "Organization"
	WebhookPullRequestSynchronizePullRequestHeadUserTypeUser WebhookPullRequestSynchronizePullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestSynchronizePullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestSynchronizePullRequestHeadUserType const type.
func PossibleWebhookPullRequestSynchronizePullRequestHeadUserTypeValues() []WebhookPullRequestSynchronizePullRequestHeadUserType {
	return []WebhookPullRequestSynchronizePullRequestHeadUserType{
		WebhookPullRequestSynchronizePullRequestHeadUserTypeBot,
		WebhookPullRequestSynchronizePullRequestHeadUserTypeOrganization,
		WebhookPullRequestSynchronizePullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestSynchronizePullRequestMergedByType string

const (
	WebhookPullRequestSynchronizePullRequestMergedByTypeBot WebhookPullRequestSynchronizePullRequestMergedByType = "Bot"
	WebhookPullRequestSynchronizePullRequestMergedByTypeOrganization WebhookPullRequestSynchronizePullRequestMergedByType = "Organization"
	WebhookPullRequestSynchronizePullRequestMergedByTypeUser WebhookPullRequestSynchronizePullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestSynchronizePullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestSynchronizePullRequestMergedByType const type.
func PossibleWebhookPullRequestSynchronizePullRequestMergedByTypeValues() []WebhookPullRequestSynchronizePullRequestMergedByType {
	return []WebhookPullRequestSynchronizePullRequestMergedByType{
		WebhookPullRequestSynchronizePullRequestMergedByTypeBot,
		WebhookPullRequestSynchronizePullRequestMergedByTypeOrganization,
		WebhookPullRequestSynchronizePullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestSynchronizePullRequestMilestoneCreatorType string

const (
	WebhookPullRequestSynchronizePullRequestMilestoneCreatorTypeBot WebhookPullRequestSynchronizePullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestSynchronizePullRequestMilestoneCreatorTypeMannequin WebhookPullRequestSynchronizePullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestSynchronizePullRequestMilestoneCreatorTypeOrganization WebhookPullRequestSynchronizePullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestSynchronizePullRequestMilestoneCreatorTypeUser WebhookPullRequestSynchronizePullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestSynchronizePullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestSynchronizePullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestSynchronizePullRequestMilestoneCreatorTypeValues() []WebhookPullRequestSynchronizePullRequestMilestoneCreatorType {
	return []WebhookPullRequestSynchronizePullRequestMilestoneCreatorType{
		WebhookPullRequestSynchronizePullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestSynchronizePullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestSynchronizePullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestSynchronizePullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestSynchronizePullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestSynchronizePullRequestMilestoneState string

const (
	WebhookPullRequestSynchronizePullRequestMilestoneStateClosed WebhookPullRequestSynchronizePullRequestMilestoneState = "closed"
	WebhookPullRequestSynchronizePullRequestMilestoneStateOpen WebhookPullRequestSynchronizePullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestSynchronizePullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestSynchronizePullRequestMilestoneState const type.
func PossibleWebhookPullRequestSynchronizePullRequestMilestoneStateValues() []WebhookPullRequestSynchronizePullRequestMilestoneState {
	return []WebhookPullRequestSynchronizePullRequestMilestoneState{
		WebhookPullRequestSynchronizePullRequestMilestoneStateClosed,
		WebhookPullRequestSynchronizePullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestSynchronizePullRequestRequestedTeamsItemPrivacySecret,
	}
}

// WebhookPullRequestSynchronizePullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestSynchronizePullRequestState string

const (
	WebhookPullRequestSynchronizePullRequestStateClosed WebhookPullRequestSynchronizePullRequestState = "closed"
	WebhookPullRequestSynchronizePullRequestStateOpen WebhookPullRequestSynchronizePullRequestState = "open"
)

// PossibleWebhookPullRequestSynchronizePullRequestStateValues returns the possible values for the WebhookPullRequestSynchronizePullRequestState const type.
func PossibleWebhookPullRequestSynchronizePullRequestStateValues() []WebhookPullRequestSynchronizePullRequestState {
	return []WebhookPullRequestSynchronizePullRequestState{
		WebhookPullRequestSynchronizePullRequestStateClosed,
		WebhookPullRequestSynchronizePullRequestStateOpen,
	}
}

type WebhookPullRequestSynchronizePullRequestUserType string

const (
	WebhookPullRequestSynchronizePullRequestUserTypeBot WebhookPullRequestSynchronizePullRequestUserType = "Bot"
	WebhookPullRequestSynchronizePullRequestUserTypeMannequin WebhookPullRequestSynchronizePullRequestUserType = "Mannequin"
	WebhookPullRequestSynchronizePullRequestUserTypeOrganization WebhookPullRequestSynchronizePullRequestUserType = "Organization"
	WebhookPullRequestSynchronizePullRequestUserTypeUser WebhookPullRequestSynchronizePullRequestUserType = "User"
)

// PossibleWebhookPullRequestSynchronizePullRequestUserTypeValues returns the possible values for the WebhookPullRequestSynchronizePullRequestUserType const type.
func PossibleWebhookPullRequestSynchronizePullRequestUserTypeValues() []WebhookPullRequestSynchronizePullRequestUserType {
	return []WebhookPullRequestSynchronizePullRequestUserType{
		WebhookPullRequestSynchronizePullRequestUserTypeBot,
		WebhookPullRequestSynchronizePullRequestUserTypeMannequin,
		WebhookPullRequestSynchronizePullRequestUserTypeOrganization,
		WebhookPullRequestSynchronizePullRequestUserTypeUser,
	}
}

type WebhookPullRequestUnassignedAction string

const (
	WebhookPullRequestUnassignedActionUnassigned WebhookPullRequestUnassignedAction = "unassigned"
)

// PossibleWebhookPullRequestUnassignedActionValues returns the possible values for the WebhookPullRequestUnassignedAction const type.
func PossibleWebhookPullRequestUnassignedActionValues() []WebhookPullRequestUnassignedAction {
	return []WebhookPullRequestUnassignedAction{
		WebhookPullRequestUnassignedActionUnassigned,
	}
}

type WebhookPullRequestUnassignedAssigneeType string

const (
	WebhookPullRequestUnassignedAssigneeTypeBot WebhookPullRequestUnassignedAssigneeType = "Bot"
	WebhookPullRequestUnassignedAssigneeTypeMannequin WebhookPullRequestUnassignedAssigneeType = "Mannequin"
	WebhookPullRequestUnassignedAssigneeTypeOrganization WebhookPullRequestUnassignedAssigneeType = "Organization"
	WebhookPullRequestUnassignedAssigneeTypeUser WebhookPullRequestUnassignedAssigneeType = "User"
)

// PossibleWebhookPullRequestUnassignedAssigneeTypeValues returns the possible values for the WebhookPullRequestUnassignedAssigneeType const type.
func PossibleWebhookPullRequestUnassignedAssigneeTypeValues() []WebhookPullRequestUnassignedAssigneeType {
	return []WebhookPullRequestUnassignedAssigneeType{
		WebhookPullRequestUnassignedAssigneeTypeBot,
		WebhookPullRequestUnassignedAssigneeTypeMannequin,
		WebhookPullRequestUnassignedAssigneeTypeOrganization,
		WebhookPullRequestUnassignedAssigneeTypeUser,
	}
}

type WebhookPullRequestUnassignedPullRequestActiveLockReason string

const (
	WebhookPullRequestUnassignedPullRequestActiveLockReasonNull WebhookPullRequestUnassignedPullRequestActiveLockReason = "null"
	WebhookPullRequestUnassignedPullRequestActiveLockReasonOffTopic WebhookPullRequestUnassignedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestUnassignedPullRequestActiveLockReasonResolved WebhookPullRequestUnassignedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestUnassignedPullRequestActiveLockReasonSpam WebhookPullRequestUnassignedPullRequestActiveLockReason = "spam"
	WebhookPullRequestUnassignedPullRequestActiveLockReasonTooHeated WebhookPullRequestUnassignedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestUnassignedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestUnassignedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestUnassignedPullRequestActiveLockReasonValues() []WebhookPullRequestUnassignedPullRequestActiveLockReason {
	return []WebhookPullRequestUnassignedPullRequestActiveLockReason{
		WebhookPullRequestUnassignedPullRequestActiveLockReasonNull,
		WebhookPullRequestUnassignedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestUnassignedPullRequestActiveLockReasonResolved,
		WebhookPullRequestUnassignedPullRequestActiveLockReasonSpam,
		WebhookPullRequestUnassignedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestUnassignedPullRequestAssigneeType string

const (
	WebhookPullRequestUnassignedPullRequestAssigneeTypeBot WebhookPullRequestUnassignedPullRequestAssigneeType = "Bot"
	WebhookPullRequestUnassignedPullRequestAssigneeTypeMannequin WebhookPullRequestUnassignedPullRequestAssigneeType = "Mannequin"
	WebhookPullRequestUnassignedPullRequestAssigneeTypeOrganization WebhookPullRequestUnassignedPullRequestAssigneeType = "Organization"
	WebhookPullRequestUnassignedPullRequestAssigneeTypeUser WebhookPullRequestUnassignedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestUnassignedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestUnassignedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestUnassignedPullRequestAssigneeTypeValues() []WebhookPullRequestUnassignedPullRequestAssigneeType {
	return []WebhookPullRequestUnassignedPullRequestAssigneeType{
		WebhookPullRequestUnassignedPullRequestAssigneeTypeBot,
		WebhookPullRequestUnassignedPullRequestAssigneeTypeMannequin,
		WebhookPullRequestUnassignedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestUnassignedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestUnassignedPullRequestAssigneesItemType string

const (
	WebhookPullRequestUnassignedPullRequestAssigneesItemTypeBot WebhookPullRequestUnassignedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestUnassignedPullRequestAssigneesItemTypeMannequin WebhookPullRequestUnassignedPullRequestAssigneesItemType = "Mannequin"
	WebhookPullRequestUnassignedPullRequestAssigneesItemTypeOrganization WebhookPullRequestUnassignedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestUnassignedPullRequestAssigneesItemTypeUser WebhookPullRequestUnassignedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestUnassignedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestUnassignedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestUnassignedPullRequestAssigneesItemTypeValues() []WebhookPullRequestUnassignedPullRequestAssigneesItemType {
	return []WebhookPullRequestUnassignedPullRequestAssigneesItemType{
		WebhookPullRequestUnassignedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestUnassignedPullRequestAssigneesItemTypeMannequin,
		WebhookPullRequestUnassignedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestUnassignedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestUnassignedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestUnassignedPullRequestAuthorAssociation string

const (
	WebhookPullRequestUnassignedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestUnassignedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestUnassignedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestUnassignedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestUnassignedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestUnassignedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestUnassignedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestUnassignedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestUnassignedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestUnassignedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestUnassignedPullRequestAuthorAssociationMEMBER WebhookPullRequestUnassignedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestUnassignedPullRequestAuthorAssociationNONE WebhookPullRequestUnassignedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestUnassignedPullRequestAuthorAssociationOWNER WebhookPullRequestUnassignedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestUnassignedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestUnassignedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestUnassignedPullRequestAuthorAssociationValues() []WebhookPullRequestUnassignedPullRequestAuthorAssociation {
	return []WebhookPullRequestUnassignedPullRequestAuthorAssociation{
		WebhookPullRequestUnassignedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestUnassignedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestUnassignedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestUnassignedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestUnassignedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestUnassignedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestUnassignedPullRequestAuthorAssociationNONE,
		WebhookPullRequestUnassignedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestUnassignedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestUnassignedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestUnassignedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestUnassignedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestUnassignedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestUnassignedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestUnassignedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestUnassignedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestUnassignedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestUnassignedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestUnassignedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestUnassignedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestUnassignedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestUnassignedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestUnassignedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestUnassignedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestUnassignedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestUnassignedPullRequestAutoMergeMethodMerge WebhookPullRequestUnassignedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestUnassignedPullRequestAutoMergeMethodRebase WebhookPullRequestUnassignedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestUnassignedPullRequestAutoMergeMethodSquash WebhookPullRequestUnassignedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestUnassignedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestUnassignedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestUnassignedPullRequestAutoMergeMethodValues() []WebhookPullRequestUnassignedPullRequestAutoMergeMethod {
	return []WebhookPullRequestUnassignedPullRequestAutoMergeMethod{
		WebhookPullRequestUnassignedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestUnassignedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestUnassignedPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestUnassignedPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestUnassignedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestUnassignedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestUnassignedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestUnassignedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestUnassignedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestUnassignedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestUnassignedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestUnassignedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestUnassignedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestUnassignedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestUnassignedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestUnassignedPullRequestBaseRepoOwnerType{
		WebhookPullRequestUnassignedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestUnassignedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestUnassignedPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestUnassignedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestUnassignedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestUnassignedPullRequestBaseRepoVisibilityInternal WebhookPullRequestUnassignedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestUnassignedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestUnassignedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestUnassignedPullRequestBaseRepoVisibilityPublic WebhookPullRequestUnassignedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestUnassignedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestUnassignedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestUnassignedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestUnassignedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestUnassignedPullRequestBaseRepoVisibility{
		WebhookPullRequestUnassignedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestUnassignedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestUnassignedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestUnassignedPullRequestBaseUserType string

const (
	WebhookPullRequestUnassignedPullRequestBaseUserTypeBot WebhookPullRequestUnassignedPullRequestBaseUserType = "Bot"
	WebhookPullRequestUnassignedPullRequestBaseUserTypeOrganization WebhookPullRequestUnassignedPullRequestBaseUserType = "Organization"
	WebhookPullRequestUnassignedPullRequestBaseUserTypeUser WebhookPullRequestUnassignedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestUnassignedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestUnassignedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestUnassignedPullRequestBaseUserTypeValues() []WebhookPullRequestUnassignedPullRequestBaseUserType {
	return []WebhookPullRequestUnassignedPullRequestBaseUserType{
		WebhookPullRequestUnassignedPullRequestBaseUserTypeBot,
		WebhookPullRequestUnassignedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestUnassignedPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestUnassignedPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestUnassignedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestUnassignedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestUnassignedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestUnassignedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestUnassignedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestUnassignedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestUnassignedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestUnassignedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestUnassignedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestUnassignedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestUnassignedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestUnassignedPullRequestHeadRepoOwnerType{
		WebhookPullRequestUnassignedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestUnassignedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestUnassignedPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestUnassignedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestUnassignedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestUnassignedPullRequestHeadRepoVisibilityInternal WebhookPullRequestUnassignedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestUnassignedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestUnassignedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestUnassignedPullRequestHeadRepoVisibilityPublic WebhookPullRequestUnassignedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestUnassignedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestUnassignedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestUnassignedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestUnassignedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestUnassignedPullRequestHeadRepoVisibility{
		WebhookPullRequestUnassignedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestUnassignedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestUnassignedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestUnassignedPullRequestHeadUserType string

const (
	WebhookPullRequestUnassignedPullRequestHeadUserTypeBot WebhookPullRequestUnassignedPullRequestHeadUserType = "Bot"
	WebhookPullRequestUnassignedPullRequestHeadUserTypeOrganization WebhookPullRequestUnassignedPullRequestHeadUserType = "Organization"
	WebhookPullRequestUnassignedPullRequestHeadUserTypeUser WebhookPullRequestUnassignedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestUnassignedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestUnassignedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestUnassignedPullRequestHeadUserTypeValues() []WebhookPullRequestUnassignedPullRequestHeadUserType {
	return []WebhookPullRequestUnassignedPullRequestHeadUserType{
		WebhookPullRequestUnassignedPullRequestHeadUserTypeBot,
		WebhookPullRequestUnassignedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestUnassignedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestUnassignedPullRequestMergedByType string

const (
	WebhookPullRequestUnassignedPullRequestMergedByTypeBot WebhookPullRequestUnassignedPullRequestMergedByType = "Bot"
	WebhookPullRequestUnassignedPullRequestMergedByTypeMannequin WebhookPullRequestUnassignedPullRequestMergedByType = "Mannequin"
	WebhookPullRequestUnassignedPullRequestMergedByTypeOrganization WebhookPullRequestUnassignedPullRequestMergedByType = "Organization"
	WebhookPullRequestUnassignedPullRequestMergedByTypeUser WebhookPullRequestUnassignedPullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestUnassignedPullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestUnassignedPullRequestMergedByType const type.
func PossibleWebhookPullRequestUnassignedPullRequestMergedByTypeValues() []WebhookPullRequestUnassignedPullRequestMergedByType {
	return []WebhookPullRequestUnassignedPullRequestMergedByType{
		WebhookPullRequestUnassignedPullRequestMergedByTypeBot,
		WebhookPullRequestUnassignedPullRequestMergedByTypeMannequin,
		WebhookPullRequestUnassignedPullRequestMergedByTypeOrganization,
		WebhookPullRequestUnassignedPullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestUnassignedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestUnassignedPullRequestMilestoneCreatorTypeBot WebhookPullRequestUnassignedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestUnassignedPullRequestMilestoneCreatorTypeMannequin WebhookPullRequestUnassignedPullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestUnassignedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestUnassignedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestUnassignedPullRequestMilestoneCreatorTypeUser WebhookPullRequestUnassignedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestUnassignedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestUnassignedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestUnassignedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestUnassignedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestUnassignedPullRequestMilestoneCreatorType{
		WebhookPullRequestUnassignedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestUnassignedPullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestUnassignedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestUnassignedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestUnassignedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestUnassignedPullRequestMilestoneState string

const (
	WebhookPullRequestUnassignedPullRequestMilestoneStateClosed WebhookPullRequestUnassignedPullRequestMilestoneState = "closed"
	WebhookPullRequestUnassignedPullRequestMilestoneStateOpen WebhookPullRequestUnassignedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestUnassignedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestUnassignedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestUnassignedPullRequestMilestoneStateValues() []WebhookPullRequestUnassignedPullRequestMilestoneState {
	return []WebhookPullRequestUnassignedPullRequestMilestoneState{
		WebhookPullRequestUnassignedPullRequestMilestoneStateClosed,
		WebhookPullRequestUnassignedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestUnassignedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

// WebhookPullRequestUnassignedPullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestUnassignedPullRequestState string

const (
	WebhookPullRequestUnassignedPullRequestStateClosed WebhookPullRequestUnassignedPullRequestState = "closed"
	WebhookPullRequestUnassignedPullRequestStateOpen WebhookPullRequestUnassignedPullRequestState = "open"
)

// PossibleWebhookPullRequestUnassignedPullRequestStateValues returns the possible values for the WebhookPullRequestUnassignedPullRequestState const type.
func PossibleWebhookPullRequestUnassignedPullRequestStateValues() []WebhookPullRequestUnassignedPullRequestState {
	return []WebhookPullRequestUnassignedPullRequestState{
		WebhookPullRequestUnassignedPullRequestStateClosed,
		WebhookPullRequestUnassignedPullRequestStateOpen,
	}
}

type WebhookPullRequestUnassignedPullRequestUserType string

const (
	WebhookPullRequestUnassignedPullRequestUserTypeBot WebhookPullRequestUnassignedPullRequestUserType = "Bot"
	WebhookPullRequestUnassignedPullRequestUserTypeMannequin WebhookPullRequestUnassignedPullRequestUserType = "Mannequin"
	WebhookPullRequestUnassignedPullRequestUserTypeOrganization WebhookPullRequestUnassignedPullRequestUserType = "Organization"
	WebhookPullRequestUnassignedPullRequestUserTypeUser WebhookPullRequestUnassignedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestUnassignedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestUnassignedPullRequestUserType const type.
func PossibleWebhookPullRequestUnassignedPullRequestUserTypeValues() []WebhookPullRequestUnassignedPullRequestUserType {
	return []WebhookPullRequestUnassignedPullRequestUserType{
		WebhookPullRequestUnassignedPullRequestUserTypeBot,
		WebhookPullRequestUnassignedPullRequestUserTypeMannequin,
		WebhookPullRequestUnassignedPullRequestUserTypeOrganization,
		WebhookPullRequestUnassignedPullRequestUserTypeUser,
	}
}

type WebhookPullRequestUnlabeledAction string

const (
	WebhookPullRequestUnlabeledActionUnlabeled WebhookPullRequestUnlabeledAction = "unlabeled"
)

// PossibleWebhookPullRequestUnlabeledActionValues returns the possible values for the WebhookPullRequestUnlabeledAction const type.
func PossibleWebhookPullRequestUnlabeledActionValues() []WebhookPullRequestUnlabeledAction {
	return []WebhookPullRequestUnlabeledAction{
		WebhookPullRequestUnlabeledActionUnlabeled,
	}
}

type WebhookPullRequestUnlabeledPullRequestActiveLockReason string

const (
	WebhookPullRequestUnlabeledPullRequestActiveLockReasonNull WebhookPullRequestUnlabeledPullRequestActiveLockReason = "null"
	WebhookPullRequestUnlabeledPullRequestActiveLockReasonOffTopic WebhookPullRequestUnlabeledPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestUnlabeledPullRequestActiveLockReasonResolved WebhookPullRequestUnlabeledPullRequestActiveLockReason = "resolved"
	WebhookPullRequestUnlabeledPullRequestActiveLockReasonSpam WebhookPullRequestUnlabeledPullRequestActiveLockReason = "spam"
	WebhookPullRequestUnlabeledPullRequestActiveLockReasonTooHeated WebhookPullRequestUnlabeledPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestUnlabeledPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestUnlabeledPullRequestActiveLockReasonValues() []WebhookPullRequestUnlabeledPullRequestActiveLockReason {
	return []WebhookPullRequestUnlabeledPullRequestActiveLockReason{
		WebhookPullRequestUnlabeledPullRequestActiveLockReasonNull,
		WebhookPullRequestUnlabeledPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestUnlabeledPullRequestActiveLockReasonResolved,
		WebhookPullRequestUnlabeledPullRequestActiveLockReasonSpam,
		WebhookPullRequestUnlabeledPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestUnlabeledPullRequestAssigneeType string

const (
	WebhookPullRequestUnlabeledPullRequestAssigneeTypeBot WebhookPullRequestUnlabeledPullRequestAssigneeType = "Bot"
	WebhookPullRequestUnlabeledPullRequestAssigneeTypeMannequin WebhookPullRequestUnlabeledPullRequestAssigneeType = "Mannequin"
	WebhookPullRequestUnlabeledPullRequestAssigneeTypeOrganization WebhookPullRequestUnlabeledPullRequestAssigneeType = "Organization"
	WebhookPullRequestUnlabeledPullRequestAssigneeTypeUser WebhookPullRequestUnlabeledPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestUnlabeledPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestAssigneeType const type.
func PossibleWebhookPullRequestUnlabeledPullRequestAssigneeTypeValues() []WebhookPullRequestUnlabeledPullRequestAssigneeType {
	return []WebhookPullRequestUnlabeledPullRequestAssigneeType{
		WebhookPullRequestUnlabeledPullRequestAssigneeTypeBot,
		WebhookPullRequestUnlabeledPullRequestAssigneeTypeMannequin,
		WebhookPullRequestUnlabeledPullRequestAssigneeTypeOrganization,
		WebhookPullRequestUnlabeledPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestUnlabeledPullRequestAssigneesItemType string

const (
	WebhookPullRequestUnlabeledPullRequestAssigneesItemTypeBot WebhookPullRequestUnlabeledPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestUnlabeledPullRequestAssigneesItemTypeMannequin WebhookPullRequestUnlabeledPullRequestAssigneesItemType = "Mannequin"
	WebhookPullRequestUnlabeledPullRequestAssigneesItemTypeOrganization WebhookPullRequestUnlabeledPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestUnlabeledPullRequestAssigneesItemTypeUser WebhookPullRequestUnlabeledPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestUnlabeledPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestUnlabeledPullRequestAssigneesItemTypeValues() []WebhookPullRequestUnlabeledPullRequestAssigneesItemType {
	return []WebhookPullRequestUnlabeledPullRequestAssigneesItemType{
		WebhookPullRequestUnlabeledPullRequestAssigneesItemTypeBot,
		WebhookPullRequestUnlabeledPullRequestAssigneesItemTypeMannequin,
		WebhookPullRequestUnlabeledPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestUnlabeledPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestUnlabeledPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestUnlabeledPullRequestAuthorAssociation string

const (
	WebhookPullRequestUnlabeledPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestUnlabeledPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestUnlabeledPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestUnlabeledPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestUnlabeledPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestUnlabeledPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestUnlabeledPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestUnlabeledPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestUnlabeledPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestUnlabeledPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestUnlabeledPullRequestAuthorAssociationMEMBER WebhookPullRequestUnlabeledPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestUnlabeledPullRequestAuthorAssociationNONE WebhookPullRequestUnlabeledPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestUnlabeledPullRequestAuthorAssociationOWNER WebhookPullRequestUnlabeledPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestUnlabeledPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestUnlabeledPullRequestAuthorAssociationValues() []WebhookPullRequestUnlabeledPullRequestAuthorAssociation {
	return []WebhookPullRequestUnlabeledPullRequestAuthorAssociation{
		WebhookPullRequestUnlabeledPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestUnlabeledPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestUnlabeledPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestUnlabeledPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestUnlabeledPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestUnlabeledPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestUnlabeledPullRequestAuthorAssociationNONE,
		WebhookPullRequestUnlabeledPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByType{
		WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestUnlabeledPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestUnlabeledPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestUnlabeledPullRequestAutoMergeMethod string

const (
	WebhookPullRequestUnlabeledPullRequestAutoMergeMethodMerge WebhookPullRequestUnlabeledPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestUnlabeledPullRequestAutoMergeMethodRebase WebhookPullRequestUnlabeledPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestUnlabeledPullRequestAutoMergeMethodSquash WebhookPullRequestUnlabeledPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestUnlabeledPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestUnlabeledPullRequestAutoMergeMethodValues() []WebhookPullRequestUnlabeledPullRequestAutoMergeMethod {
	return []WebhookPullRequestUnlabeledPullRequestAutoMergeMethod{
		WebhookPullRequestUnlabeledPullRequestAutoMergeMethodMerge,
		WebhookPullRequestUnlabeledPullRequestAutoMergeMethodRebase,
		WebhookPullRequestUnlabeledPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestUnlabeledPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestUnlabeledPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestUnlabeledPullRequestBaseRepoOwnerTypeBot WebhookPullRequestUnlabeledPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestUnlabeledPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestUnlabeledPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestUnlabeledPullRequestBaseRepoOwnerTypeUser WebhookPullRequestUnlabeledPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestUnlabeledPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestUnlabeledPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestUnlabeledPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestUnlabeledPullRequestBaseRepoOwnerType{
		WebhookPullRequestUnlabeledPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestUnlabeledPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestUnlabeledPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestUnlabeledPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestUnlabeledPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestUnlabeledPullRequestBaseRepoVisibilityInternal WebhookPullRequestUnlabeledPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestUnlabeledPullRequestBaseRepoVisibilityPrivate WebhookPullRequestUnlabeledPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestUnlabeledPullRequestBaseRepoVisibilityPublic WebhookPullRequestUnlabeledPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestUnlabeledPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestUnlabeledPullRequestBaseRepoVisibilityValues() []WebhookPullRequestUnlabeledPullRequestBaseRepoVisibility {
	return []WebhookPullRequestUnlabeledPullRequestBaseRepoVisibility{
		WebhookPullRequestUnlabeledPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestUnlabeledPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestUnlabeledPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestUnlabeledPullRequestBaseUserType string

const (
	WebhookPullRequestUnlabeledPullRequestBaseUserTypeBot WebhookPullRequestUnlabeledPullRequestBaseUserType = "Bot"
	WebhookPullRequestUnlabeledPullRequestBaseUserTypeOrganization WebhookPullRequestUnlabeledPullRequestBaseUserType = "Organization"
	WebhookPullRequestUnlabeledPullRequestBaseUserTypeUser WebhookPullRequestUnlabeledPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestUnlabeledPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestBaseUserType const type.
func PossibleWebhookPullRequestUnlabeledPullRequestBaseUserTypeValues() []WebhookPullRequestUnlabeledPullRequestBaseUserType {
	return []WebhookPullRequestUnlabeledPullRequestBaseUserType{
		WebhookPullRequestUnlabeledPullRequestBaseUserTypeBot,
		WebhookPullRequestUnlabeledPullRequestBaseUserTypeOrganization,
		WebhookPullRequestUnlabeledPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
type WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit message title.
type WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestUnlabeledPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestUnlabeledPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestUnlabeledPullRequestHeadRepoOwnerTypeBot WebhookPullRequestUnlabeledPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestUnlabeledPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestUnlabeledPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestUnlabeledPullRequestHeadRepoOwnerTypeUser WebhookPullRequestUnlabeledPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestUnlabeledPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestUnlabeledPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestUnlabeledPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestUnlabeledPullRequestHeadRepoOwnerType{
		WebhookPullRequestUnlabeledPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestUnlabeledPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestUnlabeledPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestUnlabeledPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestUnlabeledPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestUnlabeledPullRequestHeadRepoVisibilityInternal WebhookPullRequestUnlabeledPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestUnlabeledPullRequestHeadRepoVisibilityPrivate WebhookPullRequestUnlabeledPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestUnlabeledPullRequestHeadRepoVisibilityPublic WebhookPullRequestUnlabeledPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestUnlabeledPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestUnlabeledPullRequestHeadRepoVisibilityValues() []WebhookPullRequestUnlabeledPullRequestHeadRepoVisibility {
	return []WebhookPullRequestUnlabeledPullRequestHeadRepoVisibility{
		WebhookPullRequestUnlabeledPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestUnlabeledPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestUnlabeledPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestUnlabeledPullRequestHeadUserType string

const (
	WebhookPullRequestUnlabeledPullRequestHeadUserTypeBot WebhookPullRequestUnlabeledPullRequestHeadUserType = "Bot"
	WebhookPullRequestUnlabeledPullRequestHeadUserTypeOrganization WebhookPullRequestUnlabeledPullRequestHeadUserType = "Organization"
	WebhookPullRequestUnlabeledPullRequestHeadUserTypeUser WebhookPullRequestUnlabeledPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestUnlabeledPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestHeadUserType const type.
func PossibleWebhookPullRequestUnlabeledPullRequestHeadUserTypeValues() []WebhookPullRequestUnlabeledPullRequestHeadUserType {
	return []WebhookPullRequestUnlabeledPullRequestHeadUserType{
		WebhookPullRequestUnlabeledPullRequestHeadUserTypeBot,
		WebhookPullRequestUnlabeledPullRequestHeadUserTypeOrganization,
		WebhookPullRequestUnlabeledPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestUnlabeledPullRequestMergedByType string

const (
	WebhookPullRequestUnlabeledPullRequestMergedByTypeBot WebhookPullRequestUnlabeledPullRequestMergedByType = "Bot"
	WebhookPullRequestUnlabeledPullRequestMergedByTypeOrganization WebhookPullRequestUnlabeledPullRequestMergedByType = "Organization"
	WebhookPullRequestUnlabeledPullRequestMergedByTypeUser WebhookPullRequestUnlabeledPullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestUnlabeledPullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestMergedByType const type.
func PossibleWebhookPullRequestUnlabeledPullRequestMergedByTypeValues() []WebhookPullRequestUnlabeledPullRequestMergedByType {
	return []WebhookPullRequestUnlabeledPullRequestMergedByType{
		WebhookPullRequestUnlabeledPullRequestMergedByTypeBot,
		WebhookPullRequestUnlabeledPullRequestMergedByTypeOrganization,
		WebhookPullRequestUnlabeledPullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestUnlabeledPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestUnlabeledPullRequestMilestoneCreatorTypeBot WebhookPullRequestUnlabeledPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestUnlabeledPullRequestMilestoneCreatorTypeMannequin WebhookPullRequestUnlabeledPullRequestMilestoneCreatorType = "Mannequin"
	WebhookPullRequestUnlabeledPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestUnlabeledPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestUnlabeledPullRequestMilestoneCreatorTypeUser WebhookPullRequestUnlabeledPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestUnlabeledPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestUnlabeledPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestUnlabeledPullRequestMilestoneCreatorType {
	return []WebhookPullRequestUnlabeledPullRequestMilestoneCreatorType{
		WebhookPullRequestUnlabeledPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestUnlabeledPullRequestMilestoneCreatorTypeMannequin,
		WebhookPullRequestUnlabeledPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestUnlabeledPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestUnlabeledPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestUnlabeledPullRequestMilestoneState string

const (
	WebhookPullRequestUnlabeledPullRequestMilestoneStateClosed WebhookPullRequestUnlabeledPullRequestMilestoneState = "closed"
	WebhookPullRequestUnlabeledPullRequestMilestoneStateOpen WebhookPullRequestUnlabeledPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestUnlabeledPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestMilestoneState const type.
func PossibleWebhookPullRequestUnlabeledPullRequestMilestoneStateValues() []WebhookPullRequestUnlabeledPullRequestMilestoneState {
	return []WebhookPullRequestUnlabeledPullRequestMilestoneState{
		WebhookPullRequestUnlabeledPullRequestMilestoneStateClosed,
		WebhookPullRequestUnlabeledPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestUnlabeledPullRequestRequestedTeamsItemPrivacySecret,
	}
}

// WebhookPullRequestUnlabeledPullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestUnlabeledPullRequestState string

const (
	WebhookPullRequestUnlabeledPullRequestStateClosed WebhookPullRequestUnlabeledPullRequestState = "closed"
	WebhookPullRequestUnlabeledPullRequestStateOpen WebhookPullRequestUnlabeledPullRequestState = "open"
)

// PossibleWebhookPullRequestUnlabeledPullRequestStateValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestState const type.
func PossibleWebhookPullRequestUnlabeledPullRequestStateValues() []WebhookPullRequestUnlabeledPullRequestState {
	return []WebhookPullRequestUnlabeledPullRequestState{
		WebhookPullRequestUnlabeledPullRequestStateClosed,
		WebhookPullRequestUnlabeledPullRequestStateOpen,
	}
}

type WebhookPullRequestUnlabeledPullRequestUserType string

const (
	WebhookPullRequestUnlabeledPullRequestUserTypeBot WebhookPullRequestUnlabeledPullRequestUserType = "Bot"
	WebhookPullRequestUnlabeledPullRequestUserTypeMannequin WebhookPullRequestUnlabeledPullRequestUserType = "Mannequin"
	WebhookPullRequestUnlabeledPullRequestUserTypeOrganization WebhookPullRequestUnlabeledPullRequestUserType = "Organization"
	WebhookPullRequestUnlabeledPullRequestUserTypeUser WebhookPullRequestUnlabeledPullRequestUserType = "User"
)

// PossibleWebhookPullRequestUnlabeledPullRequestUserTypeValues returns the possible values for the WebhookPullRequestUnlabeledPullRequestUserType const type.
func PossibleWebhookPullRequestUnlabeledPullRequestUserTypeValues() []WebhookPullRequestUnlabeledPullRequestUserType {
	return []WebhookPullRequestUnlabeledPullRequestUserType{
		WebhookPullRequestUnlabeledPullRequestUserTypeBot,
		WebhookPullRequestUnlabeledPullRequestUserTypeMannequin,
		WebhookPullRequestUnlabeledPullRequestUserTypeOrganization,
		WebhookPullRequestUnlabeledPullRequestUserTypeUser,
	}
}

type WebhookPullRequestUnlockedAction string

const (
	WebhookPullRequestUnlockedActionUnlocked WebhookPullRequestUnlockedAction = "unlocked"
)

// PossibleWebhookPullRequestUnlockedActionValues returns the possible values for the WebhookPullRequestUnlockedAction const type.
func PossibleWebhookPullRequestUnlockedActionValues() []WebhookPullRequestUnlockedAction {
	return []WebhookPullRequestUnlockedAction{
		WebhookPullRequestUnlockedActionUnlocked,
	}
}

type WebhookPullRequestUnlockedPullRequestActiveLockReason string

const (
	WebhookPullRequestUnlockedPullRequestActiveLockReasonNull WebhookPullRequestUnlockedPullRequestActiveLockReason = "null"
	WebhookPullRequestUnlockedPullRequestActiveLockReasonOffTopic WebhookPullRequestUnlockedPullRequestActiveLockReason = "off-topic"
	WebhookPullRequestUnlockedPullRequestActiveLockReasonResolved WebhookPullRequestUnlockedPullRequestActiveLockReason = "resolved"
	WebhookPullRequestUnlockedPullRequestActiveLockReasonSpam WebhookPullRequestUnlockedPullRequestActiveLockReason = "spam"
	WebhookPullRequestUnlockedPullRequestActiveLockReasonTooHeated WebhookPullRequestUnlockedPullRequestActiveLockReason = "too heated"
)

// PossibleWebhookPullRequestUnlockedPullRequestActiveLockReasonValues returns the possible values for the WebhookPullRequestUnlockedPullRequestActiveLockReason const type.
func PossibleWebhookPullRequestUnlockedPullRequestActiveLockReasonValues() []WebhookPullRequestUnlockedPullRequestActiveLockReason {
	return []WebhookPullRequestUnlockedPullRequestActiveLockReason{
		WebhookPullRequestUnlockedPullRequestActiveLockReasonNull,
		WebhookPullRequestUnlockedPullRequestActiveLockReasonOffTopic,
		WebhookPullRequestUnlockedPullRequestActiveLockReasonResolved,
		WebhookPullRequestUnlockedPullRequestActiveLockReasonSpam,
		WebhookPullRequestUnlockedPullRequestActiveLockReasonTooHeated,
	}
}

type WebhookPullRequestUnlockedPullRequestAssigneeType string

const (
	WebhookPullRequestUnlockedPullRequestAssigneeTypeBot WebhookPullRequestUnlockedPullRequestAssigneeType = "Bot"
	WebhookPullRequestUnlockedPullRequestAssigneeTypeOrganization WebhookPullRequestUnlockedPullRequestAssigneeType = "Organization"
	WebhookPullRequestUnlockedPullRequestAssigneeTypeUser WebhookPullRequestUnlockedPullRequestAssigneeType = "User"
)

// PossibleWebhookPullRequestUnlockedPullRequestAssigneeTypeValues returns the possible values for the WebhookPullRequestUnlockedPullRequestAssigneeType const type.
func PossibleWebhookPullRequestUnlockedPullRequestAssigneeTypeValues() []WebhookPullRequestUnlockedPullRequestAssigneeType {
	return []WebhookPullRequestUnlockedPullRequestAssigneeType{
		WebhookPullRequestUnlockedPullRequestAssigneeTypeBot,
		WebhookPullRequestUnlockedPullRequestAssigneeTypeOrganization,
		WebhookPullRequestUnlockedPullRequestAssigneeTypeUser,
	}
}

type WebhookPullRequestUnlockedPullRequestAssigneesItemType string

const (
	WebhookPullRequestUnlockedPullRequestAssigneesItemTypeBot WebhookPullRequestUnlockedPullRequestAssigneesItemType = "Bot"
	WebhookPullRequestUnlockedPullRequestAssigneesItemTypeOrganization WebhookPullRequestUnlockedPullRequestAssigneesItemType = "Organization"
	WebhookPullRequestUnlockedPullRequestAssigneesItemTypeUser WebhookPullRequestUnlockedPullRequestAssigneesItemType = "User"
)

// PossibleWebhookPullRequestUnlockedPullRequestAssigneesItemTypeValues returns the possible values for the WebhookPullRequestUnlockedPullRequestAssigneesItemType const type.
func PossibleWebhookPullRequestUnlockedPullRequestAssigneesItemTypeValues() []WebhookPullRequestUnlockedPullRequestAssigneesItemType {
	return []WebhookPullRequestUnlockedPullRequestAssigneesItemType{
		WebhookPullRequestUnlockedPullRequestAssigneesItemTypeBot,
		WebhookPullRequestUnlockedPullRequestAssigneesItemTypeOrganization,
		WebhookPullRequestUnlockedPullRequestAssigneesItemTypeUser,
	}
}

// WebhookPullRequestUnlockedPullRequestAuthorAssociation - How the author is associated with the repository.
type WebhookPullRequestUnlockedPullRequestAuthorAssociation string

const (
	WebhookPullRequestUnlockedPullRequestAuthorAssociationCOLLABORATOR WebhookPullRequestUnlockedPullRequestAuthorAssociation = "COLLABORATOR"
	WebhookPullRequestUnlockedPullRequestAuthorAssociationCONTRIBUTOR WebhookPullRequestUnlockedPullRequestAuthorAssociation = "CONTRIBUTOR"
	WebhookPullRequestUnlockedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR WebhookPullRequestUnlockedPullRequestAuthorAssociation = "FIRST_TIME_CONTRIBUTOR"
	WebhookPullRequestUnlockedPullRequestAuthorAssociationFIRSTTIMER WebhookPullRequestUnlockedPullRequestAuthorAssociation = "FIRST_TIMER"
	WebhookPullRequestUnlockedPullRequestAuthorAssociationMANNEQUIN WebhookPullRequestUnlockedPullRequestAuthorAssociation = "MANNEQUIN"
	WebhookPullRequestUnlockedPullRequestAuthorAssociationMEMBER WebhookPullRequestUnlockedPullRequestAuthorAssociation = "MEMBER"
	WebhookPullRequestUnlockedPullRequestAuthorAssociationNONE WebhookPullRequestUnlockedPullRequestAuthorAssociation = "NONE"
	WebhookPullRequestUnlockedPullRequestAuthorAssociationOWNER WebhookPullRequestUnlockedPullRequestAuthorAssociation = "OWNER"
)

// PossibleWebhookPullRequestUnlockedPullRequestAuthorAssociationValues returns the possible values for the WebhookPullRequestUnlockedPullRequestAuthorAssociation const type.
func PossibleWebhookPullRequestUnlockedPullRequestAuthorAssociationValues() []WebhookPullRequestUnlockedPullRequestAuthorAssociation {
	return []WebhookPullRequestUnlockedPullRequestAuthorAssociation{
		WebhookPullRequestUnlockedPullRequestAuthorAssociationCOLLABORATOR,
		WebhookPullRequestUnlockedPullRequestAuthorAssociationCONTRIBUTOR,
		WebhookPullRequestUnlockedPullRequestAuthorAssociationFIRSTTIMECONTRIBUTOR,
		WebhookPullRequestUnlockedPullRequestAuthorAssociationFIRSTTIMER,
		WebhookPullRequestUnlockedPullRequestAuthorAssociationMANNEQUIN,
		WebhookPullRequestUnlockedPullRequestAuthorAssociationMEMBER,
		WebhookPullRequestUnlockedPullRequestAuthorAssociationNONE,
		WebhookPullRequestUnlockedPullRequestAuthorAssociationOWNER,
	}
}

type WebhookPullRequestUnlockedPullRequestAutoMergeEnabledByType string

const (
	WebhookPullRequestUnlockedPullRequestAutoMergeEnabledByTypeBot WebhookPullRequestUnlockedPullRequestAutoMergeEnabledByType = "Bot"
	WebhookPullRequestUnlockedPullRequestAutoMergeEnabledByTypeOrganization WebhookPullRequestUnlockedPullRequestAutoMergeEnabledByType = "Organization"
	WebhookPullRequestUnlockedPullRequestAutoMergeEnabledByTypeUser WebhookPullRequestUnlockedPullRequestAutoMergeEnabledByType = "User"
)

// PossibleWebhookPullRequestUnlockedPullRequestAutoMergeEnabledByTypeValues returns the possible values for the WebhookPullRequestUnlockedPullRequestAutoMergeEnabledByType const type.
func PossibleWebhookPullRequestUnlockedPullRequestAutoMergeEnabledByTypeValues() []WebhookPullRequestUnlockedPullRequestAutoMergeEnabledByType {
	return []WebhookPullRequestUnlockedPullRequestAutoMergeEnabledByType{
		WebhookPullRequestUnlockedPullRequestAutoMergeEnabledByTypeBot,
		WebhookPullRequestUnlockedPullRequestAutoMergeEnabledByTypeOrganization,
		WebhookPullRequestUnlockedPullRequestAutoMergeEnabledByTypeUser,
	}
}

// WebhookPullRequestUnlockedPullRequestAutoMergeMethod - The merge method to use.
type WebhookPullRequestUnlockedPullRequestAutoMergeMethod string

const (
	WebhookPullRequestUnlockedPullRequestAutoMergeMethodMerge WebhookPullRequestUnlockedPullRequestAutoMergeMethod = "merge"
	WebhookPullRequestUnlockedPullRequestAutoMergeMethodRebase WebhookPullRequestUnlockedPullRequestAutoMergeMethod = "rebase"
	WebhookPullRequestUnlockedPullRequestAutoMergeMethodSquash WebhookPullRequestUnlockedPullRequestAutoMergeMethod = "squash"
)

// PossibleWebhookPullRequestUnlockedPullRequestAutoMergeMethodValues returns the possible values for the WebhookPullRequestUnlockedPullRequestAutoMergeMethod const type.
func PossibleWebhookPullRequestUnlockedPullRequestAutoMergeMethodValues() []WebhookPullRequestUnlockedPullRequestAutoMergeMethod {
	return []WebhookPullRequestUnlockedPullRequestAutoMergeMethod{
		WebhookPullRequestUnlockedPullRequestAutoMergeMethodMerge,
		WebhookPullRequestUnlockedPullRequestAutoMergeMethodRebase,
		WebhookPullRequestUnlockedPullRequestAutoMergeMethodSquash,
	}
}

// WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessage string

const (
	WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessageBLANK WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessagePRBODY WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessagePRTITLE WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessageValues() []WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessage {
	return []WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessage{
		WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessageBLANK,
		WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessagePRBODY,
		WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitTitle string

const (
	WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitTitlePRTITLE WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitTitleValues() []WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitTitle {
	return []WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitTitle{
		WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestUnlockedPullRequestBaseRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestUnlockedPullRequestBaseRepoOwnerType string

const (
	WebhookPullRequestUnlockedPullRequestBaseRepoOwnerTypeBot WebhookPullRequestUnlockedPullRequestBaseRepoOwnerType = "Bot"
	WebhookPullRequestUnlockedPullRequestBaseRepoOwnerTypeOrganization WebhookPullRequestUnlockedPullRequestBaseRepoOwnerType = "Organization"
	WebhookPullRequestUnlockedPullRequestBaseRepoOwnerTypeUser WebhookPullRequestUnlockedPullRequestBaseRepoOwnerType = "User"
)

// PossibleWebhookPullRequestUnlockedPullRequestBaseRepoOwnerTypeValues returns the possible values for the WebhookPullRequestUnlockedPullRequestBaseRepoOwnerType const type.
func PossibleWebhookPullRequestUnlockedPullRequestBaseRepoOwnerTypeValues() []WebhookPullRequestUnlockedPullRequestBaseRepoOwnerType {
	return []WebhookPullRequestUnlockedPullRequestBaseRepoOwnerType{
		WebhookPullRequestUnlockedPullRequestBaseRepoOwnerTypeBot,
		WebhookPullRequestUnlockedPullRequestBaseRepoOwnerTypeOrganization,
		WebhookPullRequestUnlockedPullRequestBaseRepoOwnerTypeUser,
	}
}

// WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessageBLANK WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessagePRBODY WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessageValues() []WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessage {
	return []WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessage{
		WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitTitleValues() []WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitTitle {
	return []WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitTitle{
		WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestUnlockedPullRequestBaseRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestUnlockedPullRequestBaseRepoVisibility string

const (
	WebhookPullRequestUnlockedPullRequestBaseRepoVisibilityInternal WebhookPullRequestUnlockedPullRequestBaseRepoVisibility = "internal"
	WebhookPullRequestUnlockedPullRequestBaseRepoVisibilityPrivate WebhookPullRequestUnlockedPullRequestBaseRepoVisibility = "private"
	WebhookPullRequestUnlockedPullRequestBaseRepoVisibilityPublic WebhookPullRequestUnlockedPullRequestBaseRepoVisibility = "public"
)

// PossibleWebhookPullRequestUnlockedPullRequestBaseRepoVisibilityValues returns the possible values for the WebhookPullRequestUnlockedPullRequestBaseRepoVisibility const type.
func PossibleWebhookPullRequestUnlockedPullRequestBaseRepoVisibilityValues() []WebhookPullRequestUnlockedPullRequestBaseRepoVisibility {
	return []WebhookPullRequestUnlockedPullRequestBaseRepoVisibility{
		WebhookPullRequestUnlockedPullRequestBaseRepoVisibilityInternal,
		WebhookPullRequestUnlockedPullRequestBaseRepoVisibilityPrivate,
		WebhookPullRequestUnlockedPullRequestBaseRepoVisibilityPublic,
	}
}

type WebhookPullRequestUnlockedPullRequestBaseUserType string

const (
	WebhookPullRequestUnlockedPullRequestBaseUserTypeBot WebhookPullRequestUnlockedPullRequestBaseUserType = "Bot"
	WebhookPullRequestUnlockedPullRequestBaseUserTypeOrganization WebhookPullRequestUnlockedPullRequestBaseUserType = "Organization"
	WebhookPullRequestUnlockedPullRequestBaseUserTypeUser WebhookPullRequestUnlockedPullRequestBaseUserType = "User"
)

// PossibleWebhookPullRequestUnlockedPullRequestBaseUserTypeValues returns the possible values for the WebhookPullRequestUnlockedPullRequestBaseUserType const type.
func PossibleWebhookPullRequestUnlockedPullRequestBaseUserTypeValues() []WebhookPullRequestUnlockedPullRequestBaseUserType {
	return []WebhookPullRequestUnlockedPullRequestBaseUserType{
		WebhookPullRequestUnlockedPullRequestBaseUserTypeBot,
		WebhookPullRequestUnlockedPullRequestBaseUserTypeOrganization,
		WebhookPullRequestUnlockedPullRequestBaseUserTypeUser,
	}
}

// WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessage - The default value for a merge commit message.
// * PR_TITLE - default to the pull request's title.
// * PR_BODY - default to the pull request's body.
// * BLANK - default to a blank commit message.
type WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessage string

const (
	WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessageBLANK WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessage = "BLANK"
	WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessagePRBODY WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessage = "PR_BODY"
	WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessagePRTITLE WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessage = "PR_TITLE"
)

// PossibleWebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessageValues returns the possible values for the WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessage const type.
func PossibleWebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessageValues() []WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessage {
	return []WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessage{
		WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessageBLANK,
		WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessagePRBODY,
		WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitMessagePRTITLE,
	}
}

// WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitTitle - The default value for a merge commit title.
// * PR_TITLE - default to the pull request's title.
// * MERGE_MESSAGE - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
type WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitTitle string

const (
	WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitTitle = "MERGE_MESSAGE"
	WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitTitlePRTITLE WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitTitleValues returns the possible values for the WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitTitle const type.
func PossibleWebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitTitleValues() []WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitTitle {
	return []WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitTitle{
		WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitTitleMERGEMESSAGE,
		WebhookPullRequestUnlockedPullRequestHeadRepoMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestUnlockedPullRequestHeadRepoOwnerType string

const (
	WebhookPullRequestUnlockedPullRequestHeadRepoOwnerTypeBot WebhookPullRequestUnlockedPullRequestHeadRepoOwnerType = "Bot"
	WebhookPullRequestUnlockedPullRequestHeadRepoOwnerTypeOrganization WebhookPullRequestUnlockedPullRequestHeadRepoOwnerType = "Organization"
	WebhookPullRequestUnlockedPullRequestHeadRepoOwnerTypeUser WebhookPullRequestUnlockedPullRequestHeadRepoOwnerType = "User"
)

// PossibleWebhookPullRequestUnlockedPullRequestHeadRepoOwnerTypeValues returns the possible values for the WebhookPullRequestUnlockedPullRequestHeadRepoOwnerType const type.
func PossibleWebhookPullRequestUnlockedPullRequestHeadRepoOwnerTypeValues() []WebhookPullRequestUnlockedPullRequestHeadRepoOwnerType {
	return []WebhookPullRequestUnlockedPullRequestHeadRepoOwnerType{
		WebhookPullRequestUnlockedPullRequestHeadRepoOwnerTypeBot,
		WebhookPullRequestUnlockedPullRequestHeadRepoOwnerTypeOrganization,
		WebhookPullRequestUnlockedPullRequestHeadRepoOwnerTypeUser,
	}
}

// WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessage - The default value for a squash merge commit message:
// * PR_BODY - default to the pull request's body.
// * COMMIT_MESSAGES - default to the branch's commit messages.
// * BLANK - default to a blank commit message.
type WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessage string

const (
	WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessageBLANK WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessage = "BLANK"
	WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessage = "COMMIT_MESSAGES"
	WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessagePRBODY WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessage = "PR_BODY"
)

// PossibleWebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessageValues returns the possible values for the WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessage const type.
func PossibleWebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessageValues() []WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessage {
	return []WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessage{
		WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessageBLANK,
		WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessageCOMMITMESSAGES,
		WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitMessagePRBODY,
	}
}

// WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitTitle - The default value for a squash merge commit title:
// * PR_TITLE - default to the pull request's title.
// * COMMIT_OR_PR_TITLE - default to the commit's title (if only one commit) or the pull request's title (when more than one
// commit).
type WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitTitle string

const (
	WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitTitle = "COMMIT_OR_PR_TITLE"
	WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitTitle = "PR_TITLE"
)

// PossibleWebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitTitleValues returns the possible values for the WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitTitle const type.
func PossibleWebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitTitleValues() []WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitTitle {
	return []WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitTitle{
		WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitTitleCOMMITORPRTITLE,
		WebhookPullRequestUnlockedPullRequestHeadRepoSquashMergeCommitTitlePRTITLE,
	}
}

type WebhookPullRequestUnlockedPullRequestHeadRepoVisibility string

const (
	WebhookPullRequestUnlockedPullRequestHeadRepoVisibilityInternal WebhookPullRequestUnlockedPullRequestHeadRepoVisibility = "internal"
	WebhookPullRequestUnlockedPullRequestHeadRepoVisibilityPrivate WebhookPullRequestUnlockedPullRequestHeadRepoVisibility = "private"
	WebhookPullRequestUnlockedPullRequestHeadRepoVisibilityPublic WebhookPullRequestUnlockedPullRequestHeadRepoVisibility = "public"
)

// PossibleWebhookPullRequestUnlockedPullRequestHeadRepoVisibilityValues returns the possible values for the WebhookPullRequestUnlockedPullRequestHeadRepoVisibility const type.
func PossibleWebhookPullRequestUnlockedPullRequestHeadRepoVisibilityValues() []WebhookPullRequestUnlockedPullRequestHeadRepoVisibility {
	return []WebhookPullRequestUnlockedPullRequestHeadRepoVisibility{
		WebhookPullRequestUnlockedPullRequestHeadRepoVisibilityInternal,
		WebhookPullRequestUnlockedPullRequestHeadRepoVisibilityPrivate,
		WebhookPullRequestUnlockedPullRequestHeadRepoVisibilityPublic,
	}
}

type WebhookPullRequestUnlockedPullRequestHeadUserType string

const (
	WebhookPullRequestUnlockedPullRequestHeadUserTypeBot WebhookPullRequestUnlockedPullRequestHeadUserType = "Bot"
	WebhookPullRequestUnlockedPullRequestHeadUserTypeOrganization WebhookPullRequestUnlockedPullRequestHeadUserType = "Organization"
	WebhookPullRequestUnlockedPullRequestHeadUserTypeUser WebhookPullRequestUnlockedPullRequestHeadUserType = "User"
)

// PossibleWebhookPullRequestUnlockedPullRequestHeadUserTypeValues returns the possible values for the WebhookPullRequestUnlockedPullRequestHeadUserType const type.
func PossibleWebhookPullRequestUnlockedPullRequestHeadUserTypeValues() []WebhookPullRequestUnlockedPullRequestHeadUserType {
	return []WebhookPullRequestUnlockedPullRequestHeadUserType{
		WebhookPullRequestUnlockedPullRequestHeadUserTypeBot,
		WebhookPullRequestUnlockedPullRequestHeadUserTypeOrganization,
		WebhookPullRequestUnlockedPullRequestHeadUserTypeUser,
	}
}

type WebhookPullRequestUnlockedPullRequestMergedByType string

const (
	WebhookPullRequestUnlockedPullRequestMergedByTypeBot WebhookPullRequestUnlockedPullRequestMergedByType = "Bot"
	WebhookPullRequestUnlockedPullRequestMergedByTypeOrganization WebhookPullRequestUnlockedPullRequestMergedByType = "Organization"
	WebhookPullRequestUnlockedPullRequestMergedByTypeUser WebhookPullRequestUnlockedPullRequestMergedByType = "User"
)

// PossibleWebhookPullRequestUnlockedPullRequestMergedByTypeValues returns the possible values for the WebhookPullRequestUnlockedPullRequestMergedByType const type.
func PossibleWebhookPullRequestUnlockedPullRequestMergedByTypeValues() []WebhookPullRequestUnlockedPullRequestMergedByType {
	return []WebhookPullRequestUnlockedPullRequestMergedByType{
		WebhookPullRequestUnlockedPullRequestMergedByTypeBot,
		WebhookPullRequestUnlockedPullRequestMergedByTypeOrganization,
		WebhookPullRequestUnlockedPullRequestMergedByTypeUser,
	}
}

type WebhookPullRequestUnlockedPullRequestMilestoneCreatorType string

const (
	WebhookPullRequestUnlockedPullRequestMilestoneCreatorTypeBot WebhookPullRequestUnlockedPullRequestMilestoneCreatorType = "Bot"
	WebhookPullRequestUnlockedPullRequestMilestoneCreatorTypeOrganization WebhookPullRequestUnlockedPullRequestMilestoneCreatorType = "Organization"
	WebhookPullRequestUnlockedPullRequestMilestoneCreatorTypeUser WebhookPullRequestUnlockedPullRequestMilestoneCreatorType = "User"
)

// PossibleWebhookPullRequestUnlockedPullRequestMilestoneCreatorTypeValues returns the possible values for the WebhookPullRequestUnlockedPullRequestMilestoneCreatorType const type.
func PossibleWebhookPullRequestUnlockedPullRequestMilestoneCreatorTypeValues() []WebhookPullRequestUnlockedPullRequestMilestoneCreatorType {
	return []WebhookPullRequestUnlockedPullRequestMilestoneCreatorType{
		WebhookPullRequestUnlockedPullRequestMilestoneCreatorTypeBot,
		WebhookPullRequestUnlockedPullRequestMilestoneCreatorTypeOrganization,
		WebhookPullRequestUnlockedPullRequestMilestoneCreatorTypeUser,
	}
}

// WebhookPullRequestUnlockedPullRequestMilestoneState - The state of the milestone.
type WebhookPullRequestUnlockedPullRequestMilestoneState string

const (
	WebhookPullRequestUnlockedPullRequestMilestoneStateClosed WebhookPullRequestUnlockedPullRequestMilestoneState = "closed"
	WebhookPullRequestUnlockedPullRequestMilestoneStateOpen WebhookPullRequestUnlockedPullRequestMilestoneState = "open"
)

// PossibleWebhookPullRequestUnlockedPullRequestMilestoneStateValues returns the possible values for the WebhookPullRequestUnlockedPullRequestMilestoneState const type.
func PossibleWebhookPullRequestUnlockedPullRequestMilestoneStateValues() []WebhookPullRequestUnlockedPullRequestMilestoneState {
	return []WebhookPullRequestUnlockedPullRequestMilestoneState{
		WebhookPullRequestUnlockedPullRequestMilestoneStateClosed,
		WebhookPullRequestUnlockedPullRequestMilestoneStateOpen,
	}
}

type WebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacy string

const (
	WebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacyClosed WebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacy = "closed"
	WebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacyOpen WebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacy = "open"
	WebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacySecret WebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacy = "secret"
)

// PossibleWebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacyValues returns the possible values for the WebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacy const type.
func PossibleWebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacyValues() []WebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacy {
	return []WebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacy{
		WebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacyClosed,
		WebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacyOpen,
		WebhookPullRequestUnlockedPullRequestRequestedTeamsItemPrivacySecret,
	}
}

// WebhookPullRequestUnlockedPullRequestState - State of this Pull Request. Either open or closed.
type WebhookPullRequestUnlockedPullRequestState string

const (
	WebhookPullRequestUnlockedPullRequestStateClosed WebhookPullRequestUnlockedPullRequestState = "closed"
	WebhookPullRequestUnlockedPullRequestStateOpen WebhookPullRequestUnlockedPullRequestState = "open"
)

// PossibleWebhookPullRequestUnlockedPullRequestStateValues returns the possible values for the WebhookPullRequestUnlockedPullRequestState const type.
func PossibleWebhookPullRequestUnlockedPullRequestStateValues() []WebhookPullRequestUnlockedPullRequestState {
	return []WebhookPullRequestUnlockedPullRequestState{
		WebhookPullRequestUnlockedPullRequestStateClosed,
		WebhookPullRequestUnlockedPullRequestStateOpen,
	}
}

type WebhookPullRequestUnlockedPullRequestUserType string

const (
	WebhookPullRequestUnlockedPullRequestUserTypeBot WebhookPullRequestUnlockedPullRequestUserType = "Bot"
	WebhookPullRequestUnlockedPullRequestUserTypeOrganization WebhookPullRequestUnlockedPullRequestUserType = "Organization"
	WebhookPullRequestUnlockedPullRequestUserTypeUser WebhookPullRequestUnlockedPullRequestUserType = "User"
)

// PossibleWebhookPullRequestUnlockedPullRequestUserTypeValues returns the possible values for the WebhookPullRequestUnlockedPullRequestUserType const type.
func PossibleWebhookPullRequestUnlockedPullRequestUserTypeValues() []WebhookPullRequestUnlockedPullRequestUserType {
	return []WebhookPullRequestUnlockedPullRequestUserType{
		WebhookPullRequestUnlockedPullRequestUserTypeBot,
		WebhookPullRequestUnlockedPullRequestUserTypeOrganization,
		WebhookPullRequestUnlockedPullRequestUserTypeUser,
	}
}

type WebhookPushRepositoryOwnerType string

const (
	WebhookPushRepositoryOwnerTypeBot WebhookPushRepositoryOwnerType = "Bot"
	WebhookPushRepositoryOwnerTypeOrganization WebhookPushRepositoryOwnerType = "Organization"
	WebhookPushRepositoryOwnerTypeUser WebhookPushRepositoryOwnerType = "User"
)

// PossibleWebhookPushRepositoryOwnerTypeValues returns the possible values for the WebhookPushRepositoryOwnerType const type.
func PossibleWebhookPushRepositoryOwnerTypeValues() []WebhookPushRepositoryOwnerType {
	return []WebhookPushRepositoryOwnerType{
		WebhookPushRepositoryOwnerTypeBot,
		WebhookPushRepositoryOwnerTypeOrganization,
		WebhookPushRepositoryOwnerTypeUser,
	}
}

type WebhookPushRepositoryVisibility string

const (
	WebhookPushRepositoryVisibilityInternal WebhookPushRepositoryVisibility = "internal"
	WebhookPushRepositoryVisibilityPrivate WebhookPushRepositoryVisibility = "private"
	WebhookPushRepositoryVisibilityPublic WebhookPushRepositoryVisibility = "public"
)

// PossibleWebhookPushRepositoryVisibilityValues returns the possible values for the WebhookPushRepositoryVisibility const type.
func PossibleWebhookPushRepositoryVisibilityValues() []WebhookPushRepositoryVisibility {
	return []WebhookPushRepositoryVisibility{
		WebhookPushRepositoryVisibilityInternal,
		WebhookPushRepositoryVisibilityPrivate,
		WebhookPushRepositoryVisibilityPublic,
	}
}

type WebhookRegistryPackagePublishedAction string

const (
	WebhookRegistryPackagePublishedActionPublished WebhookRegistryPackagePublishedAction = "published"
)

// PossibleWebhookRegistryPackagePublishedActionValues returns the possible values for the WebhookRegistryPackagePublishedAction const type.
func PossibleWebhookRegistryPackagePublishedActionValues() []WebhookRegistryPackagePublishedAction {
	return []WebhookRegistryPackagePublishedAction{
		WebhookRegistryPackagePublishedActionPublished,
	}
}

type WebhookReleaseCreatedAction string

const (
	WebhookReleaseCreatedActionCreated WebhookReleaseCreatedAction = "created"
)

// PossibleWebhookReleaseCreatedActionValues returns the possible values for the WebhookReleaseCreatedAction const type.
func PossibleWebhookReleaseCreatedActionValues() []WebhookReleaseCreatedAction {
	return []WebhookReleaseCreatedAction{
		WebhookReleaseCreatedActionCreated,
	}
}

// WebhookReleaseCreatedReleaseAssetsItemState - State of the release asset.
type WebhookReleaseCreatedReleaseAssetsItemState string

const (
	WebhookReleaseCreatedReleaseAssetsItemStateUploaded WebhookReleaseCreatedReleaseAssetsItemState = "uploaded"
)

// PossibleWebhookReleaseCreatedReleaseAssetsItemStateValues returns the possible values for the WebhookReleaseCreatedReleaseAssetsItemState const type.
func PossibleWebhookReleaseCreatedReleaseAssetsItemStateValues() []WebhookReleaseCreatedReleaseAssetsItemState {
	return []WebhookReleaseCreatedReleaseAssetsItemState{
		WebhookReleaseCreatedReleaseAssetsItemStateUploaded,
	}
}

type WebhookReleaseCreatedReleaseAuthorType string

const (
	WebhookReleaseCreatedReleaseAuthorTypeBot WebhookReleaseCreatedReleaseAuthorType = "Bot"
	WebhookReleaseCreatedReleaseAuthorTypeOrganization WebhookReleaseCreatedReleaseAuthorType = "Organization"
	WebhookReleaseCreatedReleaseAuthorTypeUser WebhookReleaseCreatedReleaseAuthorType = "User"
)

// PossibleWebhookReleaseCreatedReleaseAuthorTypeValues returns the possible values for the WebhookReleaseCreatedReleaseAuthorType const type.
func PossibleWebhookReleaseCreatedReleaseAuthorTypeValues() []WebhookReleaseCreatedReleaseAuthorType {
	return []WebhookReleaseCreatedReleaseAuthorType{
		WebhookReleaseCreatedReleaseAuthorTypeBot,
		WebhookReleaseCreatedReleaseAuthorTypeOrganization,
		WebhookReleaseCreatedReleaseAuthorTypeUser,
	}
}

type WebhookReleaseDeletedAction string

const (
	WebhookReleaseDeletedActionDeleted WebhookReleaseDeletedAction = "deleted"
)

// PossibleWebhookReleaseDeletedActionValues returns the possible values for the WebhookReleaseDeletedAction const type.
func PossibleWebhookReleaseDeletedActionValues() []WebhookReleaseDeletedAction {
	return []WebhookReleaseDeletedAction{
		WebhookReleaseDeletedActionDeleted,
	}
}

// WebhookReleaseDeletedReleaseAssetsItemState - State of the release asset.
type WebhookReleaseDeletedReleaseAssetsItemState string

const (
	WebhookReleaseDeletedReleaseAssetsItemStateUploaded WebhookReleaseDeletedReleaseAssetsItemState = "uploaded"
)

// PossibleWebhookReleaseDeletedReleaseAssetsItemStateValues returns the possible values for the WebhookReleaseDeletedReleaseAssetsItemState const type.
func PossibleWebhookReleaseDeletedReleaseAssetsItemStateValues() []WebhookReleaseDeletedReleaseAssetsItemState {
	return []WebhookReleaseDeletedReleaseAssetsItemState{
		WebhookReleaseDeletedReleaseAssetsItemStateUploaded,
	}
}

type WebhookReleaseDeletedReleaseAuthorType string

const (
	WebhookReleaseDeletedReleaseAuthorTypeBot WebhookReleaseDeletedReleaseAuthorType = "Bot"
	WebhookReleaseDeletedReleaseAuthorTypeOrganization WebhookReleaseDeletedReleaseAuthorType = "Organization"
	WebhookReleaseDeletedReleaseAuthorTypeUser WebhookReleaseDeletedReleaseAuthorType = "User"
)

// PossibleWebhookReleaseDeletedReleaseAuthorTypeValues returns the possible values for the WebhookReleaseDeletedReleaseAuthorType const type.
func PossibleWebhookReleaseDeletedReleaseAuthorTypeValues() []WebhookReleaseDeletedReleaseAuthorType {
	return []WebhookReleaseDeletedReleaseAuthorType{
		WebhookReleaseDeletedReleaseAuthorTypeBot,
		WebhookReleaseDeletedReleaseAuthorTypeOrganization,
		WebhookReleaseDeletedReleaseAuthorTypeUser,
	}
}

type WebhookReleaseEditedAction string

const (
	WebhookReleaseEditedActionEdited WebhookReleaseEditedAction = "edited"
)

// PossibleWebhookReleaseEditedActionValues returns the possible values for the WebhookReleaseEditedAction const type.
func PossibleWebhookReleaseEditedActionValues() []WebhookReleaseEditedAction {
	return []WebhookReleaseEditedAction{
		WebhookReleaseEditedActionEdited,
	}
}

// WebhookReleaseEditedReleaseAssetsItemState - State of the release asset.
type WebhookReleaseEditedReleaseAssetsItemState string

const (
	WebhookReleaseEditedReleaseAssetsItemStateUploaded WebhookReleaseEditedReleaseAssetsItemState = "uploaded"
)

// PossibleWebhookReleaseEditedReleaseAssetsItemStateValues returns the possible values for the WebhookReleaseEditedReleaseAssetsItemState const type.
func PossibleWebhookReleaseEditedReleaseAssetsItemStateValues() []WebhookReleaseEditedReleaseAssetsItemState {
	return []WebhookReleaseEditedReleaseAssetsItemState{
		WebhookReleaseEditedReleaseAssetsItemStateUploaded,
	}
}

type WebhookReleaseEditedReleaseAuthorType string

const (
	WebhookReleaseEditedReleaseAuthorTypeBot WebhookReleaseEditedReleaseAuthorType = "Bot"
	WebhookReleaseEditedReleaseAuthorTypeOrganization WebhookReleaseEditedReleaseAuthorType = "Organization"
	WebhookReleaseEditedReleaseAuthorTypeUser WebhookReleaseEditedReleaseAuthorType = "User"
)

// PossibleWebhookReleaseEditedReleaseAuthorTypeValues returns the possible values for the WebhookReleaseEditedReleaseAuthorType const type.
func PossibleWebhookReleaseEditedReleaseAuthorTypeValues() []WebhookReleaseEditedReleaseAuthorType {
	return []WebhookReleaseEditedReleaseAuthorType{
		WebhookReleaseEditedReleaseAuthorTypeBot,
		WebhookReleaseEditedReleaseAuthorTypeOrganization,
		WebhookReleaseEditedReleaseAuthorTypeUser,
	}
}

type WebhookReleasePrereleasedAction string

const (
	WebhookReleasePrereleasedActionPrereleased WebhookReleasePrereleasedAction = "prereleased"
)

// PossibleWebhookReleasePrereleasedActionValues returns the possible values for the WebhookReleasePrereleasedAction const type.
func PossibleWebhookReleasePrereleasedActionValues() []WebhookReleasePrereleasedAction {
	return []WebhookReleasePrereleasedAction{
		WebhookReleasePrereleasedActionPrereleased,
	}
}

type WebhookReleasePrereleasedRelease0AuthorType string

const (
	WebhookReleasePrereleasedRelease0AuthorTypeBot WebhookReleasePrereleasedRelease0AuthorType = "Bot"
	WebhookReleasePrereleasedRelease0AuthorTypeOrganization WebhookReleasePrereleasedRelease0AuthorType = "Organization"
	WebhookReleasePrereleasedRelease0AuthorTypeUser WebhookReleasePrereleasedRelease0AuthorType = "User"
)

// PossibleWebhookReleasePrereleasedRelease0AuthorTypeValues returns the possible values for the WebhookReleasePrereleasedRelease0AuthorType const type.
func PossibleWebhookReleasePrereleasedRelease0AuthorTypeValues() []WebhookReleasePrereleasedRelease0AuthorType {
	return []WebhookReleasePrereleasedRelease0AuthorType{
		WebhookReleasePrereleasedRelease0AuthorTypeBot,
		WebhookReleasePrereleasedRelease0AuthorTypeOrganization,
		WebhookReleasePrereleasedRelease0AuthorTypeUser,
	}
}

// WebhookReleasePrereleasedReleaseOneOf0AssetsItemState - State of the release asset.
type WebhookReleasePrereleasedReleaseOneOf0AssetsItemState string

const (
	WebhookReleasePrereleasedReleaseOneOf0AssetsItemStateUploaded WebhookReleasePrereleasedReleaseOneOf0AssetsItemState = "uploaded"
)

// PossibleWebhookReleasePrereleasedReleaseOneOf0AssetsItemStateValues returns the possible values for the WebhookReleasePrereleasedReleaseOneOf0AssetsItemState const type.
func PossibleWebhookReleasePrereleasedReleaseOneOf0AssetsItemStateValues() []WebhookReleasePrereleasedReleaseOneOf0AssetsItemState {
	return []WebhookReleasePrereleasedReleaseOneOf0AssetsItemState{
		WebhookReleasePrereleasedReleaseOneOf0AssetsItemStateUploaded,
	}
}

type WebhookReleasePublishedAction string

const (
	WebhookReleasePublishedActionPublished WebhookReleasePublishedAction = "published"
)

// PossibleWebhookReleasePublishedActionValues returns the possible values for the WebhookReleasePublishedAction const type.
func PossibleWebhookReleasePublishedActionValues() []WebhookReleasePublishedAction {
	return []WebhookReleasePublishedAction{
		WebhookReleasePublishedActionPublished,
	}
}

type WebhookReleasePublishedRelease0AuthorType string

const (
	WebhookReleasePublishedRelease0AuthorTypeBot WebhookReleasePublishedRelease0AuthorType = "Bot"
	WebhookReleasePublishedRelease0AuthorTypeOrganization WebhookReleasePublishedRelease0AuthorType = "Organization"
	WebhookReleasePublishedRelease0AuthorTypeUser WebhookReleasePublishedRelease0AuthorType = "User"
)

// PossibleWebhookReleasePublishedRelease0AuthorTypeValues returns the possible values for the WebhookReleasePublishedRelease0AuthorType const type.
func PossibleWebhookReleasePublishedRelease0AuthorTypeValues() []WebhookReleasePublishedRelease0AuthorType {
	return []WebhookReleasePublishedRelease0AuthorType{
		WebhookReleasePublishedRelease0AuthorTypeBot,
		WebhookReleasePublishedRelease0AuthorTypeOrganization,
		WebhookReleasePublishedRelease0AuthorTypeUser,
	}
}

// WebhookReleasePublishedReleaseOneOf0AssetsItemState - State of the release asset.
type WebhookReleasePublishedReleaseOneOf0AssetsItemState string

const (
	WebhookReleasePublishedReleaseOneOf0AssetsItemStateUploaded WebhookReleasePublishedReleaseOneOf0AssetsItemState = "uploaded"
)

// PossibleWebhookReleasePublishedReleaseOneOf0AssetsItemStateValues returns the possible values for the WebhookReleasePublishedReleaseOneOf0AssetsItemState const type.
func PossibleWebhookReleasePublishedReleaseOneOf0AssetsItemStateValues() []WebhookReleasePublishedReleaseOneOf0AssetsItemState {
	return []WebhookReleasePublishedReleaseOneOf0AssetsItemState{
		WebhookReleasePublishedReleaseOneOf0AssetsItemStateUploaded,
	}
}

type WebhookReleaseReleasedAction string

const (
	WebhookReleaseReleasedActionReleased WebhookReleaseReleasedAction = "released"
)

// PossibleWebhookReleaseReleasedActionValues returns the possible values for the WebhookReleaseReleasedAction const type.
func PossibleWebhookReleaseReleasedActionValues() []WebhookReleaseReleasedAction {
	return []WebhookReleaseReleasedAction{
		WebhookReleaseReleasedActionReleased,
	}
}

// WebhookReleaseReleasedReleaseAssetsItemState - State of the release asset.
type WebhookReleaseReleasedReleaseAssetsItemState string

const (
	WebhookReleaseReleasedReleaseAssetsItemStateUploaded WebhookReleaseReleasedReleaseAssetsItemState = "uploaded"
)

// PossibleWebhookReleaseReleasedReleaseAssetsItemStateValues returns the possible values for the WebhookReleaseReleasedReleaseAssetsItemState const type.
func PossibleWebhookReleaseReleasedReleaseAssetsItemStateValues() []WebhookReleaseReleasedReleaseAssetsItemState {
	return []WebhookReleaseReleasedReleaseAssetsItemState{
		WebhookReleaseReleasedReleaseAssetsItemStateUploaded,
	}
}

type WebhookReleaseReleasedReleaseAuthorType string

const (
	WebhookReleaseReleasedReleaseAuthorTypeBot WebhookReleaseReleasedReleaseAuthorType = "Bot"
	WebhookReleaseReleasedReleaseAuthorTypeOrganization WebhookReleaseReleasedReleaseAuthorType = "Organization"
	WebhookReleaseReleasedReleaseAuthorTypeUser WebhookReleaseReleasedReleaseAuthorType = "User"
)

// PossibleWebhookReleaseReleasedReleaseAuthorTypeValues returns the possible values for the WebhookReleaseReleasedReleaseAuthorType const type.
func PossibleWebhookReleaseReleasedReleaseAuthorTypeValues() []WebhookReleaseReleasedReleaseAuthorType {
	return []WebhookReleaseReleasedReleaseAuthorType{
		WebhookReleaseReleasedReleaseAuthorTypeBot,
		WebhookReleaseReleasedReleaseAuthorTypeOrganization,
		WebhookReleaseReleasedReleaseAuthorTypeUser,
	}
}

type WebhookReleaseUnpublishedAction string

const (
	WebhookReleaseUnpublishedActionUnpublished WebhookReleaseUnpublishedAction = "unpublished"
)

// PossibleWebhookReleaseUnpublishedActionValues returns the possible values for the WebhookReleaseUnpublishedAction const type.
func PossibleWebhookReleaseUnpublishedActionValues() []WebhookReleaseUnpublishedAction {
	return []WebhookReleaseUnpublishedAction{
		WebhookReleaseUnpublishedActionUnpublished,
	}
}

type WebhookReleaseUnpublishedRelease0AuthorType string

const (
	WebhookReleaseUnpublishedRelease0AuthorTypeBot WebhookReleaseUnpublishedRelease0AuthorType = "Bot"
	WebhookReleaseUnpublishedRelease0AuthorTypeOrganization WebhookReleaseUnpublishedRelease0AuthorType = "Organization"
	WebhookReleaseUnpublishedRelease0AuthorTypeUser WebhookReleaseUnpublishedRelease0AuthorType = "User"
)

// PossibleWebhookReleaseUnpublishedRelease0AuthorTypeValues returns the possible values for the WebhookReleaseUnpublishedRelease0AuthorType const type.
func PossibleWebhookReleaseUnpublishedRelease0AuthorTypeValues() []WebhookReleaseUnpublishedRelease0AuthorType {
	return []WebhookReleaseUnpublishedRelease0AuthorType{
		WebhookReleaseUnpublishedRelease0AuthorTypeBot,
		WebhookReleaseUnpublishedRelease0AuthorTypeOrganization,
		WebhookReleaseUnpublishedRelease0AuthorTypeUser,
	}
}

// WebhookReleaseUnpublishedReleaseOneOf0AssetsItemState - State of the release asset.
type WebhookReleaseUnpublishedReleaseOneOf0AssetsItemState string

const (
	WebhookReleaseUnpublishedReleaseOneOf0AssetsItemStateUploaded WebhookReleaseUnpublishedReleaseOneOf0AssetsItemState = "uploaded"
)

// PossibleWebhookReleaseUnpublishedReleaseOneOf0AssetsItemStateValues returns the possible values for the WebhookReleaseUnpublishedReleaseOneOf0AssetsItemState const type.
func PossibleWebhookReleaseUnpublishedReleaseOneOf0AssetsItemStateValues() []WebhookReleaseUnpublishedReleaseOneOf0AssetsItemState {
	return []WebhookReleaseUnpublishedReleaseOneOf0AssetsItemState{
		WebhookReleaseUnpublishedReleaseOneOf0AssetsItemStateUploaded,
	}
}

type WebhookRepositoryArchivedAction string

const (
	WebhookRepositoryArchivedActionArchived WebhookRepositoryArchivedAction = "archived"
)

// PossibleWebhookRepositoryArchivedActionValues returns the possible values for the WebhookRepositoryArchivedAction const type.
func PossibleWebhookRepositoryArchivedActionValues() []WebhookRepositoryArchivedAction {
	return []WebhookRepositoryArchivedAction{
		WebhookRepositoryArchivedActionArchived,
	}
}

type WebhookRepositoryCreatedAction string

const (
	WebhookRepositoryCreatedActionCreated WebhookRepositoryCreatedAction = "created"
)

// PossibleWebhookRepositoryCreatedActionValues returns the possible values for the WebhookRepositoryCreatedAction const type.
func PossibleWebhookRepositoryCreatedActionValues() []WebhookRepositoryCreatedAction {
	return []WebhookRepositoryCreatedAction{
		WebhookRepositoryCreatedActionCreated,
	}
}

type WebhookRepositoryDeletedAction string

const (
	WebhookRepositoryDeletedActionDeleted WebhookRepositoryDeletedAction = "deleted"
)

// PossibleWebhookRepositoryDeletedActionValues returns the possible values for the WebhookRepositoryDeletedAction const type.
func PossibleWebhookRepositoryDeletedActionValues() []WebhookRepositoryDeletedAction {
	return []WebhookRepositoryDeletedAction{
		WebhookRepositoryDeletedActionDeleted,
	}
}

type WebhookRepositoryEditedAction string

const (
	WebhookRepositoryEditedActionEdited WebhookRepositoryEditedAction = "edited"
)

// PossibleWebhookRepositoryEditedActionValues returns the possible values for the WebhookRepositoryEditedAction const type.
func PossibleWebhookRepositoryEditedActionValues() []WebhookRepositoryEditedAction {
	return []WebhookRepositoryEditedAction{
		WebhookRepositoryEditedActionEdited,
	}
}

type WebhookRepositoryImportStatus string

const (
	WebhookRepositoryImportStatusCancelled WebhookRepositoryImportStatus = "cancelled"
	WebhookRepositoryImportStatusFailure WebhookRepositoryImportStatus = "failure"
	WebhookRepositoryImportStatusSuccess WebhookRepositoryImportStatus = "success"
)

// PossibleWebhookRepositoryImportStatusValues returns the possible values for the WebhookRepositoryImportStatus const type.
func PossibleWebhookRepositoryImportStatusValues() []WebhookRepositoryImportStatus {
	return []WebhookRepositoryImportStatus{
		WebhookRepositoryImportStatusCancelled,
		WebhookRepositoryImportStatusFailure,
		WebhookRepositoryImportStatusSuccess,
	}
}

type WebhookRepositoryPrivatizedAction string

const (
	WebhookRepositoryPrivatizedActionPrivatized WebhookRepositoryPrivatizedAction = "privatized"
)

// PossibleWebhookRepositoryPrivatizedActionValues returns the possible values for the WebhookRepositoryPrivatizedAction const type.
func PossibleWebhookRepositoryPrivatizedActionValues() []WebhookRepositoryPrivatizedAction {
	return []WebhookRepositoryPrivatizedAction{
		WebhookRepositoryPrivatizedActionPrivatized,
	}
}

type WebhookRepositoryPublicizedAction string

const (
	WebhookRepositoryPublicizedActionPublicized WebhookRepositoryPublicizedAction = "publicized"
)

// PossibleWebhookRepositoryPublicizedActionValues returns the possible values for the WebhookRepositoryPublicizedAction const type.
func PossibleWebhookRepositoryPublicizedActionValues() []WebhookRepositoryPublicizedAction {
	return []WebhookRepositoryPublicizedAction{
		WebhookRepositoryPublicizedActionPublicized,
	}
}

type WebhookRepositoryRenamedAction string

const (
	WebhookRepositoryRenamedActionRenamed WebhookRepositoryRenamedAction = "renamed"
)

// PossibleWebhookRepositoryRenamedActionValues returns the possible values for the WebhookRepositoryRenamedAction const type.
func PossibleWebhookRepositoryRenamedActionValues() []WebhookRepositoryRenamedAction {
	return []WebhookRepositoryRenamedAction{
		WebhookRepositoryRenamedActionRenamed,
	}
}

type WebhookRepositoryTransferredAction string

const (
	WebhookRepositoryTransferredActionTransferred WebhookRepositoryTransferredAction = "transferred"
)

// PossibleWebhookRepositoryTransferredActionValues returns the possible values for the WebhookRepositoryTransferredAction const type.
func PossibleWebhookRepositoryTransferredActionValues() []WebhookRepositoryTransferredAction {
	return []WebhookRepositoryTransferredAction{
		WebhookRepositoryTransferredActionTransferred,
	}
}

type WebhookRepositoryTransferredChangesOwnerFromUserType string

const (
	WebhookRepositoryTransferredChangesOwnerFromUserTypeBot WebhookRepositoryTransferredChangesOwnerFromUserType = "Bot"
	WebhookRepositoryTransferredChangesOwnerFromUserTypeOrganization WebhookRepositoryTransferredChangesOwnerFromUserType = "Organization"
	WebhookRepositoryTransferredChangesOwnerFromUserTypeUser WebhookRepositoryTransferredChangesOwnerFromUserType = "User"
)

// PossibleWebhookRepositoryTransferredChangesOwnerFromUserTypeValues returns the possible values for the WebhookRepositoryTransferredChangesOwnerFromUserType const type.
func PossibleWebhookRepositoryTransferredChangesOwnerFromUserTypeValues() []WebhookRepositoryTransferredChangesOwnerFromUserType {
	return []WebhookRepositoryTransferredChangesOwnerFromUserType{
		WebhookRepositoryTransferredChangesOwnerFromUserTypeBot,
		WebhookRepositoryTransferredChangesOwnerFromUserTypeOrganization,
		WebhookRepositoryTransferredChangesOwnerFromUserTypeUser,
	}
}

type WebhookRepositoryUnarchivedAction string

const (
	WebhookRepositoryUnarchivedActionUnarchived WebhookRepositoryUnarchivedAction = "unarchived"
)

// PossibleWebhookRepositoryUnarchivedActionValues returns the possible values for the WebhookRepositoryUnarchivedAction const type.
func PossibleWebhookRepositoryUnarchivedActionValues() []WebhookRepositoryUnarchivedAction {
	return []WebhookRepositoryUnarchivedAction{
		WebhookRepositoryUnarchivedActionUnarchived,
	}
}

type WebhookRepositoryVulnerabilityAlertCreateAction string

const (
	WebhookRepositoryVulnerabilityAlertCreateActionCreate WebhookRepositoryVulnerabilityAlertCreateAction = "create"
)

// PossibleWebhookRepositoryVulnerabilityAlertCreateActionValues returns the possible values for the WebhookRepositoryVulnerabilityAlertCreateAction const type.
func PossibleWebhookRepositoryVulnerabilityAlertCreateActionValues() []WebhookRepositoryVulnerabilityAlertCreateAction {
	return []WebhookRepositoryVulnerabilityAlertCreateAction{
		WebhookRepositoryVulnerabilityAlertCreateActionCreate,
	}
}

type WebhookRepositoryVulnerabilityAlertCreateAlert0DismisserType string

const (
	WebhookRepositoryVulnerabilityAlertCreateAlert0DismisserTypeBot WebhookRepositoryVulnerabilityAlertCreateAlert0DismisserType = "Bot"
	WebhookRepositoryVulnerabilityAlertCreateAlert0DismisserTypeOrganization WebhookRepositoryVulnerabilityAlertCreateAlert0DismisserType = "Organization"
	WebhookRepositoryVulnerabilityAlertCreateAlert0DismisserTypeUser WebhookRepositoryVulnerabilityAlertCreateAlert0DismisserType = "User"
)

// PossibleWebhookRepositoryVulnerabilityAlertCreateAlert0DismisserTypeValues returns the possible values for the WebhookRepositoryVulnerabilityAlertCreateAlert0DismisserType const type.
func PossibleWebhookRepositoryVulnerabilityAlertCreateAlert0DismisserTypeValues() []WebhookRepositoryVulnerabilityAlertCreateAlert0DismisserType {
	return []WebhookRepositoryVulnerabilityAlertCreateAlert0DismisserType{
		WebhookRepositoryVulnerabilityAlertCreateAlert0DismisserTypeBot,
		WebhookRepositoryVulnerabilityAlertCreateAlert0DismisserTypeOrganization,
		WebhookRepositoryVulnerabilityAlertCreateAlert0DismisserTypeUser,
	}
}

type WebhookRepositoryVulnerabilityAlertCreateAlert0State string

const (
	WebhookRepositoryVulnerabilityAlertCreateAlert0StateDismissed WebhookRepositoryVulnerabilityAlertCreateAlert0State = "dismissed"
	WebhookRepositoryVulnerabilityAlertCreateAlert0StateFixed WebhookRepositoryVulnerabilityAlertCreateAlert0State = "fixed"
	WebhookRepositoryVulnerabilityAlertCreateAlert0StateOpen WebhookRepositoryVulnerabilityAlertCreateAlert0State = "open"
)

// PossibleWebhookRepositoryVulnerabilityAlertCreateAlert0StateValues returns the possible values for the WebhookRepositoryVulnerabilityAlertCreateAlert0State const type.
func PossibleWebhookRepositoryVulnerabilityAlertCreateAlert0StateValues() []WebhookRepositoryVulnerabilityAlertCreateAlert0State {
	return []WebhookRepositoryVulnerabilityAlertCreateAlert0State{
		WebhookRepositoryVulnerabilityAlertCreateAlert0StateDismissed,
		WebhookRepositoryVulnerabilityAlertCreateAlert0StateFixed,
		WebhookRepositoryVulnerabilityAlertCreateAlert0StateOpen,
	}
}

type WebhookRepositoryVulnerabilityAlertCreateAlert1State string

const (
	WebhookRepositoryVulnerabilityAlertCreateAlert1StateOpen WebhookRepositoryVulnerabilityAlertCreateAlert1State = "open"
)

// PossibleWebhookRepositoryVulnerabilityAlertCreateAlert1StateValues returns the possible values for the WebhookRepositoryVulnerabilityAlertCreateAlert1State const type.
func PossibleWebhookRepositoryVulnerabilityAlertCreateAlert1StateValues() []WebhookRepositoryVulnerabilityAlertCreateAlert1State {
	return []WebhookRepositoryVulnerabilityAlertCreateAlert1State{
		WebhookRepositoryVulnerabilityAlertCreateAlert1StateOpen,
	}
}

type WebhookRepositoryVulnerabilityAlertDismissAction string

const (
	WebhookRepositoryVulnerabilityAlertDismissActionDismiss WebhookRepositoryVulnerabilityAlertDismissAction = "dismiss"
)

// PossibleWebhookRepositoryVulnerabilityAlertDismissActionValues returns the possible values for the WebhookRepositoryVulnerabilityAlertDismissAction const type.
func PossibleWebhookRepositoryVulnerabilityAlertDismissActionValues() []WebhookRepositoryVulnerabilityAlertDismissAction {
	return []WebhookRepositoryVulnerabilityAlertDismissAction{
		WebhookRepositoryVulnerabilityAlertDismissActionDismiss,
	}
}

type WebhookRepositoryVulnerabilityAlertDismissAlert0DismisserType string

const (
	WebhookRepositoryVulnerabilityAlertDismissAlert0DismisserTypeBot WebhookRepositoryVulnerabilityAlertDismissAlert0DismisserType = "Bot"
	WebhookRepositoryVulnerabilityAlertDismissAlert0DismisserTypeOrganization WebhookRepositoryVulnerabilityAlertDismissAlert0DismisserType = "Organization"
	WebhookRepositoryVulnerabilityAlertDismissAlert0DismisserTypeUser WebhookRepositoryVulnerabilityAlertDismissAlert0DismisserType = "User"
)

// PossibleWebhookRepositoryVulnerabilityAlertDismissAlert0DismisserTypeValues returns the possible values for the WebhookRepositoryVulnerabilityAlertDismissAlert0DismisserType const type.
func PossibleWebhookRepositoryVulnerabilityAlertDismissAlert0DismisserTypeValues() []WebhookRepositoryVulnerabilityAlertDismissAlert0DismisserType {
	return []WebhookRepositoryVulnerabilityAlertDismissAlert0DismisserType{
		WebhookRepositoryVulnerabilityAlertDismissAlert0DismisserTypeBot,
		WebhookRepositoryVulnerabilityAlertDismissAlert0DismisserTypeOrganization,
		WebhookRepositoryVulnerabilityAlertDismissAlert0DismisserTypeUser,
	}
}

type WebhookRepositoryVulnerabilityAlertDismissAlert0State string

const (
	WebhookRepositoryVulnerabilityAlertDismissAlert0StateDismissed WebhookRepositoryVulnerabilityAlertDismissAlert0State = "dismissed"
	WebhookRepositoryVulnerabilityAlertDismissAlert0StateFixed WebhookRepositoryVulnerabilityAlertDismissAlert0State = "fixed"
	WebhookRepositoryVulnerabilityAlertDismissAlert0StateOpen WebhookRepositoryVulnerabilityAlertDismissAlert0State = "open"
)

// PossibleWebhookRepositoryVulnerabilityAlertDismissAlert0StateValues returns the possible values for the WebhookRepositoryVulnerabilityAlertDismissAlert0State const type.
func PossibleWebhookRepositoryVulnerabilityAlertDismissAlert0StateValues() []WebhookRepositoryVulnerabilityAlertDismissAlert0State {
	return []WebhookRepositoryVulnerabilityAlertDismissAlert0State{
		WebhookRepositoryVulnerabilityAlertDismissAlert0StateDismissed,
		WebhookRepositoryVulnerabilityAlertDismissAlert0StateFixed,
		WebhookRepositoryVulnerabilityAlertDismissAlert0StateOpen,
	}
}

type WebhookRepositoryVulnerabilityAlertDismissAlert1DismisserType string

const (
	WebhookRepositoryVulnerabilityAlertDismissAlert1DismisserTypeBot WebhookRepositoryVulnerabilityAlertDismissAlert1DismisserType = "Bot"
	WebhookRepositoryVulnerabilityAlertDismissAlert1DismisserTypeOrganization WebhookRepositoryVulnerabilityAlertDismissAlert1DismisserType = "Organization"
	WebhookRepositoryVulnerabilityAlertDismissAlert1DismisserTypeUser WebhookRepositoryVulnerabilityAlertDismissAlert1DismisserType = "User"
)

// PossibleWebhookRepositoryVulnerabilityAlertDismissAlert1DismisserTypeValues returns the possible values for the WebhookRepositoryVulnerabilityAlertDismissAlert1DismisserType const type.
func PossibleWebhookRepositoryVulnerabilityAlertDismissAlert1DismisserTypeValues() []WebhookRepositoryVulnerabilityAlertDismissAlert1DismisserType {
	return []WebhookRepositoryVulnerabilityAlertDismissAlert1DismisserType{
		WebhookRepositoryVulnerabilityAlertDismissAlert1DismisserTypeBot,
		WebhookRepositoryVulnerabilityAlertDismissAlert1DismisserTypeOrganization,
		WebhookRepositoryVulnerabilityAlertDismissAlert1DismisserTypeUser,
	}
}

type WebhookRepositoryVulnerabilityAlertDismissAlert1State string

const (
	WebhookRepositoryVulnerabilityAlertDismissAlert1StateDismissed WebhookRepositoryVulnerabilityAlertDismissAlert1State = "dismissed"
)

// PossibleWebhookRepositoryVulnerabilityAlertDismissAlert1StateValues returns the possible values for the WebhookRepositoryVulnerabilityAlertDismissAlert1State const type.
func PossibleWebhookRepositoryVulnerabilityAlertDismissAlert1StateValues() []WebhookRepositoryVulnerabilityAlertDismissAlert1State {
	return []WebhookRepositoryVulnerabilityAlertDismissAlert1State{
		WebhookRepositoryVulnerabilityAlertDismissAlert1StateDismissed,
	}
}

type WebhookRepositoryVulnerabilityAlertReopenAction string

const (
	WebhookRepositoryVulnerabilityAlertReopenActionReopen WebhookRepositoryVulnerabilityAlertReopenAction = "reopen"
)

// PossibleWebhookRepositoryVulnerabilityAlertReopenActionValues returns the possible values for the WebhookRepositoryVulnerabilityAlertReopenAction const type.
func PossibleWebhookRepositoryVulnerabilityAlertReopenActionValues() []WebhookRepositoryVulnerabilityAlertReopenAction {
	return []WebhookRepositoryVulnerabilityAlertReopenAction{
		WebhookRepositoryVulnerabilityAlertReopenActionReopen,
	}
}

type WebhookRepositoryVulnerabilityAlertReopenAlert0DismisserType string

const (
	WebhookRepositoryVulnerabilityAlertReopenAlert0DismisserTypeBot WebhookRepositoryVulnerabilityAlertReopenAlert0DismisserType = "Bot"
	WebhookRepositoryVulnerabilityAlertReopenAlert0DismisserTypeOrganization WebhookRepositoryVulnerabilityAlertReopenAlert0DismisserType = "Organization"
	WebhookRepositoryVulnerabilityAlertReopenAlert0DismisserTypeUser WebhookRepositoryVulnerabilityAlertReopenAlert0DismisserType = "User"
)

// PossibleWebhookRepositoryVulnerabilityAlertReopenAlert0DismisserTypeValues returns the possible values for the WebhookRepositoryVulnerabilityAlertReopenAlert0DismisserType const type.
func PossibleWebhookRepositoryVulnerabilityAlertReopenAlert0DismisserTypeValues() []WebhookRepositoryVulnerabilityAlertReopenAlert0DismisserType {
	return []WebhookRepositoryVulnerabilityAlertReopenAlert0DismisserType{
		WebhookRepositoryVulnerabilityAlertReopenAlert0DismisserTypeBot,
		WebhookRepositoryVulnerabilityAlertReopenAlert0DismisserTypeOrganization,
		WebhookRepositoryVulnerabilityAlertReopenAlert0DismisserTypeUser,
	}
}

type WebhookRepositoryVulnerabilityAlertReopenAlert0State string

const (
	WebhookRepositoryVulnerabilityAlertReopenAlert0StateDismissed WebhookRepositoryVulnerabilityAlertReopenAlert0State = "dismissed"
	WebhookRepositoryVulnerabilityAlertReopenAlert0StateFixed WebhookRepositoryVulnerabilityAlertReopenAlert0State = "fixed"
	WebhookRepositoryVulnerabilityAlertReopenAlert0StateOpen WebhookRepositoryVulnerabilityAlertReopenAlert0State = "open"
)

// PossibleWebhookRepositoryVulnerabilityAlertReopenAlert0StateValues returns the possible values for the WebhookRepositoryVulnerabilityAlertReopenAlert0State const type.
func PossibleWebhookRepositoryVulnerabilityAlertReopenAlert0StateValues() []WebhookRepositoryVulnerabilityAlertReopenAlert0State {
	return []WebhookRepositoryVulnerabilityAlertReopenAlert0State{
		WebhookRepositoryVulnerabilityAlertReopenAlert0StateDismissed,
		WebhookRepositoryVulnerabilityAlertReopenAlert0StateFixed,
		WebhookRepositoryVulnerabilityAlertReopenAlert0StateOpen,
	}
}

type WebhookRepositoryVulnerabilityAlertReopenAlert1State string

const (
	WebhookRepositoryVulnerabilityAlertReopenAlert1StateOpen WebhookRepositoryVulnerabilityAlertReopenAlert1State = "open"
)

// PossibleWebhookRepositoryVulnerabilityAlertReopenAlert1StateValues returns the possible values for the WebhookRepositoryVulnerabilityAlertReopenAlert1State const type.
func PossibleWebhookRepositoryVulnerabilityAlertReopenAlert1StateValues() []WebhookRepositoryVulnerabilityAlertReopenAlert1State {
	return []WebhookRepositoryVulnerabilityAlertReopenAlert1State{
		WebhookRepositoryVulnerabilityAlertReopenAlert1StateOpen,
	}
}

type WebhookRepositoryVulnerabilityAlertResolveAction string

const (
	WebhookRepositoryVulnerabilityAlertResolveActionResolve WebhookRepositoryVulnerabilityAlertResolveAction = "resolve"
)

// PossibleWebhookRepositoryVulnerabilityAlertResolveActionValues returns the possible values for the WebhookRepositoryVulnerabilityAlertResolveAction const type.
func PossibleWebhookRepositoryVulnerabilityAlertResolveActionValues() []WebhookRepositoryVulnerabilityAlertResolveAction {
	return []WebhookRepositoryVulnerabilityAlertResolveAction{
		WebhookRepositoryVulnerabilityAlertResolveActionResolve,
	}
}

type WebhookRepositoryVulnerabilityAlertResolveAlert0DismisserType string

const (
	WebhookRepositoryVulnerabilityAlertResolveAlert0DismisserTypeBot WebhookRepositoryVulnerabilityAlertResolveAlert0DismisserType = "Bot"
	WebhookRepositoryVulnerabilityAlertResolveAlert0DismisserTypeOrganization WebhookRepositoryVulnerabilityAlertResolveAlert0DismisserType = "Organization"
	WebhookRepositoryVulnerabilityAlertResolveAlert0DismisserTypeUser WebhookRepositoryVulnerabilityAlertResolveAlert0DismisserType = "User"
)

// PossibleWebhookRepositoryVulnerabilityAlertResolveAlert0DismisserTypeValues returns the possible values for the WebhookRepositoryVulnerabilityAlertResolveAlert0DismisserType const type.
func PossibleWebhookRepositoryVulnerabilityAlertResolveAlert0DismisserTypeValues() []WebhookRepositoryVulnerabilityAlertResolveAlert0DismisserType {
	return []WebhookRepositoryVulnerabilityAlertResolveAlert0DismisserType{
		WebhookRepositoryVulnerabilityAlertResolveAlert0DismisserTypeBot,
		WebhookRepositoryVulnerabilityAlertResolveAlert0DismisserTypeOrganization,
		WebhookRepositoryVulnerabilityAlertResolveAlert0DismisserTypeUser,
	}
}

type WebhookRepositoryVulnerabilityAlertResolveAlert0State string

const (
	WebhookRepositoryVulnerabilityAlertResolveAlert0StateDismissed WebhookRepositoryVulnerabilityAlertResolveAlert0State = "dismissed"
	WebhookRepositoryVulnerabilityAlertResolveAlert0StateFixed WebhookRepositoryVulnerabilityAlertResolveAlert0State = "fixed"
	WebhookRepositoryVulnerabilityAlertResolveAlert0StateOpen WebhookRepositoryVulnerabilityAlertResolveAlert0State = "open"
)

// PossibleWebhookRepositoryVulnerabilityAlertResolveAlert0StateValues returns the possible values for the WebhookRepositoryVulnerabilityAlertResolveAlert0State const type.
func PossibleWebhookRepositoryVulnerabilityAlertResolveAlert0StateValues() []WebhookRepositoryVulnerabilityAlertResolveAlert0State {
	return []WebhookRepositoryVulnerabilityAlertResolveAlert0State{
		WebhookRepositoryVulnerabilityAlertResolveAlert0StateDismissed,
		WebhookRepositoryVulnerabilityAlertResolveAlert0StateFixed,
		WebhookRepositoryVulnerabilityAlertResolveAlert0StateOpen,
	}
}

type WebhookRepositoryVulnerabilityAlertResolveAlert1State string

const (
	WebhookRepositoryVulnerabilityAlertResolveAlert1StateFixed WebhookRepositoryVulnerabilityAlertResolveAlert1State = "fixed"
	WebhookRepositoryVulnerabilityAlertResolveAlert1StateOpen WebhookRepositoryVulnerabilityAlertResolveAlert1State = "open"
)

// PossibleWebhookRepositoryVulnerabilityAlertResolveAlert1StateValues returns the possible values for the WebhookRepositoryVulnerabilityAlertResolveAlert1State const type.
func PossibleWebhookRepositoryVulnerabilityAlertResolveAlert1StateValues() []WebhookRepositoryVulnerabilityAlertResolveAlert1State {
	return []WebhookRepositoryVulnerabilityAlertResolveAlert1State{
		WebhookRepositoryVulnerabilityAlertResolveAlert1StateFixed,
		WebhookRepositoryVulnerabilityAlertResolveAlert1StateOpen,
	}
}

type WebhookSecretScanningAlertCreatedAction string

const (
	WebhookSecretScanningAlertCreatedActionCreated WebhookSecretScanningAlertCreatedAction = "created"
)

// PossibleWebhookSecretScanningAlertCreatedActionValues returns the possible values for the WebhookSecretScanningAlertCreatedAction const type.
func PossibleWebhookSecretScanningAlertCreatedActionValues() []WebhookSecretScanningAlertCreatedAction {
	return []WebhookSecretScanningAlertCreatedAction{
		WebhookSecretScanningAlertCreatedActionCreated,
	}
}

type WebhookSecretScanningAlertLocationCreatedAction string

const (
	WebhookSecretScanningAlertLocationCreatedActionCreated WebhookSecretScanningAlertLocationCreatedAction = "created"
)

// PossibleWebhookSecretScanningAlertLocationCreatedActionValues returns the possible values for the WebhookSecretScanningAlertLocationCreatedAction const type.
func PossibleWebhookSecretScanningAlertLocationCreatedActionValues() []WebhookSecretScanningAlertLocationCreatedAction {
	return []WebhookSecretScanningAlertLocationCreatedAction{
		WebhookSecretScanningAlertLocationCreatedActionCreated,
	}
}

type WebhookSecretScanningAlertReopenedAction string

const (
	WebhookSecretScanningAlertReopenedActionReopened WebhookSecretScanningAlertReopenedAction = "reopened"
)

// PossibleWebhookSecretScanningAlertReopenedActionValues returns the possible values for the WebhookSecretScanningAlertReopenedAction const type.
func PossibleWebhookSecretScanningAlertReopenedActionValues() []WebhookSecretScanningAlertReopenedAction {
	return []WebhookSecretScanningAlertReopenedAction{
		WebhookSecretScanningAlertReopenedActionReopened,
	}
}

type WebhookSecretScanningAlertResolvedAction string

const (
	WebhookSecretScanningAlertResolvedActionResolved WebhookSecretScanningAlertResolvedAction = "resolved"
)

// PossibleWebhookSecretScanningAlertResolvedActionValues returns the possible values for the WebhookSecretScanningAlertResolvedAction const type.
func PossibleWebhookSecretScanningAlertResolvedActionValues() []WebhookSecretScanningAlertResolvedAction {
	return []WebhookSecretScanningAlertResolvedAction{
		WebhookSecretScanningAlertResolvedActionResolved,
	}
}

// WebhookSecretScanningAlertResolvedAlertResolution - Required when the state is resolved. The reason for resolving the alert.
type WebhookSecretScanningAlertResolvedAlertResolution string

const (
	WebhookSecretScanningAlertResolvedAlertResolutionFalsePositive WebhookSecretScanningAlertResolvedAlertResolution = "false_positive"
	WebhookSecretScanningAlertResolvedAlertResolutionNull WebhookSecretScanningAlertResolvedAlertResolution = "null"
	WebhookSecretScanningAlertResolvedAlertResolutionPatternDeleted WebhookSecretScanningAlertResolvedAlertResolution = "pattern_deleted"
	WebhookSecretScanningAlertResolvedAlertResolutionPatternEdited WebhookSecretScanningAlertResolvedAlertResolution = "pattern_edited"
	WebhookSecretScanningAlertResolvedAlertResolutionRevoked WebhookSecretScanningAlertResolvedAlertResolution = "revoked"
	WebhookSecretScanningAlertResolvedAlertResolutionUsedInTests WebhookSecretScanningAlertResolvedAlertResolution = "used_in_tests"
	WebhookSecretScanningAlertResolvedAlertResolutionWontFix WebhookSecretScanningAlertResolvedAlertResolution = "wont_fix"
)

// PossibleWebhookSecretScanningAlertResolvedAlertResolutionValues returns the possible values for the WebhookSecretScanningAlertResolvedAlertResolution const type.
func PossibleWebhookSecretScanningAlertResolvedAlertResolutionValues() []WebhookSecretScanningAlertResolvedAlertResolution {
	return []WebhookSecretScanningAlertResolvedAlertResolution{
		WebhookSecretScanningAlertResolvedAlertResolutionFalsePositive,
		WebhookSecretScanningAlertResolvedAlertResolutionNull,
		WebhookSecretScanningAlertResolvedAlertResolutionPatternDeleted,
		WebhookSecretScanningAlertResolvedAlertResolutionPatternEdited,
		WebhookSecretScanningAlertResolvedAlertResolutionRevoked,
		WebhookSecretScanningAlertResolvedAlertResolutionUsedInTests,
		WebhookSecretScanningAlertResolvedAlertResolutionWontFix,
	}
}

type WebhookSecretScanningAlertRevokedAction string

const (
	WebhookSecretScanningAlertRevokedActionRevoked WebhookSecretScanningAlertRevokedAction = "revoked"
)

// PossibleWebhookSecretScanningAlertRevokedActionValues returns the possible values for the WebhookSecretScanningAlertRevokedAction const type.
func PossibleWebhookSecretScanningAlertRevokedActionValues() []WebhookSecretScanningAlertRevokedAction {
	return []WebhookSecretScanningAlertRevokedAction{
		WebhookSecretScanningAlertRevokedActionRevoked,
	}
}

type WebhookSecurityAdvisoryPublishedAction string

const (
	WebhookSecurityAdvisoryPublishedActionPublished WebhookSecurityAdvisoryPublishedAction = "published"
)

// PossibleWebhookSecurityAdvisoryPublishedActionValues returns the possible values for the WebhookSecurityAdvisoryPublishedAction const type.
func PossibleWebhookSecurityAdvisoryPublishedActionValues() []WebhookSecurityAdvisoryPublishedAction {
	return []WebhookSecurityAdvisoryPublishedAction{
		WebhookSecurityAdvisoryPublishedActionPublished,
	}
}

type WebhookSecurityAdvisoryUpdatedAction string

const (
	WebhookSecurityAdvisoryUpdatedActionUpdated WebhookSecurityAdvisoryUpdatedAction = "updated"
)

// PossibleWebhookSecurityAdvisoryUpdatedActionValues returns the possible values for the WebhookSecurityAdvisoryUpdatedAction const type.
func PossibleWebhookSecurityAdvisoryUpdatedActionValues() []WebhookSecurityAdvisoryUpdatedAction {
	return []WebhookSecurityAdvisoryUpdatedAction{
		WebhookSecurityAdvisoryUpdatedActionUpdated,
	}
}

type WebhookSecurityAdvisoryWithdrawnAction string

const (
	WebhookSecurityAdvisoryWithdrawnActionWithdrawn WebhookSecurityAdvisoryWithdrawnAction = "withdrawn"
)

// PossibleWebhookSecurityAdvisoryWithdrawnActionValues returns the possible values for the WebhookSecurityAdvisoryWithdrawnAction const type.
func PossibleWebhookSecurityAdvisoryWithdrawnActionValues() []WebhookSecurityAdvisoryWithdrawnAction {
	return []WebhookSecurityAdvisoryWithdrawnAction{
		WebhookSecurityAdvisoryWithdrawnActionWithdrawn,
	}
}

type WebhookSponsorshipCancelledAction string

const (
	WebhookSponsorshipCancelledActionCancelled WebhookSponsorshipCancelledAction = "cancelled"
)

// PossibleWebhookSponsorshipCancelledActionValues returns the possible values for the WebhookSponsorshipCancelledAction const type.
func PossibleWebhookSponsorshipCancelledActionValues() []WebhookSponsorshipCancelledAction {
	return []WebhookSponsorshipCancelledAction{
		WebhookSponsorshipCancelledActionCancelled,
	}
}

type WebhookSponsorshipCancelledSponsorshipSponsorType string

const (
	WebhookSponsorshipCancelledSponsorshipSponsorTypeBot WebhookSponsorshipCancelledSponsorshipSponsorType = "Bot"
	WebhookSponsorshipCancelledSponsorshipSponsorTypeOrganization WebhookSponsorshipCancelledSponsorshipSponsorType = "Organization"
	WebhookSponsorshipCancelledSponsorshipSponsorTypeUser WebhookSponsorshipCancelledSponsorshipSponsorType = "User"
)

// PossibleWebhookSponsorshipCancelledSponsorshipSponsorTypeValues returns the possible values for the WebhookSponsorshipCancelledSponsorshipSponsorType const type.
func PossibleWebhookSponsorshipCancelledSponsorshipSponsorTypeValues() []WebhookSponsorshipCancelledSponsorshipSponsorType {
	return []WebhookSponsorshipCancelledSponsorshipSponsorType{
		WebhookSponsorshipCancelledSponsorshipSponsorTypeBot,
		WebhookSponsorshipCancelledSponsorshipSponsorTypeOrganization,
		WebhookSponsorshipCancelledSponsorshipSponsorTypeUser,
	}
}

type WebhookSponsorshipCancelledSponsorshipSponsorableType string

const (
	WebhookSponsorshipCancelledSponsorshipSponsorableTypeBot WebhookSponsorshipCancelledSponsorshipSponsorableType = "Bot"
	WebhookSponsorshipCancelledSponsorshipSponsorableTypeOrganization WebhookSponsorshipCancelledSponsorshipSponsorableType = "Organization"
	WebhookSponsorshipCancelledSponsorshipSponsorableTypeUser WebhookSponsorshipCancelledSponsorshipSponsorableType = "User"
)

// PossibleWebhookSponsorshipCancelledSponsorshipSponsorableTypeValues returns the possible values for the WebhookSponsorshipCancelledSponsorshipSponsorableType const type.
func PossibleWebhookSponsorshipCancelledSponsorshipSponsorableTypeValues() []WebhookSponsorshipCancelledSponsorshipSponsorableType {
	return []WebhookSponsorshipCancelledSponsorshipSponsorableType{
		WebhookSponsorshipCancelledSponsorshipSponsorableTypeBot,
		WebhookSponsorshipCancelledSponsorshipSponsorableTypeOrganization,
		WebhookSponsorshipCancelledSponsorshipSponsorableTypeUser,
	}
}

type WebhookSponsorshipCreatedAction string

const (
	WebhookSponsorshipCreatedActionCreated WebhookSponsorshipCreatedAction = "created"
)

// PossibleWebhookSponsorshipCreatedActionValues returns the possible values for the WebhookSponsorshipCreatedAction const type.
func PossibleWebhookSponsorshipCreatedActionValues() []WebhookSponsorshipCreatedAction {
	return []WebhookSponsorshipCreatedAction{
		WebhookSponsorshipCreatedActionCreated,
	}
}

type WebhookSponsorshipCreatedSponsorshipSponsorType string

const (
	WebhookSponsorshipCreatedSponsorshipSponsorTypeBot WebhookSponsorshipCreatedSponsorshipSponsorType = "Bot"
	WebhookSponsorshipCreatedSponsorshipSponsorTypeOrganization WebhookSponsorshipCreatedSponsorshipSponsorType = "Organization"
	WebhookSponsorshipCreatedSponsorshipSponsorTypeUser WebhookSponsorshipCreatedSponsorshipSponsorType = "User"
)

// PossibleWebhookSponsorshipCreatedSponsorshipSponsorTypeValues returns the possible values for the WebhookSponsorshipCreatedSponsorshipSponsorType const type.
func PossibleWebhookSponsorshipCreatedSponsorshipSponsorTypeValues() []WebhookSponsorshipCreatedSponsorshipSponsorType {
	return []WebhookSponsorshipCreatedSponsorshipSponsorType{
		WebhookSponsorshipCreatedSponsorshipSponsorTypeBot,
		WebhookSponsorshipCreatedSponsorshipSponsorTypeOrganization,
		WebhookSponsorshipCreatedSponsorshipSponsorTypeUser,
	}
}

type WebhookSponsorshipCreatedSponsorshipSponsorableType string

const (
	WebhookSponsorshipCreatedSponsorshipSponsorableTypeBot WebhookSponsorshipCreatedSponsorshipSponsorableType = "Bot"
	WebhookSponsorshipCreatedSponsorshipSponsorableTypeOrganization WebhookSponsorshipCreatedSponsorshipSponsorableType = "Organization"
	WebhookSponsorshipCreatedSponsorshipSponsorableTypeUser WebhookSponsorshipCreatedSponsorshipSponsorableType = "User"
)

// PossibleWebhookSponsorshipCreatedSponsorshipSponsorableTypeValues returns the possible values for the WebhookSponsorshipCreatedSponsorshipSponsorableType const type.
func PossibleWebhookSponsorshipCreatedSponsorshipSponsorableTypeValues() []WebhookSponsorshipCreatedSponsorshipSponsorableType {
	return []WebhookSponsorshipCreatedSponsorshipSponsorableType{
		WebhookSponsorshipCreatedSponsorshipSponsorableTypeBot,
		WebhookSponsorshipCreatedSponsorshipSponsorableTypeOrganization,
		WebhookSponsorshipCreatedSponsorshipSponsorableTypeUser,
	}
}

type WebhookSponsorshipEditedAction string

const (
	WebhookSponsorshipEditedActionEdited WebhookSponsorshipEditedAction = "edited"
)

// PossibleWebhookSponsorshipEditedActionValues returns the possible values for the WebhookSponsorshipEditedAction const type.
func PossibleWebhookSponsorshipEditedActionValues() []WebhookSponsorshipEditedAction {
	return []WebhookSponsorshipEditedAction{
		WebhookSponsorshipEditedActionEdited,
	}
}

type WebhookSponsorshipEditedSponsorshipSponsorType string

const (
	WebhookSponsorshipEditedSponsorshipSponsorTypeBot WebhookSponsorshipEditedSponsorshipSponsorType = "Bot"
	WebhookSponsorshipEditedSponsorshipSponsorTypeOrganization WebhookSponsorshipEditedSponsorshipSponsorType = "Organization"
	WebhookSponsorshipEditedSponsorshipSponsorTypeUser WebhookSponsorshipEditedSponsorshipSponsorType = "User"
)

// PossibleWebhookSponsorshipEditedSponsorshipSponsorTypeValues returns the possible values for the WebhookSponsorshipEditedSponsorshipSponsorType const type.
func PossibleWebhookSponsorshipEditedSponsorshipSponsorTypeValues() []WebhookSponsorshipEditedSponsorshipSponsorType {
	return []WebhookSponsorshipEditedSponsorshipSponsorType{
		WebhookSponsorshipEditedSponsorshipSponsorTypeBot,
		WebhookSponsorshipEditedSponsorshipSponsorTypeOrganization,
		WebhookSponsorshipEditedSponsorshipSponsorTypeUser,
	}
}

type WebhookSponsorshipEditedSponsorshipSponsorableType string

const (
	WebhookSponsorshipEditedSponsorshipSponsorableTypeBot WebhookSponsorshipEditedSponsorshipSponsorableType = "Bot"
	WebhookSponsorshipEditedSponsorshipSponsorableTypeOrganization WebhookSponsorshipEditedSponsorshipSponsorableType = "Organization"
	WebhookSponsorshipEditedSponsorshipSponsorableTypeUser WebhookSponsorshipEditedSponsorshipSponsorableType = "User"
)

// PossibleWebhookSponsorshipEditedSponsorshipSponsorableTypeValues returns the possible values for the WebhookSponsorshipEditedSponsorshipSponsorableType const type.
func PossibleWebhookSponsorshipEditedSponsorshipSponsorableTypeValues() []WebhookSponsorshipEditedSponsorshipSponsorableType {
	return []WebhookSponsorshipEditedSponsorshipSponsorableType{
		WebhookSponsorshipEditedSponsorshipSponsorableTypeBot,
		WebhookSponsorshipEditedSponsorshipSponsorableTypeOrganization,
		WebhookSponsorshipEditedSponsorshipSponsorableTypeUser,
	}
}

type WebhookSponsorshipPendingCancellationAction string

const (
	WebhookSponsorshipPendingCancellationActionPendingCancellation WebhookSponsorshipPendingCancellationAction = "pending_cancellation"
)

// PossibleWebhookSponsorshipPendingCancellationActionValues returns the possible values for the WebhookSponsorshipPendingCancellationAction const type.
func PossibleWebhookSponsorshipPendingCancellationActionValues() []WebhookSponsorshipPendingCancellationAction {
	return []WebhookSponsorshipPendingCancellationAction{
		WebhookSponsorshipPendingCancellationActionPendingCancellation,
	}
}

type WebhookSponsorshipPendingCancellationSponsorshipSponsorType string

const (
	WebhookSponsorshipPendingCancellationSponsorshipSponsorTypeBot WebhookSponsorshipPendingCancellationSponsorshipSponsorType = "Bot"
	WebhookSponsorshipPendingCancellationSponsorshipSponsorTypeOrganization WebhookSponsorshipPendingCancellationSponsorshipSponsorType = "Organization"
	WebhookSponsorshipPendingCancellationSponsorshipSponsorTypeUser WebhookSponsorshipPendingCancellationSponsorshipSponsorType = "User"
)

// PossibleWebhookSponsorshipPendingCancellationSponsorshipSponsorTypeValues returns the possible values for the WebhookSponsorshipPendingCancellationSponsorshipSponsorType const type.
func PossibleWebhookSponsorshipPendingCancellationSponsorshipSponsorTypeValues() []WebhookSponsorshipPendingCancellationSponsorshipSponsorType {
	return []WebhookSponsorshipPendingCancellationSponsorshipSponsorType{
		WebhookSponsorshipPendingCancellationSponsorshipSponsorTypeBot,
		WebhookSponsorshipPendingCancellationSponsorshipSponsorTypeOrganization,
		WebhookSponsorshipPendingCancellationSponsorshipSponsorTypeUser,
	}
}

type WebhookSponsorshipPendingCancellationSponsorshipSponsorableType string

const (
	WebhookSponsorshipPendingCancellationSponsorshipSponsorableTypeBot WebhookSponsorshipPendingCancellationSponsorshipSponsorableType = "Bot"
	WebhookSponsorshipPendingCancellationSponsorshipSponsorableTypeOrganization WebhookSponsorshipPendingCancellationSponsorshipSponsorableType = "Organization"
	WebhookSponsorshipPendingCancellationSponsorshipSponsorableTypeUser WebhookSponsorshipPendingCancellationSponsorshipSponsorableType = "User"
)

// PossibleWebhookSponsorshipPendingCancellationSponsorshipSponsorableTypeValues returns the possible values for the WebhookSponsorshipPendingCancellationSponsorshipSponsorableType const type.
func PossibleWebhookSponsorshipPendingCancellationSponsorshipSponsorableTypeValues() []WebhookSponsorshipPendingCancellationSponsorshipSponsorableType {
	return []WebhookSponsorshipPendingCancellationSponsorshipSponsorableType{
		WebhookSponsorshipPendingCancellationSponsorshipSponsorableTypeBot,
		WebhookSponsorshipPendingCancellationSponsorshipSponsorableTypeOrganization,
		WebhookSponsorshipPendingCancellationSponsorshipSponsorableTypeUser,
	}
}

type WebhookSponsorshipPendingTierChangeAction string

const (
	WebhookSponsorshipPendingTierChangeActionPendingTierChange WebhookSponsorshipPendingTierChangeAction = "pending_tier_change"
)

// PossibleWebhookSponsorshipPendingTierChangeActionValues returns the possible values for the WebhookSponsorshipPendingTierChangeAction const type.
func PossibleWebhookSponsorshipPendingTierChangeActionValues() []WebhookSponsorshipPendingTierChangeAction {
	return []WebhookSponsorshipPendingTierChangeAction{
		WebhookSponsorshipPendingTierChangeActionPendingTierChange,
	}
}

type WebhookSponsorshipPendingTierChangeSponsorshipSponsorType string

const (
	WebhookSponsorshipPendingTierChangeSponsorshipSponsorTypeBot WebhookSponsorshipPendingTierChangeSponsorshipSponsorType = "Bot"
	WebhookSponsorshipPendingTierChangeSponsorshipSponsorTypeOrganization WebhookSponsorshipPendingTierChangeSponsorshipSponsorType = "Organization"
	WebhookSponsorshipPendingTierChangeSponsorshipSponsorTypeUser WebhookSponsorshipPendingTierChangeSponsorshipSponsorType = "User"
)

// PossibleWebhookSponsorshipPendingTierChangeSponsorshipSponsorTypeValues returns the possible values for the WebhookSponsorshipPendingTierChangeSponsorshipSponsorType const type.
func PossibleWebhookSponsorshipPendingTierChangeSponsorshipSponsorTypeValues() []WebhookSponsorshipPendingTierChangeSponsorshipSponsorType {
	return []WebhookSponsorshipPendingTierChangeSponsorshipSponsorType{
		WebhookSponsorshipPendingTierChangeSponsorshipSponsorTypeBot,
		WebhookSponsorshipPendingTierChangeSponsorshipSponsorTypeOrganization,
		WebhookSponsorshipPendingTierChangeSponsorshipSponsorTypeUser,
	}
}

type WebhookSponsorshipPendingTierChangeSponsorshipSponsorableType string

const (
	WebhookSponsorshipPendingTierChangeSponsorshipSponsorableTypeBot WebhookSponsorshipPendingTierChangeSponsorshipSponsorableType = "Bot"
	WebhookSponsorshipPendingTierChangeSponsorshipSponsorableTypeOrganization WebhookSponsorshipPendingTierChangeSponsorshipSponsorableType = "Organization"
	WebhookSponsorshipPendingTierChangeSponsorshipSponsorableTypeUser WebhookSponsorshipPendingTierChangeSponsorshipSponsorableType = "User"
)

// PossibleWebhookSponsorshipPendingTierChangeSponsorshipSponsorableTypeValues returns the possible values for the WebhookSponsorshipPendingTierChangeSponsorshipSponsorableType const type.
func PossibleWebhookSponsorshipPendingTierChangeSponsorshipSponsorableTypeValues() []WebhookSponsorshipPendingTierChangeSponsorshipSponsorableType {
	return []WebhookSponsorshipPendingTierChangeSponsorshipSponsorableType{
		WebhookSponsorshipPendingTierChangeSponsorshipSponsorableTypeBot,
		WebhookSponsorshipPendingTierChangeSponsorshipSponsorableTypeOrganization,
		WebhookSponsorshipPendingTierChangeSponsorshipSponsorableTypeUser,
	}
}

type WebhookSponsorshipTierChangedAction string

const (
	WebhookSponsorshipTierChangedActionTierChanged WebhookSponsorshipTierChangedAction = "tier_changed"
)

// PossibleWebhookSponsorshipTierChangedActionValues returns the possible values for the WebhookSponsorshipTierChangedAction const type.
func PossibleWebhookSponsorshipTierChangedActionValues() []WebhookSponsorshipTierChangedAction {
	return []WebhookSponsorshipTierChangedAction{
		WebhookSponsorshipTierChangedActionTierChanged,
	}
}

type WebhookSponsorshipTierChangedSponsorshipSponsorType string

const (
	WebhookSponsorshipTierChangedSponsorshipSponsorTypeBot WebhookSponsorshipTierChangedSponsorshipSponsorType = "Bot"
	WebhookSponsorshipTierChangedSponsorshipSponsorTypeOrganization WebhookSponsorshipTierChangedSponsorshipSponsorType = "Organization"
	WebhookSponsorshipTierChangedSponsorshipSponsorTypeUser WebhookSponsorshipTierChangedSponsorshipSponsorType = "User"
)

// PossibleWebhookSponsorshipTierChangedSponsorshipSponsorTypeValues returns the possible values for the WebhookSponsorshipTierChangedSponsorshipSponsorType const type.
func PossibleWebhookSponsorshipTierChangedSponsorshipSponsorTypeValues() []WebhookSponsorshipTierChangedSponsorshipSponsorType {
	return []WebhookSponsorshipTierChangedSponsorshipSponsorType{
		WebhookSponsorshipTierChangedSponsorshipSponsorTypeBot,
		WebhookSponsorshipTierChangedSponsorshipSponsorTypeOrganization,
		WebhookSponsorshipTierChangedSponsorshipSponsorTypeUser,
	}
}

type WebhookSponsorshipTierChangedSponsorshipSponsorableType string

const (
	WebhookSponsorshipTierChangedSponsorshipSponsorableTypeBot WebhookSponsorshipTierChangedSponsorshipSponsorableType = "Bot"
	WebhookSponsorshipTierChangedSponsorshipSponsorableTypeOrganization WebhookSponsorshipTierChangedSponsorshipSponsorableType = "Organization"
	WebhookSponsorshipTierChangedSponsorshipSponsorableTypeUser WebhookSponsorshipTierChangedSponsorshipSponsorableType = "User"
)

// PossibleWebhookSponsorshipTierChangedSponsorshipSponsorableTypeValues returns the possible values for the WebhookSponsorshipTierChangedSponsorshipSponsorableType const type.
func PossibleWebhookSponsorshipTierChangedSponsorshipSponsorableTypeValues() []WebhookSponsorshipTierChangedSponsorshipSponsorableType {
	return []WebhookSponsorshipTierChangedSponsorshipSponsorableType{
		WebhookSponsorshipTierChangedSponsorshipSponsorableTypeBot,
		WebhookSponsorshipTierChangedSponsorshipSponsorableTypeOrganization,
		WebhookSponsorshipTierChangedSponsorshipSponsorableTypeUser,
	}
}

type WebhookStarCreatedAction string

const (
	WebhookStarCreatedActionCreated WebhookStarCreatedAction = "created"
)

// PossibleWebhookStarCreatedActionValues returns the possible values for the WebhookStarCreatedAction const type.
func PossibleWebhookStarCreatedActionValues() []WebhookStarCreatedAction {
	return []WebhookStarCreatedAction{
		WebhookStarCreatedActionCreated,
	}
}

type WebhookStarDeletedAction string

const (
	WebhookStarDeletedActionDeleted WebhookStarDeletedAction = "deleted"
)

// PossibleWebhookStarDeletedActionValues returns the possible values for the WebhookStarDeletedAction const type.
func PossibleWebhookStarDeletedActionValues() []WebhookStarDeletedAction {
	return []WebhookStarDeletedAction{
		WebhookStarDeletedActionDeleted,
	}
}

type WebhookStatusCommitAuthorType string

const (
	WebhookStatusCommitAuthorTypeBot WebhookStatusCommitAuthorType = "Bot"
	WebhookStatusCommitAuthorTypeOrganization WebhookStatusCommitAuthorType = "Organization"
	WebhookStatusCommitAuthorTypeUser WebhookStatusCommitAuthorType = "User"
)

// PossibleWebhookStatusCommitAuthorTypeValues returns the possible values for the WebhookStatusCommitAuthorType const type.
func PossibleWebhookStatusCommitAuthorTypeValues() []WebhookStatusCommitAuthorType {
	return []WebhookStatusCommitAuthorType{
		WebhookStatusCommitAuthorTypeBot,
		WebhookStatusCommitAuthorTypeOrganization,
		WebhookStatusCommitAuthorTypeUser,
	}
}

type WebhookStatusCommitCommitterType string

const (
	WebhookStatusCommitCommitterTypeBot WebhookStatusCommitCommitterType = "Bot"
	WebhookStatusCommitCommitterTypeOrganization WebhookStatusCommitCommitterType = "Organization"
	WebhookStatusCommitCommitterTypeUser WebhookStatusCommitCommitterType = "User"
)

// PossibleWebhookStatusCommitCommitterTypeValues returns the possible values for the WebhookStatusCommitCommitterType const type.
func PossibleWebhookStatusCommitCommitterTypeValues() []WebhookStatusCommitCommitterType {
	return []WebhookStatusCommitCommitterType{
		WebhookStatusCommitCommitterTypeBot,
		WebhookStatusCommitCommitterTypeOrganization,
		WebhookStatusCommitCommitterTypeUser,
	}
}

type WebhookStatusCommitVerificationReason string

const (
	WebhookStatusCommitVerificationReasonBadCert WebhookStatusCommitVerificationReason = "bad_cert"
	WebhookStatusCommitVerificationReasonBadEmail WebhookStatusCommitVerificationReason = "bad_email"
	WebhookStatusCommitVerificationReasonExpiredKey WebhookStatusCommitVerificationReason = "expired_key"
	WebhookStatusCommitVerificationReasonGpgverifyError WebhookStatusCommitVerificationReason = "gpgverify_error"
	WebhookStatusCommitVerificationReasonGpgverifyUnavailable WebhookStatusCommitVerificationReason = "gpgverify_unavailable"
	WebhookStatusCommitVerificationReasonInvalid WebhookStatusCommitVerificationReason = "invalid"
	WebhookStatusCommitVerificationReasonMalformedSignature WebhookStatusCommitVerificationReason = "malformed_signature"
	WebhookStatusCommitVerificationReasonNoUser WebhookStatusCommitVerificationReason = "no_user"
	WebhookStatusCommitVerificationReasonNotSigningKey WebhookStatusCommitVerificationReason = "not_signing_key"
	WebhookStatusCommitVerificationReasonOcspPending WebhookStatusCommitVerificationReason = "ocsp_pending"
	WebhookStatusCommitVerificationReasonUnknownKey WebhookStatusCommitVerificationReason = "unknown_key"
	WebhookStatusCommitVerificationReasonUnknownSignatureType WebhookStatusCommitVerificationReason = "unknown_signature_type"
	WebhookStatusCommitVerificationReasonUnsigned WebhookStatusCommitVerificationReason = "unsigned"
	WebhookStatusCommitVerificationReasonUnverifiedEmail WebhookStatusCommitVerificationReason = "unverified_email"
	WebhookStatusCommitVerificationReasonValid WebhookStatusCommitVerificationReason = "valid"
)

// PossibleWebhookStatusCommitVerificationReasonValues returns the possible values for the WebhookStatusCommitVerificationReason const type.
func PossibleWebhookStatusCommitVerificationReasonValues() []WebhookStatusCommitVerificationReason {
	return []WebhookStatusCommitVerificationReason{
		WebhookStatusCommitVerificationReasonBadCert,
		WebhookStatusCommitVerificationReasonBadEmail,
		WebhookStatusCommitVerificationReasonExpiredKey,
		WebhookStatusCommitVerificationReasonGpgverifyError,
		WebhookStatusCommitVerificationReasonGpgverifyUnavailable,
		WebhookStatusCommitVerificationReasonInvalid,
		WebhookStatusCommitVerificationReasonMalformedSignature,
		WebhookStatusCommitVerificationReasonNoUser,
		WebhookStatusCommitVerificationReasonNotSigningKey,
		WebhookStatusCommitVerificationReasonOcspPending,
		WebhookStatusCommitVerificationReasonUnknownKey,
		WebhookStatusCommitVerificationReasonUnknownSignatureType,
		WebhookStatusCommitVerificationReasonUnsigned,
		WebhookStatusCommitVerificationReasonUnverifiedEmail,
		WebhookStatusCommitVerificationReasonValid,
	}
}

// WebhookStatusState - The new state. Can be pending, success, failure, or error.
type WebhookStatusState string

const (
	WebhookStatusStateError WebhookStatusState = "error"
	WebhookStatusStateFailure WebhookStatusState = "failure"
	WebhookStatusStatePending WebhookStatusState = "pending"
	WebhookStatusStateSuccess WebhookStatusState = "success"
)

// PossibleWebhookStatusStateValues returns the possible values for the WebhookStatusState const type.
func PossibleWebhookStatusStateValues() []WebhookStatusState {
	return []WebhookStatusState{
		WebhookStatusStateError,
		WebhookStatusStateFailure,
		WebhookStatusStatePending,
		WebhookStatusStateSuccess,
	}
}

type WebhookTeamAddTeamParentPrivacy string

const (
	WebhookTeamAddTeamParentPrivacyClosed WebhookTeamAddTeamParentPrivacy = "closed"
	WebhookTeamAddTeamParentPrivacyOpen WebhookTeamAddTeamParentPrivacy = "open"
	WebhookTeamAddTeamParentPrivacySecret WebhookTeamAddTeamParentPrivacy = "secret"
)

// PossibleWebhookTeamAddTeamParentPrivacyValues returns the possible values for the WebhookTeamAddTeamParentPrivacy const type.
func PossibleWebhookTeamAddTeamParentPrivacyValues() []WebhookTeamAddTeamParentPrivacy {
	return []WebhookTeamAddTeamParentPrivacy{
		WebhookTeamAddTeamParentPrivacyClosed,
		WebhookTeamAddTeamParentPrivacyOpen,
		WebhookTeamAddTeamParentPrivacySecret,
	}
}

type WebhookTeamAddTeamPrivacy string

const (
	WebhookTeamAddTeamPrivacyClosed WebhookTeamAddTeamPrivacy = "closed"
	WebhookTeamAddTeamPrivacyOpen WebhookTeamAddTeamPrivacy = "open"
	WebhookTeamAddTeamPrivacySecret WebhookTeamAddTeamPrivacy = "secret"
)

// PossibleWebhookTeamAddTeamPrivacyValues returns the possible values for the WebhookTeamAddTeamPrivacy const type.
func PossibleWebhookTeamAddTeamPrivacyValues() []WebhookTeamAddTeamPrivacy {
	return []WebhookTeamAddTeamPrivacy{
		WebhookTeamAddTeamPrivacyClosed,
		WebhookTeamAddTeamPrivacyOpen,
		WebhookTeamAddTeamPrivacySecret,
	}
}

type WebhookTeamAddedToRepositoryAction string

const (
	WebhookTeamAddedToRepositoryActionAddedToRepository WebhookTeamAddedToRepositoryAction = "added_to_repository"
)

// PossibleWebhookTeamAddedToRepositoryActionValues returns the possible values for the WebhookTeamAddedToRepositoryAction const type.
func PossibleWebhookTeamAddedToRepositoryActionValues() []WebhookTeamAddedToRepositoryAction {
	return []WebhookTeamAddedToRepositoryAction{
		WebhookTeamAddedToRepositoryActionAddedToRepository,
	}
}

type WebhookTeamAddedToRepositoryOwnerType string

const (
	WebhookTeamAddedToRepositoryOwnerTypeBot WebhookTeamAddedToRepositoryOwnerType = "Bot"
	WebhookTeamAddedToRepositoryOwnerTypeOrganization WebhookTeamAddedToRepositoryOwnerType = "Organization"
	WebhookTeamAddedToRepositoryOwnerTypeUser WebhookTeamAddedToRepositoryOwnerType = "User"
)

// PossibleWebhookTeamAddedToRepositoryOwnerTypeValues returns the possible values for the WebhookTeamAddedToRepositoryOwnerType const type.
func PossibleWebhookTeamAddedToRepositoryOwnerTypeValues() []WebhookTeamAddedToRepositoryOwnerType {
	return []WebhookTeamAddedToRepositoryOwnerType{
		WebhookTeamAddedToRepositoryOwnerTypeBot,
		WebhookTeamAddedToRepositoryOwnerTypeOrganization,
		WebhookTeamAddedToRepositoryOwnerTypeUser,
	}
}

type WebhookTeamAddedToRepositoryTeamParentPrivacy string

const (
	WebhookTeamAddedToRepositoryTeamParentPrivacyClosed WebhookTeamAddedToRepositoryTeamParentPrivacy = "closed"
	WebhookTeamAddedToRepositoryTeamParentPrivacyOpen WebhookTeamAddedToRepositoryTeamParentPrivacy = "open"
	WebhookTeamAddedToRepositoryTeamParentPrivacySecret WebhookTeamAddedToRepositoryTeamParentPrivacy = "secret"
)

// PossibleWebhookTeamAddedToRepositoryTeamParentPrivacyValues returns the possible values for the WebhookTeamAddedToRepositoryTeamParentPrivacy const type.
func PossibleWebhookTeamAddedToRepositoryTeamParentPrivacyValues() []WebhookTeamAddedToRepositoryTeamParentPrivacy {
	return []WebhookTeamAddedToRepositoryTeamParentPrivacy{
		WebhookTeamAddedToRepositoryTeamParentPrivacyClosed,
		WebhookTeamAddedToRepositoryTeamParentPrivacyOpen,
		WebhookTeamAddedToRepositoryTeamParentPrivacySecret,
	}
}

type WebhookTeamAddedToRepositoryTeamPrivacy string

const (
	WebhookTeamAddedToRepositoryTeamPrivacyClosed WebhookTeamAddedToRepositoryTeamPrivacy = "closed"
	WebhookTeamAddedToRepositoryTeamPrivacyOpen WebhookTeamAddedToRepositoryTeamPrivacy = "open"
	WebhookTeamAddedToRepositoryTeamPrivacySecret WebhookTeamAddedToRepositoryTeamPrivacy = "secret"
)

// PossibleWebhookTeamAddedToRepositoryTeamPrivacyValues returns the possible values for the WebhookTeamAddedToRepositoryTeamPrivacy const type.
func PossibleWebhookTeamAddedToRepositoryTeamPrivacyValues() []WebhookTeamAddedToRepositoryTeamPrivacy {
	return []WebhookTeamAddedToRepositoryTeamPrivacy{
		WebhookTeamAddedToRepositoryTeamPrivacyClosed,
		WebhookTeamAddedToRepositoryTeamPrivacyOpen,
		WebhookTeamAddedToRepositoryTeamPrivacySecret,
	}
}

type WebhookTeamAddedToRepositoryVisibility string

const (
	WebhookTeamAddedToRepositoryVisibilityInternal WebhookTeamAddedToRepositoryVisibility = "internal"
	WebhookTeamAddedToRepositoryVisibilityPrivate WebhookTeamAddedToRepositoryVisibility = "private"
	WebhookTeamAddedToRepositoryVisibilityPublic WebhookTeamAddedToRepositoryVisibility = "public"
)

// PossibleWebhookTeamAddedToRepositoryVisibilityValues returns the possible values for the WebhookTeamAddedToRepositoryVisibility const type.
func PossibleWebhookTeamAddedToRepositoryVisibilityValues() []WebhookTeamAddedToRepositoryVisibility {
	return []WebhookTeamAddedToRepositoryVisibility{
		WebhookTeamAddedToRepositoryVisibilityInternal,
		WebhookTeamAddedToRepositoryVisibilityPrivate,
		WebhookTeamAddedToRepositoryVisibilityPublic,
	}
}

type WebhookTeamCreatedAction string

const (
	WebhookTeamCreatedActionCreated WebhookTeamCreatedAction = "created"
)

// PossibleWebhookTeamCreatedActionValues returns the possible values for the WebhookTeamCreatedAction const type.
func PossibleWebhookTeamCreatedActionValues() []WebhookTeamCreatedAction {
	return []WebhookTeamCreatedAction{
		WebhookTeamCreatedActionCreated,
	}
}

type WebhookTeamCreatedRepositoryOwnerType string

const (
	WebhookTeamCreatedRepositoryOwnerTypeBot WebhookTeamCreatedRepositoryOwnerType = "Bot"
	WebhookTeamCreatedRepositoryOwnerTypeOrganization WebhookTeamCreatedRepositoryOwnerType = "Organization"
	WebhookTeamCreatedRepositoryOwnerTypeUser WebhookTeamCreatedRepositoryOwnerType = "User"
)

// PossibleWebhookTeamCreatedRepositoryOwnerTypeValues returns the possible values for the WebhookTeamCreatedRepositoryOwnerType const type.
func PossibleWebhookTeamCreatedRepositoryOwnerTypeValues() []WebhookTeamCreatedRepositoryOwnerType {
	return []WebhookTeamCreatedRepositoryOwnerType{
		WebhookTeamCreatedRepositoryOwnerTypeBot,
		WebhookTeamCreatedRepositoryOwnerTypeOrganization,
		WebhookTeamCreatedRepositoryOwnerTypeUser,
	}
}

type WebhookTeamCreatedRepositoryVisibility string

const (
	WebhookTeamCreatedRepositoryVisibilityInternal WebhookTeamCreatedRepositoryVisibility = "internal"
	WebhookTeamCreatedRepositoryVisibilityPrivate WebhookTeamCreatedRepositoryVisibility = "private"
	WebhookTeamCreatedRepositoryVisibilityPublic WebhookTeamCreatedRepositoryVisibility = "public"
)

// PossibleWebhookTeamCreatedRepositoryVisibilityValues returns the possible values for the WebhookTeamCreatedRepositoryVisibility const type.
func PossibleWebhookTeamCreatedRepositoryVisibilityValues() []WebhookTeamCreatedRepositoryVisibility {
	return []WebhookTeamCreatedRepositoryVisibility{
		WebhookTeamCreatedRepositoryVisibilityInternal,
		WebhookTeamCreatedRepositoryVisibilityPrivate,
		WebhookTeamCreatedRepositoryVisibilityPublic,
	}
}

type WebhookTeamCreatedTeamParentPrivacy string

const (
	WebhookTeamCreatedTeamParentPrivacyClosed WebhookTeamCreatedTeamParentPrivacy = "closed"
	WebhookTeamCreatedTeamParentPrivacyOpen WebhookTeamCreatedTeamParentPrivacy = "open"
	WebhookTeamCreatedTeamParentPrivacySecret WebhookTeamCreatedTeamParentPrivacy = "secret"
)

// PossibleWebhookTeamCreatedTeamParentPrivacyValues returns the possible values for the WebhookTeamCreatedTeamParentPrivacy const type.
func PossibleWebhookTeamCreatedTeamParentPrivacyValues() []WebhookTeamCreatedTeamParentPrivacy {
	return []WebhookTeamCreatedTeamParentPrivacy{
		WebhookTeamCreatedTeamParentPrivacyClosed,
		WebhookTeamCreatedTeamParentPrivacyOpen,
		WebhookTeamCreatedTeamParentPrivacySecret,
	}
}

type WebhookTeamCreatedTeamPrivacy string

const (
	WebhookTeamCreatedTeamPrivacyClosed WebhookTeamCreatedTeamPrivacy = "closed"
	WebhookTeamCreatedTeamPrivacyOpen WebhookTeamCreatedTeamPrivacy = "open"
	WebhookTeamCreatedTeamPrivacySecret WebhookTeamCreatedTeamPrivacy = "secret"
)

// PossibleWebhookTeamCreatedTeamPrivacyValues returns the possible values for the WebhookTeamCreatedTeamPrivacy const type.
func PossibleWebhookTeamCreatedTeamPrivacyValues() []WebhookTeamCreatedTeamPrivacy {
	return []WebhookTeamCreatedTeamPrivacy{
		WebhookTeamCreatedTeamPrivacyClosed,
		WebhookTeamCreatedTeamPrivacyOpen,
		WebhookTeamCreatedTeamPrivacySecret,
	}
}

type WebhookTeamDeletedAction string

const (
	WebhookTeamDeletedActionDeleted WebhookTeamDeletedAction = "deleted"
)

// PossibleWebhookTeamDeletedActionValues returns the possible values for the WebhookTeamDeletedAction const type.
func PossibleWebhookTeamDeletedActionValues() []WebhookTeamDeletedAction {
	return []WebhookTeamDeletedAction{
		WebhookTeamDeletedActionDeleted,
	}
}

type WebhookTeamDeletedRepositoryOwnerType string

const (
	WebhookTeamDeletedRepositoryOwnerTypeBot WebhookTeamDeletedRepositoryOwnerType = "Bot"
	WebhookTeamDeletedRepositoryOwnerTypeOrganization WebhookTeamDeletedRepositoryOwnerType = "Organization"
	WebhookTeamDeletedRepositoryOwnerTypeUser WebhookTeamDeletedRepositoryOwnerType = "User"
)

// PossibleWebhookTeamDeletedRepositoryOwnerTypeValues returns the possible values for the WebhookTeamDeletedRepositoryOwnerType const type.
func PossibleWebhookTeamDeletedRepositoryOwnerTypeValues() []WebhookTeamDeletedRepositoryOwnerType {
	return []WebhookTeamDeletedRepositoryOwnerType{
		WebhookTeamDeletedRepositoryOwnerTypeBot,
		WebhookTeamDeletedRepositoryOwnerTypeOrganization,
		WebhookTeamDeletedRepositoryOwnerTypeUser,
	}
}

type WebhookTeamDeletedRepositoryVisibility string

const (
	WebhookTeamDeletedRepositoryVisibilityInternal WebhookTeamDeletedRepositoryVisibility = "internal"
	WebhookTeamDeletedRepositoryVisibilityPrivate WebhookTeamDeletedRepositoryVisibility = "private"
	WebhookTeamDeletedRepositoryVisibilityPublic WebhookTeamDeletedRepositoryVisibility = "public"
)

// PossibleWebhookTeamDeletedRepositoryVisibilityValues returns the possible values for the WebhookTeamDeletedRepositoryVisibility const type.
func PossibleWebhookTeamDeletedRepositoryVisibilityValues() []WebhookTeamDeletedRepositoryVisibility {
	return []WebhookTeamDeletedRepositoryVisibility{
		WebhookTeamDeletedRepositoryVisibilityInternal,
		WebhookTeamDeletedRepositoryVisibilityPrivate,
		WebhookTeamDeletedRepositoryVisibilityPublic,
	}
}

type WebhookTeamDeletedTeamParentPrivacy string

const (
	WebhookTeamDeletedTeamParentPrivacyClosed WebhookTeamDeletedTeamParentPrivacy = "closed"
	WebhookTeamDeletedTeamParentPrivacyOpen WebhookTeamDeletedTeamParentPrivacy = "open"
	WebhookTeamDeletedTeamParentPrivacySecret WebhookTeamDeletedTeamParentPrivacy = "secret"
)

// PossibleWebhookTeamDeletedTeamParentPrivacyValues returns the possible values for the WebhookTeamDeletedTeamParentPrivacy const type.
func PossibleWebhookTeamDeletedTeamParentPrivacyValues() []WebhookTeamDeletedTeamParentPrivacy {
	return []WebhookTeamDeletedTeamParentPrivacy{
		WebhookTeamDeletedTeamParentPrivacyClosed,
		WebhookTeamDeletedTeamParentPrivacyOpen,
		WebhookTeamDeletedTeamParentPrivacySecret,
	}
}

type WebhookTeamDeletedTeamPrivacy string

const (
	WebhookTeamDeletedTeamPrivacyClosed WebhookTeamDeletedTeamPrivacy = "closed"
	WebhookTeamDeletedTeamPrivacyOpen WebhookTeamDeletedTeamPrivacy = "open"
	WebhookTeamDeletedTeamPrivacySecret WebhookTeamDeletedTeamPrivacy = "secret"
)

// PossibleWebhookTeamDeletedTeamPrivacyValues returns the possible values for the WebhookTeamDeletedTeamPrivacy const type.
func PossibleWebhookTeamDeletedTeamPrivacyValues() []WebhookTeamDeletedTeamPrivacy {
	return []WebhookTeamDeletedTeamPrivacy{
		WebhookTeamDeletedTeamPrivacyClosed,
		WebhookTeamDeletedTeamPrivacyOpen,
		WebhookTeamDeletedTeamPrivacySecret,
	}
}

type WebhookTeamEditedAction string

const (
	WebhookTeamEditedActionEdited WebhookTeamEditedAction = "edited"
)

// PossibleWebhookTeamEditedActionValues returns the possible values for the WebhookTeamEditedAction const type.
func PossibleWebhookTeamEditedActionValues() []WebhookTeamEditedAction {
	return []WebhookTeamEditedAction{
		WebhookTeamEditedActionEdited,
	}
}

type WebhookTeamEditedRepositoryOwnerType string

const (
	WebhookTeamEditedRepositoryOwnerTypeBot WebhookTeamEditedRepositoryOwnerType = "Bot"
	WebhookTeamEditedRepositoryOwnerTypeOrganization WebhookTeamEditedRepositoryOwnerType = "Organization"
	WebhookTeamEditedRepositoryOwnerTypeUser WebhookTeamEditedRepositoryOwnerType = "User"
)

// PossibleWebhookTeamEditedRepositoryOwnerTypeValues returns the possible values for the WebhookTeamEditedRepositoryOwnerType const type.
func PossibleWebhookTeamEditedRepositoryOwnerTypeValues() []WebhookTeamEditedRepositoryOwnerType {
	return []WebhookTeamEditedRepositoryOwnerType{
		WebhookTeamEditedRepositoryOwnerTypeBot,
		WebhookTeamEditedRepositoryOwnerTypeOrganization,
		WebhookTeamEditedRepositoryOwnerTypeUser,
	}
}

type WebhookTeamEditedRepositoryVisibility string

const (
	WebhookTeamEditedRepositoryVisibilityInternal WebhookTeamEditedRepositoryVisibility = "internal"
	WebhookTeamEditedRepositoryVisibilityPrivate WebhookTeamEditedRepositoryVisibility = "private"
	WebhookTeamEditedRepositoryVisibilityPublic WebhookTeamEditedRepositoryVisibility = "public"
)

// PossibleWebhookTeamEditedRepositoryVisibilityValues returns the possible values for the WebhookTeamEditedRepositoryVisibility const type.
func PossibleWebhookTeamEditedRepositoryVisibilityValues() []WebhookTeamEditedRepositoryVisibility {
	return []WebhookTeamEditedRepositoryVisibility{
		WebhookTeamEditedRepositoryVisibilityInternal,
		WebhookTeamEditedRepositoryVisibilityPrivate,
		WebhookTeamEditedRepositoryVisibilityPublic,
	}
}

type WebhookTeamEditedTeamParentPrivacy string

const (
	WebhookTeamEditedTeamParentPrivacyClosed WebhookTeamEditedTeamParentPrivacy = "closed"
	WebhookTeamEditedTeamParentPrivacyOpen WebhookTeamEditedTeamParentPrivacy = "open"
	WebhookTeamEditedTeamParentPrivacySecret WebhookTeamEditedTeamParentPrivacy = "secret"
)

// PossibleWebhookTeamEditedTeamParentPrivacyValues returns the possible values for the WebhookTeamEditedTeamParentPrivacy const type.
func PossibleWebhookTeamEditedTeamParentPrivacyValues() []WebhookTeamEditedTeamParentPrivacy {
	return []WebhookTeamEditedTeamParentPrivacy{
		WebhookTeamEditedTeamParentPrivacyClosed,
		WebhookTeamEditedTeamParentPrivacyOpen,
		WebhookTeamEditedTeamParentPrivacySecret,
	}
}

type WebhookTeamEditedTeamPrivacy string

const (
	WebhookTeamEditedTeamPrivacyClosed WebhookTeamEditedTeamPrivacy = "closed"
	WebhookTeamEditedTeamPrivacyOpen WebhookTeamEditedTeamPrivacy = "open"
	WebhookTeamEditedTeamPrivacySecret WebhookTeamEditedTeamPrivacy = "secret"
)

// PossibleWebhookTeamEditedTeamPrivacyValues returns the possible values for the WebhookTeamEditedTeamPrivacy const type.
func PossibleWebhookTeamEditedTeamPrivacyValues() []WebhookTeamEditedTeamPrivacy {
	return []WebhookTeamEditedTeamPrivacy{
		WebhookTeamEditedTeamPrivacyClosed,
		WebhookTeamEditedTeamPrivacyOpen,
		WebhookTeamEditedTeamPrivacySecret,
	}
}

type WebhookTeamRemovedFromRepositoryAction string

const (
	WebhookTeamRemovedFromRepositoryActionRemovedFromRepository WebhookTeamRemovedFromRepositoryAction = "removed_from_repository"
)

// PossibleWebhookTeamRemovedFromRepositoryActionValues returns the possible values for the WebhookTeamRemovedFromRepositoryAction const type.
func PossibleWebhookTeamRemovedFromRepositoryActionValues() []WebhookTeamRemovedFromRepositoryAction {
	return []WebhookTeamRemovedFromRepositoryAction{
		WebhookTeamRemovedFromRepositoryActionRemovedFromRepository,
	}
}

type WebhookTeamRemovedFromRepositoryOwnerType string

const (
	WebhookTeamRemovedFromRepositoryOwnerTypeBot WebhookTeamRemovedFromRepositoryOwnerType = "Bot"
	WebhookTeamRemovedFromRepositoryOwnerTypeOrganization WebhookTeamRemovedFromRepositoryOwnerType = "Organization"
	WebhookTeamRemovedFromRepositoryOwnerTypeUser WebhookTeamRemovedFromRepositoryOwnerType = "User"
)

// PossibleWebhookTeamRemovedFromRepositoryOwnerTypeValues returns the possible values for the WebhookTeamRemovedFromRepositoryOwnerType const type.
func PossibleWebhookTeamRemovedFromRepositoryOwnerTypeValues() []WebhookTeamRemovedFromRepositoryOwnerType {
	return []WebhookTeamRemovedFromRepositoryOwnerType{
		WebhookTeamRemovedFromRepositoryOwnerTypeBot,
		WebhookTeamRemovedFromRepositoryOwnerTypeOrganization,
		WebhookTeamRemovedFromRepositoryOwnerTypeUser,
	}
}

type WebhookTeamRemovedFromRepositoryTeamParentPrivacy string

const (
	WebhookTeamRemovedFromRepositoryTeamParentPrivacyClosed WebhookTeamRemovedFromRepositoryTeamParentPrivacy = "closed"
	WebhookTeamRemovedFromRepositoryTeamParentPrivacyOpen WebhookTeamRemovedFromRepositoryTeamParentPrivacy = "open"
	WebhookTeamRemovedFromRepositoryTeamParentPrivacySecret WebhookTeamRemovedFromRepositoryTeamParentPrivacy = "secret"
)

// PossibleWebhookTeamRemovedFromRepositoryTeamParentPrivacyValues returns the possible values for the WebhookTeamRemovedFromRepositoryTeamParentPrivacy const type.
func PossibleWebhookTeamRemovedFromRepositoryTeamParentPrivacyValues() []WebhookTeamRemovedFromRepositoryTeamParentPrivacy {
	return []WebhookTeamRemovedFromRepositoryTeamParentPrivacy{
		WebhookTeamRemovedFromRepositoryTeamParentPrivacyClosed,
		WebhookTeamRemovedFromRepositoryTeamParentPrivacyOpen,
		WebhookTeamRemovedFromRepositoryTeamParentPrivacySecret,
	}
}

type WebhookTeamRemovedFromRepositoryTeamPrivacy string

const (
	WebhookTeamRemovedFromRepositoryTeamPrivacyClosed WebhookTeamRemovedFromRepositoryTeamPrivacy = "closed"
	WebhookTeamRemovedFromRepositoryTeamPrivacyOpen WebhookTeamRemovedFromRepositoryTeamPrivacy = "open"
	WebhookTeamRemovedFromRepositoryTeamPrivacySecret WebhookTeamRemovedFromRepositoryTeamPrivacy = "secret"
)

// PossibleWebhookTeamRemovedFromRepositoryTeamPrivacyValues returns the possible values for the WebhookTeamRemovedFromRepositoryTeamPrivacy const type.
func PossibleWebhookTeamRemovedFromRepositoryTeamPrivacyValues() []WebhookTeamRemovedFromRepositoryTeamPrivacy {
	return []WebhookTeamRemovedFromRepositoryTeamPrivacy{
		WebhookTeamRemovedFromRepositoryTeamPrivacyClosed,
		WebhookTeamRemovedFromRepositoryTeamPrivacyOpen,
		WebhookTeamRemovedFromRepositoryTeamPrivacySecret,
	}
}

type WebhookTeamRemovedFromRepositoryVisibility string

const (
	WebhookTeamRemovedFromRepositoryVisibilityInternal WebhookTeamRemovedFromRepositoryVisibility = "internal"
	WebhookTeamRemovedFromRepositoryVisibilityPrivate WebhookTeamRemovedFromRepositoryVisibility = "private"
	WebhookTeamRemovedFromRepositoryVisibilityPublic WebhookTeamRemovedFromRepositoryVisibility = "public"
)

// PossibleWebhookTeamRemovedFromRepositoryVisibilityValues returns the possible values for the WebhookTeamRemovedFromRepositoryVisibility const type.
func PossibleWebhookTeamRemovedFromRepositoryVisibilityValues() []WebhookTeamRemovedFromRepositoryVisibility {
	return []WebhookTeamRemovedFromRepositoryVisibility{
		WebhookTeamRemovedFromRepositoryVisibilityInternal,
		WebhookTeamRemovedFromRepositoryVisibilityPrivate,
		WebhookTeamRemovedFromRepositoryVisibilityPublic,
	}
}

type WebhookWatchStartedAction string

const (
	WebhookWatchStartedActionStarted WebhookWatchStartedAction = "started"
)

// PossibleWebhookWatchStartedActionValues returns the possible values for the WebhookWatchStartedAction const type.
func PossibleWebhookWatchStartedActionValues() []WebhookWatchStartedAction {
	return []WebhookWatchStartedAction{
		WebhookWatchStartedActionStarted,
	}
}

type WebhookWorkflowJobCompletedAction string

const (
	WebhookWorkflowJobCompletedActionCompleted WebhookWorkflowJobCompletedAction = "completed"
)

// PossibleWebhookWorkflowJobCompletedActionValues returns the possible values for the WebhookWorkflowJobCompletedAction const type.
func PossibleWebhookWorkflowJobCompletedActionValues() []WebhookWorkflowJobCompletedAction {
	return []WebhookWorkflowJobCompletedAction{
		WebhookWorkflowJobCompletedActionCompleted,
	}
}

type WebhookWorkflowJobCompletedWorkflowJob0Conclusion string

const (
	WebhookWorkflowJobCompletedWorkflowJob0ConclusionActionRequired WebhookWorkflowJobCompletedWorkflowJob0Conclusion = "action_required"
	WebhookWorkflowJobCompletedWorkflowJob0ConclusionCancelled WebhookWorkflowJobCompletedWorkflowJob0Conclusion = "cancelled"
	WebhookWorkflowJobCompletedWorkflowJob0ConclusionFailure WebhookWorkflowJobCompletedWorkflowJob0Conclusion = "failure"
	WebhookWorkflowJobCompletedWorkflowJob0ConclusionNeutral WebhookWorkflowJobCompletedWorkflowJob0Conclusion = "neutral"
	WebhookWorkflowJobCompletedWorkflowJob0ConclusionNull WebhookWorkflowJobCompletedWorkflowJob0Conclusion = "null"
	WebhookWorkflowJobCompletedWorkflowJob0ConclusionSkipped WebhookWorkflowJobCompletedWorkflowJob0Conclusion = "skipped"
	WebhookWorkflowJobCompletedWorkflowJob0ConclusionSuccess WebhookWorkflowJobCompletedWorkflowJob0Conclusion = "success"
	WebhookWorkflowJobCompletedWorkflowJob0ConclusionTimedOut WebhookWorkflowJobCompletedWorkflowJob0Conclusion = "timed_out"
)

// PossibleWebhookWorkflowJobCompletedWorkflowJob0ConclusionValues returns the possible values for the WebhookWorkflowJobCompletedWorkflowJob0Conclusion const type.
func PossibleWebhookWorkflowJobCompletedWorkflowJob0ConclusionValues() []WebhookWorkflowJobCompletedWorkflowJob0Conclusion {
	return []WebhookWorkflowJobCompletedWorkflowJob0Conclusion{
		WebhookWorkflowJobCompletedWorkflowJob0ConclusionActionRequired,
		WebhookWorkflowJobCompletedWorkflowJob0ConclusionCancelled,
		WebhookWorkflowJobCompletedWorkflowJob0ConclusionFailure,
		WebhookWorkflowJobCompletedWorkflowJob0ConclusionNeutral,
		WebhookWorkflowJobCompletedWorkflowJob0ConclusionNull,
		WebhookWorkflowJobCompletedWorkflowJob0ConclusionSkipped,
		WebhookWorkflowJobCompletedWorkflowJob0ConclusionSuccess,
		WebhookWorkflowJobCompletedWorkflowJob0ConclusionTimedOut,
	}
}

// WebhookWorkflowJobCompletedWorkflowJob0Status - The current status of the job. Can be queued, in_progress, waiting, or
// completed.
type WebhookWorkflowJobCompletedWorkflowJob0Status string

const (
	WebhookWorkflowJobCompletedWorkflowJob0StatusCompleted WebhookWorkflowJobCompletedWorkflowJob0Status = "completed"
	WebhookWorkflowJobCompletedWorkflowJob0StatusInProgress WebhookWorkflowJobCompletedWorkflowJob0Status = "in_progress"
	WebhookWorkflowJobCompletedWorkflowJob0StatusQueued WebhookWorkflowJobCompletedWorkflowJob0Status = "queued"
	WebhookWorkflowJobCompletedWorkflowJob0StatusWaiting WebhookWorkflowJobCompletedWorkflowJob0Status = "waiting"
)

// PossibleWebhookWorkflowJobCompletedWorkflowJob0StatusValues returns the possible values for the WebhookWorkflowJobCompletedWorkflowJob0Status const type.
func PossibleWebhookWorkflowJobCompletedWorkflowJob0StatusValues() []WebhookWorkflowJobCompletedWorkflowJob0Status {
	return []WebhookWorkflowJobCompletedWorkflowJob0Status{
		WebhookWorkflowJobCompletedWorkflowJob0StatusCompleted,
		WebhookWorkflowJobCompletedWorkflowJob0StatusInProgress,
		WebhookWorkflowJobCompletedWorkflowJob0StatusQueued,
		WebhookWorkflowJobCompletedWorkflowJob0StatusWaiting,
	}
}

type WebhookWorkflowJobCompletedWorkflowJob1Conclusion string

const (
	WebhookWorkflowJobCompletedWorkflowJob1ConclusionActionRequired WebhookWorkflowJobCompletedWorkflowJob1Conclusion = "action_required"
	WebhookWorkflowJobCompletedWorkflowJob1ConclusionCancelled WebhookWorkflowJobCompletedWorkflowJob1Conclusion = "cancelled"
	WebhookWorkflowJobCompletedWorkflowJob1ConclusionFailure WebhookWorkflowJobCompletedWorkflowJob1Conclusion = "failure"
	WebhookWorkflowJobCompletedWorkflowJob1ConclusionNeutral WebhookWorkflowJobCompletedWorkflowJob1Conclusion = "neutral"
	WebhookWorkflowJobCompletedWorkflowJob1ConclusionSkipped WebhookWorkflowJobCompletedWorkflowJob1Conclusion = "skipped"
	WebhookWorkflowJobCompletedWorkflowJob1ConclusionSuccess WebhookWorkflowJobCompletedWorkflowJob1Conclusion = "success"
	WebhookWorkflowJobCompletedWorkflowJob1ConclusionTimedOut WebhookWorkflowJobCompletedWorkflowJob1Conclusion = "timed_out"
)

// PossibleWebhookWorkflowJobCompletedWorkflowJob1ConclusionValues returns the possible values for the WebhookWorkflowJobCompletedWorkflowJob1Conclusion const type.
func PossibleWebhookWorkflowJobCompletedWorkflowJob1ConclusionValues() []WebhookWorkflowJobCompletedWorkflowJob1Conclusion {
	return []WebhookWorkflowJobCompletedWorkflowJob1Conclusion{
		WebhookWorkflowJobCompletedWorkflowJob1ConclusionActionRequired,
		WebhookWorkflowJobCompletedWorkflowJob1ConclusionCancelled,
		WebhookWorkflowJobCompletedWorkflowJob1ConclusionFailure,
		WebhookWorkflowJobCompletedWorkflowJob1ConclusionNeutral,
		WebhookWorkflowJobCompletedWorkflowJob1ConclusionSkipped,
		WebhookWorkflowJobCompletedWorkflowJob1ConclusionSuccess,
		WebhookWorkflowJobCompletedWorkflowJob1ConclusionTimedOut,
	}
}

type WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusion string

const (
	WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusionCancelled WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusion = "cancelled"
	WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusionFailure WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusion = "failure"
	WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusionNull WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusion = "null"
	WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusionSkipped WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusion = "skipped"
	WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusionSuccess WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusion = "success"
)

// PossibleWebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusionValues returns the possible values for the WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusion const type.
func PossibleWebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusionValues() []WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusion {
	return []WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusion{
		WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusionCancelled,
		WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusionFailure,
		WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusionNull,
		WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusionSkipped,
		WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemConclusionSuccess,
	}
}

type WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatus string

const (
	WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatusCompleted WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatus = "completed"
	WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatusInProgress WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatus = "in_progress"
	WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatusQueued WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatus = "queued"
)

// PossibleWebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatusValues returns the possible values for the WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatus const type.
func PossibleWebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatusValues() []WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatus {
	return []WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatus{
		WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatusCompleted,
		WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatusInProgress,
		WebhookWorkflowJobCompletedWorkflowJobOneOf0StepsItemStatusQueued,
	}
}

type WebhookWorkflowJobInProgressAction string

const (
	WebhookWorkflowJobInProgressActionInProgress WebhookWorkflowJobInProgressAction = "in_progress"
)

// PossibleWebhookWorkflowJobInProgressActionValues returns the possible values for the WebhookWorkflowJobInProgressAction const type.
func PossibleWebhookWorkflowJobInProgressActionValues() []WebhookWorkflowJobInProgressAction {
	return []WebhookWorkflowJobInProgressAction{
		WebhookWorkflowJobInProgressActionInProgress,
	}
}

type WebhookWorkflowJobInProgressWorkflowJob0Conclusion string

const (
	WebhookWorkflowJobInProgressWorkflowJob0ConclusionCancelled WebhookWorkflowJobInProgressWorkflowJob0Conclusion = "cancelled"
	WebhookWorkflowJobInProgressWorkflowJob0ConclusionFailure WebhookWorkflowJobInProgressWorkflowJob0Conclusion = "failure"
	WebhookWorkflowJobInProgressWorkflowJob0ConclusionNeutral WebhookWorkflowJobInProgressWorkflowJob0Conclusion = "neutral"
	WebhookWorkflowJobInProgressWorkflowJob0ConclusionNull WebhookWorkflowJobInProgressWorkflowJob0Conclusion = "null"
	WebhookWorkflowJobInProgressWorkflowJob0ConclusionSuccess WebhookWorkflowJobInProgressWorkflowJob0Conclusion = "success"
)

// PossibleWebhookWorkflowJobInProgressWorkflowJob0ConclusionValues returns the possible values for the WebhookWorkflowJobInProgressWorkflowJob0Conclusion const type.
func PossibleWebhookWorkflowJobInProgressWorkflowJob0ConclusionValues() []WebhookWorkflowJobInProgressWorkflowJob0Conclusion {
	return []WebhookWorkflowJobInProgressWorkflowJob0Conclusion{
		WebhookWorkflowJobInProgressWorkflowJob0ConclusionCancelled,
		WebhookWorkflowJobInProgressWorkflowJob0ConclusionFailure,
		WebhookWorkflowJobInProgressWorkflowJob0ConclusionNeutral,
		WebhookWorkflowJobInProgressWorkflowJob0ConclusionNull,
		WebhookWorkflowJobInProgressWorkflowJob0ConclusionSuccess,
	}
}

// WebhookWorkflowJobInProgressWorkflowJob0Status - The current status of the job. Can be queued, in_progress, or completed.
type WebhookWorkflowJobInProgressWorkflowJob0Status string

const (
	WebhookWorkflowJobInProgressWorkflowJob0StatusCompleted WebhookWorkflowJobInProgressWorkflowJob0Status = "completed"
	WebhookWorkflowJobInProgressWorkflowJob0StatusInProgress WebhookWorkflowJobInProgressWorkflowJob0Status = "in_progress"
	WebhookWorkflowJobInProgressWorkflowJob0StatusQueued WebhookWorkflowJobInProgressWorkflowJob0Status = "queued"
)

// PossibleWebhookWorkflowJobInProgressWorkflowJob0StatusValues returns the possible values for the WebhookWorkflowJobInProgressWorkflowJob0Status const type.
func PossibleWebhookWorkflowJobInProgressWorkflowJob0StatusValues() []WebhookWorkflowJobInProgressWorkflowJob0Status {
	return []WebhookWorkflowJobInProgressWorkflowJob0Status{
		WebhookWorkflowJobInProgressWorkflowJob0StatusCompleted,
		WebhookWorkflowJobInProgressWorkflowJob0StatusInProgress,
		WebhookWorkflowJobInProgressWorkflowJob0StatusQueued,
	}
}

type WebhookWorkflowJobInProgressWorkflowJob1Status string

const (
	WebhookWorkflowJobInProgressWorkflowJob1StatusCompleted WebhookWorkflowJobInProgressWorkflowJob1Status = "completed"
	WebhookWorkflowJobInProgressWorkflowJob1StatusInProgress WebhookWorkflowJobInProgressWorkflowJob1Status = "in_progress"
	WebhookWorkflowJobInProgressWorkflowJob1StatusQueued WebhookWorkflowJobInProgressWorkflowJob1Status = "queued"
)

// PossibleWebhookWorkflowJobInProgressWorkflowJob1StatusValues returns the possible values for the WebhookWorkflowJobInProgressWorkflowJob1Status const type.
func PossibleWebhookWorkflowJobInProgressWorkflowJob1StatusValues() []WebhookWorkflowJobInProgressWorkflowJob1Status {
	return []WebhookWorkflowJobInProgressWorkflowJob1Status{
		WebhookWorkflowJobInProgressWorkflowJob1StatusCompleted,
		WebhookWorkflowJobInProgressWorkflowJob1StatusInProgress,
		WebhookWorkflowJobInProgressWorkflowJob1StatusQueued,
	}
}

type WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusion string

const (
	WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusionCancelled WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusion = "cancelled"
	WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusionFailure WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusion = "failure"
	WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusionNull WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusion = "null"
	WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusionSkipped WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusion = "skipped"
	WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusionSuccess WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusion = "success"
)

// PossibleWebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusionValues returns the possible values for the WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusion const type.
func PossibleWebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusionValues() []WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusion {
	return []WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusion{
		WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusionCancelled,
		WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusionFailure,
		WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusionNull,
		WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusionSkipped,
		WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemConclusionSuccess,
	}
}

type WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatus string

const (
	WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatusCompleted WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatus = "completed"
	WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatusInProgress WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatus = "in_progress"
	WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatusPending WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatus = "pending"
	WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatusQueued WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatus = "queued"
)

// PossibleWebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatusValues returns the possible values for the WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatus const type.
func PossibleWebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatusValues() []WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatus {
	return []WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatus{
		WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatusCompleted,
		WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatusInProgress,
		WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatusPending,
		WebhookWorkflowJobInProgressWorkflowJobOneOf0StepsItemStatusQueued,
	}
}

type WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatus string

const (
	WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatusCompleted WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatus = "completed"
	WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatusInProgress WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatus = "in_progress"
	WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatusPending WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatus = "pending"
	WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatusQueued WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatus = "queued"
)

// PossibleWebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatusValues returns the possible values for the WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatus const type.
func PossibleWebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatusValues() []WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatus {
	return []WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatus{
		WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatusCompleted,
		WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatusInProgress,
		WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatusPending,
		WebhookWorkflowJobInProgressWorkflowJobOneOf1StepsItemStatusQueued,
	}
}

type WebhookWorkflowJobQueuedAction string

const (
	WebhookWorkflowJobQueuedActionQueued WebhookWorkflowJobQueuedAction = "queued"
)

// PossibleWebhookWorkflowJobQueuedActionValues returns the possible values for the WebhookWorkflowJobQueuedAction const type.
func PossibleWebhookWorkflowJobQueuedActionValues() []WebhookWorkflowJobQueuedAction {
	return []WebhookWorkflowJobQueuedAction{
		WebhookWorkflowJobQueuedActionQueued,
	}
}

type WebhookWorkflowJobQueuedWorkflowJobStatus string

const (
	WebhookWorkflowJobQueuedWorkflowJobStatusCompleted WebhookWorkflowJobQueuedWorkflowJobStatus = "completed"
	WebhookWorkflowJobQueuedWorkflowJobStatusInProgress WebhookWorkflowJobQueuedWorkflowJobStatus = "in_progress"
	WebhookWorkflowJobQueuedWorkflowJobStatusQueued WebhookWorkflowJobQueuedWorkflowJobStatus = "queued"
	WebhookWorkflowJobQueuedWorkflowJobStatusWaiting WebhookWorkflowJobQueuedWorkflowJobStatus = "waiting"
)

// PossibleWebhookWorkflowJobQueuedWorkflowJobStatusValues returns the possible values for the WebhookWorkflowJobQueuedWorkflowJobStatus const type.
func PossibleWebhookWorkflowJobQueuedWorkflowJobStatusValues() []WebhookWorkflowJobQueuedWorkflowJobStatus {
	return []WebhookWorkflowJobQueuedWorkflowJobStatus{
		WebhookWorkflowJobQueuedWorkflowJobStatusCompleted,
		WebhookWorkflowJobQueuedWorkflowJobStatusInProgress,
		WebhookWorkflowJobQueuedWorkflowJobStatusQueued,
		WebhookWorkflowJobQueuedWorkflowJobStatusWaiting,
	}
}

type WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusion string

const (
	WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusionCancelled WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusion = "cancelled"
	WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusionFailure WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusion = "failure"
	WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusionNull WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusion = "null"
	WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusionSkipped WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusion = "skipped"
	WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusionSuccess WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusion = "success"
)

// PossibleWebhookWorkflowJobQueuedWorkflowJobStepsItemConclusionValues returns the possible values for the WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusion const type.
func PossibleWebhookWorkflowJobQueuedWorkflowJobStepsItemConclusionValues() []WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusion {
	return []WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusion{
		WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusionCancelled,
		WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusionFailure,
		WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusionNull,
		WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusionSkipped,
		WebhookWorkflowJobQueuedWorkflowJobStepsItemConclusionSuccess,
	}
}

type WebhookWorkflowJobQueuedWorkflowJobStepsItemStatus string

const (
	WebhookWorkflowJobQueuedWorkflowJobStepsItemStatusCompleted WebhookWorkflowJobQueuedWorkflowJobStepsItemStatus = "completed"
	WebhookWorkflowJobQueuedWorkflowJobStepsItemStatusInProgress WebhookWorkflowJobQueuedWorkflowJobStepsItemStatus = "in_progress"
	WebhookWorkflowJobQueuedWorkflowJobStepsItemStatusPending WebhookWorkflowJobQueuedWorkflowJobStepsItemStatus = "pending"
	WebhookWorkflowJobQueuedWorkflowJobStepsItemStatusQueued WebhookWorkflowJobQueuedWorkflowJobStepsItemStatus = "queued"
)

// PossibleWebhookWorkflowJobQueuedWorkflowJobStepsItemStatusValues returns the possible values for the WebhookWorkflowJobQueuedWorkflowJobStepsItemStatus const type.
func PossibleWebhookWorkflowJobQueuedWorkflowJobStepsItemStatusValues() []WebhookWorkflowJobQueuedWorkflowJobStepsItemStatus {
	return []WebhookWorkflowJobQueuedWorkflowJobStepsItemStatus{
		WebhookWorkflowJobQueuedWorkflowJobStepsItemStatusCompleted,
		WebhookWorkflowJobQueuedWorkflowJobStepsItemStatusInProgress,
		WebhookWorkflowJobQueuedWorkflowJobStepsItemStatusPending,
		WebhookWorkflowJobQueuedWorkflowJobStepsItemStatusQueued,
	}
}

type WebhookWorkflowJobWaitingAction string

const (
	WebhookWorkflowJobWaitingActionWaiting WebhookWorkflowJobWaitingAction = "waiting"
)

// PossibleWebhookWorkflowJobWaitingActionValues returns the possible values for the WebhookWorkflowJobWaitingAction const type.
func PossibleWebhookWorkflowJobWaitingActionValues() []WebhookWorkflowJobWaitingAction {
	return []WebhookWorkflowJobWaitingAction{
		WebhookWorkflowJobWaitingActionWaiting,
	}
}

type WebhookWorkflowJobWaitingWorkflowJobStatus string

const (
	WebhookWorkflowJobWaitingWorkflowJobStatusCompleted WebhookWorkflowJobWaitingWorkflowJobStatus = "completed"
	WebhookWorkflowJobWaitingWorkflowJobStatusInProgress WebhookWorkflowJobWaitingWorkflowJobStatus = "in_progress"
	WebhookWorkflowJobWaitingWorkflowJobStatusQueued WebhookWorkflowJobWaitingWorkflowJobStatus = "queued"
	WebhookWorkflowJobWaitingWorkflowJobStatusWaiting WebhookWorkflowJobWaitingWorkflowJobStatus = "waiting"
)

// PossibleWebhookWorkflowJobWaitingWorkflowJobStatusValues returns the possible values for the WebhookWorkflowJobWaitingWorkflowJobStatus const type.
func PossibleWebhookWorkflowJobWaitingWorkflowJobStatusValues() []WebhookWorkflowJobWaitingWorkflowJobStatus {
	return []WebhookWorkflowJobWaitingWorkflowJobStatus{
		WebhookWorkflowJobWaitingWorkflowJobStatusCompleted,
		WebhookWorkflowJobWaitingWorkflowJobStatusInProgress,
		WebhookWorkflowJobWaitingWorkflowJobStatusQueued,
		WebhookWorkflowJobWaitingWorkflowJobStatusWaiting,
	}
}

type WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusion string

const (
	WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusionCancelled WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusion = "cancelled"
	WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusionFailure WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusion = "failure"
	WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusionNull WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusion = "null"
	WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusionSkipped WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusion = "skipped"
	WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusionSuccess WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusion = "success"
)

// PossibleWebhookWorkflowJobWaitingWorkflowJobStepsItemConclusionValues returns the possible values for the WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusion const type.
func PossibleWebhookWorkflowJobWaitingWorkflowJobStepsItemConclusionValues() []WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusion {
	return []WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusion{
		WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusionCancelled,
		WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusionFailure,
		WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusionNull,
		WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusionSkipped,
		WebhookWorkflowJobWaitingWorkflowJobStepsItemConclusionSuccess,
	}
}

type WebhookWorkflowJobWaitingWorkflowJobStepsItemStatus string

const (
	WebhookWorkflowJobWaitingWorkflowJobStepsItemStatusCompleted WebhookWorkflowJobWaitingWorkflowJobStepsItemStatus = "completed"
	WebhookWorkflowJobWaitingWorkflowJobStepsItemStatusInProgress WebhookWorkflowJobWaitingWorkflowJobStepsItemStatus = "in_progress"
	WebhookWorkflowJobWaitingWorkflowJobStepsItemStatusPending WebhookWorkflowJobWaitingWorkflowJobStepsItemStatus = "pending"
	WebhookWorkflowJobWaitingWorkflowJobStepsItemStatusQueued WebhookWorkflowJobWaitingWorkflowJobStepsItemStatus = "queued"
	WebhookWorkflowJobWaitingWorkflowJobStepsItemStatusWaiting WebhookWorkflowJobWaitingWorkflowJobStepsItemStatus = "waiting"
)

// PossibleWebhookWorkflowJobWaitingWorkflowJobStepsItemStatusValues returns the possible values for the WebhookWorkflowJobWaitingWorkflowJobStepsItemStatus const type.
func PossibleWebhookWorkflowJobWaitingWorkflowJobStepsItemStatusValues() []WebhookWorkflowJobWaitingWorkflowJobStepsItemStatus {
	return []WebhookWorkflowJobWaitingWorkflowJobStepsItemStatus{
		WebhookWorkflowJobWaitingWorkflowJobStepsItemStatusCompleted,
		WebhookWorkflowJobWaitingWorkflowJobStepsItemStatusInProgress,
		WebhookWorkflowJobWaitingWorkflowJobStepsItemStatusPending,
		WebhookWorkflowJobWaitingWorkflowJobStepsItemStatusQueued,
		WebhookWorkflowJobWaitingWorkflowJobStepsItemStatusWaiting,
	}
}

type WebhookWorkflowRunCompletedAction string

const (
	WebhookWorkflowRunCompletedActionCompleted WebhookWorkflowRunCompletedAction = "completed"
)

// PossibleWebhookWorkflowRunCompletedActionValues returns the possible values for the WebhookWorkflowRunCompletedAction const type.
func PossibleWebhookWorkflowRunCompletedActionValues() []WebhookWorkflowRunCompletedAction {
	return []WebhookWorkflowRunCompletedAction{
		WebhookWorkflowRunCompletedActionCompleted,
	}
}

type WebhookWorkflowRunCompletedWorkflowRun0ActorType string

const (
	WebhookWorkflowRunCompletedWorkflowRun0ActorTypeBot WebhookWorkflowRunCompletedWorkflowRun0ActorType = "Bot"
	WebhookWorkflowRunCompletedWorkflowRun0ActorTypeOrganization WebhookWorkflowRunCompletedWorkflowRun0ActorType = "Organization"
	WebhookWorkflowRunCompletedWorkflowRun0ActorTypeUser WebhookWorkflowRunCompletedWorkflowRun0ActorType = "User"
)

// PossibleWebhookWorkflowRunCompletedWorkflowRun0ActorTypeValues returns the possible values for the WebhookWorkflowRunCompletedWorkflowRun0ActorType const type.
func PossibleWebhookWorkflowRunCompletedWorkflowRun0ActorTypeValues() []WebhookWorkflowRunCompletedWorkflowRun0ActorType {
	return []WebhookWorkflowRunCompletedWorkflowRun0ActorType{
		WebhookWorkflowRunCompletedWorkflowRun0ActorTypeBot,
		WebhookWorkflowRunCompletedWorkflowRun0ActorTypeOrganization,
		WebhookWorkflowRunCompletedWorkflowRun0ActorTypeUser,
	}
}

type WebhookWorkflowRunCompletedWorkflowRun0Conclusion string

const (
	WebhookWorkflowRunCompletedWorkflowRun0ConclusionActionRequired WebhookWorkflowRunCompletedWorkflowRun0Conclusion = "action_required"
	WebhookWorkflowRunCompletedWorkflowRun0ConclusionCancelled WebhookWorkflowRunCompletedWorkflowRun0Conclusion = "cancelled"
	WebhookWorkflowRunCompletedWorkflowRun0ConclusionFailure WebhookWorkflowRunCompletedWorkflowRun0Conclusion = "failure"
	WebhookWorkflowRunCompletedWorkflowRun0ConclusionNeutral WebhookWorkflowRunCompletedWorkflowRun0Conclusion = "neutral"
	WebhookWorkflowRunCompletedWorkflowRun0ConclusionNull WebhookWorkflowRunCompletedWorkflowRun0Conclusion = "null"
	WebhookWorkflowRunCompletedWorkflowRun0ConclusionSkipped WebhookWorkflowRunCompletedWorkflowRun0Conclusion = "skipped"
	WebhookWorkflowRunCompletedWorkflowRun0ConclusionStale WebhookWorkflowRunCompletedWorkflowRun0Conclusion = "stale"
	WebhookWorkflowRunCompletedWorkflowRun0ConclusionSuccess WebhookWorkflowRunCompletedWorkflowRun0Conclusion = "success"
	WebhookWorkflowRunCompletedWorkflowRun0ConclusionTimedOut WebhookWorkflowRunCompletedWorkflowRun0Conclusion = "timed_out"
)

// PossibleWebhookWorkflowRunCompletedWorkflowRun0ConclusionValues returns the possible values for the WebhookWorkflowRunCompletedWorkflowRun0Conclusion const type.
func PossibleWebhookWorkflowRunCompletedWorkflowRun0ConclusionValues() []WebhookWorkflowRunCompletedWorkflowRun0Conclusion {
	return []WebhookWorkflowRunCompletedWorkflowRun0Conclusion{
		WebhookWorkflowRunCompletedWorkflowRun0ConclusionActionRequired,
		WebhookWorkflowRunCompletedWorkflowRun0ConclusionCancelled,
		WebhookWorkflowRunCompletedWorkflowRun0ConclusionFailure,
		WebhookWorkflowRunCompletedWorkflowRun0ConclusionNeutral,
		WebhookWorkflowRunCompletedWorkflowRun0ConclusionNull,
		WebhookWorkflowRunCompletedWorkflowRun0ConclusionSkipped,
		WebhookWorkflowRunCompletedWorkflowRun0ConclusionStale,
		WebhookWorkflowRunCompletedWorkflowRun0ConclusionSuccess,
		WebhookWorkflowRunCompletedWorkflowRun0ConclusionTimedOut,
	}
}

type WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerType string

const (
	WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerTypeBot WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerType = "Bot"
	WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerTypeOrganization WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerType = "Organization"
	WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerTypeUser WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerType = "User"
)

// PossibleWebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerTypeValues returns the possible values for the WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerType const type.
func PossibleWebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerTypeValues() []WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerType {
	return []WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerType{
		WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerTypeBot,
		WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerTypeOrganization,
		WebhookWorkflowRunCompletedWorkflowRun0HeadRepositoryOwnerTypeUser,
	}
}

type WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerType string

const (
	WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerTypeBot WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerType = "Bot"
	WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerTypeOrganization WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerType = "Organization"
	WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerTypeUser WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerType = "User"
)

// PossibleWebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerTypeValues returns the possible values for the WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerType const type.
func PossibleWebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerTypeValues() []WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerType {
	return []WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerType{
		WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerTypeBot,
		WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerTypeOrganization,
		WebhookWorkflowRunCompletedWorkflowRun0RepositoryOwnerTypeUser,
	}
}

type WebhookWorkflowRunCompletedWorkflowRun0Status string

const (
	WebhookWorkflowRunCompletedWorkflowRun0StatusCompleted WebhookWorkflowRunCompletedWorkflowRun0Status = "completed"
	WebhookWorkflowRunCompletedWorkflowRun0StatusInProgress WebhookWorkflowRunCompletedWorkflowRun0Status = "in_progress"
	WebhookWorkflowRunCompletedWorkflowRun0StatusPending WebhookWorkflowRunCompletedWorkflowRun0Status = "pending"
	WebhookWorkflowRunCompletedWorkflowRun0StatusQueued WebhookWorkflowRunCompletedWorkflowRun0Status = "queued"
	WebhookWorkflowRunCompletedWorkflowRun0StatusRequested WebhookWorkflowRunCompletedWorkflowRun0Status = "requested"
	WebhookWorkflowRunCompletedWorkflowRun0StatusWaiting WebhookWorkflowRunCompletedWorkflowRun0Status = "waiting"
)

// PossibleWebhookWorkflowRunCompletedWorkflowRun0StatusValues returns the possible values for the WebhookWorkflowRunCompletedWorkflowRun0Status const type.
func PossibleWebhookWorkflowRunCompletedWorkflowRun0StatusValues() []WebhookWorkflowRunCompletedWorkflowRun0Status {
	return []WebhookWorkflowRunCompletedWorkflowRun0Status{
		WebhookWorkflowRunCompletedWorkflowRun0StatusCompleted,
		WebhookWorkflowRunCompletedWorkflowRun0StatusInProgress,
		WebhookWorkflowRunCompletedWorkflowRun0StatusPending,
		WebhookWorkflowRunCompletedWorkflowRun0StatusQueued,
		WebhookWorkflowRunCompletedWorkflowRun0StatusRequested,
		WebhookWorkflowRunCompletedWorkflowRun0StatusWaiting,
	}
}

type WebhookWorkflowRunCompletedWorkflowRun0TriggeringActorType string

const (
	WebhookWorkflowRunCompletedWorkflowRun0TriggeringActorTypeBot WebhookWorkflowRunCompletedWorkflowRun0TriggeringActorType = "Bot"
	WebhookWorkflowRunCompletedWorkflowRun0TriggeringActorTypeOrganization WebhookWorkflowRunCompletedWorkflowRun0TriggeringActorType = "Organization"
	WebhookWorkflowRunCompletedWorkflowRun0TriggeringActorTypeUser WebhookWorkflowRunCompletedWorkflowRun0TriggeringActorType = "User"
)

// PossibleWebhookWorkflowRunCompletedWorkflowRun0TriggeringActorTypeValues returns the possible values for the WebhookWorkflowRunCompletedWorkflowRun0TriggeringActorType const type.
func PossibleWebhookWorkflowRunCompletedWorkflowRun0TriggeringActorTypeValues() []WebhookWorkflowRunCompletedWorkflowRun0TriggeringActorType {
	return []WebhookWorkflowRunCompletedWorkflowRun0TriggeringActorType{
		WebhookWorkflowRunCompletedWorkflowRun0TriggeringActorTypeBot,
		WebhookWorkflowRunCompletedWorkflowRun0TriggeringActorTypeOrganization,
		WebhookWorkflowRunCompletedWorkflowRun0TriggeringActorTypeUser,
	}
}

type WebhookWorkflowRunCompletedWorkflowRun1Conclusion string

const (
	WebhookWorkflowRunCompletedWorkflowRun1ConclusionActionRequired WebhookWorkflowRunCompletedWorkflowRun1Conclusion = "action_required"
	WebhookWorkflowRunCompletedWorkflowRun1ConclusionCancelled WebhookWorkflowRunCompletedWorkflowRun1Conclusion = "cancelled"
	WebhookWorkflowRunCompletedWorkflowRun1ConclusionFailure WebhookWorkflowRunCompletedWorkflowRun1Conclusion = "failure"
	WebhookWorkflowRunCompletedWorkflowRun1ConclusionNeutral WebhookWorkflowRunCompletedWorkflowRun1Conclusion = "neutral"
	WebhookWorkflowRunCompletedWorkflowRun1ConclusionSkipped WebhookWorkflowRunCompletedWorkflowRun1Conclusion = "skipped"
	WebhookWorkflowRunCompletedWorkflowRun1ConclusionStale WebhookWorkflowRunCompletedWorkflowRun1Conclusion = "stale"
	WebhookWorkflowRunCompletedWorkflowRun1ConclusionSuccess WebhookWorkflowRunCompletedWorkflowRun1Conclusion = "success"
	WebhookWorkflowRunCompletedWorkflowRun1ConclusionTimedOut WebhookWorkflowRunCompletedWorkflowRun1Conclusion = "timed_out"
)

// PossibleWebhookWorkflowRunCompletedWorkflowRun1ConclusionValues returns the possible values for the WebhookWorkflowRunCompletedWorkflowRun1Conclusion const type.
func PossibleWebhookWorkflowRunCompletedWorkflowRun1ConclusionValues() []WebhookWorkflowRunCompletedWorkflowRun1Conclusion {
	return []WebhookWorkflowRunCompletedWorkflowRun1Conclusion{
		WebhookWorkflowRunCompletedWorkflowRun1ConclusionActionRequired,
		WebhookWorkflowRunCompletedWorkflowRun1ConclusionCancelled,
		WebhookWorkflowRunCompletedWorkflowRun1ConclusionFailure,
		WebhookWorkflowRunCompletedWorkflowRun1ConclusionNeutral,
		WebhookWorkflowRunCompletedWorkflowRun1ConclusionSkipped,
		WebhookWorkflowRunCompletedWorkflowRun1ConclusionStale,
		WebhookWorkflowRunCompletedWorkflowRun1ConclusionSuccess,
		WebhookWorkflowRunCompletedWorkflowRun1ConclusionTimedOut,
	}
}

type WebhookWorkflowRunInProgressAction string

const (
	WebhookWorkflowRunInProgressActionInProgress WebhookWorkflowRunInProgressAction = "in_progress"
)

// PossibleWebhookWorkflowRunInProgressActionValues returns the possible values for the WebhookWorkflowRunInProgressAction const type.
func PossibleWebhookWorkflowRunInProgressActionValues() []WebhookWorkflowRunInProgressAction {
	return []WebhookWorkflowRunInProgressAction{
		WebhookWorkflowRunInProgressActionInProgress,
	}
}

type WebhookWorkflowRunInProgressWorkflowRun0ActorType string

const (
	WebhookWorkflowRunInProgressWorkflowRun0ActorTypeBot WebhookWorkflowRunInProgressWorkflowRun0ActorType = "Bot"
	WebhookWorkflowRunInProgressWorkflowRun0ActorTypeOrganization WebhookWorkflowRunInProgressWorkflowRun0ActorType = "Organization"
	WebhookWorkflowRunInProgressWorkflowRun0ActorTypeUser WebhookWorkflowRunInProgressWorkflowRun0ActorType = "User"
)

// PossibleWebhookWorkflowRunInProgressWorkflowRun0ActorTypeValues returns the possible values for the WebhookWorkflowRunInProgressWorkflowRun0ActorType const type.
func PossibleWebhookWorkflowRunInProgressWorkflowRun0ActorTypeValues() []WebhookWorkflowRunInProgressWorkflowRun0ActorType {
	return []WebhookWorkflowRunInProgressWorkflowRun0ActorType{
		WebhookWorkflowRunInProgressWorkflowRun0ActorTypeBot,
		WebhookWorkflowRunInProgressWorkflowRun0ActorTypeOrganization,
		WebhookWorkflowRunInProgressWorkflowRun0ActorTypeUser,
	}
}

type WebhookWorkflowRunInProgressWorkflowRun0Conclusion string

const (
	WebhookWorkflowRunInProgressWorkflowRun0ConclusionActionRequired WebhookWorkflowRunInProgressWorkflowRun0Conclusion = "action_required"
	WebhookWorkflowRunInProgressWorkflowRun0ConclusionCancelled WebhookWorkflowRunInProgressWorkflowRun0Conclusion = "cancelled"
	WebhookWorkflowRunInProgressWorkflowRun0ConclusionFailure WebhookWorkflowRunInProgressWorkflowRun0Conclusion = "failure"
	WebhookWorkflowRunInProgressWorkflowRun0ConclusionNeutral WebhookWorkflowRunInProgressWorkflowRun0Conclusion = "neutral"
	WebhookWorkflowRunInProgressWorkflowRun0ConclusionNull WebhookWorkflowRunInProgressWorkflowRun0Conclusion = "null"
	WebhookWorkflowRunInProgressWorkflowRun0ConclusionSkipped WebhookWorkflowRunInProgressWorkflowRun0Conclusion = "skipped"
	WebhookWorkflowRunInProgressWorkflowRun0ConclusionStale WebhookWorkflowRunInProgressWorkflowRun0Conclusion = "stale"
	WebhookWorkflowRunInProgressWorkflowRun0ConclusionSuccess WebhookWorkflowRunInProgressWorkflowRun0Conclusion = "success"
	WebhookWorkflowRunInProgressWorkflowRun0ConclusionTimedOut WebhookWorkflowRunInProgressWorkflowRun0Conclusion = "timed_out"
)

// PossibleWebhookWorkflowRunInProgressWorkflowRun0ConclusionValues returns the possible values for the WebhookWorkflowRunInProgressWorkflowRun0Conclusion const type.
func PossibleWebhookWorkflowRunInProgressWorkflowRun0ConclusionValues() []WebhookWorkflowRunInProgressWorkflowRun0Conclusion {
	return []WebhookWorkflowRunInProgressWorkflowRun0Conclusion{
		WebhookWorkflowRunInProgressWorkflowRun0ConclusionActionRequired,
		WebhookWorkflowRunInProgressWorkflowRun0ConclusionCancelled,
		WebhookWorkflowRunInProgressWorkflowRun0ConclusionFailure,
		WebhookWorkflowRunInProgressWorkflowRun0ConclusionNeutral,
		WebhookWorkflowRunInProgressWorkflowRun0ConclusionNull,
		WebhookWorkflowRunInProgressWorkflowRun0ConclusionSkipped,
		WebhookWorkflowRunInProgressWorkflowRun0ConclusionStale,
		WebhookWorkflowRunInProgressWorkflowRun0ConclusionSuccess,
		WebhookWorkflowRunInProgressWorkflowRun0ConclusionTimedOut,
	}
}

type WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerType string

const (
	WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerTypeBot WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerType = "Bot"
	WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerTypeOrganization WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerType = "Organization"
	WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerTypeUser WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerType = "User"
)

// PossibleWebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerTypeValues returns the possible values for the WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerType const type.
func PossibleWebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerTypeValues() []WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerType {
	return []WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerType{
		WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerTypeBot,
		WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerTypeOrganization,
		WebhookWorkflowRunInProgressWorkflowRun0HeadRepositoryOwnerTypeUser,
	}
}

type WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerType string

const (
	WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerTypeBot WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerType = "Bot"
	WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerTypeOrganization WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerType = "Organization"
	WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerTypeUser WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerType = "User"
)

// PossibleWebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerTypeValues returns the possible values for the WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerType const type.
func PossibleWebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerTypeValues() []WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerType {
	return []WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerType{
		WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerTypeBot,
		WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerTypeOrganization,
		WebhookWorkflowRunInProgressWorkflowRun0RepositoryOwnerTypeUser,
	}
}

type WebhookWorkflowRunInProgressWorkflowRun0Status string

const (
	WebhookWorkflowRunInProgressWorkflowRun0StatusCompleted WebhookWorkflowRunInProgressWorkflowRun0Status = "completed"
	WebhookWorkflowRunInProgressWorkflowRun0StatusInProgress WebhookWorkflowRunInProgressWorkflowRun0Status = "in_progress"
	WebhookWorkflowRunInProgressWorkflowRun0StatusPending WebhookWorkflowRunInProgressWorkflowRun0Status = "pending"
	WebhookWorkflowRunInProgressWorkflowRun0StatusQueued WebhookWorkflowRunInProgressWorkflowRun0Status = "queued"
	WebhookWorkflowRunInProgressWorkflowRun0StatusRequested WebhookWorkflowRunInProgressWorkflowRun0Status = "requested"
)

// PossibleWebhookWorkflowRunInProgressWorkflowRun0StatusValues returns the possible values for the WebhookWorkflowRunInProgressWorkflowRun0Status const type.
func PossibleWebhookWorkflowRunInProgressWorkflowRun0StatusValues() []WebhookWorkflowRunInProgressWorkflowRun0Status {
	return []WebhookWorkflowRunInProgressWorkflowRun0Status{
		WebhookWorkflowRunInProgressWorkflowRun0StatusCompleted,
		WebhookWorkflowRunInProgressWorkflowRun0StatusInProgress,
		WebhookWorkflowRunInProgressWorkflowRun0StatusPending,
		WebhookWorkflowRunInProgressWorkflowRun0StatusQueued,
		WebhookWorkflowRunInProgressWorkflowRun0StatusRequested,
	}
}

type WebhookWorkflowRunInProgressWorkflowRun0TriggeringActorType string

const (
	WebhookWorkflowRunInProgressWorkflowRun0TriggeringActorTypeBot WebhookWorkflowRunInProgressWorkflowRun0TriggeringActorType = "Bot"
	WebhookWorkflowRunInProgressWorkflowRun0TriggeringActorTypeOrganization WebhookWorkflowRunInProgressWorkflowRun0TriggeringActorType = "Organization"
	WebhookWorkflowRunInProgressWorkflowRun0TriggeringActorTypeUser WebhookWorkflowRunInProgressWorkflowRun0TriggeringActorType = "User"
)

// PossibleWebhookWorkflowRunInProgressWorkflowRun0TriggeringActorTypeValues returns the possible values for the WebhookWorkflowRunInProgressWorkflowRun0TriggeringActorType const type.
func PossibleWebhookWorkflowRunInProgressWorkflowRun0TriggeringActorTypeValues() []WebhookWorkflowRunInProgressWorkflowRun0TriggeringActorType {
	return []WebhookWorkflowRunInProgressWorkflowRun0TriggeringActorType{
		WebhookWorkflowRunInProgressWorkflowRun0TriggeringActorTypeBot,
		WebhookWorkflowRunInProgressWorkflowRun0TriggeringActorTypeOrganization,
		WebhookWorkflowRunInProgressWorkflowRun0TriggeringActorTypeUser,
	}
}

type WebhookWorkflowRunInProgressWorkflowRun1Conclusion string

const (
	WebhookWorkflowRunInProgressWorkflowRun1ConclusionActionRequired WebhookWorkflowRunInProgressWorkflowRun1Conclusion = "action_required"
	WebhookWorkflowRunInProgressWorkflowRun1ConclusionCancelled WebhookWorkflowRunInProgressWorkflowRun1Conclusion = "cancelled"
	WebhookWorkflowRunInProgressWorkflowRun1ConclusionFailure WebhookWorkflowRunInProgressWorkflowRun1Conclusion = "failure"
	WebhookWorkflowRunInProgressWorkflowRun1ConclusionNeutral WebhookWorkflowRunInProgressWorkflowRun1Conclusion = "neutral"
	WebhookWorkflowRunInProgressWorkflowRun1ConclusionSkipped WebhookWorkflowRunInProgressWorkflowRun1Conclusion = "skipped"
	WebhookWorkflowRunInProgressWorkflowRun1ConclusionStale WebhookWorkflowRunInProgressWorkflowRun1Conclusion = "stale"
	WebhookWorkflowRunInProgressWorkflowRun1ConclusionSuccess WebhookWorkflowRunInProgressWorkflowRun1Conclusion = "success"
	WebhookWorkflowRunInProgressWorkflowRun1ConclusionTimedOut WebhookWorkflowRunInProgressWorkflowRun1Conclusion = "timed_out"
)

// PossibleWebhookWorkflowRunInProgressWorkflowRun1ConclusionValues returns the possible values for the WebhookWorkflowRunInProgressWorkflowRun1Conclusion const type.
func PossibleWebhookWorkflowRunInProgressWorkflowRun1ConclusionValues() []WebhookWorkflowRunInProgressWorkflowRun1Conclusion {
	return []WebhookWorkflowRunInProgressWorkflowRun1Conclusion{
		WebhookWorkflowRunInProgressWorkflowRun1ConclusionActionRequired,
		WebhookWorkflowRunInProgressWorkflowRun1ConclusionCancelled,
		WebhookWorkflowRunInProgressWorkflowRun1ConclusionFailure,
		WebhookWorkflowRunInProgressWorkflowRun1ConclusionNeutral,
		WebhookWorkflowRunInProgressWorkflowRun1ConclusionSkipped,
		WebhookWorkflowRunInProgressWorkflowRun1ConclusionStale,
		WebhookWorkflowRunInProgressWorkflowRun1ConclusionSuccess,
		WebhookWorkflowRunInProgressWorkflowRun1ConclusionTimedOut,
	}
}

type WebhookWorkflowRunRequestedAction string

const (
	WebhookWorkflowRunRequestedActionRequested WebhookWorkflowRunRequestedAction = "requested"
)

// PossibleWebhookWorkflowRunRequestedActionValues returns the possible values for the WebhookWorkflowRunRequestedAction const type.
func PossibleWebhookWorkflowRunRequestedActionValues() []WebhookWorkflowRunRequestedAction {
	return []WebhookWorkflowRunRequestedAction{
		WebhookWorkflowRunRequestedActionRequested,
	}
}

type WebhookWorkflowRunRequestedWorkflowRunActorType string

const (
	WebhookWorkflowRunRequestedWorkflowRunActorTypeBot WebhookWorkflowRunRequestedWorkflowRunActorType = "Bot"
	WebhookWorkflowRunRequestedWorkflowRunActorTypeOrganization WebhookWorkflowRunRequestedWorkflowRunActorType = "Organization"
	WebhookWorkflowRunRequestedWorkflowRunActorTypeUser WebhookWorkflowRunRequestedWorkflowRunActorType = "User"
)

// PossibleWebhookWorkflowRunRequestedWorkflowRunActorTypeValues returns the possible values for the WebhookWorkflowRunRequestedWorkflowRunActorType const type.
func PossibleWebhookWorkflowRunRequestedWorkflowRunActorTypeValues() []WebhookWorkflowRunRequestedWorkflowRunActorType {
	return []WebhookWorkflowRunRequestedWorkflowRunActorType{
		WebhookWorkflowRunRequestedWorkflowRunActorTypeBot,
		WebhookWorkflowRunRequestedWorkflowRunActorTypeOrganization,
		WebhookWorkflowRunRequestedWorkflowRunActorTypeUser,
	}
}

type WebhookWorkflowRunRequestedWorkflowRunConclusion string

const (
	WebhookWorkflowRunRequestedWorkflowRunConclusionActionRequired WebhookWorkflowRunRequestedWorkflowRunConclusion = "action_required"
	WebhookWorkflowRunRequestedWorkflowRunConclusionCancelled WebhookWorkflowRunRequestedWorkflowRunConclusion = "cancelled"
	WebhookWorkflowRunRequestedWorkflowRunConclusionFailure WebhookWorkflowRunRequestedWorkflowRunConclusion = "failure"
	WebhookWorkflowRunRequestedWorkflowRunConclusionNeutral WebhookWorkflowRunRequestedWorkflowRunConclusion = "neutral"
	WebhookWorkflowRunRequestedWorkflowRunConclusionNull WebhookWorkflowRunRequestedWorkflowRunConclusion = "null"
	WebhookWorkflowRunRequestedWorkflowRunConclusionSkipped WebhookWorkflowRunRequestedWorkflowRunConclusion = "skipped"
	WebhookWorkflowRunRequestedWorkflowRunConclusionStale WebhookWorkflowRunRequestedWorkflowRunConclusion = "stale"
	WebhookWorkflowRunRequestedWorkflowRunConclusionStartupFailure WebhookWorkflowRunRequestedWorkflowRunConclusion = "startup_failure"
	WebhookWorkflowRunRequestedWorkflowRunConclusionSuccess WebhookWorkflowRunRequestedWorkflowRunConclusion = "success"
	WebhookWorkflowRunRequestedWorkflowRunConclusionTimedOut WebhookWorkflowRunRequestedWorkflowRunConclusion = "timed_out"
)

// PossibleWebhookWorkflowRunRequestedWorkflowRunConclusionValues returns the possible values for the WebhookWorkflowRunRequestedWorkflowRunConclusion const type.
func PossibleWebhookWorkflowRunRequestedWorkflowRunConclusionValues() []WebhookWorkflowRunRequestedWorkflowRunConclusion {
	return []WebhookWorkflowRunRequestedWorkflowRunConclusion{
		WebhookWorkflowRunRequestedWorkflowRunConclusionActionRequired,
		WebhookWorkflowRunRequestedWorkflowRunConclusionCancelled,
		WebhookWorkflowRunRequestedWorkflowRunConclusionFailure,
		WebhookWorkflowRunRequestedWorkflowRunConclusionNeutral,
		WebhookWorkflowRunRequestedWorkflowRunConclusionNull,
		WebhookWorkflowRunRequestedWorkflowRunConclusionSkipped,
		WebhookWorkflowRunRequestedWorkflowRunConclusionStale,
		WebhookWorkflowRunRequestedWorkflowRunConclusionStartupFailure,
		WebhookWorkflowRunRequestedWorkflowRunConclusionSuccess,
		WebhookWorkflowRunRequestedWorkflowRunConclusionTimedOut,
	}
}

type WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerType string

const (
	WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerTypeBot WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerType = "Bot"
	WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerTypeOrganization WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerType = "Organization"
	WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerTypeUser WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerType = "User"
)

// PossibleWebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerTypeValues returns the possible values for the WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerType const type.
func PossibleWebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerTypeValues() []WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerType {
	return []WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerType{
		WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerTypeBot,
		WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerTypeOrganization,
		WebhookWorkflowRunRequestedWorkflowRunHeadRepositoryOwnerTypeUser,
	}
}

type WebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerType string

const (
	WebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerTypeBot WebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerType = "Bot"
	WebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerTypeOrganization WebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerType = "Organization"
	WebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerTypeUser WebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerType = "User"
)

// PossibleWebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerTypeValues returns the possible values for the WebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerType const type.
func PossibleWebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerTypeValues() []WebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerType {
	return []WebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerType{
		WebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerTypeBot,
		WebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerTypeOrganization,
		WebhookWorkflowRunRequestedWorkflowRunRepositoryOwnerTypeUser,
	}
}

type WebhookWorkflowRunRequestedWorkflowRunStatus string

const (
	WebhookWorkflowRunRequestedWorkflowRunStatusCompleted WebhookWorkflowRunRequestedWorkflowRunStatus = "completed"
	WebhookWorkflowRunRequestedWorkflowRunStatusInProgress WebhookWorkflowRunRequestedWorkflowRunStatus = "in_progress"
	WebhookWorkflowRunRequestedWorkflowRunStatusPending WebhookWorkflowRunRequestedWorkflowRunStatus = "pending"
	WebhookWorkflowRunRequestedWorkflowRunStatusQueued WebhookWorkflowRunRequestedWorkflowRunStatus = "queued"
	WebhookWorkflowRunRequestedWorkflowRunStatusRequested WebhookWorkflowRunRequestedWorkflowRunStatus = "requested"
	WebhookWorkflowRunRequestedWorkflowRunStatusWaiting WebhookWorkflowRunRequestedWorkflowRunStatus = "waiting"
)

// PossibleWebhookWorkflowRunRequestedWorkflowRunStatusValues returns the possible values for the WebhookWorkflowRunRequestedWorkflowRunStatus const type.
func PossibleWebhookWorkflowRunRequestedWorkflowRunStatusValues() []WebhookWorkflowRunRequestedWorkflowRunStatus {
	return []WebhookWorkflowRunRequestedWorkflowRunStatus{
		WebhookWorkflowRunRequestedWorkflowRunStatusCompleted,
		WebhookWorkflowRunRequestedWorkflowRunStatusInProgress,
		WebhookWorkflowRunRequestedWorkflowRunStatusPending,
		WebhookWorkflowRunRequestedWorkflowRunStatusQueued,
		WebhookWorkflowRunRequestedWorkflowRunStatusRequested,
		WebhookWorkflowRunRequestedWorkflowRunStatusWaiting,
	}
}

type WebhookWorkflowRunRequestedWorkflowRunTriggeringActorType string

const (
	WebhookWorkflowRunRequestedWorkflowRunTriggeringActorTypeBot WebhookWorkflowRunRequestedWorkflowRunTriggeringActorType = "Bot"
	WebhookWorkflowRunRequestedWorkflowRunTriggeringActorTypeOrganization WebhookWorkflowRunRequestedWorkflowRunTriggeringActorType = "Organization"
	WebhookWorkflowRunRequestedWorkflowRunTriggeringActorTypeUser WebhookWorkflowRunRequestedWorkflowRunTriggeringActorType = "User"
)

// PossibleWebhookWorkflowRunRequestedWorkflowRunTriggeringActorTypeValues returns the possible values for the WebhookWorkflowRunRequestedWorkflowRunTriggeringActorType const type.
func PossibleWebhookWorkflowRunRequestedWorkflowRunTriggeringActorTypeValues() []WebhookWorkflowRunRequestedWorkflowRunTriggeringActorType {
	return []WebhookWorkflowRunRequestedWorkflowRunTriggeringActorType{
		WebhookWorkflowRunRequestedWorkflowRunTriggeringActorTypeBot,
		WebhookWorkflowRunRequestedWorkflowRunTriggeringActorTypeOrganization,
		WebhookWorkflowRunRequestedWorkflowRunTriggeringActorTypeUser,
	}
}

type WorkflowState string

const (
	WorkflowStateActive WorkflowState = "active"
	WorkflowStateDeleted WorkflowState = "deleted"
	WorkflowStateDisabledFork WorkflowState = "disabled_fork"
	WorkflowStateDisabledInactivity WorkflowState = "disabled_inactivity"
	WorkflowStateDisabledManually WorkflowState = "disabled_manually"
)

// PossibleWorkflowStateValues returns the possible values for the WorkflowState const type.
func PossibleWorkflowStateValues() []WorkflowState {
	return []WorkflowState{
		WorkflowStateActive,
		WorkflowStateDeleted,
		WorkflowStateDisabledFork,
		WorkflowStateDisabledInactivity,
		WorkflowStateDisabledManually,
	}
}

