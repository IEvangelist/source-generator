// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace GitHub.Octokit.Models {
    public class SecretScanningLocation : IAdditionalDataHolder, IParsable {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The details property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public SecretScanningLocation_details? Details { get; set; }
#nullable restore
#else
        public SecretScanningLocation_details Details { get; set; }
#endif
        /// <summary>The location type. Because secrets may be found in different types of resources (ie. code, comments, issues), this field identifies the type of resource where the secret was found.</summary>
        public SecretScanningLocation_type? Type { get; set; }
        /// <summary>
        /// Instantiates a new secretScanningLocation and sets the default values.
        /// </summary>
        public SecretScanningLocation() {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static SecretScanningLocation CreateFromDiscriminatorValue(IParseNode parseNode) {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new SecretScanningLocation();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
            return new Dictionary<string, Action<IParseNode>> {
                {"details", n => { Details = n.GetObjectValue<SecretScanningLocation_details>(SecretScanningLocation_details.CreateFromDiscriminatorValue); } },
                {"type", n => { Type = n.GetEnumValue<SecretScanningLocation_type>(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer) {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<SecretScanningLocation_details>("details", Details);
            writer.WriteEnumValue<SecretScanningLocation_type>("type", Type);
            writer.WriteAdditionalData(AdditionalData);
        }
        /// <summary>
        /// Composed type wrapper for classes secretScanningLocationCommit, secretScanningLocationIssueBody, secretScanningLocationIssueComment, secretScanningLocationIssueTitle
        /// </summary>
        public class SecretScanningLocation_details : IComposedTypeWrapper, IParsable {
            /// <summary>Composed type representation for type secretScanningLocationCommit</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public GitHub.Octokit.Models.SecretScanningLocationCommit? SecretScanningLocationCommit { get; set; }
#nullable restore
#else
            public GitHub.Octokit.Models.SecretScanningLocationCommit SecretScanningLocationCommit { get; set; }
#endif
            /// <summary>Composed type representation for type secretScanningLocationIssueBody</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public GitHub.Octokit.Models.SecretScanningLocationIssueBody? SecretScanningLocationIssueBody { get; set; }
#nullable restore
#else
            public GitHub.Octokit.Models.SecretScanningLocationIssueBody SecretScanningLocationIssueBody { get; set; }
#endif
            /// <summary>Composed type representation for type secretScanningLocationIssueComment</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public GitHub.Octokit.Models.SecretScanningLocationIssueComment? SecretScanningLocationIssueComment { get; set; }
#nullable restore
#else
            public GitHub.Octokit.Models.SecretScanningLocationIssueComment SecretScanningLocationIssueComment { get; set; }
#endif
            /// <summary>Composed type representation for type secretScanningLocationIssueTitle</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            public GitHub.Octokit.Models.SecretScanningLocationIssueTitle? SecretScanningLocationIssueTitle { get; set; }
#nullable restore
#else
            public GitHub.Octokit.Models.SecretScanningLocationIssueTitle SecretScanningLocationIssueTitle { get; set; }
#endif
            /// <summary>
            /// Creates a new instance of the appropriate class based on discriminator value
            /// </summary>
            /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
            public static SecretScanningLocation_details CreateFromDiscriminatorValue(IParseNode parseNode) {
                _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
                var mappingValue = parseNode.GetChildNode("")?.GetStringValue();
                var result = new SecretScanningLocation_details();
                if("secret-scanning-location-commit".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                    result.SecretScanningLocationCommit = new GitHub.Octokit.Models.SecretScanningLocationCommit();
                }
                else if("secret-scanning-location-issue-body".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                    result.SecretScanningLocationIssueBody = new GitHub.Octokit.Models.SecretScanningLocationIssueBody();
                }
                else if("secret-scanning-location-issue-comment".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                    result.SecretScanningLocationIssueComment = new GitHub.Octokit.Models.SecretScanningLocationIssueComment();
                }
                else if("secret-scanning-location-issue-title".Equals(mappingValue, StringComparison.OrdinalIgnoreCase)) {
                    result.SecretScanningLocationIssueTitle = new GitHub.Octokit.Models.SecretScanningLocationIssueTitle();
                }
                return result;
            }
            /// <summary>
            /// The deserialization information for the current model
            /// </summary>
            public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers() {
                if(SecretScanningLocationCommit != null) {
                    return SecretScanningLocationCommit.GetFieldDeserializers();
                }
                else if(SecretScanningLocationIssueBody != null) {
                    return SecretScanningLocationIssueBody.GetFieldDeserializers();
                }
                else if(SecretScanningLocationIssueComment != null) {
                    return SecretScanningLocationIssueComment.GetFieldDeserializers();
                }
                else if(SecretScanningLocationIssueTitle != null) {
                    return SecretScanningLocationIssueTitle.GetFieldDeserializers();
                }
                return new Dictionary<string, Action<IParseNode>>();
            }
            /// <summary>
            /// Serializes information the current object
            /// </summary>
            /// <param name="writer">Serialization writer to use to serialize this model</param>
            public virtual void Serialize(ISerializationWriter writer) {
                _ = writer ?? throw new ArgumentNullException(nameof(writer));
                if(SecretScanningLocationCommit != null) {
                    writer.WriteObjectValue<GitHub.Octokit.Models.SecretScanningLocationCommit>(null, SecretScanningLocationCommit);
                }
                else if(SecretScanningLocationIssueBody != null) {
                    writer.WriteObjectValue<GitHub.Octokit.Models.SecretScanningLocationIssueBody>(null, SecretScanningLocationIssueBody);
                }
                else if(SecretScanningLocationIssueComment != null) {
                    writer.WriteObjectValue<GitHub.Octokit.Models.SecretScanningLocationIssueComment>(null, SecretScanningLocationIssueComment);
                }
                else if(SecretScanningLocationIssueTitle != null) {
                    writer.WriteObjectValue<GitHub.Octokit.Models.SecretScanningLocationIssueTitle>(null, SecretScanningLocationIssueTitle);
                }
            }
        }
    }
}
